(() => {
  var __create = Object.create;
  var __defProp = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __getProtoOf = Object.getPrototypeOf;
  var __hasOwnProp = Object.prototype.hasOwnProperty;
  var __esm = (fn2, res) => function __init() {
    return fn2 && (res = (0, fn2[__getOwnPropNames(fn2)[0]])(fn2 = 0)), res;
  };
  var __commonJS = (cb, mod) => function __require() {
    return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
  };
  var __export = (target, all) => {
    for (var name in all)
      __defProp(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames(from))
        if (!__hasOwnProp.call(to, key) && key !== except)
          __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
    // If the importer is in node compatibility mode or this is not an ESM
    // file that has been converted to a CommonJS file using a Babel-
    // compatible transform (i.e. "__esModule" has not been set), then set
    // "default" to the CommonJS "module.exports" for node compatibility.
    isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
    mod
  ));

  // node_modules/photoswipe/dist/photoswipe.esm.js
  var photoswipe_esm_exports = {};
  __export(photoswipe_esm_exports, {
    default: () => PhotoSwipe
  });
  function createElement3(className, tagName, appendToEl) {
    const el = document.createElement(tagName);
    if (className) {
      el.className = className;
    }
    if (appendToEl) {
      appendToEl.appendChild(el);
    }
    return el;
  }
  function equalizePoints(p1, p2) {
    p1.x = p2.x;
    p1.y = p2.y;
    if (p2.id !== void 0) {
      p1.id = p2.id;
    }
    return p1;
  }
  function roundPoint(p2) {
    p2.x = Math.round(p2.x);
    p2.y = Math.round(p2.y);
  }
  function getDistanceBetween(p1, p2) {
    const x2 = Math.abs(p1.x - p2.x);
    const y2 = Math.abs(p1.y - p2.y);
    return Math.sqrt(x2 * x2 + y2 * y2);
  }
  function pointsEqual(p1, p2) {
    return p1.x === p2.x && p1.y === p2.y;
  }
  function clamp(val, min, max) {
    return Math.min(Math.max(val, min), max);
  }
  function toTransformString2(x2, y2, scale) {
    let propValue = `translate3d(${x2}px,${y2 || 0}px,0)`;
    if (scale !== void 0) {
      propValue += ` scale3d(${scale},${scale},1)`;
    }
    return propValue;
  }
  function setTransform(el, x2, y2, scale) {
    el.style.transform = toTransformString2(x2, y2, scale);
  }
  function setTransitionStyle(el, prop, duration2, ease) {
    el.style.transition = prop ? `${prop} ${duration2}ms ${ease || defaultCSSEasing}` : "none";
  }
  function setWidthHeight2(el, w2, h2) {
    el.style.width = typeof w2 === "number" ? `${w2}px` : w2;
    el.style.height = typeof h2 === "number" ? `${h2}px` : h2;
  }
  function removeTransitionStyle(el) {
    setTransitionStyle(el);
  }
  function decodeImage(img) {
    if ("decode" in img) {
      return img.decode().catch(() => {
      });
    }
    if (img.complete) {
      return Promise.resolve(img);
    }
    return new Promise((resolve, reject) => {
      img.onload = () => resolve(img);
      img.onerror = reject;
    });
  }
  function specialKeyUsed2(e2) {
    return "button" in e2 && e2.button === 1 || e2.ctrlKey || e2.metaKey || e2.altKey || e2.shiftKey;
  }
  function getElementsFromOption2(option, legacySelector, parent = document) {
    let elements = [];
    if (option instanceof Element) {
      elements = [option];
    } else if (option instanceof NodeList || Array.isArray(option)) {
      elements = Array.from(option);
    } else {
      const selector = typeof option === "string" ? option : legacySelector;
      if (selector) {
        elements = Array.from(parent.querySelectorAll(selector));
      }
    }
    return elements;
  }
  function isSafari2() {
    return !!(navigator.vendor && navigator.vendor.match(/apple/i));
  }
  function getViewportSize2(options, pswp) {
    if (options.getViewportSizeFn) {
      const newViewportSize = options.getViewportSizeFn(options, pswp);
      if (newViewportSize) {
        return newViewportSize;
      }
    }
    return {
      x: document.documentElement.clientWidth,
      // TODO: height on mobile is very incosistent due to toolbar
      // find a way to improve this
      //
      // document.documentElement.clientHeight - doesn't seem to work well
      y: window.innerHeight
    };
  }
  function parsePaddingOption2(prop, options, viewportSize, itemData, index) {
    let paddingValue = 0;
    if (options.paddingFn) {
      paddingValue = options.paddingFn(viewportSize, itemData, index)[prop];
    } else if (options.padding) {
      paddingValue = options.padding[prop];
    } else {
      const legacyPropName = "padding" + prop[0].toUpperCase() + prop.slice(1);
      if (options[legacyPropName]) {
        paddingValue = options[legacyPropName];
      }
    }
    return Number(paddingValue) || 0;
  }
  function getPanAreaSize2(options, viewportSize, itemData, index) {
    return {
      x: viewportSize.x - parsePaddingOption2("left", options, viewportSize, itemData, index) - parsePaddingOption2("right", options, viewportSize, itemData, index),
      y: viewportSize.y - parsePaddingOption2("top", options, viewportSize, itemData, index) - parsePaddingOption2("bottom", options, viewportSize, itemData, index)
    };
  }
  function project(initialVelocity, decelerationRate) {
    return initialVelocity * decelerationRate / (1 - decelerationRate);
  }
  function getZoomPointsCenter(p2, p1, p22) {
    p2.x = (p1.x + p22.x) / 2;
    p2.y = (p1.y + p22.y) / 2;
    return p2;
  }
  function didTapOnMainContent(event) {
    return !!/** @type {HTMLElement} */
    event.target.closest(".pswp__container");
  }
  function addElementHTML(htmlData) {
    if (typeof htmlData === "string") {
      return htmlData;
    }
    if (!htmlData || !htmlData.isCustomSVG) {
      return "";
    }
    const svgData = htmlData;
    let out = '<svg aria-hidden="true" class="pswp__icn" viewBox="0 0 %d %d" width="%d" height="%d">';
    out = out.split("%d").join(
      /** @type {string} */
      svgData.size || 32
    );
    if (svgData.outlineID) {
      out += '<use class="pswp__icn-shadow" xlink:href="#' + svgData.outlineID + '"/>';
    }
    out += svgData.inner;
    out += "</svg>";
    return out;
  }
  function initArrowButton(element, pswp, isNextButton) {
    element.classList.add("pswp__button--arrow");
    element.setAttribute("aria-controls", "pswp__items");
    pswp.on("change", () => {
      if (!pswp.options.loop) {
        if (isNextButton) {
          element.disabled = !(pswp.currIndex < pswp.getNumItems() - 1);
        } else {
          element.disabled = !(pswp.currIndex > 0);
        }
      }
    });
  }
  function setZoomedIn(el, isZoomedIn) {
    el.classList.toggle("pswp--zoomed-in", isZoomedIn);
  }
  function getBoundsByElement(el) {
    const thumbAreaRect = el.getBoundingClientRect();
    return {
      x: thumbAreaRect.left,
      y: thumbAreaRect.top,
      w: thumbAreaRect.width
    };
  }
  function getCroppedBoundsByElement(el, imageWidth, imageHeight) {
    const thumbAreaRect = el.getBoundingClientRect();
    const hRatio = thumbAreaRect.width / imageWidth;
    const vRatio = thumbAreaRect.height / imageHeight;
    const fillZoomLevel = hRatio > vRatio ? hRatio : vRatio;
    const offsetX = (thumbAreaRect.width - imageWidth * fillZoomLevel) / 2;
    const offsetY = (thumbAreaRect.height - imageHeight * fillZoomLevel) / 2;
    const bounds = {
      x: thumbAreaRect.left + offsetX,
      y: thumbAreaRect.top + offsetY,
      w: imageWidth * fillZoomLevel
    };
    bounds.innerRect = {
      w: thumbAreaRect.width,
      h: thumbAreaRect.height,
      x: offsetX,
      y: offsetY
    };
    return bounds;
  }
  function getThumbBounds(index, itemData, instance) {
    const event = instance.dispatch("thumbBounds", {
      index,
      itemData,
      instance
    });
    if (event.thumbBounds) {
      return event.thumbBounds;
    }
    const {
      element
    } = itemData;
    let thumbBounds;
    let thumbnail;
    if (element && instance.options.thumbSelector !== false) {
      const thumbSelector = instance.options.thumbSelector || "img";
      thumbnail = element.matches(thumbSelector) ? element : (
        /** @type {HTMLElement | null} */
        element.querySelector(thumbSelector)
      );
    }
    thumbnail = instance.applyFilters("thumbEl", thumbnail, itemData, index);
    if (thumbnail) {
      if (!itemData.thumbCropped) {
        thumbBounds = getBoundsByElement(thumbnail);
      } else {
        thumbBounds = getCroppedBoundsByElement(thumbnail, itemData.width || itemData.w || 0, itemData.height || itemData.h || 0);
      }
    }
    return instance.applyFilters("thumbBounds", thumbBounds, itemData, index);
  }
  function lazyLoadData2(itemData, instance, index) {
    const content = instance.createContentFromData(itemData, index);
    let zoomLevel;
    const {
      options
    } = instance;
    if (options) {
      zoomLevel = new ZoomLevel2(options, itemData, -1);
      let viewportSize;
      if (instance.pswp) {
        viewportSize = instance.pswp.viewportSize;
      } else {
        viewportSize = getViewportSize2(options, instance);
      }
      const panAreaSize = getPanAreaSize2(options, viewportSize, itemData, index);
      zoomLevel.update(content.width, content.height, panAreaSize);
    }
    content.lazyLoad();
    if (zoomLevel) {
      content.setDisplayedSize(Math.ceil(content.width * zoomLevel.initial), Math.ceil(content.height * zoomLevel.initial));
    }
    return content;
  }
  function lazyLoadSlide2(index, instance) {
    const itemData = instance.getItemData(index);
    if (instance.dispatch("lazyLoadSlide", {
      index,
      itemData
    }).defaultPrevented) {
      return;
    }
    return lazyLoadData2(itemData, instance, index);
  }
  var defaultCSSEasing, LOAD_STATE2, supportsPassive, DOMEvents, PanBounds, MAX_IMAGE_WIDTH2, ZoomLevel2, Slide, PAN_END_FRICTION, VERTICAL_DRAG_FRICTION, MIN_RATIO_TO_CLOSE, MIN_NEXT_SLIDE_SPEED, DragHandler, UPPER_ZOOM_FRICTION, LOWER_ZOOM_FRICTION, ZoomHandler, TapHandler, AXIS_SWIPE_HYSTERISIS, DOUBLE_TAP_DELAY, MIN_TAP_DISTANCE, Gestures, MAIN_SCROLL_END_FRICTION, MainScroll, KeyboardKeyCodesMap, getKeyboardEventKey, Keyboard, DEFAULT_EASING, CSSAnimation, DEFAULT_NATURAL_FREQUENCY, DEFAULT_DAMPING_RATIO, SpringEaser, SpringAnimation, Animations, ScrollWheel, UIElement, arrowPrev, arrowNext, closeButton, zoomButton, loadingIndicator, counterIndicator, UI, PhotoSwipeEvent2, Eventable2, Placeholder2, Content2, MIN_SLIDES_TO_CACHE, ContentLoader, PhotoSwipeBase2, MIN_OPACITY, Opener, defaultOptions2, PhotoSwipe;
  var init_photoswipe_esm = __esm({
    "node_modules/photoswipe/dist/photoswipe.esm.js"() {
      defaultCSSEasing = "cubic-bezier(.4,0,.22,1)";
      LOAD_STATE2 = {
        IDLE: "idle",
        LOADING: "loading",
        LOADED: "loaded",
        ERROR: "error"
      };
      supportsPassive = false;
      try {
        window.addEventListener("test", null, Object.defineProperty({}, "passive", {
          get: () => {
            supportsPassive = true;
          }
        }));
      } catch (e2) {
      }
      DOMEvents = class {
        constructor() {
          this._pool = [];
        }
        /**
         * Adds event listeners
         *
         * @param {PoolItem['target']} target
         * @param {PoolItem['type']} type Can be multiple, separated by space.
         * @param {PoolItem['listener']} listener
         * @param {PoolItem['passive']} [passive]
         */
        add(target, type, listener, passive) {
          this._toggleListener(target, type, listener, passive);
        }
        /**
         * Removes event listeners
         *
         * @param {PoolItem['target']} target
         * @param {PoolItem['type']} type
         * @param {PoolItem['listener']} listener
         * @param {PoolItem['passive']} [passive]
         */
        remove(target, type, listener, passive) {
          this._toggleListener(target, type, listener, passive, true);
        }
        /**
         * Removes all bound events
         */
        removeAll() {
          this._pool.forEach((poolItem) => {
            this._toggleListener(poolItem.target, poolItem.type, poolItem.listener, poolItem.passive, true, true);
          });
          this._pool = [];
        }
        /**
         * Adds or removes event
         *
         * @private
         * @param {PoolItem['target']} target
         * @param {PoolItem['type']} type
         * @param {PoolItem['listener']} listener
         * @param {PoolItem['passive']} [passive]
         * @param {boolean} [unbind] Whether the event should be added or removed
         * @param {boolean} [skipPool] Whether events pool should be skipped
         */
        _toggleListener(target, type, listener, passive, unbind2, skipPool) {
          if (!target) {
            return;
          }
          const methodName = unbind2 ? "removeEventListener" : "addEventListener";
          const types = type.split(" ");
          types.forEach((eType) => {
            if (eType) {
              if (!skipPool) {
                if (unbind2) {
                  this._pool = this._pool.filter((poolItem) => {
                    return poolItem.type !== eType || poolItem.listener !== listener || poolItem.target !== target;
                  });
                } else {
                  this._pool.push({
                    target,
                    type: eType,
                    listener,
                    passive
                  });
                }
              }
              const eventOptions = supportsPassive ? {
                passive: passive || false
              } : false;
              target[methodName](eType, listener, eventOptions);
            }
          });
        }
      };
      PanBounds = class {
        /**
         * @param {Slide} slide
         */
        constructor(slide) {
          this.slide = slide;
          this.currZoomLevel = 1;
          this.center = /** @type {Point} */
          {
            x: 0,
            y: 0
          };
          this.max = /** @type {Point} */
          {
            x: 0,
            y: 0
          };
          this.min = /** @type {Point} */
          {
            x: 0,
            y: 0
          };
        }
        /**
         * _getItemBounds
         *
         * @param {number} currZoomLevel
         */
        update(currZoomLevel) {
          this.currZoomLevel = currZoomLevel;
          if (!this.slide.width) {
            this.reset();
          } else {
            this._updateAxis("x");
            this._updateAxis("y");
            this.slide.pswp.dispatch("calcBounds", {
              slide: this.slide
            });
          }
        }
        /**
         * _calculateItemBoundsForAxis
         *
         * @param {Axis} axis
         */
        _updateAxis(axis) {
          const {
            pswp
          } = this.slide;
          const elSize = this.slide[axis === "x" ? "width" : "height"] * this.currZoomLevel;
          const paddingProp = axis === "x" ? "left" : "top";
          const padding = parsePaddingOption2(paddingProp, pswp.options, pswp.viewportSize, this.slide.data, this.slide.index);
          const panAreaSize = this.slide.panAreaSize[axis];
          this.center[axis] = Math.round((panAreaSize - elSize) / 2) + padding;
          this.max[axis] = elSize > panAreaSize ? Math.round(panAreaSize - elSize) + padding : this.center[axis];
          this.min[axis] = elSize > panAreaSize ? padding : this.center[axis];
        }
        // _getZeroBounds
        reset() {
          this.center.x = 0;
          this.center.y = 0;
          this.max.x = 0;
          this.max.y = 0;
          this.min.x = 0;
          this.min.y = 0;
        }
        /**
         * Correct pan position if it's beyond the bounds
         *
         * @param {Axis} axis x or y
         * @param {number} panOffset
         * @returns {number}
         */
        correctPan(axis, panOffset) {
          return clamp(panOffset, this.max[axis], this.min[axis]);
        }
      };
      MAX_IMAGE_WIDTH2 = 4e3;
      ZoomLevel2 = class {
        /**
         * @param {PhotoSwipeOptions} options PhotoSwipe options
         * @param {SlideData} itemData Slide data
         * @param {number} index Slide index
         * @param {PhotoSwipe} [pswp] PhotoSwipe instance, can be undefined if not initialized yet
         */
        constructor(options, itemData, index, pswp) {
          this.pswp = pswp;
          this.options = options;
          this.itemData = itemData;
          this.index = index;
          this.panAreaSize = null;
          this.elementSize = null;
          this.fit = 1;
          this.fill = 1;
          this.vFill = 1;
          this.initial = 1;
          this.secondary = 1;
          this.max = 1;
          this.min = 1;
        }
        /**
         * Calculate initial, secondary and maximum zoom level for the specified slide.
         *
         * It should be called when either image or viewport size changes.
         *
         * @param {number} maxWidth
         * @param {number} maxHeight
         * @param {Point} panAreaSize
         */
        update(maxWidth, maxHeight, panAreaSize) {
          const elementSize = {
            x: maxWidth,
            y: maxHeight
          };
          this.elementSize = elementSize;
          this.panAreaSize = panAreaSize;
          const hRatio = panAreaSize.x / elementSize.x;
          const vRatio = panAreaSize.y / elementSize.y;
          this.fit = Math.min(1, hRatio < vRatio ? hRatio : vRatio);
          this.fill = Math.min(1, hRatio > vRatio ? hRatio : vRatio);
          this.vFill = Math.min(1, vRatio);
          this.initial = this._getInitial();
          this.secondary = this._getSecondary();
          this.max = Math.max(this.initial, this.secondary, this._getMax());
          this.min = Math.min(this.fit, this.initial, this.secondary);
          if (this.pswp) {
            this.pswp.dispatch("zoomLevelsUpdate", {
              zoomLevels: this,
              slideData: this.itemData
            });
          }
        }
        /**
         * Parses user-defined zoom option.
         *
         * @private
         * @param {'initial' | 'secondary' | 'max'} optionPrefix Zoom level option prefix (initial, secondary, max)
         * @returns { number | undefined }
         */
        _parseZoomLevelOption(optionPrefix) {
          const optionName = (
            /** @type {'initialZoomLevel' | 'secondaryZoomLevel' | 'maxZoomLevel'} */
            optionPrefix + "ZoomLevel"
          );
          const optionValue = this.options[optionName];
          if (!optionValue) {
            return;
          }
          if (typeof optionValue === "function") {
            return optionValue(this);
          }
          if (optionValue === "fill") {
            return this.fill;
          }
          if (optionValue === "fit") {
            return this.fit;
          }
          return Number(optionValue);
        }
        /**
         * Get zoom level to which image will be zoomed after double-tap gesture,
         * or when user clicks on zoom icon,
         * or mouse-click on image itself.
         * If you return 1 image will be zoomed to its original size.
         *
         * @private
         * @return {number}
         */
        _getSecondary() {
          let currZoomLevel = this._parseZoomLevelOption("secondary");
          if (currZoomLevel) {
            return currZoomLevel;
          }
          currZoomLevel = Math.min(1, this.fit * 3);
          if (this.elementSize && currZoomLevel * this.elementSize.x > MAX_IMAGE_WIDTH2) {
            currZoomLevel = MAX_IMAGE_WIDTH2 / this.elementSize.x;
          }
          return currZoomLevel;
        }
        /**
         * Get initial image zoom level.
         *
         * @private
         * @return {number}
         */
        _getInitial() {
          return this._parseZoomLevelOption("initial") || this.fit;
        }
        /**
         * Maximum zoom level when user zooms
         * via zoom/pinch gesture,
         * via cmd/ctrl-wheel or via trackpad.
         *
         * @private
         * @return {number}
         */
        _getMax() {
          return this._parseZoomLevelOption("max") || Math.max(1, this.fit * 4);
        }
      };
      Slide = class {
        /**
         * @param {SlideData} data
         * @param {number} index
         * @param {PhotoSwipe} pswp
         */
        constructor(data, index, pswp) {
          this.data = data;
          this.index = index;
          this.pswp = pswp;
          this.isActive = index === pswp.currIndex;
          this.currentResolution = 0;
          this.panAreaSize = {
            x: 0,
            y: 0
          };
          this.pan = {
            x: 0,
            y: 0
          };
          this.isFirstSlide = this.isActive && !pswp.opener.isOpen;
          this.zoomLevels = new ZoomLevel2(pswp.options, data, index, pswp);
          this.pswp.dispatch("gettingData", {
            slide: this,
            data: this.data,
            index
          });
          this.content = this.pswp.contentLoader.getContentBySlide(this);
          this.container = createElement3("pswp__zoom-wrap", "div");
          this.holderElement = null;
          this.currZoomLevel = 1;
          this.width = this.content.width;
          this.height = this.content.height;
          this.heavyAppended = false;
          this.bounds = new PanBounds(this);
          this.prevDisplayedWidth = -1;
          this.prevDisplayedHeight = -1;
          this.pswp.dispatch("slideInit", {
            slide: this
          });
        }
        /**
         * If this slide is active/current/visible
         *
         * @param {boolean} isActive
         */
        setIsActive(isActive) {
          if (isActive && !this.isActive) {
            this.activate();
          } else if (!isActive && this.isActive) {
            this.deactivate();
          }
        }
        /**
         * Appends slide content to DOM
         *
         * @param {HTMLElement} holderElement
         */
        append(holderElement) {
          this.holderElement = holderElement;
          this.container.style.transformOrigin = "0 0";
          if (!this.data) {
            return;
          }
          this.calculateSize();
          this.load();
          this.updateContentSize();
          this.appendHeavy();
          this.holderElement.appendChild(this.container);
          this.zoomAndPanToInitial();
          this.pswp.dispatch("firstZoomPan", {
            slide: this
          });
          this.applyCurrentZoomPan();
          this.pswp.dispatch("afterSetContent", {
            slide: this
          });
          if (this.isActive) {
            this.activate();
          }
        }
        load() {
          this.content.load(false);
          this.pswp.dispatch("slideLoad", {
            slide: this
          });
        }
        /**
         * Append "heavy" DOM elements
         *
         * This may depend on a type of slide,
         * but generally these are large images.
         */
        appendHeavy() {
          const {
            pswp
          } = this;
          const appendHeavyNearby = true;
          if (this.heavyAppended || !pswp.opener.isOpen || pswp.mainScroll.isShifted() || !this.isActive && !appendHeavyNearby) {
            return;
          }
          if (this.pswp.dispatch("appendHeavy", {
            slide: this
          }).defaultPrevented) {
            return;
          }
          this.heavyAppended = true;
          this.content.append();
          this.pswp.dispatch("appendHeavyContent", {
            slide: this
          });
        }
        /**
         * Triggered when this slide is active (selected).
         *
         * If it's part of opening/closing transition -
         * activate() will trigger after the transition is ended.
         */
        activate() {
          this.isActive = true;
          this.appendHeavy();
          this.content.activate();
          this.pswp.dispatch("slideActivate", {
            slide: this
          });
        }
        /**
         * Triggered when this slide becomes inactive.
         *
         * Slide can become inactive only after it was active.
         */
        deactivate() {
          this.isActive = false;
          this.content.deactivate();
          if (this.currZoomLevel !== this.zoomLevels.initial) {
            this.calculateSize();
          }
          this.currentResolution = 0;
          this.zoomAndPanToInitial();
          this.applyCurrentZoomPan();
          this.updateContentSize();
          this.pswp.dispatch("slideDeactivate", {
            slide: this
          });
        }
        /**
         * The slide should destroy itself, it will never be used again.
         * (unbind all events and destroy internal components)
         */
        destroy() {
          this.content.hasSlide = false;
          this.content.remove();
          this.container.remove();
          this.pswp.dispatch("slideDestroy", {
            slide: this
          });
        }
        resize() {
          if (this.currZoomLevel === this.zoomLevels.initial || !this.isActive) {
            this.calculateSize();
            this.currentResolution = 0;
            this.zoomAndPanToInitial();
            this.applyCurrentZoomPan();
            this.updateContentSize();
          } else {
            this.calculateSize();
            this.bounds.update(this.currZoomLevel);
            this.panTo(this.pan.x, this.pan.y);
          }
        }
        /**
         * Apply size to current slide content,
         * based on the current resolution and scale.
         *
         * @param {boolean} [force] if size should be updated even if dimensions weren't changed
         */
        updateContentSize(force) {
          const scaleMultiplier = this.currentResolution || this.zoomLevels.initial;
          if (!scaleMultiplier) {
            return;
          }
          const width = Math.round(this.width * scaleMultiplier) || this.pswp.viewportSize.x;
          const height = Math.round(this.height * scaleMultiplier) || this.pswp.viewportSize.y;
          if (!this.sizeChanged(width, height) && !force) {
            return;
          }
          this.content.setDisplayedSize(width, height);
        }
        /**
         * @param {number} width
         * @param {number} height
         */
        sizeChanged(width, height) {
          if (width !== this.prevDisplayedWidth || height !== this.prevDisplayedHeight) {
            this.prevDisplayedWidth = width;
            this.prevDisplayedHeight = height;
            return true;
          }
          return false;
        }
        /** @returns {HTMLImageElement | HTMLDivElement | null | undefined} */
        getPlaceholderElement() {
          var _this$content$placeho;
          return (_this$content$placeho = this.content.placeholder) === null || _this$content$placeho === void 0 ? void 0 : _this$content$placeho.element;
        }
        /**
         * Zoom current slide image to...
         *
         * @param {number} destZoomLevel Destination zoom level.
         * @param {Point} [centerPoint]
         * Transform origin center point, or false if viewport center should be used.
         * @param {number | false} [transitionDuration] Transition duration, may be set to 0.
         * @param {boolean} [ignoreBounds] Minimum and maximum zoom levels will be ignored.
         */
        zoomTo(destZoomLevel, centerPoint, transitionDuration, ignoreBounds) {
          const {
            pswp
          } = this;
          if (!this.isZoomable() || pswp.mainScroll.isShifted()) {
            return;
          }
          pswp.dispatch("beforeZoomTo", {
            destZoomLevel,
            centerPoint,
            transitionDuration
          });
          pswp.animations.stopAllPan();
          const prevZoomLevel = this.currZoomLevel;
          if (!ignoreBounds) {
            destZoomLevel = clamp(destZoomLevel, this.zoomLevels.min, this.zoomLevels.max);
          }
          this.setZoomLevel(destZoomLevel);
          this.pan.x = this.calculateZoomToPanOffset("x", centerPoint, prevZoomLevel);
          this.pan.y = this.calculateZoomToPanOffset("y", centerPoint, prevZoomLevel);
          roundPoint(this.pan);
          const finishTransition = () => {
            this._setResolution(destZoomLevel);
            this.applyCurrentZoomPan();
          };
          if (!transitionDuration) {
            finishTransition();
          } else {
            pswp.animations.startTransition({
              isPan: true,
              name: "zoomTo",
              target: this.container,
              transform: this.getCurrentTransform(),
              onComplete: finishTransition,
              duration: transitionDuration,
              easing: pswp.options.easing
            });
          }
        }
        /**
         * @param {Point} [centerPoint]
         */
        toggleZoom(centerPoint) {
          this.zoomTo(this.currZoomLevel === this.zoomLevels.initial ? this.zoomLevels.secondary : this.zoomLevels.initial, centerPoint, this.pswp.options.zoomAnimationDuration);
        }
        /**
         * Updates zoom level property and recalculates new pan bounds,
         * unlike zoomTo it does not apply transform (use applyCurrentZoomPan)
         *
         * @param {number} currZoomLevel
         */
        setZoomLevel(currZoomLevel) {
          this.currZoomLevel = currZoomLevel;
          this.bounds.update(this.currZoomLevel);
        }
        /**
         * Get pan position after zoom at a given `point`.
         *
         * Always call setZoomLevel(newZoomLevel) beforehand to recalculate
         * pan bounds according to the new zoom level.
         *
         * @param {'x' | 'y'} axis
         * @param {Point} [point]
         * point based on which zoom is performed, usually refers to the current mouse position,
         * if false - viewport center will be used.
         * @param {number} [prevZoomLevel] Zoom level before new zoom was applied.
         * @returns {number}
         */
        calculateZoomToPanOffset(axis, point, prevZoomLevel) {
          const totalPanDistance = this.bounds.max[axis] - this.bounds.min[axis];
          if (totalPanDistance === 0) {
            return this.bounds.center[axis];
          }
          if (!point) {
            point = this.pswp.getViewportCenterPoint();
          }
          if (!prevZoomLevel) {
            prevZoomLevel = this.zoomLevels.initial;
          }
          const zoomFactor = this.currZoomLevel / prevZoomLevel;
          return this.bounds.correctPan(axis, (this.pan[axis] - point[axis]) * zoomFactor + point[axis]);
        }
        /**
         * Apply pan and keep it within bounds.
         *
         * @param {number} panX
         * @param {number} panY
         */
        panTo(panX, panY) {
          this.pan.x = this.bounds.correctPan("x", panX);
          this.pan.y = this.bounds.correctPan("y", panY);
          this.applyCurrentZoomPan();
        }
        /**
         * If the slide in the current state can be panned by the user
         * @returns {boolean}
         */
        isPannable() {
          return Boolean(this.width) && this.currZoomLevel > this.zoomLevels.fit;
        }
        /**
         * If the slide can be zoomed
         * @returns {boolean}
         */
        isZoomable() {
          return Boolean(this.width) && this.content.isZoomable();
        }
        /**
         * Apply transform and scale based on
         * the current pan position (this.pan) and zoom level (this.currZoomLevel)
         */
        applyCurrentZoomPan() {
          this._applyZoomTransform(this.pan.x, this.pan.y, this.currZoomLevel);
          if (this === this.pswp.currSlide) {
            this.pswp.dispatch("zoomPanUpdate", {
              slide: this
            });
          }
        }
        zoomAndPanToInitial() {
          this.currZoomLevel = this.zoomLevels.initial;
          this.bounds.update(this.currZoomLevel);
          equalizePoints(this.pan, this.bounds.center);
          this.pswp.dispatch("initialZoomPan", {
            slide: this
          });
        }
        /**
         * Set translate and scale based on current resolution
         *
         * @param {number} x
         * @param {number} y
         * @param {number} zoom
         * @private
         */
        _applyZoomTransform(x2, y2, zoom) {
          zoom /= this.currentResolution || this.zoomLevels.initial;
          setTransform(this.container, x2, y2, zoom);
        }
        calculateSize() {
          const {
            pswp
          } = this;
          equalizePoints(this.panAreaSize, getPanAreaSize2(pswp.options, pswp.viewportSize, this.data, this.index));
          this.zoomLevels.update(this.width, this.height, this.panAreaSize);
          pswp.dispatch("calcSlideSize", {
            slide: this
          });
        }
        /** @returns {string} */
        getCurrentTransform() {
          const scale = this.currZoomLevel / (this.currentResolution || this.zoomLevels.initial);
          return toTransformString2(this.pan.x, this.pan.y, scale);
        }
        /**
         * Set resolution and re-render the image.
         *
         * For example, if the real image size is 2000x1500,
         * and resolution is 0.5 - it will be rendered as 1000x750.
         *
         * Image with zoom level 2 and resolution 0.5 is
         * the same as image with zoom level 1 and resolution 1.
         *
         * Used to optimize animations and make
         * sure that browser renders image in the highest quality.
         * Also used by responsive images to load the correct one.
         *
         * @param {number} newResolution
         */
        _setResolution(newResolution) {
          if (newResolution === this.currentResolution) {
            return;
          }
          this.currentResolution = newResolution;
          this.updateContentSize();
          this.pswp.dispatch("resolutionChanged");
        }
      };
      PAN_END_FRICTION = 0.35;
      VERTICAL_DRAG_FRICTION = 0.6;
      MIN_RATIO_TO_CLOSE = 0.4;
      MIN_NEXT_SLIDE_SPEED = 0.5;
      DragHandler = class {
        /**
         * @param {Gestures} gestures
         */
        constructor(gestures) {
          this.gestures = gestures;
          this.pswp = gestures.pswp;
          this.startPan = {
            x: 0,
            y: 0
          };
        }
        start() {
          if (this.pswp.currSlide) {
            equalizePoints(this.startPan, this.pswp.currSlide.pan);
          }
          this.pswp.animations.stopAll();
        }
        change() {
          const {
            p1,
            prevP1,
            dragAxis
          } = this.gestures;
          const {
            currSlide
          } = this.pswp;
          if (dragAxis === "y" && this.pswp.options.closeOnVerticalDrag && currSlide && currSlide.currZoomLevel <= currSlide.zoomLevels.fit && !this.gestures.isMultitouch) {
            const panY = currSlide.pan.y + (p1.y - prevP1.y);
            if (!this.pswp.dispatch("verticalDrag", {
              panY
            }).defaultPrevented) {
              this._setPanWithFriction("y", panY, VERTICAL_DRAG_FRICTION);
              const bgOpacity = 1 - Math.abs(this._getVerticalDragRatio(currSlide.pan.y));
              this.pswp.applyBgOpacity(bgOpacity);
              currSlide.applyCurrentZoomPan();
            }
          } else {
            const mainScrollChanged = this._panOrMoveMainScroll("x");
            if (!mainScrollChanged) {
              this._panOrMoveMainScroll("y");
              if (currSlide) {
                roundPoint(currSlide.pan);
                currSlide.applyCurrentZoomPan();
              }
            }
          }
        }
        end() {
          const {
            velocity
          } = this.gestures;
          const {
            mainScroll,
            currSlide
          } = this.pswp;
          let indexDiff = 0;
          this.pswp.animations.stopAll();
          if (mainScroll.isShifted()) {
            const mainScrollShiftDiff = mainScroll.x - mainScroll.getCurrSlideX();
            const currentSlideVisibilityRatio = mainScrollShiftDiff / this.pswp.viewportSize.x;
            if (velocity.x < -MIN_NEXT_SLIDE_SPEED && currentSlideVisibilityRatio < 0 || velocity.x < 0.1 && currentSlideVisibilityRatio < -0.5) {
              indexDiff = 1;
              velocity.x = Math.min(velocity.x, 0);
            } else if (velocity.x > MIN_NEXT_SLIDE_SPEED && currentSlideVisibilityRatio > 0 || velocity.x > -0.1 && currentSlideVisibilityRatio > 0.5) {
              indexDiff = -1;
              velocity.x = Math.max(velocity.x, 0);
            }
            mainScroll.moveIndexBy(indexDiff, true, velocity.x);
          }
          if (currSlide && currSlide.currZoomLevel > currSlide.zoomLevels.max || this.gestures.isMultitouch) {
            this.gestures.zoomLevels.correctZoomPan(true);
          } else {
            this._finishPanGestureForAxis("x");
            this._finishPanGestureForAxis("y");
          }
        }
        /**
         * @private
         * @param {'x' | 'y'} axis
         */
        _finishPanGestureForAxis(axis) {
          const {
            velocity
          } = this.gestures;
          const {
            currSlide
          } = this.pswp;
          if (!currSlide) {
            return;
          }
          const {
            pan,
            bounds
          } = currSlide;
          const panPos = pan[axis];
          const restoreBgOpacity = this.pswp.bgOpacity < 1 && axis === "y";
          const decelerationRate = 0.995;
          const projectedPosition = panPos + project(velocity[axis], decelerationRate);
          if (restoreBgOpacity) {
            const vDragRatio = this._getVerticalDragRatio(panPos);
            const projectedVDragRatio = this._getVerticalDragRatio(projectedPosition);
            if (vDragRatio < 0 && projectedVDragRatio < -MIN_RATIO_TO_CLOSE || vDragRatio > 0 && projectedVDragRatio > MIN_RATIO_TO_CLOSE) {
              this.pswp.close();
              return;
            }
          }
          const correctedPanPosition = bounds.correctPan(axis, projectedPosition);
          if (panPos === correctedPanPosition) {
            return;
          }
          const dampingRatio = correctedPanPosition === projectedPosition ? 1 : 0.82;
          const initialBgOpacity = this.pswp.bgOpacity;
          const totalPanDist = correctedPanPosition - panPos;
          this.pswp.animations.startSpring({
            name: "panGesture" + axis,
            isPan: true,
            start: panPos,
            end: correctedPanPosition,
            velocity: velocity[axis],
            dampingRatio,
            onUpdate: (pos) => {
              if (restoreBgOpacity && this.pswp.bgOpacity < 1) {
                const animationProgressRatio = 1 - (correctedPanPosition - pos) / totalPanDist;
                this.pswp.applyBgOpacity(clamp(initialBgOpacity + (1 - initialBgOpacity) * animationProgressRatio, 0, 1));
              }
              pan[axis] = Math.floor(pos);
              currSlide.applyCurrentZoomPan();
            }
          });
        }
        /**
         * Update position of the main scroll,
         * or/and update pan position of the current slide.
         *
         * Should return true if it changes (or can change) main scroll.
         *
         * @private
         * @param {'x' | 'y'} axis
         * @returns {boolean}
         */
        _panOrMoveMainScroll(axis) {
          const {
            p1,
            dragAxis,
            prevP1,
            isMultitouch
          } = this.gestures;
          const {
            currSlide,
            mainScroll
          } = this.pswp;
          const delta = p1[axis] - prevP1[axis];
          const newMainScrollX = mainScroll.x + delta;
          if (!delta || !currSlide) {
            return false;
          }
          if (axis === "x" && !currSlide.isPannable() && !isMultitouch) {
            mainScroll.moveTo(newMainScrollX, true);
            return true;
          }
          const {
            bounds
          } = currSlide;
          const newPan = currSlide.pan[axis] + delta;
          if (this.pswp.options.allowPanToNext && dragAxis === "x" && axis === "x" && !isMultitouch) {
            const currSlideMainScrollX = mainScroll.getCurrSlideX();
            const mainScrollShiftDiff = mainScroll.x - currSlideMainScrollX;
            const isLeftToRight = delta > 0;
            const isRightToLeft = !isLeftToRight;
            if (newPan > bounds.min[axis] && isLeftToRight) {
              const wasAtMinPanPosition = bounds.min[axis] <= this.startPan[axis];
              if (wasAtMinPanPosition) {
                mainScroll.moveTo(newMainScrollX, true);
                return true;
              } else {
                this._setPanWithFriction(axis, newPan);
              }
            } else if (newPan < bounds.max[axis] && isRightToLeft) {
              const wasAtMaxPanPosition = this.startPan[axis] <= bounds.max[axis];
              if (wasAtMaxPanPosition) {
                mainScroll.moveTo(newMainScrollX, true);
                return true;
              } else {
                this._setPanWithFriction(axis, newPan);
              }
            } else {
              if (mainScrollShiftDiff !== 0) {
                if (mainScrollShiftDiff > 0) {
                  mainScroll.moveTo(Math.max(newMainScrollX, currSlideMainScrollX), true);
                  return true;
                } else if (mainScrollShiftDiff < 0) {
                  mainScroll.moveTo(Math.min(newMainScrollX, currSlideMainScrollX), true);
                  return true;
                }
              } else {
                this._setPanWithFriction(axis, newPan);
              }
            }
          } else {
            if (axis === "y") {
              if (!mainScroll.isShifted() && bounds.min.y !== bounds.max.y) {
                this._setPanWithFriction(axis, newPan);
              }
            } else {
              this._setPanWithFriction(axis, newPan);
            }
          }
          return false;
        }
        // If we move above - the ratio is negative
        // If we move below the ratio is positive
        /**
         * Relation between pan Y position and third of viewport height.
         *
         * When we are at initial position (center bounds) - the ratio is 0,
         * if position is shifted upwards - the ratio is negative,
         * if position is shifted downwards - the ratio is positive.
         *
         * @private
         * @param {number} panY The current pan Y position.
         * @returns {number}
         */
        _getVerticalDragRatio(panY) {
          var _this$pswp$currSlide$, _this$pswp$currSlide;
          return (panY - ((_this$pswp$currSlide$ = (_this$pswp$currSlide = this.pswp.currSlide) === null || _this$pswp$currSlide === void 0 ? void 0 : _this$pswp$currSlide.bounds.center.y) !== null && _this$pswp$currSlide$ !== void 0 ? _this$pswp$currSlide$ : 0)) / (this.pswp.viewportSize.y / 3);
        }
        /**
         * Set pan position of the current slide.
         * Apply friction if the position is beyond the pan bounds,
         * or if custom friction is defined.
         *
         * @private
         * @param {'x' | 'y'} axis
         * @param {number} potentialPan
         * @param {number} [customFriction] (0.1 - 1)
         */
        _setPanWithFriction(axis, potentialPan, customFriction) {
          const {
            currSlide
          } = this.pswp;
          if (!currSlide) {
            return;
          }
          const {
            pan,
            bounds
          } = currSlide;
          const correctedPan = bounds.correctPan(axis, potentialPan);
          if (correctedPan !== potentialPan || customFriction) {
            const delta = Math.round(potentialPan - pan[axis]);
            pan[axis] += delta * (customFriction || PAN_END_FRICTION);
          } else {
            pan[axis] = potentialPan;
          }
        }
      };
      UPPER_ZOOM_FRICTION = 0.05;
      LOWER_ZOOM_FRICTION = 0.15;
      ZoomHandler = class {
        /**
         * @param {Gestures} gestures
         */
        constructor(gestures) {
          this.gestures = gestures;
          this._startPan = {
            x: 0,
            y: 0
          };
          this._startZoomPoint = {
            x: 0,
            y: 0
          };
          this._zoomPoint = {
            x: 0,
            y: 0
          };
          this._wasOverFitZoomLevel = false;
          this._startZoomLevel = 1;
        }
        start() {
          const {
            currSlide
          } = this.gestures.pswp;
          if (currSlide) {
            this._startZoomLevel = currSlide.currZoomLevel;
            equalizePoints(this._startPan, currSlide.pan);
          }
          this.gestures.pswp.animations.stopAllPan();
          this._wasOverFitZoomLevel = false;
        }
        change() {
          const {
            p1,
            startP1,
            p2,
            startP2,
            pswp
          } = this.gestures;
          const {
            currSlide
          } = pswp;
          if (!currSlide) {
            return;
          }
          const minZoomLevel = currSlide.zoomLevels.min;
          const maxZoomLevel = currSlide.zoomLevels.max;
          if (!currSlide.isZoomable() || pswp.mainScroll.isShifted()) {
            return;
          }
          getZoomPointsCenter(this._startZoomPoint, startP1, startP2);
          getZoomPointsCenter(this._zoomPoint, p1, p2);
          let currZoomLevel = 1 / getDistanceBetween(startP1, startP2) * getDistanceBetween(p1, p2) * this._startZoomLevel;
          if (currZoomLevel > currSlide.zoomLevels.initial + currSlide.zoomLevels.initial / 15) {
            this._wasOverFitZoomLevel = true;
          }
          if (currZoomLevel < minZoomLevel) {
            if (pswp.options.pinchToClose && !this._wasOverFitZoomLevel && this._startZoomLevel <= currSlide.zoomLevels.initial) {
              const bgOpacity = 1 - (minZoomLevel - currZoomLevel) / (minZoomLevel / 1.2);
              if (!pswp.dispatch("pinchClose", {
                bgOpacity
              }).defaultPrevented) {
                pswp.applyBgOpacity(bgOpacity);
              }
            } else {
              currZoomLevel = minZoomLevel - (minZoomLevel - currZoomLevel) * LOWER_ZOOM_FRICTION;
            }
          } else if (currZoomLevel > maxZoomLevel) {
            currZoomLevel = maxZoomLevel + (currZoomLevel - maxZoomLevel) * UPPER_ZOOM_FRICTION;
          }
          currSlide.pan.x = this._calculatePanForZoomLevel("x", currZoomLevel);
          currSlide.pan.y = this._calculatePanForZoomLevel("y", currZoomLevel);
          currSlide.setZoomLevel(currZoomLevel);
          currSlide.applyCurrentZoomPan();
        }
        end() {
          const {
            pswp
          } = this.gestures;
          const {
            currSlide
          } = pswp;
          if ((!currSlide || currSlide.currZoomLevel < currSlide.zoomLevels.initial) && !this._wasOverFitZoomLevel && pswp.options.pinchToClose) {
            pswp.close();
          } else {
            this.correctZoomPan();
          }
        }
        /**
         * @private
         * @param {'x' | 'y'} axis
         * @param {number} currZoomLevel
         * @returns {number}
         */
        _calculatePanForZoomLevel(axis, currZoomLevel) {
          const zoomFactor = currZoomLevel / this._startZoomLevel;
          return this._zoomPoint[axis] - (this._startZoomPoint[axis] - this._startPan[axis]) * zoomFactor;
        }
        /**
         * Correct currZoomLevel and pan if they are
         * beyond minimum or maximum values.
         * With animation.
         *
         * @param {boolean} [ignoreGesture]
         * Wether gesture coordinates should be ignored when calculating destination pan position.
         */
        correctZoomPan(ignoreGesture) {
          const {
            pswp
          } = this.gestures;
          const {
            currSlide
          } = pswp;
          if (!(currSlide !== null && currSlide !== void 0 && currSlide.isZoomable())) {
            return;
          }
          if (this._zoomPoint.x === 0) {
            ignoreGesture = true;
          }
          const prevZoomLevel = currSlide.currZoomLevel;
          let destinationZoomLevel;
          let currZoomLevelNeedsChange = true;
          if (prevZoomLevel < currSlide.zoomLevels.initial) {
            destinationZoomLevel = currSlide.zoomLevels.initial;
          } else if (prevZoomLevel > currSlide.zoomLevels.max) {
            destinationZoomLevel = currSlide.zoomLevels.max;
          } else {
            currZoomLevelNeedsChange = false;
            destinationZoomLevel = prevZoomLevel;
          }
          const initialBgOpacity = pswp.bgOpacity;
          const restoreBgOpacity = pswp.bgOpacity < 1;
          const initialPan = equalizePoints({
            x: 0,
            y: 0
          }, currSlide.pan);
          let destinationPan = equalizePoints({
            x: 0,
            y: 0
          }, initialPan);
          if (ignoreGesture) {
            this._zoomPoint.x = 0;
            this._zoomPoint.y = 0;
            this._startZoomPoint.x = 0;
            this._startZoomPoint.y = 0;
            this._startZoomLevel = prevZoomLevel;
            equalizePoints(this._startPan, initialPan);
          }
          if (currZoomLevelNeedsChange) {
            destinationPan = {
              x: this._calculatePanForZoomLevel("x", destinationZoomLevel),
              y: this._calculatePanForZoomLevel("y", destinationZoomLevel)
            };
          }
          currSlide.setZoomLevel(destinationZoomLevel);
          destinationPan = {
            x: currSlide.bounds.correctPan("x", destinationPan.x),
            y: currSlide.bounds.correctPan("y", destinationPan.y)
          };
          currSlide.setZoomLevel(prevZoomLevel);
          const panNeedsChange = !pointsEqual(destinationPan, initialPan);
          if (!panNeedsChange && !currZoomLevelNeedsChange && !restoreBgOpacity) {
            currSlide._setResolution(destinationZoomLevel);
            currSlide.applyCurrentZoomPan();
            return;
          }
          pswp.animations.stopAllPan();
          pswp.animations.startSpring({
            isPan: true,
            start: 0,
            end: 1e3,
            velocity: 0,
            dampingRatio: 1,
            naturalFrequency: 40,
            onUpdate: (now2) => {
              now2 /= 1e3;
              if (panNeedsChange || currZoomLevelNeedsChange) {
                if (panNeedsChange) {
                  currSlide.pan.x = initialPan.x + (destinationPan.x - initialPan.x) * now2;
                  currSlide.pan.y = initialPan.y + (destinationPan.y - initialPan.y) * now2;
                }
                if (currZoomLevelNeedsChange) {
                  const newZoomLevel = prevZoomLevel + (destinationZoomLevel - prevZoomLevel) * now2;
                  currSlide.setZoomLevel(newZoomLevel);
                }
                currSlide.applyCurrentZoomPan();
              }
              if (restoreBgOpacity && pswp.bgOpacity < 1) {
                pswp.applyBgOpacity(clamp(initialBgOpacity + (1 - initialBgOpacity) * now2, 0, 1));
              }
            },
            onComplete: () => {
              currSlide._setResolution(destinationZoomLevel);
              currSlide.applyCurrentZoomPan();
            }
          });
        }
      };
      TapHandler = class {
        /**
         * @param {Gestures} gestures
         */
        constructor(gestures) {
          this.gestures = gestures;
        }
        /**
         * @param {Point} point
         * @param {PointerEvent} originalEvent
         */
        click(point, originalEvent) {
          const targetClassList = (
            /** @type {HTMLElement} */
            originalEvent.target.classList
          );
          const isImageClick = targetClassList.contains("pswp__img");
          const isBackgroundClick = targetClassList.contains("pswp__item") || targetClassList.contains("pswp__zoom-wrap");
          if (isImageClick) {
            this._doClickOrTapAction("imageClick", point, originalEvent);
          } else if (isBackgroundClick) {
            this._doClickOrTapAction("bgClick", point, originalEvent);
          }
        }
        /**
         * @param {Point} point
         * @param {PointerEvent} originalEvent
         */
        tap(point, originalEvent) {
          if (didTapOnMainContent(originalEvent)) {
            this._doClickOrTapAction("tap", point, originalEvent);
          }
        }
        /**
         * @param {Point} point
         * @param {PointerEvent} originalEvent
         */
        doubleTap(point, originalEvent) {
          if (didTapOnMainContent(originalEvent)) {
            this._doClickOrTapAction("doubleTap", point, originalEvent);
          }
        }
        /**
         * @private
         * @param {Actions} actionName
         * @param {Point} point
         * @param {PointerEvent} originalEvent
         */
        _doClickOrTapAction(actionName, point, originalEvent) {
          var _this$gestures$pswp$e;
          const {
            pswp
          } = this.gestures;
          const {
            currSlide
          } = pswp;
          const actionFullName = (
            /** @type {AddPostfix<Actions, 'Action'>} */
            actionName + "Action"
          );
          const optionValue = pswp.options[actionFullName];
          if (pswp.dispatch(actionFullName, {
            point,
            originalEvent
          }).defaultPrevented) {
            return;
          }
          if (typeof optionValue === "function") {
            optionValue.call(pswp, point, originalEvent);
            return;
          }
          switch (optionValue) {
            case "close":
            case "next":
              pswp[optionValue]();
              break;
            case "zoom":
              currSlide === null || currSlide === void 0 || currSlide.toggleZoom(point);
              break;
            case "zoom-or-close":
              if (currSlide !== null && currSlide !== void 0 && currSlide.isZoomable() && currSlide.zoomLevels.secondary !== currSlide.zoomLevels.initial) {
                currSlide.toggleZoom(point);
              } else if (pswp.options.clickToCloseNonZoomable) {
                pswp.close();
              }
              break;
            case "toggle-controls":
              (_this$gestures$pswp$e = this.gestures.pswp.element) === null || _this$gestures$pswp$e === void 0 || _this$gestures$pswp$e.classList.toggle("pswp--ui-visible");
              break;
          }
        }
      };
      AXIS_SWIPE_HYSTERISIS = 10;
      DOUBLE_TAP_DELAY = 300;
      MIN_TAP_DISTANCE = 25;
      Gestures = class {
        /**
         * @param {PhotoSwipe} pswp
         */
        constructor(pswp) {
          this.pswp = pswp;
          this.dragAxis = null;
          this.p1 = {
            x: 0,
            y: 0
          };
          this.p2 = {
            x: 0,
            y: 0
          };
          this.prevP1 = {
            x: 0,
            y: 0
          };
          this.prevP2 = {
            x: 0,
            y: 0
          };
          this.startP1 = {
            x: 0,
            y: 0
          };
          this.startP2 = {
            x: 0,
            y: 0
          };
          this.velocity = {
            x: 0,
            y: 0
          };
          this._lastStartP1 = {
            x: 0,
            y: 0
          };
          this._intervalP1 = {
            x: 0,
            y: 0
          };
          this._numActivePoints = 0;
          this._ongoingPointers = [];
          this._touchEventEnabled = "ontouchstart" in window;
          this._pointerEventEnabled = !!window.PointerEvent;
          this.supportsTouch = this._touchEventEnabled || this._pointerEventEnabled && navigator.maxTouchPoints > 1;
          this._numActivePoints = 0;
          this._intervalTime = 0;
          this._velocityCalculated = false;
          this.isMultitouch = false;
          this.isDragging = false;
          this.isZooming = false;
          this.raf = null;
          this._tapTimer = null;
          if (!this.supportsTouch) {
            pswp.options.allowPanToNext = false;
          }
          this.drag = new DragHandler(this);
          this.zoomLevels = new ZoomHandler(this);
          this.tapHandler = new TapHandler(this);
          pswp.on("bindEvents", () => {
            pswp.events.add(
              pswp.scrollWrap,
              "click",
              /** @type EventListener */
              this._onClick.bind(this)
            );
            if (this._pointerEventEnabled) {
              this._bindEvents("pointer", "down", "up", "cancel");
            } else if (this._touchEventEnabled) {
              this._bindEvents("touch", "start", "end", "cancel");
              if (pswp.scrollWrap) {
                pswp.scrollWrap.ontouchmove = () => {
                };
                pswp.scrollWrap.ontouchend = () => {
                };
              }
            } else {
              this._bindEvents("mouse", "down", "up");
            }
          });
        }
        /**
         * @private
         * @param {'mouse' | 'touch' | 'pointer'} pref
         * @param {'down' | 'start'} down
         * @param {'up' | 'end'} up
         * @param {'cancel'} [cancel]
         */
        _bindEvents(pref, down, up, cancel) {
          const {
            pswp
          } = this;
          const {
            events
          } = pswp;
          const cancelEvent = cancel ? pref + cancel : "";
          events.add(
            pswp.scrollWrap,
            pref + down,
            /** @type EventListener */
            this.onPointerDown.bind(this)
          );
          events.add(
            window,
            pref + "move",
            /** @type EventListener */
            this.onPointerMove.bind(this)
          );
          events.add(
            window,
            pref + up,
            /** @type EventListener */
            this.onPointerUp.bind(this)
          );
          if (cancelEvent) {
            events.add(
              pswp.scrollWrap,
              cancelEvent,
              /** @type EventListener */
              this.onPointerUp.bind(this)
            );
          }
        }
        /**
         * @param {PointerEvent} e
         */
        onPointerDown(e2) {
          const isMousePointer = e2.type === "mousedown" || e2.pointerType === "mouse";
          if (isMousePointer && e2.button > 0) {
            return;
          }
          const {
            pswp
          } = this;
          if (!pswp.opener.isOpen) {
            e2.preventDefault();
            return;
          }
          if (pswp.dispatch("pointerDown", {
            originalEvent: e2
          }).defaultPrevented) {
            return;
          }
          if (isMousePointer) {
            pswp.mouseDetected();
            this._preventPointerEventBehaviour(e2, "down");
          }
          pswp.animations.stopAll();
          this._updatePoints(e2, "down");
          if (this._numActivePoints === 1) {
            this.dragAxis = null;
            equalizePoints(this.startP1, this.p1);
          }
          if (this._numActivePoints > 1) {
            this._clearTapTimer();
            this.isMultitouch = true;
          } else {
            this.isMultitouch = false;
          }
        }
        /**
         * @param {PointerEvent} e
         */
        onPointerMove(e2) {
          this._preventPointerEventBehaviour(e2, "move");
          if (!this._numActivePoints) {
            return;
          }
          this._updatePoints(e2, "move");
          if (this.pswp.dispatch("pointerMove", {
            originalEvent: e2
          }).defaultPrevented) {
            return;
          }
          if (this._numActivePoints === 1 && !this.isDragging) {
            if (!this.dragAxis) {
              this._calculateDragDirection();
            }
            if (this.dragAxis && !this.isDragging) {
              if (this.isZooming) {
                this.isZooming = false;
                this.zoomLevels.end();
              }
              this.isDragging = true;
              this._clearTapTimer();
              this._updateStartPoints();
              this._intervalTime = Date.now();
              this._velocityCalculated = false;
              equalizePoints(this._intervalP1, this.p1);
              this.velocity.x = 0;
              this.velocity.y = 0;
              this.drag.start();
              this._rafStopLoop();
              this._rafRenderLoop();
            }
          } else if (this._numActivePoints > 1 && !this.isZooming) {
            this._finishDrag();
            this.isZooming = true;
            this._updateStartPoints();
            this.zoomLevels.start();
            this._rafStopLoop();
            this._rafRenderLoop();
          }
        }
        /**
         * @private
         */
        _finishDrag() {
          if (this.isDragging) {
            this.isDragging = false;
            if (!this._velocityCalculated) {
              this._updateVelocity(true);
            }
            this.drag.end();
            this.dragAxis = null;
          }
        }
        /**
         * @param {PointerEvent} e
         */
        onPointerUp(e2) {
          if (!this._numActivePoints) {
            return;
          }
          this._updatePoints(e2, "up");
          if (this.pswp.dispatch("pointerUp", {
            originalEvent: e2
          }).defaultPrevented) {
            return;
          }
          if (this._numActivePoints === 0) {
            this._rafStopLoop();
            if (this.isDragging) {
              this._finishDrag();
            } else if (!this.isZooming && !this.isMultitouch) {
              this._finishTap(e2);
            }
          }
          if (this._numActivePoints < 2 && this.isZooming) {
            this.isZooming = false;
            this.zoomLevels.end();
            if (this._numActivePoints === 1) {
              this.dragAxis = null;
              this._updateStartPoints();
            }
          }
        }
        /**
         * @private
         */
        _rafRenderLoop() {
          if (this.isDragging || this.isZooming) {
            this._updateVelocity();
            if (this.isDragging) {
              if (!pointsEqual(this.p1, this.prevP1)) {
                this.drag.change();
              }
            } else {
              if (!pointsEqual(this.p1, this.prevP1) || !pointsEqual(this.p2, this.prevP2)) {
                this.zoomLevels.change();
              }
            }
            this._updatePrevPoints();
            this.raf = requestAnimationFrame(this._rafRenderLoop.bind(this));
          }
        }
        /**
         * Update velocity at 50ms interval
         *
         * @private
         * @param {boolean} [force]
         */
        _updateVelocity(force) {
          const time = Date.now();
          const duration2 = time - this._intervalTime;
          if (duration2 < 50 && !force) {
            return;
          }
          this.velocity.x = this._getVelocity("x", duration2);
          this.velocity.y = this._getVelocity("y", duration2);
          this._intervalTime = time;
          equalizePoints(this._intervalP1, this.p1);
          this._velocityCalculated = true;
        }
        /**
         * @private
         * @param {PointerEvent} e
         */
        _finishTap(e2) {
          const {
            mainScroll
          } = this.pswp;
          if (mainScroll.isShifted()) {
            mainScroll.moveIndexBy(0, true);
            return;
          }
          if (e2.type.indexOf("cancel") > 0) {
            return;
          }
          if (e2.type === "mouseup" || e2.pointerType === "mouse") {
            this.tapHandler.click(this.startP1, e2);
            return;
          }
          const tapDelay = this.pswp.options.doubleTapAction ? DOUBLE_TAP_DELAY : 0;
          if (this._tapTimer) {
            this._clearTapTimer();
            if (getDistanceBetween(this._lastStartP1, this.startP1) < MIN_TAP_DISTANCE) {
              this.tapHandler.doubleTap(this.startP1, e2);
            }
          } else {
            equalizePoints(this._lastStartP1, this.startP1);
            this._tapTimer = setTimeout(() => {
              this.tapHandler.tap(this.startP1, e2);
              this._clearTapTimer();
            }, tapDelay);
          }
        }
        /**
         * @private
         */
        _clearTapTimer() {
          if (this._tapTimer) {
            clearTimeout(this._tapTimer);
            this._tapTimer = null;
          }
        }
        /**
         * Get velocity for axis
         *
         * @private
         * @param {'x' | 'y'} axis
         * @param {number} duration
         * @returns {number}
         */
        _getVelocity(axis, duration2) {
          const displacement = this.p1[axis] - this._intervalP1[axis];
          if (Math.abs(displacement) > 1 && duration2 > 5) {
            return displacement / duration2;
          }
          return 0;
        }
        /**
         * @private
         */
        _rafStopLoop() {
          if (this.raf) {
            cancelAnimationFrame(this.raf);
            this.raf = null;
          }
        }
        /**
         * @private
         * @param {PointerEvent} e
         * @param {'up' | 'down' | 'move'} pointerType Normalized pointer type
         */
        _preventPointerEventBehaviour(e2, pointerType) {
          const preventPointerEvent = this.pswp.applyFilters("preventPointerEvent", true, e2, pointerType);
          if (preventPointerEvent) {
            e2.preventDefault();
          }
        }
        /**
         * Parses and normalizes points from the touch, mouse or pointer event.
         * Updates p1 and p2.
         *
         * @private
         * @param {PointerEvent | TouchEvent} e
         * @param {'up' | 'down' | 'move'} pointerType Normalized pointer type
         */
        _updatePoints(e2, pointerType) {
          if (this._pointerEventEnabled) {
            const pointerEvent = (
              /** @type {PointerEvent} */
              e2
            );
            const pointerIndex = this._ongoingPointers.findIndex((ongoingPointer) => {
              return ongoingPointer.id === pointerEvent.pointerId;
            });
            if (pointerType === "up" && pointerIndex > -1) {
              this._ongoingPointers.splice(pointerIndex, 1);
            } else if (pointerType === "down" && pointerIndex === -1) {
              this._ongoingPointers.push(this._convertEventPosToPoint(pointerEvent, {
                x: 0,
                y: 0
              }));
            } else if (pointerIndex > -1) {
              this._convertEventPosToPoint(pointerEvent, this._ongoingPointers[pointerIndex]);
            }
            this._numActivePoints = this._ongoingPointers.length;
            if (this._numActivePoints > 0) {
              equalizePoints(this.p1, this._ongoingPointers[0]);
            }
            if (this._numActivePoints > 1) {
              equalizePoints(this.p2, this._ongoingPointers[1]);
            }
          } else {
            const touchEvent = (
              /** @type {TouchEvent} */
              e2
            );
            this._numActivePoints = 0;
            if (touchEvent.type.indexOf("touch") > -1) {
              if (touchEvent.touches && touchEvent.touches.length > 0) {
                this._convertEventPosToPoint(touchEvent.touches[0], this.p1);
                this._numActivePoints++;
                if (touchEvent.touches.length > 1) {
                  this._convertEventPosToPoint(touchEvent.touches[1], this.p2);
                  this._numActivePoints++;
                }
              }
            } else {
              this._convertEventPosToPoint(
                /** @type {PointerEvent} */
                e2,
                this.p1
              );
              if (pointerType === "up") {
                this._numActivePoints = 0;
              } else {
                this._numActivePoints++;
              }
            }
          }
        }
        /** update points that were used during previous rAF tick
         * @private
         */
        _updatePrevPoints() {
          equalizePoints(this.prevP1, this.p1);
          equalizePoints(this.prevP2, this.p2);
        }
        /** update points at the start of gesture
         * @private
         */
        _updateStartPoints() {
          equalizePoints(this.startP1, this.p1);
          equalizePoints(this.startP2, this.p2);
          this._updatePrevPoints();
        }
        /** @private */
        _calculateDragDirection() {
          if (this.pswp.mainScroll.isShifted()) {
            this.dragAxis = "x";
          } else {
            const diff = Math.abs(this.p1.x - this.startP1.x) - Math.abs(this.p1.y - this.startP1.y);
            if (diff !== 0) {
              const axisToCheck = diff > 0 ? "x" : "y";
              if (Math.abs(this.p1[axisToCheck] - this.startP1[axisToCheck]) >= AXIS_SWIPE_HYSTERISIS) {
                this.dragAxis = axisToCheck;
              }
            }
          }
        }
        /**
         * Converts touch, pointer or mouse event
         * to PhotoSwipe point.
         *
         * @private
         * @param {Touch | PointerEvent} e
         * @param {Point} p
         * @returns {Point}
         */
        _convertEventPosToPoint(e2, p2) {
          p2.x = e2.pageX - this.pswp.offset.x;
          p2.y = e2.pageY - this.pswp.offset.y;
          if ("pointerId" in e2) {
            p2.id = e2.pointerId;
          } else if (e2.identifier !== void 0) {
            p2.id = e2.identifier;
          }
          return p2;
        }
        /**
         * @private
         * @param {PointerEvent} e
         */
        _onClick(e2) {
          if (this.pswp.mainScroll.isShifted()) {
            e2.preventDefault();
            e2.stopPropagation();
          }
        }
      };
      MAIN_SCROLL_END_FRICTION = 0.35;
      MainScroll = class {
        /**
         * @param {PhotoSwipe} pswp
         */
        constructor(pswp) {
          this.pswp = pswp;
          this.x = 0;
          this.slideWidth = 0;
          this._currPositionIndex = 0;
          this._prevPositionIndex = 0;
          this._containerShiftIndex = -1;
          this.itemHolders = [];
        }
        /**
         * Position the scroller and slide containers
         * according to viewport size.
         *
         * @param {boolean} [resizeSlides] Whether slides content should resized
         */
        resize(resizeSlides) {
          const {
            pswp
          } = this;
          const newSlideWidth = Math.round(pswp.viewportSize.x + pswp.viewportSize.x * pswp.options.spacing);
          const slideWidthChanged = newSlideWidth !== this.slideWidth;
          if (slideWidthChanged) {
            this.slideWidth = newSlideWidth;
            this.moveTo(this.getCurrSlideX());
          }
          this.itemHolders.forEach((itemHolder, index) => {
            if (slideWidthChanged) {
              setTransform(itemHolder.el, (index + this._containerShiftIndex) * this.slideWidth);
            }
            if (resizeSlides && itemHolder.slide) {
              itemHolder.slide.resize();
            }
          });
        }
        /**
         * Reset X position of the main scroller to zero
         */
        resetPosition() {
          this._currPositionIndex = 0;
          this._prevPositionIndex = 0;
          this.slideWidth = 0;
          this._containerShiftIndex = -1;
        }
        /**
         * Create and append array of three items
         * that hold data about slides in DOM
         */
        appendHolders() {
          this.itemHolders = [];
          for (let i2 = 0; i2 < 3; i2++) {
            const el = createElement3("pswp__item", "div", this.pswp.container);
            el.setAttribute("role", "group");
            el.setAttribute("aria-roledescription", "slide");
            el.setAttribute("aria-hidden", "true");
            el.style.display = i2 === 1 ? "block" : "none";
            this.itemHolders.push({
              el
              //index: -1
            });
          }
        }
        /**
         * Whether the main scroll can be horizontally swiped to the next or previous slide.
         * @returns {boolean}
         */
        canBeSwiped() {
          return this.pswp.getNumItems() > 1;
        }
        /**
         * Move main scroll by X amount of slides.
         * For example:
         *   `-1` will move to the previous slide,
         *    `0` will reset the scroll position of the current slide,
         *    `3` will move three slides forward
         *
         * If loop option is enabled - index will be automatically looped too,
         * (for example `-1` will move to the last slide of the gallery).
         *
         * @param {number} diff
         * @param {boolean} [animate]
         * @param {number} [velocityX]
         * @returns {boolean} whether index was changed or not
         */
        moveIndexBy(diff, animate, velocityX) {
          const {
            pswp
          } = this;
          let newIndex = pswp.potentialIndex + diff;
          const numSlides = pswp.getNumItems();
          if (pswp.canLoop()) {
            newIndex = pswp.getLoopedIndex(newIndex);
            const distance = (diff + numSlides) % numSlides;
            if (distance <= numSlides / 2) {
              diff = distance;
            } else {
              diff = distance - numSlides;
            }
          } else {
            if (newIndex < 0) {
              newIndex = 0;
            } else if (newIndex >= numSlides) {
              newIndex = numSlides - 1;
            }
            diff = newIndex - pswp.potentialIndex;
          }
          pswp.potentialIndex = newIndex;
          this._currPositionIndex -= diff;
          pswp.animations.stopMainScroll();
          const destinationX = this.getCurrSlideX();
          if (!animate) {
            this.moveTo(destinationX);
            this.updateCurrItem();
          } else {
            pswp.animations.startSpring({
              isMainScroll: true,
              start: this.x,
              end: destinationX,
              velocity: velocityX || 0,
              naturalFrequency: 30,
              dampingRatio: 1,
              //0.7,
              onUpdate: (x2) => {
                this.moveTo(x2);
              },
              onComplete: () => {
                this.updateCurrItem();
                pswp.appendHeavy();
              }
            });
            let currDiff = pswp.potentialIndex - pswp.currIndex;
            if (pswp.canLoop()) {
              const currDistance = (currDiff + numSlides) % numSlides;
              if (currDistance <= numSlides / 2) {
                currDiff = currDistance;
              } else {
                currDiff = currDistance - numSlides;
              }
            }
            if (Math.abs(currDiff) > 1) {
              this.updateCurrItem();
            }
          }
          return Boolean(diff);
        }
        /**
         * X position of the main scroll for the current slide
         * (ignores position during dragging)
         * @returns {number}
         */
        getCurrSlideX() {
          return this.slideWidth * this._currPositionIndex;
        }
        /**
         * Whether scroll position is shifted.
         * For example, it will return true if the scroll is being dragged or animated.
         * @returns {boolean}
         */
        isShifted() {
          return this.x !== this.getCurrSlideX();
        }
        /**
         * Update slides X positions and set their content
         */
        updateCurrItem() {
          var _this$itemHolders$;
          const {
            pswp
          } = this;
          const positionDifference = this._prevPositionIndex - this._currPositionIndex;
          if (!positionDifference) {
            return;
          }
          this._prevPositionIndex = this._currPositionIndex;
          pswp.currIndex = pswp.potentialIndex;
          let diffAbs = Math.abs(positionDifference);
          let tempHolder;
          if (diffAbs >= 3) {
            this._containerShiftIndex += positionDifference + (positionDifference > 0 ? -3 : 3);
            diffAbs = 3;
          }
          for (let i2 = 0; i2 < diffAbs; i2++) {
            if (positionDifference > 0) {
              tempHolder = this.itemHolders.shift();
              if (tempHolder) {
                this.itemHolders[2] = tempHolder;
                this._containerShiftIndex++;
                setTransform(tempHolder.el, (this._containerShiftIndex + 2) * this.slideWidth);
                pswp.setContent(tempHolder, pswp.currIndex - diffAbs + i2 + 2);
              }
            } else {
              tempHolder = this.itemHolders.pop();
              if (tempHolder) {
                this.itemHolders.unshift(tempHolder);
                this._containerShiftIndex--;
                setTransform(tempHolder.el, this._containerShiftIndex * this.slideWidth);
                pswp.setContent(tempHolder, pswp.currIndex + diffAbs - i2 - 2);
              }
            }
          }
          if (Math.abs(this._containerShiftIndex) > 50 && !this.isShifted()) {
            this.resetPosition();
            this.resize();
          }
          pswp.animations.stopAllPan();
          this.itemHolders.forEach((itemHolder, i2) => {
            if (itemHolder.slide) {
              itemHolder.slide.setIsActive(i2 === 1);
            }
          });
          pswp.currSlide = (_this$itemHolders$ = this.itemHolders[1]) === null || _this$itemHolders$ === void 0 ? void 0 : _this$itemHolders$.slide;
          pswp.contentLoader.updateLazy(positionDifference);
          if (pswp.currSlide) {
            pswp.currSlide.applyCurrentZoomPan();
          }
          pswp.dispatch("change");
        }
        /**
         * Move the X position of the main scroll container
         *
         * @param {number} x
         * @param {boolean} [dragging]
         */
        moveTo(x2, dragging) {
          if (!this.pswp.canLoop() && dragging) {
            let newSlideIndexOffset = (this.slideWidth * this._currPositionIndex - x2) / this.slideWidth;
            newSlideIndexOffset += this.pswp.currIndex;
            const delta = Math.round(x2 - this.x);
            if (newSlideIndexOffset < 0 && delta > 0 || newSlideIndexOffset >= this.pswp.getNumItems() - 1 && delta < 0) {
              x2 = this.x + delta * MAIN_SCROLL_END_FRICTION;
            }
          }
          this.x = x2;
          if (this.pswp.container) {
            setTransform(this.pswp.container, x2);
          }
          this.pswp.dispatch("moveMainScroll", {
            x: x2,
            dragging: dragging !== null && dragging !== void 0 ? dragging : false
          });
        }
      };
      KeyboardKeyCodesMap = {
        Escape: 27,
        z: 90,
        ArrowLeft: 37,
        ArrowUp: 38,
        ArrowRight: 39,
        ArrowDown: 40,
        Tab: 9
      };
      getKeyboardEventKey = (key, isKeySupported) => {
        return isKeySupported ? key : KeyboardKeyCodesMap[key];
      };
      Keyboard = class {
        /**
         * @param {PhotoSwipe} pswp
         */
        constructor(pswp) {
          this.pswp = pswp;
          this._wasFocused = false;
          pswp.on("bindEvents", () => {
            if (pswp.options.trapFocus) {
              if (!pswp.options.initialPointerPos) {
                this._focusRoot();
              }
              pswp.events.add(
                document,
                "focusin",
                /** @type EventListener */
                this._onFocusIn.bind(this)
              );
            }
            pswp.events.add(
              document,
              "keydown",
              /** @type EventListener */
              this._onKeyDown.bind(this)
            );
          });
          const lastActiveElement = (
            /** @type {HTMLElement} */
            document.activeElement
          );
          pswp.on("destroy", () => {
            if (pswp.options.returnFocus && lastActiveElement && this._wasFocused) {
              lastActiveElement.focus();
            }
          });
        }
        /** @private */
        _focusRoot() {
          if (!this._wasFocused && this.pswp.element) {
            this.pswp.element.focus();
            this._wasFocused = true;
          }
        }
        /**
         * @private
         * @param {KeyboardEvent} e
         */
        _onKeyDown(e2) {
          const {
            pswp
          } = this;
          if (pswp.dispatch("keydown", {
            originalEvent: e2
          }).defaultPrevented) {
            return;
          }
          if (specialKeyUsed2(e2)) {
            return;
          }
          let keydownAction;
          let axis;
          let isForward = false;
          const isKeySupported = "key" in e2;
          switch (isKeySupported ? e2.key : e2.keyCode) {
            case getKeyboardEventKey("Escape", isKeySupported):
              if (pswp.options.escKey) {
                keydownAction = "close";
              }
              break;
            case getKeyboardEventKey("z", isKeySupported):
              keydownAction = "toggleZoom";
              break;
            case getKeyboardEventKey("ArrowLeft", isKeySupported):
              axis = "x";
              break;
            case getKeyboardEventKey("ArrowUp", isKeySupported):
              axis = "y";
              break;
            case getKeyboardEventKey("ArrowRight", isKeySupported):
              axis = "x";
              isForward = true;
              break;
            case getKeyboardEventKey("ArrowDown", isKeySupported):
              isForward = true;
              axis = "y";
              break;
            case getKeyboardEventKey("Tab", isKeySupported):
              this._focusRoot();
              break;
          }
          if (axis) {
            e2.preventDefault();
            const {
              currSlide
            } = pswp;
            if (pswp.options.arrowKeys && axis === "x" && pswp.getNumItems() > 1) {
              keydownAction = isForward ? "next" : "prev";
            } else if (currSlide && currSlide.currZoomLevel > currSlide.zoomLevels.fit) {
              currSlide.pan[axis] += isForward ? -80 : 80;
              currSlide.panTo(currSlide.pan.x, currSlide.pan.y);
            }
          }
          if (keydownAction) {
            e2.preventDefault();
            pswp[keydownAction]();
          }
        }
        /**
         * Trap focus inside photoswipe
         *
         * @private
         * @param {FocusEvent} e
         */
        _onFocusIn(e2) {
          const {
            template
          } = this.pswp;
          if (template && document !== e2.target && template !== e2.target && !template.contains(
            /** @type {Node} */
            e2.target
          )) {
            template.focus();
          }
        }
      };
      DEFAULT_EASING = "cubic-bezier(.4,0,.22,1)";
      CSSAnimation = class {
        /**
         * onComplete can be unpredictable, be careful about current state
         *
         * @param {CssAnimationProps} props
         */
        constructor(props) {
          var _props$prop;
          this.props = props;
          const {
            target,
            onComplete,
            transform,
            onFinish = () => {
            },
            duration: duration2 = 333,
            easing = DEFAULT_EASING
          } = props;
          this.onFinish = onFinish;
          const prop = transform ? "transform" : "opacity";
          const propValue = (_props$prop = props[prop]) !== null && _props$prop !== void 0 ? _props$prop : "";
          this._target = target;
          this._onComplete = onComplete;
          this._finished = false;
          this._onTransitionEnd = this._onTransitionEnd.bind(this);
          this._helperTimeout = setTimeout(() => {
            setTransitionStyle(target, prop, duration2, easing);
            this._helperTimeout = setTimeout(() => {
              target.addEventListener("transitionend", this._onTransitionEnd, false);
              target.addEventListener("transitioncancel", this._onTransitionEnd, false);
              this._helperTimeout = setTimeout(() => {
                this._finalizeAnimation();
              }, duration2 + 500);
              target.style[prop] = propValue;
            }, 30);
          }, 0);
        }
        /**
         * @private
         * @param {TransitionEvent} e
         */
        _onTransitionEnd(e2) {
          if (e2.target === this._target) {
            this._finalizeAnimation();
          }
        }
        /**
         * @private
         */
        _finalizeAnimation() {
          if (!this._finished) {
            this._finished = true;
            this.onFinish();
            if (this._onComplete) {
              this._onComplete();
            }
          }
        }
        // Destroy is called automatically onFinish
        destroy() {
          if (this._helperTimeout) {
            clearTimeout(this._helperTimeout);
          }
          removeTransitionStyle(this._target);
          this._target.removeEventListener("transitionend", this._onTransitionEnd, false);
          this._target.removeEventListener("transitioncancel", this._onTransitionEnd, false);
          if (!this._finished) {
            this._finalizeAnimation();
          }
        }
      };
      DEFAULT_NATURAL_FREQUENCY = 12;
      DEFAULT_DAMPING_RATIO = 0.75;
      SpringEaser = class {
        /**
         * @param {number} initialVelocity Initial velocity, px per ms.
         *
         * @param {number} [dampingRatio]
         * Determines how bouncy animation will be.
         * From 0 to 1, 0 - always overshoot, 1 - do not overshoot.
         * "overshoot" refers to part of animation that
         * goes beyond the final value.
         *
         * @param {number} [naturalFrequency]
         * Determines how fast animation will slow down.
         * The higher value - the stiffer the transition will be,
         * and the faster it will slow down.
         * Recommended value from 10 to 50
         */
        constructor(initialVelocity, dampingRatio, naturalFrequency) {
          this.velocity = initialVelocity * 1e3;
          this._dampingRatio = dampingRatio || DEFAULT_DAMPING_RATIO;
          this._naturalFrequency = naturalFrequency || DEFAULT_NATURAL_FREQUENCY;
          this._dampedFrequency = this._naturalFrequency;
          if (this._dampingRatio < 1) {
            this._dampedFrequency *= Math.sqrt(1 - this._dampingRatio * this._dampingRatio);
          }
        }
        /**
         * @param {number} deltaPosition Difference between current and end position of the animation
         * @param {number} deltaTime Frame duration in milliseconds
         *
         * @returns {number} Displacement, relative to the end position.
         */
        easeFrame(deltaPosition, deltaTime) {
          let displacement = 0;
          let coeff;
          deltaTime /= 1e3;
          const naturalDumpingPow = Math.E ** (-this._dampingRatio * this._naturalFrequency * deltaTime);
          if (this._dampingRatio === 1) {
            coeff = this.velocity + this._naturalFrequency * deltaPosition;
            displacement = (deltaPosition + coeff * deltaTime) * naturalDumpingPow;
            this.velocity = displacement * -this._naturalFrequency + coeff * naturalDumpingPow;
          } else if (this._dampingRatio < 1) {
            coeff = 1 / this._dampedFrequency * (this._dampingRatio * this._naturalFrequency * deltaPosition + this.velocity);
            const dumpedFCos = Math.cos(this._dampedFrequency * deltaTime);
            const dumpedFSin = Math.sin(this._dampedFrequency * deltaTime);
            displacement = naturalDumpingPow * (deltaPosition * dumpedFCos + coeff * dumpedFSin);
            this.velocity = displacement * -this._naturalFrequency * this._dampingRatio + naturalDumpingPow * (-this._dampedFrequency * deltaPosition * dumpedFSin + this._dampedFrequency * coeff * dumpedFCos);
          }
          return displacement;
        }
      };
      SpringAnimation = class {
        /**
         * @param {SpringAnimationProps} props
         */
        constructor(props) {
          this.props = props;
          this._raf = 0;
          const {
            start: start3,
            end,
            velocity,
            onUpdate,
            onComplete,
            onFinish = () => {
            },
            dampingRatio,
            naturalFrequency
          } = props;
          this.onFinish = onFinish;
          const easer = new SpringEaser(velocity, dampingRatio, naturalFrequency);
          let prevTime = Date.now();
          let deltaPosition = start3 - end;
          const animationLoop = () => {
            if (this._raf) {
              deltaPosition = easer.easeFrame(deltaPosition, Date.now() - prevTime);
              if (Math.abs(deltaPosition) < 1 && Math.abs(easer.velocity) < 50) {
                onUpdate(end);
                if (onComplete) {
                  onComplete();
                }
                this.onFinish();
              } else {
                prevTime = Date.now();
                onUpdate(deltaPosition + end);
                this._raf = requestAnimationFrame(animationLoop);
              }
            }
          };
          this._raf = requestAnimationFrame(animationLoop);
        }
        // Destroy is called automatically onFinish
        destroy() {
          if (this._raf >= 0) {
            cancelAnimationFrame(this._raf);
          }
          this._raf = 0;
        }
      };
      Animations = class {
        constructor() {
          this.activeAnimations = [];
        }
        /**
         * @param {SpringAnimationProps} props
         */
        startSpring(props) {
          this._start(props, true);
        }
        /**
         * @param {CssAnimationProps} props
         */
        startTransition(props) {
          this._start(props);
        }
        /**
         * @private
         * @param {AnimationProps} props
         * @param {boolean} [isSpring]
         * @returns {Animation}
         */
        _start(props, isSpring) {
          const animation = isSpring ? new SpringAnimation(
            /** @type SpringAnimationProps */
            props
          ) : new CSSAnimation(
            /** @type CssAnimationProps */
            props
          );
          this.activeAnimations.push(animation);
          animation.onFinish = () => this.stop(animation);
          return animation;
        }
        /**
         * @param {Animation} animation
         */
        stop(animation) {
          animation.destroy();
          const index = this.activeAnimations.indexOf(animation);
          if (index > -1) {
            this.activeAnimations.splice(index, 1);
          }
        }
        stopAll() {
          this.activeAnimations.forEach((animation) => {
            animation.destroy();
          });
          this.activeAnimations = [];
        }
        /**
         * Stop all pan or zoom transitions
         */
        stopAllPan() {
          this.activeAnimations = this.activeAnimations.filter((animation) => {
            if (animation.props.isPan) {
              animation.destroy();
              return false;
            }
            return true;
          });
        }
        stopMainScroll() {
          this.activeAnimations = this.activeAnimations.filter((animation) => {
            if (animation.props.isMainScroll) {
              animation.destroy();
              return false;
            }
            return true;
          });
        }
        /**
         * Returns true if main scroll transition is running
         */
        // isMainScrollRunning() {
        //   return this.activeAnimations.some((animation) => {
        //     return animation.props.isMainScroll;
        //   });
        // }
        /**
         * Returns true if any pan or zoom transition is running
         */
        isPanRunning() {
          return this.activeAnimations.some((animation) => {
            return animation.props.isPan;
          });
        }
      };
      ScrollWheel = class {
        /**
         * @param {PhotoSwipe} pswp
         */
        constructor(pswp) {
          this.pswp = pswp;
          pswp.events.add(
            pswp.element,
            "wheel",
            /** @type EventListener */
            this._onWheel.bind(this)
          );
        }
        /**
         * @private
         * @param {WheelEvent} e
         */
        _onWheel(e2) {
          e2.preventDefault();
          const {
            currSlide
          } = this.pswp;
          let {
            deltaX,
            deltaY
          } = e2;
          if (!currSlide) {
            return;
          }
          if (this.pswp.dispatch("wheel", {
            originalEvent: e2
          }).defaultPrevented) {
            return;
          }
          if (e2.ctrlKey || this.pswp.options.wheelToZoom) {
            if (currSlide.isZoomable()) {
              let zoomFactor = -deltaY;
              if (e2.deltaMode === 1) {
                zoomFactor *= 0.05;
              } else {
                zoomFactor *= e2.deltaMode ? 1 : 2e-3;
              }
              zoomFactor = 2 ** zoomFactor;
              const destZoomLevel = currSlide.currZoomLevel * zoomFactor;
              currSlide.zoomTo(destZoomLevel, {
                x: e2.clientX,
                y: e2.clientY
              });
            }
          } else {
            if (currSlide.isPannable()) {
              if (e2.deltaMode === 1) {
                deltaX *= 18;
                deltaY *= 18;
              }
              currSlide.panTo(currSlide.pan.x - deltaX, currSlide.pan.y - deltaY);
            }
          }
        }
      };
      UIElement = class {
        /**
         * @param {PhotoSwipe} pswp
         * @param {UIElementData} data
         */
        constructor(pswp, data) {
          var _container;
          const name = data.name || data.className;
          let elementHTML = data.html;
          if (pswp.options[name] === false) {
            return;
          }
          if (typeof pswp.options[name + "SVG"] === "string") {
            elementHTML = pswp.options[name + "SVG"];
          }
          pswp.dispatch("uiElementCreate", {
            data
          });
          let className = "";
          if (data.isButton) {
            className += "pswp__button ";
            className += data.className || `pswp__button--${data.name}`;
          } else {
            className += data.className || `pswp__${data.name}`;
          }
          let tagName = data.isButton ? data.tagName || "button" : data.tagName || "div";
          tagName = /** @type {keyof HTMLElementTagNameMap} */
          tagName.toLowerCase();
          const element = createElement3(className, tagName);
          if (data.isButton) {
            if (tagName === "button") {
              element.type = "button";
            }
            let {
              title
            } = data;
            const {
              ariaLabel
            } = data;
            if (typeof pswp.options[name + "Title"] === "string") {
              title = pswp.options[name + "Title"];
            }
            if (title) {
              element.title = title;
            }
            const ariaText = ariaLabel || title;
            if (ariaText) {
              element.setAttribute("aria-label", ariaText);
            }
          }
          element.innerHTML = addElementHTML(elementHTML);
          if (data.onInit) {
            data.onInit(element, pswp);
          }
          if (data.onClick) {
            element.onclick = (e2) => {
              if (typeof data.onClick === "string") {
                pswp[data.onClick]();
              } else if (typeof data.onClick === "function") {
                data.onClick(e2, element, pswp);
              }
            };
          }
          const appendTo = data.appendTo || "bar";
          let container = pswp.element;
          if (appendTo === "bar") {
            if (!pswp.topBar) {
              pswp.topBar = createElement3("pswp__top-bar pswp__hide-on-close", "div", pswp.scrollWrap);
            }
            container = pswp.topBar;
          } else {
            element.classList.add("pswp__hide-on-close");
            if (appendTo === "wrapper") {
              container = pswp.scrollWrap;
            }
          }
          (_container = container) === null || _container === void 0 || _container.appendChild(pswp.applyFilters("uiElement", element, data));
        }
      };
      arrowPrev = {
        name: "arrowPrev",
        className: "pswp__button--arrow--prev",
        title: "Previous",
        order: 10,
        isButton: true,
        appendTo: "wrapper",
        html: {
          isCustomSVG: true,
          size: 60,
          inner: '<path d="M29 43l-3 3-16-16 16-16 3 3-13 13 13 13z" id="pswp__icn-arrow"/>',
          outlineID: "pswp__icn-arrow"
        },
        onClick: "prev",
        onInit: initArrowButton
      };
      arrowNext = {
        name: "arrowNext",
        className: "pswp__button--arrow--next",
        title: "Next",
        order: 11,
        isButton: true,
        appendTo: "wrapper",
        html: {
          isCustomSVG: true,
          size: 60,
          inner: '<use xlink:href="#pswp__icn-arrow"/>',
          outlineID: "pswp__icn-arrow"
        },
        onClick: "next",
        onInit: (el, pswp) => {
          initArrowButton(el, pswp, true);
        }
      };
      closeButton = {
        name: "close",
        title: "Close",
        order: 20,
        isButton: true,
        html: {
          isCustomSVG: true,
          inner: '<path d="M24 10l-2-2-6 6-6-6-2 2 6 6-6 6 2 2 6-6 6 6 2-2-6-6z" id="pswp__icn-close"/>',
          outlineID: "pswp__icn-close"
        },
        onClick: "close"
      };
      zoomButton = {
        name: "zoom",
        title: "Zoom",
        order: 10,
        isButton: true,
        html: {
          isCustomSVG: true,
          // eslint-disable-next-line max-len
          inner: '<path d="M17.426 19.926a6 6 0 1 1 1.5-1.5L23 22.5 21.5 24l-4.074-4.074z" id="pswp__icn-zoom"/><path fill="currentColor" class="pswp__zoom-icn-bar-h" d="M11 16v-2h6v2z"/><path fill="currentColor" class="pswp__zoom-icn-bar-v" d="M13 12h2v6h-2z"/>',
          outlineID: "pswp__icn-zoom"
        },
        onClick: "toggleZoom"
      };
      loadingIndicator = {
        name: "preloader",
        appendTo: "bar",
        order: 7,
        html: {
          isCustomSVG: true,
          // eslint-disable-next-line max-len
          inner: '<path fill-rule="evenodd" clip-rule="evenodd" d="M21.2 16a5.2 5.2 0 1 1-5.2-5.2V8a8 8 0 1 0 8 8h-2.8Z" id="pswp__icn-loading"/>',
          outlineID: "pswp__icn-loading"
        },
        onInit: (indicatorElement, pswp) => {
          let isVisible;
          let delayTimeout = null;
          const toggleIndicatorClass = (className, add2) => {
            indicatorElement.classList.toggle("pswp__preloader--" + className, add2);
          };
          const setIndicatorVisibility = (visible) => {
            if (isVisible !== visible) {
              isVisible = visible;
              toggleIndicatorClass("active", visible);
            }
          };
          const updatePreloaderVisibility = () => {
            var _pswp$currSlide;
            if (!((_pswp$currSlide = pswp.currSlide) !== null && _pswp$currSlide !== void 0 && _pswp$currSlide.content.isLoading())) {
              setIndicatorVisibility(false);
              if (delayTimeout) {
                clearTimeout(delayTimeout);
                delayTimeout = null;
              }
              return;
            }
            if (!delayTimeout) {
              delayTimeout = setTimeout(() => {
                var _pswp$currSlide2;
                setIndicatorVisibility(Boolean((_pswp$currSlide2 = pswp.currSlide) === null || _pswp$currSlide2 === void 0 ? void 0 : _pswp$currSlide2.content.isLoading()));
                delayTimeout = null;
              }, pswp.options.preloaderDelay);
            }
          };
          pswp.on("change", updatePreloaderVisibility);
          pswp.on("loadComplete", (e2) => {
            if (pswp.currSlide === e2.slide) {
              updatePreloaderVisibility();
            }
          });
          if (pswp.ui) {
            pswp.ui.updatePreloaderVisibility = updatePreloaderVisibility;
          }
        }
      };
      counterIndicator = {
        name: "counter",
        order: 5,
        onInit: (counterElement, pswp) => {
          pswp.on("change", () => {
            counterElement.innerText = pswp.currIndex + 1 + pswp.options.indexIndicatorSep + pswp.getNumItems();
          });
        }
      };
      UI = class {
        /**
         * @param {PhotoSwipe} pswp
         */
        constructor(pswp) {
          this.pswp = pswp;
          this.isRegistered = false;
          this.uiElementsData = [];
          this.items = [];
          this.updatePreloaderVisibility = () => {
          };
          this._lastUpdatedZoomLevel = void 0;
        }
        init() {
          const {
            pswp
          } = this;
          this.isRegistered = false;
          this.uiElementsData = [closeButton, arrowPrev, arrowNext, zoomButton, loadingIndicator, counterIndicator];
          pswp.dispatch("uiRegister");
          this.uiElementsData.sort((a2, b2) => {
            return (a2.order || 0) - (b2.order || 0);
          });
          this.items = [];
          this.isRegistered = true;
          this.uiElementsData.forEach((uiElementData) => {
            this.registerElement(uiElementData);
          });
          pswp.on("change", () => {
            var _pswp$element;
            (_pswp$element = pswp.element) === null || _pswp$element === void 0 || _pswp$element.classList.toggle("pswp--one-slide", pswp.getNumItems() === 1);
          });
          pswp.on("zoomPanUpdate", () => this._onZoomPanUpdate());
        }
        /**
         * @param {UIElementData} elementData
         */
        registerElement(elementData) {
          if (this.isRegistered) {
            this.items.push(new UIElement(this.pswp, elementData));
          } else {
            this.uiElementsData.push(elementData);
          }
        }
        /**
         * Fired each time zoom or pan position is changed.
         * Update classes that control visibility of zoom button and cursor icon.
         *
         * @private
         */
        _onZoomPanUpdate() {
          const {
            template,
            currSlide,
            options
          } = this.pswp;
          if (this.pswp.opener.isClosing || !template || !currSlide) {
            return;
          }
          let {
            currZoomLevel
          } = currSlide;
          if (!this.pswp.opener.isOpen) {
            currZoomLevel = currSlide.zoomLevels.initial;
          }
          if (currZoomLevel === this._lastUpdatedZoomLevel) {
            return;
          }
          this._lastUpdatedZoomLevel = currZoomLevel;
          const currZoomLevelDiff = currSlide.zoomLevels.initial - currSlide.zoomLevels.secondary;
          if (Math.abs(currZoomLevelDiff) < 0.01 || !currSlide.isZoomable()) {
            setZoomedIn(template, false);
            template.classList.remove("pswp--zoom-allowed");
            return;
          }
          template.classList.add("pswp--zoom-allowed");
          const potentialZoomLevel = currZoomLevel === currSlide.zoomLevels.initial ? currSlide.zoomLevels.secondary : currSlide.zoomLevels.initial;
          setZoomedIn(template, potentialZoomLevel <= currZoomLevel);
          if (options.imageClickAction === "zoom" || options.imageClickAction === "zoom-or-close") {
            template.classList.add("pswp--click-to-zoom");
          }
        }
      };
      PhotoSwipeEvent2 = class {
        /**
         * @param {T} type
         * @param {PhotoSwipeEventsMap[T]} [details]
         */
        constructor(type, details) {
          this.type = type;
          this.defaultPrevented = false;
          if (details) {
            Object.assign(this, details);
          }
        }
        preventDefault() {
          this.defaultPrevented = true;
        }
      };
      Eventable2 = class {
        constructor() {
          this._listeners = {};
          this._filters = {};
          this.pswp = void 0;
          this.options = void 0;
        }
        /**
         * @template {keyof PhotoSwipeFiltersMap} T
         * @param {T} name
         * @param {PhotoSwipeFiltersMap[T]} fn
         * @param {number} priority
         */
        addFilter(name, fn2, priority = 100) {
          var _this$_filters$name, _this$_filters$name2, _this$pswp;
          if (!this._filters[name]) {
            this._filters[name] = [];
          }
          (_this$_filters$name = this._filters[name]) === null || _this$_filters$name === void 0 || _this$_filters$name.push({
            fn: fn2,
            priority
          });
          (_this$_filters$name2 = this._filters[name]) === null || _this$_filters$name2 === void 0 || _this$_filters$name2.sort((f1, f2) => f1.priority - f2.priority);
          (_this$pswp = this.pswp) === null || _this$pswp === void 0 || _this$pswp.addFilter(name, fn2, priority);
        }
        /**
         * @template {keyof PhotoSwipeFiltersMap} T
         * @param {T} name
         * @param {PhotoSwipeFiltersMap[T]} fn
         */
        removeFilter(name, fn2) {
          if (this._filters[name]) {
            this._filters[name] = this._filters[name].filter((filter2) => filter2.fn !== fn2);
          }
          if (this.pswp) {
            this.pswp.removeFilter(name, fn2);
          }
        }
        /**
         * @template {keyof PhotoSwipeFiltersMap} T
         * @param {T} name
         * @param {Parameters<PhotoSwipeFiltersMap[T]>} args
         * @returns {Parameters<PhotoSwipeFiltersMap[T]>[0]}
         */
        applyFilters(name, ...args) {
          var _this$_filters$name3;
          (_this$_filters$name3 = this._filters[name]) === null || _this$_filters$name3 === void 0 || _this$_filters$name3.forEach((filter2) => {
            args[0] = filter2.fn.apply(this, args);
          });
          return args[0];
        }
        /**
         * @template {keyof PhotoSwipeEventsMap} T
         * @param {T} name
         * @param {EventCallback<T>} fn
         */
        on(name, fn2) {
          var _this$_listeners$name, _this$pswp2;
          if (!this._listeners[name]) {
            this._listeners[name] = [];
          }
          (_this$_listeners$name = this._listeners[name]) === null || _this$_listeners$name === void 0 || _this$_listeners$name.push(fn2);
          (_this$pswp2 = this.pswp) === null || _this$pswp2 === void 0 || _this$pswp2.on(name, fn2);
        }
        /**
         * @template {keyof PhotoSwipeEventsMap} T
         * @param {T} name
         * @param {EventCallback<T>} fn
         */
        off(name, fn2) {
          var _this$pswp3;
          if (this._listeners[name]) {
            this._listeners[name] = this._listeners[name].filter((listener) => fn2 !== listener);
          }
          (_this$pswp3 = this.pswp) === null || _this$pswp3 === void 0 || _this$pswp3.off(name, fn2);
        }
        /**
         * @template {keyof PhotoSwipeEventsMap} T
         * @param {T} name
         * @param {PhotoSwipeEventsMap[T]} [details]
         * @returns {AugmentedEvent<T>}
         */
        dispatch(name, details) {
          var _this$_listeners$name2;
          if (this.pswp) {
            return this.pswp.dispatch(name, details);
          }
          const event = (
            /** @type {AugmentedEvent<T>} */
            new PhotoSwipeEvent2(name, details)
          );
          (_this$_listeners$name2 = this._listeners[name]) === null || _this$_listeners$name2 === void 0 || _this$_listeners$name2.forEach((listener) => {
            listener.call(this, event);
          });
          return event;
        }
      };
      Placeholder2 = class {
        /**
         * @param {string | false} imageSrc
         * @param {HTMLElement} container
         */
        constructor(imageSrc, container) {
          this.element = createElement3("pswp__img pswp__img--placeholder", imageSrc ? "img" : "div", container);
          if (imageSrc) {
            const imgEl = (
              /** @type {HTMLImageElement} */
              this.element
            );
            imgEl.decoding = "async";
            imgEl.alt = "";
            imgEl.src = imageSrc;
            imgEl.setAttribute("role", "presentation");
          }
          this.element.setAttribute("aria-hidden", "true");
        }
        /**
         * @param {number} width
         * @param {number} height
         */
        setDisplayedSize(width, height) {
          if (!this.element) {
            return;
          }
          if (this.element.tagName === "IMG") {
            setWidthHeight2(this.element, 250, "auto");
            this.element.style.transformOrigin = "0 0";
            this.element.style.transform = toTransformString2(0, 0, width / 250);
          } else {
            setWidthHeight2(this.element, width, height);
          }
        }
        destroy() {
          var _this$element;
          if ((_this$element = this.element) !== null && _this$element !== void 0 && _this$element.parentNode) {
            this.element.remove();
          }
          this.element = null;
        }
      };
      Content2 = class {
        /**
         * @param {SlideData} itemData Slide data
         * @param {PhotoSwipeBase} instance PhotoSwipe or PhotoSwipeLightbox instance
         * @param {number} index
         */
        constructor(itemData, instance, index) {
          this.instance = instance;
          this.data = itemData;
          this.index = index;
          this.element = void 0;
          this.placeholder = void 0;
          this.slide = void 0;
          this.displayedImageWidth = 0;
          this.displayedImageHeight = 0;
          this.width = Number(this.data.w) || Number(this.data.width) || 0;
          this.height = Number(this.data.h) || Number(this.data.height) || 0;
          this.isAttached = false;
          this.hasSlide = false;
          this.isDecoding = false;
          this.state = LOAD_STATE2.IDLE;
          if (this.data.type) {
            this.type = this.data.type;
          } else if (this.data.src) {
            this.type = "image";
          } else {
            this.type = "html";
          }
          this.instance.dispatch("contentInit", {
            content: this
          });
        }
        removePlaceholder() {
          if (this.placeholder && !this.keepPlaceholder()) {
            setTimeout(() => {
              if (this.placeholder) {
                this.placeholder.destroy();
                this.placeholder = void 0;
              }
            }, 1e3);
          }
        }
        /**
         * Preload content
         *
         * @param {boolean} isLazy
         * @param {boolean} [reload]
         */
        load(isLazy, reload) {
          if (this.slide && this.usePlaceholder()) {
            if (!this.placeholder) {
              const placeholderSrc = this.instance.applyFilters(
                "placeholderSrc",
                // use  image-based placeholder only for the first slide,
                // as rendering (even small stretched thumbnail) is an expensive operation
                this.data.msrc && this.slide.isFirstSlide ? this.data.msrc : false,
                this
              );
              this.placeholder = new Placeholder2(placeholderSrc, this.slide.container);
            } else {
              const placeholderEl = this.placeholder.element;
              if (placeholderEl && !placeholderEl.parentElement) {
                this.slide.container.prepend(placeholderEl);
              }
            }
          }
          if (this.element && !reload) {
            return;
          }
          if (this.instance.dispatch("contentLoad", {
            content: this,
            isLazy
          }).defaultPrevented) {
            return;
          }
          if (this.isImageContent()) {
            this.element = createElement3("pswp__img", "img");
            if (this.displayedImageWidth) {
              this.loadImage(isLazy);
            }
          } else {
            this.element = createElement3("pswp__content", "div");
            this.element.innerHTML = this.data.html || "";
          }
          if (reload && this.slide) {
            this.slide.updateContentSize(true);
          }
        }
        /**
         * Preload image
         *
         * @param {boolean} isLazy
         */
        loadImage(isLazy) {
          var _this$data$src, _this$data$alt;
          if (!this.isImageContent() || !this.element || this.instance.dispatch("contentLoadImage", {
            content: this,
            isLazy
          }).defaultPrevented) {
            return;
          }
          const imageElement = (
            /** @type HTMLImageElement */
            this.element
          );
          this.updateSrcsetSizes();
          if (this.data.srcset) {
            imageElement.srcset = this.data.srcset;
          }
          imageElement.src = (_this$data$src = this.data.src) !== null && _this$data$src !== void 0 ? _this$data$src : "";
          imageElement.alt = (_this$data$alt = this.data.alt) !== null && _this$data$alt !== void 0 ? _this$data$alt : "";
          this.state = LOAD_STATE2.LOADING;
          if (imageElement.complete) {
            this.onLoaded();
          } else {
            imageElement.onload = () => {
              this.onLoaded();
            };
            imageElement.onerror = () => {
              this.onError();
            };
          }
        }
        /**
         * Assign slide to content
         *
         * @param {Slide} slide
         */
        setSlide(slide) {
          this.slide = slide;
          this.hasSlide = true;
          this.instance = slide.pswp;
        }
        /**
         * Content load success handler
         */
        onLoaded() {
          this.state = LOAD_STATE2.LOADED;
          if (this.slide && this.element) {
            this.instance.dispatch("loadComplete", {
              slide: this.slide,
              content: this
            });
            if (this.slide.isActive && this.slide.heavyAppended && !this.element.parentNode) {
              this.append();
              this.slide.updateContentSize(true);
            }
            if (this.state === LOAD_STATE2.LOADED || this.state === LOAD_STATE2.ERROR) {
              this.removePlaceholder();
            }
          }
        }
        /**
         * Content load error handler
         */
        onError() {
          this.state = LOAD_STATE2.ERROR;
          if (this.slide) {
            this.displayError();
            this.instance.dispatch("loadComplete", {
              slide: this.slide,
              isError: true,
              content: this
            });
            this.instance.dispatch("loadError", {
              slide: this.slide,
              content: this
            });
          }
        }
        /**
         * @returns {Boolean} If the content is currently loading
         */
        isLoading() {
          return this.instance.applyFilters("isContentLoading", this.state === LOAD_STATE2.LOADING, this);
        }
        /**
         * @returns {Boolean} If the content is in error state
         */
        isError() {
          return this.state === LOAD_STATE2.ERROR;
        }
        /**
         * @returns {boolean} If the content is image
         */
        isImageContent() {
          return this.type === "image";
        }
        /**
         * Update content size
         *
         * @param {Number} width
         * @param {Number} height
         */
        setDisplayedSize(width, height) {
          if (!this.element) {
            return;
          }
          if (this.placeholder) {
            this.placeholder.setDisplayedSize(width, height);
          }
          if (this.instance.dispatch("contentResize", {
            content: this,
            width,
            height
          }).defaultPrevented) {
            return;
          }
          setWidthHeight2(this.element, width, height);
          if (this.isImageContent() && !this.isError()) {
            const isInitialSizeUpdate = !this.displayedImageWidth && width;
            this.displayedImageWidth = width;
            this.displayedImageHeight = height;
            if (isInitialSizeUpdate) {
              this.loadImage(false);
            } else {
              this.updateSrcsetSizes();
            }
            if (this.slide) {
              this.instance.dispatch("imageSizeChange", {
                slide: this.slide,
                width,
                height,
                content: this
              });
            }
          }
        }
        /**
         * @returns {boolean} If the content can be zoomed
         */
        isZoomable() {
          return this.instance.applyFilters("isContentZoomable", this.isImageContent() && this.state !== LOAD_STATE2.ERROR, this);
        }
        /**
         * Update image srcset sizes attribute based on width and height
         */
        updateSrcsetSizes() {
          if (!this.isImageContent() || !this.element || !this.data.srcset) {
            return;
          }
          const image = (
            /** @type HTMLImageElement */
            this.element
          );
          const sizesWidth = this.instance.applyFilters("srcsetSizesWidth", this.displayedImageWidth, this);
          if (!image.dataset.largestUsedSize || sizesWidth > parseInt(image.dataset.largestUsedSize, 10)) {
            image.sizes = sizesWidth + "px";
            image.dataset.largestUsedSize = String(sizesWidth);
          }
        }
        /**
         * @returns {boolean} If content should use a placeholder (from msrc by default)
         */
        usePlaceholder() {
          return this.instance.applyFilters("useContentPlaceholder", this.isImageContent(), this);
        }
        /**
         * Preload content with lazy-loading param
         */
        lazyLoad() {
          if (this.instance.dispatch("contentLazyLoad", {
            content: this
          }).defaultPrevented) {
            return;
          }
          this.load(true);
        }
        /**
         * @returns {boolean} If placeholder should be kept after content is loaded
         */
        keepPlaceholder() {
          return this.instance.applyFilters("isKeepingPlaceholder", this.isLoading(), this);
        }
        /**
         * Destroy the content
         */
        destroy() {
          this.hasSlide = false;
          this.slide = void 0;
          if (this.instance.dispatch("contentDestroy", {
            content: this
          }).defaultPrevented) {
            return;
          }
          this.remove();
          if (this.placeholder) {
            this.placeholder.destroy();
            this.placeholder = void 0;
          }
          if (this.isImageContent() && this.element) {
            this.element.onload = null;
            this.element.onerror = null;
            this.element = void 0;
          }
        }
        /**
         * Display error message
         */
        displayError() {
          if (this.slide) {
            var _this$instance$option, _this$instance$option2;
            let errorMsgEl = createElement3("pswp__error-msg", "div");
            errorMsgEl.innerText = (_this$instance$option = (_this$instance$option2 = this.instance.options) === null || _this$instance$option2 === void 0 ? void 0 : _this$instance$option2.errorMsg) !== null && _this$instance$option !== void 0 ? _this$instance$option : "";
            errorMsgEl = /** @type {HTMLDivElement} */
            this.instance.applyFilters("contentErrorElement", errorMsgEl, this);
            this.element = createElement3("pswp__content pswp__error-msg-container", "div");
            this.element.appendChild(errorMsgEl);
            this.slide.container.innerText = "";
            this.slide.container.appendChild(this.element);
            this.slide.updateContentSize(true);
            this.removePlaceholder();
          }
        }
        /**
         * Append the content
         */
        append() {
          if (this.isAttached || !this.element) {
            return;
          }
          this.isAttached = true;
          if (this.state === LOAD_STATE2.ERROR) {
            this.displayError();
            return;
          }
          if (this.instance.dispatch("contentAppend", {
            content: this
          }).defaultPrevented) {
            return;
          }
          const supportsDecode = "decode" in this.element;
          if (this.isImageContent()) {
            if (supportsDecode && this.slide && (!this.slide.isActive || isSafari2())) {
              this.isDecoding = true;
              this.element.decode().catch(() => {
              }).finally(() => {
                this.isDecoding = false;
                this.appendImage();
              });
            } else {
              this.appendImage();
            }
          } else if (this.slide && !this.element.parentNode) {
            this.slide.container.appendChild(this.element);
          }
        }
        /**
         * Activate the slide,
         * active slide is generally the current one,
         * meaning the user can see it.
         */
        activate() {
          if (this.instance.dispatch("contentActivate", {
            content: this
          }).defaultPrevented || !this.slide) {
            return;
          }
          if (this.isImageContent() && this.isDecoding && !isSafari2()) {
            this.appendImage();
          } else if (this.isError()) {
            this.load(false, true);
          }
          if (this.slide.holderElement) {
            this.slide.holderElement.setAttribute("aria-hidden", "false");
          }
        }
        /**
         * Deactivate the content
         */
        deactivate() {
          this.instance.dispatch("contentDeactivate", {
            content: this
          });
          if (this.slide && this.slide.holderElement) {
            this.slide.holderElement.setAttribute("aria-hidden", "true");
          }
        }
        /**
         * Remove the content from DOM
         */
        remove() {
          this.isAttached = false;
          if (this.instance.dispatch("contentRemove", {
            content: this
          }).defaultPrevented) {
            return;
          }
          if (this.element && this.element.parentNode) {
            this.element.remove();
          }
          if (this.placeholder && this.placeholder.element) {
            this.placeholder.element.remove();
          }
        }
        /**
         * Append the image content to slide container
         */
        appendImage() {
          if (!this.isAttached) {
            return;
          }
          if (this.instance.dispatch("contentAppendImage", {
            content: this
          }).defaultPrevented) {
            return;
          }
          if (this.slide && this.element && !this.element.parentNode) {
            this.slide.container.appendChild(this.element);
          }
          if (this.state === LOAD_STATE2.LOADED || this.state === LOAD_STATE2.ERROR) {
            this.removePlaceholder();
          }
        }
      };
      MIN_SLIDES_TO_CACHE = 5;
      ContentLoader = class {
        /**
         * @param {PhotoSwipe} pswp
         */
        constructor(pswp) {
          this.pswp = pswp;
          this.limit = Math.max(pswp.options.preload[0] + pswp.options.preload[1] + 1, MIN_SLIDES_TO_CACHE);
          this._cachedItems = [];
        }
        /**
         * Lazy load nearby slides based on `preload` option.
         *
         * @param {number} [diff] Difference between slide indexes that was changed recently, or 0.
         */
        updateLazy(diff) {
          const {
            pswp
          } = this;
          if (pswp.dispatch("lazyLoad").defaultPrevented) {
            return;
          }
          const {
            preload
          } = pswp.options;
          const isForward = diff === void 0 ? true : diff >= 0;
          let i2;
          for (i2 = 0; i2 <= preload[1]; i2++) {
            this.loadSlideByIndex(pswp.currIndex + (isForward ? i2 : -i2));
          }
          for (i2 = 1; i2 <= preload[0]; i2++) {
            this.loadSlideByIndex(pswp.currIndex + (isForward ? -i2 : i2));
          }
        }
        /**
         * @param {number} initialIndex
         */
        loadSlideByIndex(initialIndex) {
          const index = this.pswp.getLoopedIndex(initialIndex);
          let content = this.getContentByIndex(index);
          if (!content) {
            content = lazyLoadSlide2(index, this.pswp);
            if (content) {
              this.addToCache(content);
            }
          }
        }
        /**
         * @param {Slide} slide
         * @returns {Content}
         */
        getContentBySlide(slide) {
          let content = this.getContentByIndex(slide.index);
          if (!content) {
            content = this.pswp.createContentFromData(slide.data, slide.index);
            this.addToCache(content);
          }
          content.setSlide(slide);
          return content;
        }
        /**
         * @param {Content} content
         */
        addToCache(content) {
          this.removeByIndex(content.index);
          this._cachedItems.push(content);
          if (this._cachedItems.length > this.limit) {
            const indexToRemove = this._cachedItems.findIndex((item) => {
              return !item.isAttached && !item.hasSlide;
            });
            if (indexToRemove !== -1) {
              const removedItem = this._cachedItems.splice(indexToRemove, 1)[0];
              removedItem.destroy();
            }
          }
        }
        /**
         * Removes an image from cache, does not destroy() it, just removes.
         *
         * @param {number} index
         */
        removeByIndex(index) {
          const indexToRemove = this._cachedItems.findIndex((item) => item.index === index);
          if (indexToRemove !== -1) {
            this._cachedItems.splice(indexToRemove, 1);
          }
        }
        /**
         * @param {number} index
         * @returns {Content | undefined}
         */
        getContentByIndex(index) {
          return this._cachedItems.find((content) => content.index === index);
        }
        destroy() {
          this._cachedItems.forEach((content) => content.destroy());
          this._cachedItems = [];
        }
      };
      PhotoSwipeBase2 = class extends Eventable2 {
        /**
         * Get total number of slides
         *
         * @returns {number}
         */
        getNumItems() {
          var _this$options;
          let numItems = 0;
          const dataSource = (_this$options = this.options) === null || _this$options === void 0 ? void 0 : _this$options.dataSource;
          if (dataSource && "length" in dataSource) {
            numItems = dataSource.length;
          } else if (dataSource && "gallery" in dataSource) {
            if (!dataSource.items) {
              dataSource.items = this._getGalleryDOMElements(dataSource.gallery);
            }
            if (dataSource.items) {
              numItems = dataSource.items.length;
            }
          }
          const event = this.dispatch("numItems", {
            dataSource,
            numItems
          });
          return this.applyFilters("numItems", event.numItems, dataSource);
        }
        /**
         * @param {SlideData} slideData
         * @param {number} index
         * @returns {Content}
         */
        createContentFromData(slideData, index) {
          return new Content2(slideData, this, index);
        }
        /**
         * Get item data by index.
         *
         * "item data" should contain normalized information that PhotoSwipe needs to generate a slide.
         * For example, it may contain properties like
         * `src`, `srcset`, `w`, `h`, which will be used to generate a slide with image.
         *
         * @param {number} index
         * @returns {SlideData}
         */
        getItemData(index) {
          var _this$options2;
          const dataSource = (_this$options2 = this.options) === null || _this$options2 === void 0 ? void 0 : _this$options2.dataSource;
          let dataSourceItem = {};
          if (Array.isArray(dataSource)) {
            dataSourceItem = dataSource[index];
          } else if (dataSource && "gallery" in dataSource) {
            if (!dataSource.items) {
              dataSource.items = this._getGalleryDOMElements(dataSource.gallery);
            }
            dataSourceItem = dataSource.items[index];
          }
          let itemData = dataSourceItem;
          if (itemData instanceof Element) {
            itemData = this._domElementToItemData(itemData);
          }
          const event = this.dispatch("itemData", {
            itemData: itemData || {},
            index
          });
          return this.applyFilters("itemData", event.itemData, index);
        }
        /**
         * Get array of gallery DOM elements,
         * based on childSelector and gallery element.
         *
         * @param {HTMLElement} galleryElement
         * @returns {HTMLElement[]}
         */
        _getGalleryDOMElements(galleryElement) {
          var _this$options3, _this$options4;
          if ((_this$options3 = this.options) !== null && _this$options3 !== void 0 && _this$options3.children || (_this$options4 = this.options) !== null && _this$options4 !== void 0 && _this$options4.childSelector) {
            return getElementsFromOption2(this.options.children, this.options.childSelector, galleryElement) || [];
          }
          return [galleryElement];
        }
        /**
         * Converts DOM element to item data object.
         *
         * @param {HTMLElement} element DOM element
         * @returns {SlideData}
         */
        _domElementToItemData(element) {
          const itemData = {
            element
          };
          const linkEl = (
            /** @type {HTMLAnchorElement} */
            element.tagName === "A" ? element : element.querySelector("a")
          );
          if (linkEl) {
            itemData.src = linkEl.dataset.pswpSrc || linkEl.href;
            if (linkEl.dataset.pswpSrcset) {
              itemData.srcset = linkEl.dataset.pswpSrcset;
            }
            itemData.width = linkEl.dataset.pswpWidth ? parseInt(linkEl.dataset.pswpWidth, 10) : 0;
            itemData.height = linkEl.dataset.pswpHeight ? parseInt(linkEl.dataset.pswpHeight, 10) : 0;
            itemData.w = itemData.width;
            itemData.h = itemData.height;
            if (linkEl.dataset.pswpType) {
              itemData.type = linkEl.dataset.pswpType;
            }
            const thumbnailEl = element.querySelector("img");
            if (thumbnailEl) {
              var _thumbnailEl$getAttri;
              itemData.msrc = thumbnailEl.currentSrc || thumbnailEl.src;
              itemData.alt = (_thumbnailEl$getAttri = thumbnailEl.getAttribute("alt")) !== null && _thumbnailEl$getAttri !== void 0 ? _thumbnailEl$getAttri : "";
            }
            if (linkEl.dataset.pswpCropped || linkEl.dataset.cropped) {
              itemData.thumbCropped = true;
            }
          }
          return this.applyFilters("domItemData", itemData, element, linkEl);
        }
        /**
         * Lazy-load by slide data
         *
         * @param {SlideData} itemData Data about the slide
         * @param {number} index
         * @returns {Content} Image that is being decoded or false.
         */
        lazyLoadData(itemData, index) {
          return lazyLoadData2(itemData, this, index);
        }
      };
      MIN_OPACITY = 3e-3;
      Opener = class {
        /**
         * @param {PhotoSwipe} pswp
         */
        constructor(pswp) {
          this.pswp = pswp;
          this.isClosed = true;
          this.isOpen = false;
          this.isClosing = false;
          this.isOpening = false;
          this._duration = void 0;
          this._useAnimation = false;
          this._croppedZoom = false;
          this._animateRootOpacity = false;
          this._animateBgOpacity = false;
          this._placeholder = void 0;
          this._opacityElement = void 0;
          this._cropContainer1 = void 0;
          this._cropContainer2 = void 0;
          this._thumbBounds = void 0;
          this._prepareOpen = this._prepareOpen.bind(this);
          pswp.on("firstZoomPan", this._prepareOpen);
        }
        open() {
          this._prepareOpen();
          this._start();
        }
        close() {
          if (this.isClosed || this.isClosing || this.isOpening) {
            return;
          }
          const slide = this.pswp.currSlide;
          this.isOpen = false;
          this.isOpening = false;
          this.isClosing = true;
          this._duration = this.pswp.options.hideAnimationDuration;
          if (slide && slide.currZoomLevel * slide.width >= this.pswp.options.maxWidthToAnimate) {
            this._duration = 0;
          }
          this._applyStartProps();
          setTimeout(() => {
            this._start();
          }, this._croppedZoom ? 30 : 0);
        }
        /** @private */
        _prepareOpen() {
          this.pswp.off("firstZoomPan", this._prepareOpen);
          if (!this.isOpening) {
            const slide = this.pswp.currSlide;
            this.isOpening = true;
            this.isClosing = false;
            this._duration = this.pswp.options.showAnimationDuration;
            if (slide && slide.zoomLevels.initial * slide.width >= this.pswp.options.maxWidthToAnimate) {
              this._duration = 0;
            }
            this._applyStartProps();
          }
        }
        /** @private */
        _applyStartProps() {
          const {
            pswp
          } = this;
          const slide = this.pswp.currSlide;
          const {
            options
          } = pswp;
          if (options.showHideAnimationType === "fade") {
            options.showHideOpacity = true;
            this._thumbBounds = void 0;
          } else if (options.showHideAnimationType === "none") {
            options.showHideOpacity = false;
            this._duration = 0;
            this._thumbBounds = void 0;
          } else if (this.isOpening && pswp._initialThumbBounds) {
            this._thumbBounds = pswp._initialThumbBounds;
          } else {
            this._thumbBounds = this.pswp.getThumbBounds();
          }
          this._placeholder = slide === null || slide === void 0 ? void 0 : slide.getPlaceholderElement();
          pswp.animations.stopAll();
          this._useAnimation = Boolean(this._duration && this._duration > 50);
          this._animateZoom = Boolean(this._thumbBounds) && (slide === null || slide === void 0 ? void 0 : slide.content.usePlaceholder()) && (!this.isClosing || !pswp.mainScroll.isShifted());
          if (!this._animateZoom) {
            this._animateRootOpacity = true;
            if (this.isOpening && slide) {
              slide.zoomAndPanToInitial();
              slide.applyCurrentZoomPan();
            }
          } else {
            var _options$showHideOpac;
            this._animateRootOpacity = (_options$showHideOpac = options.showHideOpacity) !== null && _options$showHideOpac !== void 0 ? _options$showHideOpac : false;
          }
          this._animateBgOpacity = !this._animateRootOpacity && this.pswp.options.bgOpacity > MIN_OPACITY;
          this._opacityElement = this._animateRootOpacity ? pswp.element : pswp.bg;
          if (!this._useAnimation) {
            this._duration = 0;
            this._animateZoom = false;
            this._animateBgOpacity = false;
            this._animateRootOpacity = true;
            if (this.isOpening) {
              if (pswp.element) {
                pswp.element.style.opacity = String(MIN_OPACITY);
              }
              pswp.applyBgOpacity(1);
            }
            return;
          }
          if (this._animateZoom && this._thumbBounds && this._thumbBounds.innerRect) {
            var _this$pswp$currSlide;
            this._croppedZoom = true;
            this._cropContainer1 = this.pswp.container;
            this._cropContainer2 = (_this$pswp$currSlide = this.pswp.currSlide) === null || _this$pswp$currSlide === void 0 ? void 0 : _this$pswp$currSlide.holderElement;
            if (pswp.container) {
              pswp.container.style.overflow = "hidden";
              pswp.container.style.width = pswp.viewportSize.x + "px";
            }
          } else {
            this._croppedZoom = false;
          }
          if (this.isOpening) {
            if (this._animateRootOpacity) {
              if (pswp.element) {
                pswp.element.style.opacity = String(MIN_OPACITY);
              }
              pswp.applyBgOpacity(1);
            } else {
              if (this._animateBgOpacity && pswp.bg) {
                pswp.bg.style.opacity = String(MIN_OPACITY);
              }
              if (pswp.element) {
                pswp.element.style.opacity = "1";
              }
            }
            if (this._animateZoom) {
              this._setClosedStateZoomPan();
              if (this._placeholder) {
                this._placeholder.style.willChange = "transform";
                this._placeholder.style.opacity = String(MIN_OPACITY);
              }
            }
          } else if (this.isClosing) {
            if (pswp.mainScroll.itemHolders[0]) {
              pswp.mainScroll.itemHolders[0].el.style.display = "none";
            }
            if (pswp.mainScroll.itemHolders[2]) {
              pswp.mainScroll.itemHolders[2].el.style.display = "none";
            }
            if (this._croppedZoom) {
              if (pswp.mainScroll.x !== 0) {
                pswp.mainScroll.resetPosition();
                pswp.mainScroll.resize();
              }
            }
          }
        }
        /** @private */
        _start() {
          if (this.isOpening && this._useAnimation && this._placeholder && this._placeholder.tagName === "IMG") {
            new Promise((resolve) => {
              let decoded = false;
              let isDelaying = true;
              decodeImage(
                /** @type {HTMLImageElement} */
                this._placeholder
              ).finally(() => {
                decoded = true;
                if (!isDelaying) {
                  resolve(true);
                }
              });
              setTimeout(() => {
                isDelaying = false;
                if (decoded) {
                  resolve(true);
                }
              }, 50);
              setTimeout(resolve, 250);
            }).finally(() => this._initiate());
          } else {
            this._initiate();
          }
        }
        /** @private */
        _initiate() {
          var _this$pswp$element, _this$pswp$element2;
          (_this$pswp$element = this.pswp.element) === null || _this$pswp$element === void 0 || _this$pswp$element.style.setProperty("--pswp-transition-duration", this._duration + "ms");
          this.pswp.dispatch(this.isOpening ? "openingAnimationStart" : "closingAnimationStart");
          this.pswp.dispatch(
            /** @type {'initialZoomIn' | 'initialZoomOut'} */
            "initialZoom" + (this.isOpening ? "In" : "Out")
          );
          (_this$pswp$element2 = this.pswp.element) === null || _this$pswp$element2 === void 0 || _this$pswp$element2.classList.toggle("pswp--ui-visible", this.isOpening);
          if (this.isOpening) {
            if (this._placeholder) {
              this._placeholder.style.opacity = "1";
            }
            this._animateToOpenState();
          } else if (this.isClosing) {
            this._animateToClosedState();
          }
          if (!this._useAnimation) {
            this._onAnimationComplete();
          }
        }
        /** @private */
        _onAnimationComplete() {
          const {
            pswp
          } = this;
          this.isOpen = this.isOpening;
          this.isClosed = this.isClosing;
          this.isOpening = false;
          this.isClosing = false;
          pswp.dispatch(this.isOpen ? "openingAnimationEnd" : "closingAnimationEnd");
          pswp.dispatch(
            /** @type {'initialZoomInEnd' | 'initialZoomOutEnd'} */
            "initialZoom" + (this.isOpen ? "InEnd" : "OutEnd")
          );
          if (this.isClosed) {
            pswp.destroy();
          } else if (this.isOpen) {
            var _pswp$currSlide;
            if (this._animateZoom && pswp.container) {
              pswp.container.style.overflow = "visible";
              pswp.container.style.width = "100%";
            }
            (_pswp$currSlide = pswp.currSlide) === null || _pswp$currSlide === void 0 || _pswp$currSlide.applyCurrentZoomPan();
          }
        }
        /** @private */
        _animateToOpenState() {
          const {
            pswp
          } = this;
          if (this._animateZoom) {
            if (this._croppedZoom && this._cropContainer1 && this._cropContainer2) {
              this._animateTo(this._cropContainer1, "transform", "translate3d(0,0,0)");
              this._animateTo(this._cropContainer2, "transform", "none");
            }
            if (pswp.currSlide) {
              pswp.currSlide.zoomAndPanToInitial();
              this._animateTo(pswp.currSlide.container, "transform", pswp.currSlide.getCurrentTransform());
            }
          }
          if (this._animateBgOpacity && pswp.bg) {
            this._animateTo(pswp.bg, "opacity", String(pswp.options.bgOpacity));
          }
          if (this._animateRootOpacity && pswp.element) {
            this._animateTo(pswp.element, "opacity", "1");
          }
        }
        /** @private */
        _animateToClosedState() {
          const {
            pswp
          } = this;
          if (this._animateZoom) {
            this._setClosedStateZoomPan(true);
          }
          if (this._animateBgOpacity && pswp.bgOpacity > 0.01 && pswp.bg) {
            this._animateTo(pswp.bg, "opacity", "0");
          }
          if (this._animateRootOpacity && pswp.element) {
            this._animateTo(pswp.element, "opacity", "0");
          }
        }
        /**
         * @private
         * @param {boolean} [animate]
         */
        _setClosedStateZoomPan(animate) {
          if (!this._thumbBounds)
            return;
          const {
            pswp
          } = this;
          const {
            innerRect
          } = this._thumbBounds;
          const {
            currSlide,
            viewportSize
          } = pswp;
          if (this._croppedZoom && innerRect && this._cropContainer1 && this._cropContainer2) {
            const containerOnePanX = -viewportSize.x + (this._thumbBounds.x - innerRect.x) + innerRect.w;
            const containerOnePanY = -viewportSize.y + (this._thumbBounds.y - innerRect.y) + innerRect.h;
            const containerTwoPanX = viewportSize.x - innerRect.w;
            const containerTwoPanY = viewportSize.y - innerRect.h;
            if (animate) {
              this._animateTo(this._cropContainer1, "transform", toTransformString2(containerOnePanX, containerOnePanY));
              this._animateTo(this._cropContainer2, "transform", toTransformString2(containerTwoPanX, containerTwoPanY));
            } else {
              setTransform(this._cropContainer1, containerOnePanX, containerOnePanY);
              setTransform(this._cropContainer2, containerTwoPanX, containerTwoPanY);
            }
          }
          if (currSlide) {
            equalizePoints(currSlide.pan, innerRect || this._thumbBounds);
            currSlide.currZoomLevel = this._thumbBounds.w / currSlide.width;
            if (animate) {
              this._animateTo(currSlide.container, "transform", currSlide.getCurrentTransform());
            } else {
              currSlide.applyCurrentZoomPan();
            }
          }
        }
        /**
         * @private
         * @param {HTMLElement} target
         * @param {'transform' | 'opacity'} prop
         * @param {string} propValue
         */
        _animateTo(target, prop, propValue) {
          if (!this._duration) {
            target.style[prop] = propValue;
            return;
          }
          const {
            animations
          } = this.pswp;
          const animProps = {
            duration: this._duration,
            easing: this.pswp.options.easing,
            onComplete: () => {
              if (!animations.activeAnimations.length) {
                this._onAnimationComplete();
              }
            },
            target
          };
          animProps[prop] = propValue;
          animations.startTransition(animProps);
        }
      };
      defaultOptions2 = {
        allowPanToNext: true,
        spacing: 0.1,
        loop: true,
        pinchToClose: true,
        closeOnVerticalDrag: true,
        hideAnimationDuration: 333,
        showAnimationDuration: 333,
        zoomAnimationDuration: 333,
        escKey: true,
        arrowKeys: true,
        trapFocus: true,
        returnFocus: true,
        maxWidthToAnimate: 4e3,
        clickToCloseNonZoomable: true,
        imageClickAction: "zoom-or-close",
        bgClickAction: "close",
        tapAction: "toggle-controls",
        doubleTapAction: "zoom",
        indexIndicatorSep: " / ",
        preloaderDelay: 2e3,
        bgOpacity: 0.8,
        index: 0,
        errorMsg: "The image cannot be loaded",
        preload: [1, 2],
        easing: "cubic-bezier(.4,0,.22,1)"
      };
      PhotoSwipe = class extends PhotoSwipeBase2 {
        /**
         * @param {PhotoSwipeOptions} [options]
         */
        constructor(options) {
          super();
          this.options = this._prepareOptions(options || {});
          this.offset = {
            x: 0,
            y: 0
          };
          this._prevViewportSize = {
            x: 0,
            y: 0
          };
          this.viewportSize = {
            x: 0,
            y: 0
          };
          this.bgOpacity = 1;
          this.currIndex = 0;
          this.potentialIndex = 0;
          this.isOpen = false;
          this.isDestroying = false;
          this.hasMouse = false;
          this._initialItemData = {};
          this._initialThumbBounds = void 0;
          this.topBar = void 0;
          this.element = void 0;
          this.template = void 0;
          this.container = void 0;
          this.scrollWrap = void 0;
          this.currSlide = void 0;
          this.events = new DOMEvents();
          this.animations = new Animations();
          this.mainScroll = new MainScroll(this);
          this.gestures = new Gestures(this);
          this.opener = new Opener(this);
          this.keyboard = new Keyboard(this);
          this.contentLoader = new ContentLoader(this);
        }
        /** @returns {boolean} */
        init() {
          if (this.isOpen || this.isDestroying) {
            return false;
          }
          this.isOpen = true;
          this.dispatch("init");
          this.dispatch("beforeOpen");
          this._createMainStructure();
          let rootClasses = "pswp--open";
          if (this.gestures.supportsTouch) {
            rootClasses += " pswp--touch";
          }
          if (this.options.mainClass) {
            rootClasses += " " + this.options.mainClass;
          }
          if (this.element) {
            this.element.className += " " + rootClasses;
          }
          this.currIndex = this.options.index || 0;
          this.potentialIndex = this.currIndex;
          this.dispatch("firstUpdate");
          this.scrollWheel = new ScrollWheel(this);
          if (Number.isNaN(this.currIndex) || this.currIndex < 0 || this.currIndex >= this.getNumItems()) {
            this.currIndex = 0;
          }
          if (!this.gestures.supportsTouch) {
            this.mouseDetected();
          }
          this.updateSize();
          this.offset.y = window.pageYOffset;
          this._initialItemData = this.getItemData(this.currIndex);
          this.dispatch("gettingData", {
            index: this.currIndex,
            data: this._initialItemData,
            slide: void 0
          });
          this._initialThumbBounds = this.getThumbBounds();
          this.dispatch("initialLayout");
          this.on("openingAnimationEnd", () => {
            const {
              itemHolders
            } = this.mainScroll;
            if (itemHolders[0]) {
              itemHolders[0].el.style.display = "block";
              this.setContent(itemHolders[0], this.currIndex - 1);
            }
            if (itemHolders[2]) {
              itemHolders[2].el.style.display = "block";
              this.setContent(itemHolders[2], this.currIndex + 1);
            }
            this.appendHeavy();
            this.contentLoader.updateLazy();
            this.events.add(window, "resize", this._handlePageResize.bind(this));
            this.events.add(window, "scroll", this._updatePageScrollOffset.bind(this));
            this.dispatch("bindEvents");
          });
          if (this.mainScroll.itemHolders[1]) {
            this.setContent(this.mainScroll.itemHolders[1], this.currIndex);
          }
          this.dispatch("change");
          this.opener.open();
          this.dispatch("afterInit");
          return true;
        }
        /**
         * Get looped slide index
         * (for example, -1 will return the last slide)
         *
         * @param {number} index
         * @returns {number}
         */
        getLoopedIndex(index) {
          const numSlides = this.getNumItems();
          if (this.options.loop) {
            if (index > numSlides - 1) {
              index -= numSlides;
            }
            if (index < 0) {
              index += numSlides;
            }
          }
          return clamp(index, 0, numSlides - 1);
        }
        appendHeavy() {
          this.mainScroll.itemHolders.forEach((itemHolder) => {
            var _itemHolder$slide;
            (_itemHolder$slide = itemHolder.slide) === null || _itemHolder$slide === void 0 || _itemHolder$slide.appendHeavy();
          });
        }
        /**
         * Change the slide
         * @param {number} index New index
         */
        goTo(index) {
          this.mainScroll.moveIndexBy(this.getLoopedIndex(index) - this.potentialIndex);
        }
        /**
         * Go to the next slide.
         */
        next() {
          this.goTo(this.potentialIndex + 1);
        }
        /**
         * Go to the previous slide.
         */
        prev() {
          this.goTo(this.potentialIndex - 1);
        }
        /**
         * @see slide/slide.js zoomTo
         *
         * @param {Parameters<Slide['zoomTo']>} args
         */
        zoomTo(...args) {
          var _this$currSlide;
          (_this$currSlide = this.currSlide) === null || _this$currSlide === void 0 || _this$currSlide.zoomTo(...args);
        }
        /**
         * @see slide/slide.js toggleZoom
         */
        toggleZoom() {
          var _this$currSlide2;
          (_this$currSlide2 = this.currSlide) === null || _this$currSlide2 === void 0 || _this$currSlide2.toggleZoom();
        }
        /**
         * Close the gallery.
         * After closing transition ends - destroy it
         */
        close() {
          if (!this.opener.isOpen || this.isDestroying) {
            return;
          }
          this.isDestroying = true;
          this.dispatch("close");
          this.events.removeAll();
          this.opener.close();
        }
        /**
         * Destroys the gallery:
         * - instantly closes the gallery
         * - unbinds events,
         * - cleans intervals and timeouts
         * - removes elements from DOM
         */
        destroy() {
          var _this$element;
          if (!this.isDestroying) {
            this.options.showHideAnimationType = "none";
            this.close();
            return;
          }
          this.dispatch("destroy");
          this._listeners = {};
          if (this.scrollWrap) {
            this.scrollWrap.ontouchmove = null;
            this.scrollWrap.ontouchend = null;
          }
          (_this$element = this.element) === null || _this$element === void 0 || _this$element.remove();
          this.mainScroll.itemHolders.forEach((itemHolder) => {
            var _itemHolder$slide2;
            (_itemHolder$slide2 = itemHolder.slide) === null || _itemHolder$slide2 === void 0 || _itemHolder$slide2.destroy();
          });
          this.contentLoader.destroy();
          this.events.removeAll();
        }
        /**
         * Refresh/reload content of a slide by its index
         *
         * @param {number} slideIndex
         */
        refreshSlideContent(slideIndex) {
          this.contentLoader.removeByIndex(slideIndex);
          this.mainScroll.itemHolders.forEach((itemHolder, i2) => {
            var _this$currSlide$index, _this$currSlide3;
            let potentialHolderIndex = ((_this$currSlide$index = (_this$currSlide3 = this.currSlide) === null || _this$currSlide3 === void 0 ? void 0 : _this$currSlide3.index) !== null && _this$currSlide$index !== void 0 ? _this$currSlide$index : 0) - 1 + i2;
            if (this.canLoop()) {
              potentialHolderIndex = this.getLoopedIndex(potentialHolderIndex);
            }
            if (potentialHolderIndex === slideIndex) {
              this.setContent(itemHolder, slideIndex, true);
              if (i2 === 1) {
                var _itemHolder$slide3;
                this.currSlide = itemHolder.slide;
                (_itemHolder$slide3 = itemHolder.slide) === null || _itemHolder$slide3 === void 0 || _itemHolder$slide3.setIsActive(true);
              }
            }
          });
          this.dispatch("change");
        }
        /**
         * Set slide content
         *
         * @param {ItemHolder} holder mainScroll.itemHolders array item
         * @param {number} index Slide index
         * @param {boolean} [force] If content should be set even if index wasn't changed
         */
        setContent(holder, index, force) {
          if (this.canLoop()) {
            index = this.getLoopedIndex(index);
          }
          if (holder.slide) {
            if (holder.slide.index === index && !force) {
              return;
            }
            holder.slide.destroy();
            holder.slide = void 0;
          }
          if (!this.canLoop() && (index < 0 || index >= this.getNumItems())) {
            return;
          }
          const itemData = this.getItemData(index);
          holder.slide = new Slide(itemData, index, this);
          if (index === this.currIndex) {
            this.currSlide = holder.slide;
          }
          holder.slide.append(holder.el);
        }
        /** @returns {Point} */
        getViewportCenterPoint() {
          return {
            x: this.viewportSize.x / 2,
            y: this.viewportSize.y / 2
          };
        }
        /**
         * Update size of all elements.
         * Executed on init and on page resize.
         *
         * @param {boolean} [force] Update size even if size of viewport was not changed.
         */
        updateSize(force) {
          if (this.isDestroying) {
            return;
          }
          const newViewportSize = getViewportSize2(this.options, this);
          if (!force && pointsEqual(newViewportSize, this._prevViewportSize)) {
            return;
          }
          equalizePoints(this._prevViewportSize, newViewportSize);
          this.dispatch("beforeResize");
          equalizePoints(this.viewportSize, this._prevViewportSize);
          this._updatePageScrollOffset();
          this.dispatch("viewportSize");
          this.mainScroll.resize(this.opener.isOpen);
          if (!this.hasMouse && window.matchMedia("(any-hover: hover)").matches) {
            this.mouseDetected();
          }
          this.dispatch("resize");
        }
        /**
         * @param {number} opacity
         */
        applyBgOpacity(opacity) {
          this.bgOpacity = Math.max(opacity, 0);
          if (this.bg) {
            this.bg.style.opacity = String(this.bgOpacity * this.options.bgOpacity);
          }
        }
        /**
         * Whether mouse is detected
         */
        mouseDetected() {
          if (!this.hasMouse) {
            var _this$element2;
            this.hasMouse = true;
            (_this$element2 = this.element) === null || _this$element2 === void 0 || _this$element2.classList.add("pswp--has_mouse");
          }
        }
        /**
         * Page resize event handler
         *
         * @private
         */
        _handlePageResize() {
          this.updateSize();
          if (/iPhone|iPad|iPod/i.test(window.navigator.userAgent)) {
            setTimeout(() => {
              this.updateSize();
            }, 500);
          }
        }
        /**
         * Page scroll offset is used
         * to get correct coordinates
         * relative to PhotoSwipe viewport.
         *
         * @private
         */
        _updatePageScrollOffset() {
          this.setScrollOffset(0, window.pageYOffset);
        }
        /**
         * @param {number} x
         * @param {number} y
         */
        setScrollOffset(x2, y2) {
          this.offset.x = x2;
          this.offset.y = y2;
          this.dispatch("updateScrollOffset");
        }
        /**
         * Create main HTML structure of PhotoSwipe,
         * and add it to DOM
         *
         * @private
         */
        _createMainStructure() {
          this.element = createElement3("pswp", "div");
          this.element.setAttribute("tabindex", "-1");
          this.element.setAttribute("role", "dialog");
          this.template = this.element;
          this.bg = createElement3("pswp__bg", "div", this.element);
          this.scrollWrap = createElement3("pswp__scroll-wrap", "section", this.element);
          this.container = createElement3("pswp__container", "div", this.scrollWrap);
          this.scrollWrap.setAttribute("aria-roledescription", "carousel");
          this.container.setAttribute("aria-live", "off");
          this.container.setAttribute("id", "pswp__items");
          this.mainScroll.appendHolders();
          this.ui = new UI(this);
          this.ui.init();
          (this.options.appendToEl || document.body).appendChild(this.element);
        }
        /**
         * Get position and dimensions of small thumbnail
         *   {x:,y:,w:}
         *
         * Height is optional (calculated based on the large image)
         *
         * @returns {Bounds | undefined}
         */
        getThumbBounds() {
          return getThumbBounds(this.currIndex, this.currSlide ? this.currSlide.data : this._initialItemData, this);
        }
        /**
         * If the PhotoSwipe can have continuous loop
         * @returns Boolean
         */
        canLoop() {
          return this.options.loop && this.getNumItems() > 2;
        }
        /**
         * @private
         * @param {PhotoSwipeOptions} options
         * @returns {PreparedPhotoSwipeOptions}
         */
        _prepareOptions(options) {
          if (window.matchMedia("(prefers-reduced-motion), (update: slow)").matches) {
            options.showHideAnimationType = "none";
            options.zoomAnimationDuration = 0;
          }
          return {
            ...defaultOptions2,
            ...options
          };
        }
      };
    }
  });

  // node_modules/apexcharts/dist/apexcharts.common.js
  var require_apexcharts_common = __commonJS({
    "node_modules/apexcharts/dist/apexcharts.common.js"(exports, module) {
      "use strict";
      function t2(t3, e3) {
        var i3 = Object.keys(t3);
        if (Object.getOwnPropertySymbols) {
          var a3 = Object.getOwnPropertySymbols(t3);
          e3 && (a3 = a3.filter(function(e4) {
            return Object.getOwnPropertyDescriptor(t3, e4).enumerable;
          })), i3.push.apply(i3, a3);
        }
        return i3;
      }
      function e2(e3) {
        for (var i3 = 1; i3 < arguments.length; i3++) {
          var a3 = null != arguments[i3] ? arguments[i3] : {};
          i3 % 2 ? t2(Object(a3), true).forEach(function(t3) {
            o2(e3, t3, a3[t3]);
          }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e3, Object.getOwnPropertyDescriptors(a3)) : t2(Object(a3)).forEach(function(t3) {
            Object.defineProperty(e3, t3, Object.getOwnPropertyDescriptor(a3, t3));
          });
        }
        return e3;
      }
      function i2(t3) {
        return i2 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t4) {
          return typeof t4;
        } : function(t4) {
          return t4 && "function" == typeof Symbol && t4.constructor === Symbol && t4 !== Symbol.prototype ? "symbol" : typeof t4;
        }, i2(t3);
      }
      function a2(t3, e3) {
        if (!(t3 instanceof e3))
          throw new TypeError("Cannot call a class as a function");
      }
      function s2(t3, e3) {
        for (var i3 = 0; i3 < e3.length; i3++) {
          var a3 = e3[i3];
          a3.enumerable = a3.enumerable || false, a3.configurable = true, "value" in a3 && (a3.writable = true), Object.defineProperty(t3, a3.key, a3);
        }
      }
      function r2(t3, e3, i3) {
        return e3 && s2(t3.prototype, e3), i3 && s2(t3, i3), t3;
      }
      function o2(t3, e3, i3) {
        return e3 in t3 ? Object.defineProperty(t3, e3, { value: i3, enumerable: true, configurable: true, writable: true }) : t3[e3] = i3, t3;
      }
      function n2(t3, e3) {
        if ("function" != typeof e3 && null !== e3)
          throw new TypeError("Super expression must either be null or a function");
        t3.prototype = Object.create(e3 && e3.prototype, { constructor: { value: t3, writable: true, configurable: true } }), e3 && h2(t3, e3);
      }
      function l2(t3) {
        return l2 = Object.setPrototypeOf ? Object.getPrototypeOf : function(t4) {
          return t4.__proto__ || Object.getPrototypeOf(t4);
        }, l2(t3);
      }
      function h2(t3, e3) {
        return h2 = Object.setPrototypeOf || function(t4, e4) {
          return t4.__proto__ = e4, t4;
        }, h2(t3, e3);
      }
      function c2(t3) {
        if (void 0 === t3)
          throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        return t3;
      }
      function d2(t3) {
        var e3 = function() {
          if ("undefined" == typeof Reflect || !Reflect.construct)
            return false;
          if (Reflect.construct.sham)
            return false;
          if ("function" == typeof Proxy)
            return true;
          try {
            return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
            })), true;
          } catch (t4) {
            return false;
          }
        }();
        return function() {
          var i3, a3 = l2(t3);
          if (e3) {
            var s3 = l2(this).constructor;
            i3 = Reflect.construct(a3, arguments, s3);
          } else
            i3 = a3.apply(this, arguments);
          return function(t4, e4) {
            if (e4 && ("object" == typeof e4 || "function" == typeof e4))
              return e4;
            if (void 0 !== e4)
              throw new TypeError("Derived constructors may only return object or undefined");
            return c2(t4);
          }(this, i3);
        };
      }
      function g2(t3, e3) {
        return function(t4) {
          if (Array.isArray(t4))
            return t4;
        }(t3) || function(t4, e4) {
          var i3 = null == t4 ? null : "undefined" != typeof Symbol && t4[Symbol.iterator] || t4["@@iterator"];
          if (null == i3)
            return;
          var a3, s3, r3 = [], o3 = true, n3 = false;
          try {
            for (i3 = i3.call(t4); !(o3 = (a3 = i3.next()).done) && (r3.push(a3.value), !e4 || r3.length !== e4); o3 = true)
              ;
          } catch (t5) {
            n3 = true, s3 = t5;
          } finally {
            try {
              o3 || null == i3.return || i3.return();
            } finally {
              if (n3)
                throw s3;
            }
          }
          return r3;
        }(t3, e3) || p2(t3, e3) || function() {
          throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
        }();
      }
      function u2(t3) {
        return function(t4) {
          if (Array.isArray(t4))
            return f2(t4);
        }(t3) || function(t4) {
          if ("undefined" != typeof Symbol && null != t4[Symbol.iterator] || null != t4["@@iterator"])
            return Array.from(t4);
        }(t3) || p2(t3) || function() {
          throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
        }();
      }
      function p2(t3, e3) {
        if (t3) {
          if ("string" == typeof t3)
            return f2(t3, e3);
          var i3 = Object.prototype.toString.call(t3).slice(8, -1);
          return "Object" === i3 && t3.constructor && (i3 = t3.constructor.name), "Map" === i3 || "Set" === i3 ? Array.from(t3) : "Arguments" === i3 || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(i3) ? f2(t3, e3) : void 0;
        }
      }
      function f2(t3, e3) {
        (null == e3 || e3 > t3.length) && (e3 = t3.length);
        for (var i3 = 0, a3 = new Array(e3); i3 < e3; i3++)
          a3[i3] = t3[i3];
        return a3;
      }
      var x2 = function() {
        function t3() {
          a2(this, t3);
        }
        return r2(t3, [{ key: "shadeRGBColor", value: function(t4, e3) {
          var i3 = e3.split(","), a3 = t4 < 0 ? 0 : 255, s3 = t4 < 0 ? -1 * t4 : t4, r3 = parseInt(i3[0].slice(4), 10), o3 = parseInt(i3[1], 10), n3 = parseInt(i3[2], 10);
          return "rgb(" + (Math.round((a3 - r3) * s3) + r3) + "," + (Math.round((a3 - o3) * s3) + o3) + "," + (Math.round((a3 - n3) * s3) + n3) + ")";
        } }, { key: "shadeHexColor", value: function(t4, e3) {
          var i3 = parseInt(e3.slice(1), 16), a3 = t4 < 0 ? 0 : 255, s3 = t4 < 0 ? -1 * t4 : t4, r3 = i3 >> 16, o3 = i3 >> 8 & 255, n3 = 255 & i3;
          return "#" + (16777216 + 65536 * (Math.round((a3 - r3) * s3) + r3) + 256 * (Math.round((a3 - o3) * s3) + o3) + (Math.round((a3 - n3) * s3) + n3)).toString(16).slice(1);
        } }, { key: "shadeColor", value: function(e3, i3) {
          return t3.isColorHex(i3) ? this.shadeHexColor(e3, i3) : this.shadeRGBColor(e3, i3);
        } }], [{ key: "bind", value: function(t4, e3) {
          return function() {
            return t4.apply(e3, arguments);
          };
        } }, { key: "isObject", value: function(t4) {
          return t4 && "object" === i2(t4) && !Array.isArray(t4) && null != t4;
        } }, { key: "is", value: function(t4, e3) {
          return Object.prototype.toString.call(e3) === "[object " + t4 + "]";
        } }, { key: "listToArray", value: function(t4) {
          var e3, i3 = [];
          for (e3 = 0; e3 < t4.length; e3++)
            i3[e3] = t4[e3];
          return i3;
        } }, { key: "extend", value: function(t4, e3) {
          var i3 = this;
          "function" != typeof Object.assign && (Object.assign = function(t5) {
            if (null == t5)
              throw new TypeError("Cannot convert undefined or null to object");
            for (var e4 = Object(t5), i4 = 1; i4 < arguments.length; i4++) {
              var a4 = arguments[i4];
              if (null != a4)
                for (var s3 in a4)
                  a4.hasOwnProperty(s3) && (e4[s3] = a4[s3]);
            }
            return e4;
          });
          var a3 = Object.assign({}, t4);
          return this.isObject(t4) && this.isObject(e3) && Object.keys(e3).forEach(function(s3) {
            i3.isObject(e3[s3]) && s3 in t4 ? a3[s3] = i3.extend(t4[s3], e3[s3]) : Object.assign(a3, o2({}, s3, e3[s3]));
          }), a3;
        } }, { key: "extendArray", value: function(e3, i3) {
          var a3 = [];
          return e3.map(function(e4) {
            a3.push(t3.extend(i3, e4));
          }), e3 = a3;
        } }, { key: "monthMod", value: function(t4) {
          return t4 % 12;
        } }, { key: "clone", value: function(e3) {
          if (t3.is("Array", e3)) {
            for (var a3 = [], s3 = 0; s3 < e3.length; s3++)
              a3[s3] = this.clone(e3[s3]);
            return a3;
          }
          if (t3.is("Null", e3))
            return null;
          if (t3.is("Date", e3))
            return e3;
          if ("object" === i2(e3)) {
            var r3 = {};
            for (var o3 in e3)
              e3.hasOwnProperty(o3) && (r3[o3] = this.clone(e3[o3]));
            return r3;
          }
          return e3;
        } }, { key: "log10", value: function(t4) {
          return Math.log(t4) / Math.LN10;
        } }, { key: "roundToBase10", value: function(t4) {
          return Math.pow(10, Math.floor(Math.log10(t4)));
        } }, { key: "roundToBase", value: function(t4, e3) {
          return Math.pow(e3, Math.floor(Math.log(t4) / Math.log(e3)));
        } }, { key: "parseNumber", value: function(t4) {
          return null === t4 ? t4 : parseFloat(t4);
        } }, { key: "stripNumber", value: function(t4) {
          var e3 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 2;
          return Number.isInteger(t4) ? t4 : parseFloat(t4.toPrecision(e3));
        } }, { key: "randomId", value: function() {
          return (Math.random() + 1).toString(36).substring(4);
        } }, { key: "noExponents", value: function(t4) {
          var e3 = String(t4).split(/[eE]/);
          if (1 === e3.length)
            return e3[0];
          var i3 = "", a3 = t4 < 0 ? "-" : "", s3 = e3[0].replace(".", ""), r3 = Number(e3[1]) + 1;
          if (r3 < 0) {
            for (i3 = a3 + "0."; r3++; )
              i3 += "0";
            return i3 + s3.replace(/^-/, "");
          }
          for (r3 -= s3.length; r3--; )
            i3 += "0";
          return s3 + i3;
        } }, { key: "getDimensions", value: function(t4) {
          var e3 = getComputedStyle(t4, null), i3 = t4.clientHeight, a3 = t4.clientWidth;
          return i3 -= parseFloat(e3.paddingTop) + parseFloat(e3.paddingBottom), [a3 -= parseFloat(e3.paddingLeft) + parseFloat(e3.paddingRight), i3];
        } }, { key: "getBoundingClientRect", value: function(t4) {
          var e3 = t4.getBoundingClientRect();
          return { top: e3.top, right: e3.right, bottom: e3.bottom, left: e3.left, width: t4.clientWidth, height: t4.clientHeight, x: e3.left, y: e3.top };
        } }, { key: "getLargestStringFromArr", value: function(t4) {
          return t4.reduce(function(t5, e3) {
            return Array.isArray(e3) && (e3 = e3.reduce(function(t6, e4) {
              return t6.length > e4.length ? t6 : e4;
            })), t5.length > e3.length ? t5 : e3;
          }, 0);
        } }, { key: "hexToRgba", value: function() {
          var t4 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : "#999999", e3 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0.6;
          "#" !== t4.substring(0, 1) && (t4 = "#999999");
          var i3 = t4.replace("#", "");
          i3 = i3.match(new RegExp("(.{" + i3.length / 3 + "})", "g"));
          for (var a3 = 0; a3 < i3.length; a3++)
            i3[a3] = parseInt(1 === i3[a3].length ? i3[a3] + i3[a3] : i3[a3], 16);
          return void 0 !== e3 && i3.push(e3), "rgba(" + i3.join(",") + ")";
        } }, { key: "getOpacityFromRGBA", value: function(t4) {
          return parseFloat(t4.replace(/^.*,(.+)\)/, "$1"));
        } }, { key: "rgb2hex", value: function(t4) {
          return (t4 = t4.match(/^rgba?[\s+]?\([\s+]?(\d+)[\s+]?,[\s+]?(\d+)[\s+]?,[\s+]?(\d+)[\s+]?/i)) && 4 === t4.length ? "#" + ("0" + parseInt(t4[1], 10).toString(16)).slice(-2) + ("0" + parseInt(t4[2], 10).toString(16)).slice(-2) + ("0" + parseInt(t4[3], 10).toString(16)).slice(-2) : "";
        } }, { key: "isColorHex", value: function(t4) {
          return /(^#[0-9A-F]{6}$)|(^#[0-9A-F]{3}$)|(^#[0-9A-F]{8}$)/i.test(t4);
        } }, { key: "getPolygonPos", value: function(t4, e3) {
          for (var i3 = [], a3 = 2 * Math.PI / e3, s3 = 0; s3 < e3; s3++) {
            var r3 = {};
            r3.x = t4 * Math.sin(s3 * a3), r3.y = -t4 * Math.cos(s3 * a3), i3.push(r3);
          }
          return i3;
        } }, { key: "polarToCartesian", value: function(t4, e3, i3, a3) {
          var s3 = (a3 - 90) * Math.PI / 180;
          return { x: t4 + i3 * Math.cos(s3), y: e3 + i3 * Math.sin(s3) };
        } }, { key: "escapeString", value: function(t4) {
          var e3 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "x", i3 = t4.toString().slice();
          return i3 = i3.replace(/[` ~!@#$%^&*()|+\=?;:'",.<>{}[\]\\/]/gi, e3);
        } }, { key: "negToZero", value: function(t4) {
          return t4 < 0 ? 0 : t4;
        } }, { key: "moveIndexInArray", value: function(t4, e3, i3) {
          if (i3 >= t4.length)
            for (var a3 = i3 - t4.length + 1; a3--; )
              t4.push(void 0);
          return t4.splice(i3, 0, t4.splice(e3, 1)[0]), t4;
        } }, { key: "extractNumber", value: function(t4) {
          return parseFloat(t4.replace(/[^\d.]*/g, ""));
        } }, { key: "findAncestor", value: function(t4, e3) {
          for (; (t4 = t4.parentElement) && !t4.classList.contains(e3); )
            ;
          return t4;
        } }, { key: "setELstyles", value: function(t4, e3) {
          for (var i3 in e3)
            e3.hasOwnProperty(i3) && (t4.style.key = e3[i3]);
        } }, { key: "isNumber", value: function(t4) {
          return !isNaN(t4) && parseFloat(Number(t4)) === t4 && !isNaN(parseInt(t4, 10));
        } }, { key: "isFloat", value: function(t4) {
          return Number(t4) === t4 && t4 % 1 != 0;
        } }, { key: "isSafari", value: function() {
          return /^((?!chrome|android).)*safari/i.test(navigator.userAgent);
        } }, { key: "isFirefox", value: function() {
          return navigator.userAgent.toLowerCase().indexOf("firefox") > -1;
        } }, { key: "isIE11", value: function() {
          if (-1 !== window.navigator.userAgent.indexOf("MSIE") || window.navigator.appVersion.indexOf("Trident/") > -1)
            return true;
        } }, { key: "isIE", value: function() {
          var t4 = window.navigator.userAgent, e3 = t4.indexOf("MSIE ");
          if (e3 > 0)
            return parseInt(t4.substring(e3 + 5, t4.indexOf(".", e3)), 10);
          if (t4.indexOf("Trident/") > 0) {
            var i3 = t4.indexOf("rv:");
            return parseInt(t4.substring(i3 + 3, t4.indexOf(".", i3)), 10);
          }
          var a3 = t4.indexOf("Edge/");
          return a3 > 0 && parseInt(t4.substring(a3 + 5, t4.indexOf(".", a3)), 10);
        } }]), t3;
      }();
      var b2 = function() {
        function t3(e3) {
          a2(this, t3), this.ctx = e3, this.w = e3.w, this.setEasingFunctions();
        }
        return r2(t3, [{ key: "setEasingFunctions", value: function() {
          var t4;
          if (!this.w.globals.easing) {
            switch (this.w.config.chart.animations.easing) {
              case "linear":
                t4 = "-";
                break;
              case "easein":
                t4 = "<";
                break;
              case "easeout":
                t4 = ">";
                break;
              case "easeinout":
              default:
                t4 = "<>";
                break;
              case "swing":
                t4 = function(t5) {
                  var e3 = 1.70158;
                  return (t5 -= 1) * t5 * ((e3 + 1) * t5 + e3) + 1;
                };
                break;
              case "bounce":
                t4 = function(t5) {
                  return t5 < 1 / 2.75 ? 7.5625 * t5 * t5 : t5 < 2 / 2.75 ? 7.5625 * (t5 -= 1.5 / 2.75) * t5 + 0.75 : t5 < 2.5 / 2.75 ? 7.5625 * (t5 -= 2.25 / 2.75) * t5 + 0.9375 : 7.5625 * (t5 -= 2.625 / 2.75) * t5 + 0.984375;
                };
                break;
              case "elastic":
                t4 = function(t5) {
                  return t5 === !!t5 ? t5 : Math.pow(2, -10 * t5) * Math.sin((t5 - 0.075) * (2 * Math.PI) / 0.3) + 1;
                };
            }
            this.w.globals.easing = t4;
          }
        } }, { key: "animateLine", value: function(t4, e3, i3, a3) {
          t4.attr(e3).animate(a3).attr(i3);
        } }, { key: "animateMarker", value: function(t4, e3, i3, a3, s3, r3) {
          e3 || (e3 = 0), t4.attr({ r: e3, width: e3, height: e3 }).animate(a3, s3).attr({ r: i3, width: i3.width, height: i3.height }).afterAll(function() {
            r3();
          });
        } }, { key: "animateCircle", value: function(t4, e3, i3, a3, s3) {
          t4.attr({ r: e3.r, cx: e3.cx, cy: e3.cy }).animate(a3, s3).attr({ r: i3.r, cx: i3.cx, cy: i3.cy });
        } }, { key: "animateRect", value: function(t4, e3, i3, a3, s3) {
          t4.attr(e3).animate(a3).attr(i3).afterAll(function() {
            return s3();
          });
        } }, { key: "animatePathsGradually", value: function(t4) {
          var e3 = t4.el, i3 = t4.realIndex, a3 = t4.j, s3 = t4.fill, r3 = t4.pathFrom, o3 = t4.pathTo, n3 = t4.speed, l3 = t4.delay, h3 = this.w, c3 = 0;
          h3.config.chart.animations.animateGradually.enabled && (c3 = h3.config.chart.animations.animateGradually.delay), h3.config.chart.animations.dynamicAnimation.enabled && h3.globals.dataChanged && "bar" !== h3.config.chart.type && (c3 = 0), this.morphSVG(e3, i3, a3, "line" !== h3.config.chart.type || h3.globals.comboCharts ? s3 : "stroke", r3, o3, n3, l3 * c3);
        } }, { key: "showDelayedElements", value: function() {
          this.w.globals.delayedElements.forEach(function(t4) {
            var e3 = t4.el;
            e3.classList.remove("apexcharts-element-hidden"), e3.classList.add("apexcharts-hidden-element-shown");
          });
        } }, { key: "animationCompleted", value: function(t4) {
          var e3 = this.w;
          e3.globals.animationEnded || (e3.globals.animationEnded = true, this.showDelayedElements(), "function" == typeof e3.config.chart.events.animationEnd && e3.config.chart.events.animationEnd(this.ctx, { el: t4, w: e3 }));
        } }, { key: "morphSVG", value: function(t4, e3, i3, a3, s3, r3, o3, n3) {
          var l3 = this, h3 = this.w;
          s3 || (s3 = t4.attr("pathFrom")), r3 || (r3 = t4.attr("pathTo"));
          var c3 = function(t5) {
            return "radar" === h3.config.chart.type && (o3 = 1), "M 0 ".concat(h3.globals.gridHeight);
          };
          (!s3 || s3.indexOf("undefined") > -1 || s3.indexOf("NaN") > -1) && (s3 = c3()), (!r3 || r3.indexOf("undefined") > -1 || r3.indexOf("NaN") > -1) && (r3 = c3()), h3.globals.shouldAnimate || (o3 = 1), t4.plot(s3).animate(1, h3.globals.easing, n3).plot(s3).animate(o3, h3.globals.easing, n3).plot(r3).afterAll(function() {
            x2.isNumber(i3) ? i3 === h3.globals.series[h3.globals.maxValsInArrayIndex].length - 2 && h3.globals.shouldAnimate && l3.animationCompleted(t4) : "none" !== a3 && h3.globals.shouldAnimate && (!h3.globals.comboCharts && e3 === h3.globals.series.length - 1 || h3.globals.comboCharts) && l3.animationCompleted(t4), l3.showDelayedElements();
          });
        } }]), t3;
      }();
      var v2 = function() {
        function t3(e3) {
          a2(this, t3), this.ctx = e3, this.w = e3.w;
        }
        return r2(t3, [{ key: "getDefaultFilter", value: function(t4, e3) {
          var i3 = this.w;
          t4.unfilter(true), new window.SVG.Filter().size("120%", "180%", "-5%", "-40%"), "none" !== i3.config.states.normal.filter ? this.applyFilter(t4, e3, i3.config.states.normal.filter.type, i3.config.states.normal.filter.value) : i3.config.chart.dropShadow.enabled && this.dropShadow(t4, i3.config.chart.dropShadow, e3);
        } }, { key: "addNormalFilter", value: function(t4, e3) {
          var i3 = this.w;
          i3.config.chart.dropShadow.enabled && !t4.node.classList.contains("apexcharts-marker") && this.dropShadow(t4, i3.config.chart.dropShadow, e3);
        } }, { key: "addLightenFilter", value: function(t4, e3, i3) {
          var a3 = this, s3 = this.w, r3 = i3.intensity;
          t4.unfilter(true);
          new window.SVG.Filter();
          t4.filter(function(t5) {
            var i4 = s3.config.chart.dropShadow;
            (i4.enabled ? a3.addShadow(t5, e3, i4) : t5).componentTransfer({ rgb: { type: "linear", slope: 1.5, intercept: r3 } });
          }), t4.filterer.node.setAttribute("filterUnits", "userSpaceOnUse"), this._scaleFilterSize(t4.filterer.node);
        } }, { key: "addDarkenFilter", value: function(t4, e3, i3) {
          var a3 = this, s3 = this.w, r3 = i3.intensity;
          t4.unfilter(true);
          new window.SVG.Filter();
          t4.filter(function(t5) {
            var i4 = s3.config.chart.dropShadow;
            (i4.enabled ? a3.addShadow(t5, e3, i4) : t5).componentTransfer({ rgb: { type: "linear", slope: r3 } });
          }), t4.filterer.node.setAttribute("filterUnits", "userSpaceOnUse"), this._scaleFilterSize(t4.filterer.node);
        } }, { key: "applyFilter", value: function(t4, e3, i3) {
          var a3 = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : 0.5;
          switch (i3) {
            case "none":
              this.addNormalFilter(t4, e3);
              break;
            case "lighten":
              this.addLightenFilter(t4, e3, { intensity: a3 });
              break;
            case "darken":
              this.addDarkenFilter(t4, e3, { intensity: a3 });
          }
        } }, { key: "addShadow", value: function(t4, e3, i3) {
          var a3 = i3.blur, s3 = i3.top, r3 = i3.left, o3 = i3.color, n3 = i3.opacity, l3 = t4.flood(Array.isArray(o3) ? o3[e3] : o3, n3).composite(t4.sourceAlpha, "in").offset(r3, s3).gaussianBlur(a3).merge(t4.source);
          return t4.blend(t4.source, l3);
        } }, { key: "dropShadow", value: function(t4, e3) {
          var i3 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 0, a3 = e3.top, s3 = e3.left, r3 = e3.blur, o3 = e3.color, n3 = e3.opacity, l3 = e3.noUserSpaceOnUse, h3 = this.w;
          return t4.unfilter(true), x2.isIE() && "radialBar" === h3.config.chart.type || (o3 = Array.isArray(o3) ? o3[i3] : o3, t4.filter(function(t5) {
            var e4 = null;
            e4 = x2.isSafari() || x2.isFirefox() || x2.isIE() ? t5.flood(o3, n3).composite(t5.sourceAlpha, "in").offset(s3, a3).gaussianBlur(r3) : t5.flood(o3, n3).composite(t5.sourceAlpha, "in").offset(s3, a3).gaussianBlur(r3).merge(t5.source), t5.blend(t5.source, e4);
          }), l3 || t4.filterer.node.setAttribute("filterUnits", "userSpaceOnUse"), this._scaleFilterSize(t4.filterer.node)), t4;
        } }, { key: "setSelectionFilter", value: function(t4, e3, i3) {
          var a3 = this.w;
          if (void 0 !== a3.globals.selectedDataPoints[e3] && a3.globals.selectedDataPoints[e3].indexOf(i3) > -1) {
            t4.node.setAttribute("selected", true);
            var s3 = a3.config.states.active.filter;
            "none" !== s3 && this.applyFilter(t4, e3, s3.type, s3.value);
          }
        } }, { key: "_scaleFilterSize", value: function(t4) {
          !function(e3) {
            for (var i3 in e3)
              e3.hasOwnProperty(i3) && t4.setAttribute(i3, e3[i3]);
          }({ width: "200%", height: "200%", x: "-50%", y: "-50%" });
        } }]), t3;
      }();
      var m2 = function() {
        function t3(e3) {
          a2(this, t3), this.ctx = e3, this.w = e3.w;
        }
        return r2(t3, [{ key: "roundPathCorners", value: function(t4, e3) {
          function i3(t5, e4, i4) {
            var s4 = e4.x - t5.x, r4 = e4.y - t5.y, o4 = Math.sqrt(s4 * s4 + r4 * r4);
            return a3(t5, e4, Math.min(1, i4 / o4));
          }
          function a3(t5, e4, i4) {
            return { x: t5.x + (e4.x - t5.x) * i4, y: t5.y + (e4.y - t5.y) * i4 };
          }
          function s3(t5, e4) {
            t5.length > 2 && (t5[t5.length - 2] = e4.x, t5[t5.length - 1] = e4.y);
          }
          function r3(t5) {
            return { x: parseFloat(t5[t5.length - 2]), y: parseFloat(t5[t5.length - 1]) };
          }
          t4.indexOf("NaN") > -1 && (t4 = "");
          var o3 = t4.split(/[,\s]/).reduce(function(t5, e4) {
            var i4 = e4.match("([a-zA-Z])(.+)");
            return i4 ? (t5.push(i4[1]), t5.push(i4[2])) : t5.push(e4), t5;
          }, []).reduce(function(t5, e4) {
            return parseFloat(e4) == e4 && t5.length ? t5[t5.length - 1].push(e4) : t5.push([e4]), t5;
          }, []), n3 = [];
          if (o3.length > 1) {
            var l3 = r3(o3[0]), h3 = null;
            "Z" == o3[o3.length - 1][0] && o3[0].length > 2 && (h3 = ["L", l3.x, l3.y], o3[o3.length - 1] = h3), n3.push(o3[0]);
            for (var c3 = 1; c3 < o3.length; c3++) {
              var d3 = n3[n3.length - 1], g3 = o3[c3], u3 = g3 == h3 ? o3[1] : o3[c3 + 1];
              if (u3 && d3 && d3.length > 2 && "L" == g3[0] && u3.length > 2 && "L" == u3[0]) {
                var p3, f3, x3 = r3(d3), b3 = r3(g3), v3 = r3(u3);
                p3 = i3(b3, x3, e3), f3 = i3(b3, v3, e3), s3(g3, p3), g3.origPoint = b3, n3.push(g3);
                var m3 = a3(p3, b3, 0.5), y3 = a3(b3, f3, 0.5), w3 = ["C", m3.x, m3.y, y3.x, y3.y, f3.x, f3.y];
                w3.origPoint = b3, n3.push(w3);
              } else
                n3.push(g3);
            }
            if (h3) {
              var k3 = r3(n3[n3.length - 1]);
              n3.push(["Z"]), s3(n3[0], k3);
            }
          } else
            n3 = o3;
          return n3.reduce(function(t5, e4) {
            return t5 + e4.join(" ") + " ";
          }, "");
        } }, { key: "drawLine", value: function(t4, e3, i3, a3) {
          var s3 = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : "#a8a8a8", r3 = arguments.length > 5 && void 0 !== arguments[5] ? arguments[5] : 0, o3 = arguments.length > 6 && void 0 !== arguments[6] ? arguments[6] : null, n3 = arguments.length > 7 && void 0 !== arguments[7] ? arguments[7] : "butt";
          return this.w.globals.dom.Paper.line().attr({ x1: t4, y1: e3, x2: i3, y2: a3, stroke: s3, "stroke-dasharray": r3, "stroke-width": o3, "stroke-linecap": n3 });
        } }, { key: "drawRect", value: function() {
          var t4 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0, e3 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0, i3 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 0, a3 = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : 0, s3 = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : 0, r3 = arguments.length > 5 && void 0 !== arguments[5] ? arguments[5] : "#fefefe", o3 = arguments.length > 6 && void 0 !== arguments[6] ? arguments[6] : 1, n3 = arguments.length > 7 && void 0 !== arguments[7] ? arguments[7] : null, l3 = arguments.length > 8 && void 0 !== arguments[8] ? arguments[8] : null, h3 = arguments.length > 9 && void 0 !== arguments[9] ? arguments[9] : 0, c3 = this.w.globals.dom.Paper.rect();
          return c3.attr({ x: t4, y: e3, width: i3 > 0 ? i3 : 0, height: a3 > 0 ? a3 : 0, rx: s3, ry: s3, opacity: o3, "stroke-width": null !== n3 ? n3 : 0, stroke: null !== l3 ? l3 : "none", "stroke-dasharray": h3 }), c3.node.setAttribute("fill", r3), c3;
        } }, { key: "drawPolygon", value: function(t4) {
          var e3 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "#e1e1e1", i3 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 1, a3 = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : "none";
          return this.w.globals.dom.Paper.polygon(t4).attr({ fill: a3, stroke: e3, "stroke-width": i3 });
        } }, { key: "drawCircle", value: function(t4) {
          var e3 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : null;
          t4 < 0 && (t4 = 0);
          var i3 = this.w.globals.dom.Paper.circle(2 * t4);
          return null !== e3 && i3.attr(e3), i3;
        } }, { key: "drawPath", value: function(t4) {
          var e3 = t4.d, i3 = void 0 === e3 ? "" : e3, a3 = t4.stroke, s3 = void 0 === a3 ? "#a8a8a8" : a3, r3 = t4.strokeWidth, o3 = void 0 === r3 ? 1 : r3, n3 = t4.fill, l3 = t4.fillOpacity, h3 = void 0 === l3 ? 1 : l3, c3 = t4.strokeOpacity, d3 = void 0 === c3 ? 1 : c3, g3 = t4.classes, u3 = t4.strokeLinecap, p3 = void 0 === u3 ? null : u3, f3 = t4.strokeDashArray, x3 = void 0 === f3 ? 0 : f3, b3 = this.w;
          return null === p3 && (p3 = b3.config.stroke.lineCap), (i3.indexOf("undefined") > -1 || i3.indexOf("NaN") > -1) && (i3 = "M 0 ".concat(b3.globals.gridHeight)), b3.globals.dom.Paper.path(i3).attr({ fill: n3, "fill-opacity": h3, stroke: s3, "stroke-opacity": d3, "stroke-linecap": p3, "stroke-width": o3, "stroke-dasharray": x3, class: g3 });
        } }, { key: "group", value: function() {
          var t4 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null, e3 = this.w.globals.dom.Paper.group();
          return null !== t4 && e3.attr(t4), e3;
        } }, { key: "move", value: function(t4, e3) {
          var i3 = ["M", t4, e3].join(" ");
          return i3;
        } }, { key: "line", value: function(t4, e3) {
          var i3 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : null, a3 = null;
          return null === i3 ? a3 = [" L", t4, e3].join(" ") : "H" === i3 ? a3 = [" H", t4].join(" ") : "V" === i3 && (a3 = [" V", e3].join(" ")), a3;
        } }, { key: "curve", value: function(t4, e3, i3, a3, s3, r3) {
          var o3 = ["C", t4, e3, i3, a3, s3, r3].join(" ");
          return o3;
        } }, { key: "quadraticCurve", value: function(t4, e3, i3, a3) {
          return ["Q", t4, e3, i3, a3].join(" ");
        } }, { key: "arc", value: function(t4, e3, i3, a3, s3, r3, o3) {
          var n3 = "A";
          arguments.length > 7 && void 0 !== arguments[7] && arguments[7] && (n3 = "a");
          var l3 = [n3, t4, e3, i3, a3, s3, r3, o3].join(" ");
          return l3;
        } }, { key: "renderPaths", value: function(t4) {
          var i3, a3 = t4.j, s3 = t4.realIndex, r3 = t4.pathFrom, o3 = t4.pathTo, n3 = t4.stroke, l3 = t4.strokeWidth, h3 = t4.strokeLinecap, c3 = t4.fill, d3 = t4.animationDelay, g3 = t4.initialSpeed, u3 = t4.dataChangeSpeed, p3 = t4.className, f3 = t4.shouldClipToGrid, x3 = void 0 === f3 || f3, m3 = t4.bindEventsOnPaths, y3 = void 0 === m3 || m3, w3 = t4.drawShadow, k3 = void 0 === w3 || w3, A3 = this.w, S3 = new v2(this.ctx), C3 = new b2(this.ctx), L3 = this.w.config.chart.animations.enabled, P3 = L3 && this.w.config.chart.animations.dynamicAnimation.enabled, I3 = !!(L3 && !A3.globals.resized || P3 && A3.globals.dataChanged && A3.globals.shouldAnimate);
          I3 ? i3 = r3 : (i3 = o3, A3.globals.animationEnded = true);
          var T3 = A3.config.stroke.dashArray, M3 = 0;
          M3 = Array.isArray(T3) ? T3[s3] : A3.config.stroke.dashArray;
          var z3 = this.drawPath({ d: i3, stroke: n3, strokeWidth: l3, fill: c3, fillOpacity: 1, classes: p3, strokeLinecap: h3, strokeDashArray: M3 });
          if (z3.attr("index", s3), x3 && z3.attr({ "clip-path": "url(#gridRectMask".concat(A3.globals.cuid, ")") }), "none" !== A3.config.states.normal.filter.type)
            S3.getDefaultFilter(z3, s3);
          else if (A3.config.chart.dropShadow.enabled && k3 && (!A3.config.chart.dropShadow.enabledOnSeries || A3.config.chart.dropShadow.enabledOnSeries && -1 !== A3.config.chart.dropShadow.enabledOnSeries.indexOf(s3))) {
            var X3 = A3.config.chart.dropShadow;
            S3.dropShadow(z3, X3, s3);
          }
          y3 && (z3.node.addEventListener("mouseenter", this.pathMouseEnter.bind(this, z3)), z3.node.addEventListener("mouseleave", this.pathMouseLeave.bind(this, z3)), z3.node.addEventListener("mousedown", this.pathMouseDown.bind(this, z3))), z3.attr({ pathTo: o3, pathFrom: r3 });
          var E3 = { el: z3, j: a3, realIndex: s3, pathFrom: r3, pathTo: o3, fill: c3, strokeWidth: l3, delay: d3 };
          return !L3 || A3.globals.resized || A3.globals.dataChanged ? !A3.globals.resized && A3.globals.dataChanged || C3.showDelayedElements() : C3.animatePathsGradually(e2(e2({}, E3), {}, { speed: g3 })), A3.globals.dataChanged && P3 && I3 && C3.animatePathsGradually(e2(e2({}, E3), {}, { speed: u3 })), z3;
        } }, { key: "drawPattern", value: function(t4, e3, i3) {
          var a3 = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : "#a8a8a8", s3 = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : 0;
          return this.w.globals.dom.Paper.pattern(e3, i3, function(r3) {
            "horizontalLines" === t4 ? r3.line(0, 0, i3, 0).stroke({ color: a3, width: s3 + 1 }) : "verticalLines" === t4 ? r3.line(0, 0, 0, e3).stroke({ color: a3, width: s3 + 1 }) : "slantedLines" === t4 ? r3.line(0, 0, e3, i3).stroke({ color: a3, width: s3 }) : "squares" === t4 ? r3.rect(e3, i3).fill("none").stroke({ color: a3, width: s3 }) : "circles" === t4 && r3.circle(e3).fill("none").stroke({ color: a3, width: s3 });
          });
        } }, { key: "drawGradient", value: function(t4, e3, i3, a3, s3) {
          var r3, o3 = arguments.length > 5 && void 0 !== arguments[5] ? arguments[5] : null, n3 = arguments.length > 6 && void 0 !== arguments[6] ? arguments[6] : null, l3 = arguments.length > 7 && void 0 !== arguments[7] ? arguments[7] : null, h3 = arguments.length > 8 && void 0 !== arguments[8] ? arguments[8] : 0, c3 = this.w;
          e3.length < 9 && 0 === e3.indexOf("#") && (e3 = x2.hexToRgba(e3, a3)), i3.length < 9 && 0 === i3.indexOf("#") && (i3 = x2.hexToRgba(i3, s3));
          var d3 = 0, g3 = 1, u3 = 1, p3 = null;
          null !== n3 && (d3 = void 0 !== n3[0] ? n3[0] / 100 : 0, g3 = void 0 !== n3[1] ? n3[1] / 100 : 1, u3 = void 0 !== n3[2] ? n3[2] / 100 : 1, p3 = void 0 !== n3[3] ? n3[3] / 100 : null);
          var f3 = !("donut" !== c3.config.chart.type && "pie" !== c3.config.chart.type && "polarArea" !== c3.config.chart.type && "bubble" !== c3.config.chart.type);
          if (r3 = null === l3 || 0 === l3.length ? c3.globals.dom.Paper.gradient(f3 ? "radial" : "linear", function(t5) {
            t5.at(d3, e3, a3), t5.at(g3, i3, s3), t5.at(u3, i3, s3), null !== p3 && t5.at(p3, e3, a3);
          }) : c3.globals.dom.Paper.gradient(f3 ? "radial" : "linear", function(t5) {
            (Array.isArray(l3[h3]) ? l3[h3] : l3).forEach(function(e4) {
              t5.at(e4.offset / 100, e4.color, e4.opacity);
            });
          }), f3) {
            var b3 = c3.globals.gridWidth / 2, v3 = c3.globals.gridHeight / 2;
            "bubble" !== c3.config.chart.type ? r3.attr({ gradientUnits: "userSpaceOnUse", cx: b3, cy: v3, r: o3 }) : r3.attr({ cx: 0.5, cy: 0.5, r: 0.8, fx: 0.2, fy: 0.2 });
          } else
            "vertical" === t4 ? r3.from(0, 0).to(0, 1) : "diagonal" === t4 ? r3.from(0, 0).to(1, 1) : "horizontal" === t4 ? r3.from(0, 1).to(1, 1) : "diagonal2" === t4 && r3.from(1, 0).to(0, 1);
          return r3;
        } }, { key: "getTextBasedOnMaxWidth", value: function(t4) {
          var e3 = t4.text, i3 = t4.maxWidth, a3 = t4.fontSize, s3 = t4.fontFamily, r3 = this.getTextRects(e3, a3, s3), o3 = r3.width / e3.length, n3 = Math.floor(i3 / o3);
          return i3 < r3.width ? e3.slice(0, n3 - 3) + "..." : e3;
        } }, { key: "drawText", value: function(t4) {
          var i3 = this, a3 = t4.x, s3 = t4.y, r3 = t4.text, o3 = t4.textAnchor, n3 = t4.fontSize, l3 = t4.fontFamily, h3 = t4.fontWeight, c3 = t4.foreColor, d3 = t4.opacity, g3 = t4.maxWidth, u3 = t4.cssClass, p3 = void 0 === u3 ? "" : u3, f3 = t4.isPlainText, x3 = void 0 === f3 || f3, b3 = t4.dominantBaseline, v3 = void 0 === b3 ? "auto" : b3, m3 = this.w;
          void 0 === r3 && (r3 = "");
          var y3 = r3;
          o3 || (o3 = "start"), c3 && c3.length || (c3 = m3.config.chart.foreColor), l3 = l3 || m3.config.chart.fontFamily, h3 = h3 || "regular";
          var w3, k3 = { maxWidth: g3, fontSize: n3 = n3 || "11px", fontFamily: l3 };
          return Array.isArray(r3) ? w3 = m3.globals.dom.Paper.text(function(t5) {
            for (var a4 = 0; a4 < r3.length; a4++)
              y3 = r3[a4], g3 && (y3 = i3.getTextBasedOnMaxWidth(e2({ text: r3[a4] }, k3))), 0 === a4 ? t5.tspan(y3) : t5.tspan(y3).newLine();
          }) : (g3 && (y3 = this.getTextBasedOnMaxWidth(e2({ text: r3 }, k3))), w3 = x3 ? m3.globals.dom.Paper.plain(r3) : m3.globals.dom.Paper.text(function(t5) {
            return t5.tspan(y3);
          })), w3.attr({ x: a3, y: s3, "text-anchor": o3, "dominant-baseline": v3, "font-size": n3, "font-family": l3, "font-weight": h3, fill: c3, class: "apexcharts-text " + p3 }), w3.node.style.fontFamily = l3, w3.node.style.opacity = d3, w3;
        } }, { key: "drawMarker", value: function(t4, e3, i3) {
          t4 = t4 || 0;
          var a3 = i3.pSize || 0, s3 = null;
          if ("square" === i3.shape || "rect" === i3.shape) {
            var r3 = void 0 === i3.pRadius ? a3 / 2 : i3.pRadius;
            null !== e3 && a3 || (a3 = 0, r3 = 0);
            var o3 = 1.2 * a3 + r3, n3 = this.drawRect(o3, o3, o3, o3, r3);
            n3.attr({ x: t4 - o3 / 2, y: e3 - o3 / 2, cx: t4, cy: e3, class: i3.class ? i3.class : "", fill: i3.pointFillColor, "fill-opacity": i3.pointFillOpacity ? i3.pointFillOpacity : 1, stroke: i3.pointStrokeColor, "stroke-width": i3.pointStrokeWidth ? i3.pointStrokeWidth : 0, "stroke-opacity": i3.pointStrokeOpacity ? i3.pointStrokeOpacity : 1 }), s3 = n3;
          } else
            "circle" !== i3.shape && i3.shape || (x2.isNumber(e3) || (a3 = 0, e3 = 0), s3 = this.drawCircle(a3, { cx: t4, cy: e3, class: i3.class ? i3.class : "", stroke: i3.pointStrokeColor, fill: i3.pointFillColor, "fill-opacity": i3.pointFillOpacity ? i3.pointFillOpacity : 1, "stroke-width": i3.pointStrokeWidth ? i3.pointStrokeWidth : 0, "stroke-opacity": i3.pointStrokeOpacity ? i3.pointStrokeOpacity : 1 }));
          return s3;
        } }, { key: "pathMouseEnter", value: function(t4, e3) {
          var i3 = this.w, a3 = new v2(this.ctx), s3 = parseInt(t4.node.getAttribute("index"), 10), r3 = parseInt(t4.node.getAttribute("j"), 10);
          if ("function" == typeof i3.config.chart.events.dataPointMouseEnter && i3.config.chart.events.dataPointMouseEnter(e3, this.ctx, { seriesIndex: s3, dataPointIndex: r3, w: i3 }), this.ctx.events.fireEvent("dataPointMouseEnter", [e3, this.ctx, { seriesIndex: s3, dataPointIndex: r3, w: i3 }]), ("none" === i3.config.states.active.filter.type || "true" !== t4.node.getAttribute("selected")) && "none" !== i3.config.states.hover.filter.type && !i3.globals.isTouchDevice) {
            var o3 = i3.config.states.hover.filter;
            a3.applyFilter(t4, s3, o3.type, o3.value);
          }
        } }, { key: "pathMouseLeave", value: function(t4, e3) {
          var i3 = this.w, a3 = new v2(this.ctx), s3 = parseInt(t4.node.getAttribute("index"), 10), r3 = parseInt(t4.node.getAttribute("j"), 10);
          "function" == typeof i3.config.chart.events.dataPointMouseLeave && i3.config.chart.events.dataPointMouseLeave(e3, this.ctx, { seriesIndex: s3, dataPointIndex: r3, w: i3 }), this.ctx.events.fireEvent("dataPointMouseLeave", [e3, this.ctx, { seriesIndex: s3, dataPointIndex: r3, w: i3 }]), "none" !== i3.config.states.active.filter.type && "true" === t4.node.getAttribute("selected") || "none" !== i3.config.states.hover.filter.type && a3.getDefaultFilter(t4, s3);
        } }, { key: "pathMouseDown", value: function(t4, e3) {
          var i3 = this.w, a3 = new v2(this.ctx), s3 = parseInt(t4.node.getAttribute("index"), 10), r3 = parseInt(t4.node.getAttribute("j"), 10), o3 = "false";
          if ("true" === t4.node.getAttribute("selected")) {
            if (t4.node.setAttribute("selected", "false"), i3.globals.selectedDataPoints[s3].indexOf(r3) > -1) {
              var n3 = i3.globals.selectedDataPoints[s3].indexOf(r3);
              i3.globals.selectedDataPoints[s3].splice(n3, 1);
            }
          } else {
            if (!i3.config.states.active.allowMultipleDataPointsSelection && i3.globals.selectedDataPoints.length > 0) {
              i3.globals.selectedDataPoints = [];
              var l3 = i3.globals.dom.Paper.select(".apexcharts-series path").members, h3 = i3.globals.dom.Paper.select(".apexcharts-series circle, .apexcharts-series rect").members, c3 = function(t5) {
                Array.prototype.forEach.call(t5, function(t6) {
                  t6.node.setAttribute("selected", "false"), a3.getDefaultFilter(t6, s3);
                });
              };
              c3(l3), c3(h3);
            }
            t4.node.setAttribute("selected", "true"), o3 = "true", void 0 === i3.globals.selectedDataPoints[s3] && (i3.globals.selectedDataPoints[s3] = []), i3.globals.selectedDataPoints[s3].push(r3);
          }
          if ("true" === o3) {
            var d3 = i3.config.states.active.filter;
            if ("none" !== d3)
              a3.applyFilter(t4, s3, d3.type, d3.value);
            else if ("none" !== i3.config.states.hover.filter && !i3.globals.isTouchDevice) {
              var g3 = i3.config.states.hover.filter;
              a3.applyFilter(t4, s3, g3.type, g3.value);
            }
          } else if ("none" !== i3.config.states.active.filter.type)
            if ("none" === i3.config.states.hover.filter.type || i3.globals.isTouchDevice)
              a3.getDefaultFilter(t4, s3);
            else {
              g3 = i3.config.states.hover.filter;
              a3.applyFilter(t4, s3, g3.type, g3.value);
            }
          "function" == typeof i3.config.chart.events.dataPointSelection && i3.config.chart.events.dataPointSelection(e3, this.ctx, { selectedDataPoints: i3.globals.selectedDataPoints, seriesIndex: s3, dataPointIndex: r3, w: i3 }), e3 && this.ctx.events.fireEvent("dataPointSelection", [e3, this.ctx, { selectedDataPoints: i3.globals.selectedDataPoints, seriesIndex: s3, dataPointIndex: r3, w: i3 }]);
        } }, { key: "rotateAroundCenter", value: function(t4) {
          var e3 = {};
          return t4 && "function" == typeof t4.getBBox && (e3 = t4.getBBox()), { x: e3.x + e3.width / 2, y: e3.y + e3.height / 2 };
        } }, { key: "getTextRects", value: function(t4, e3, i3, a3) {
          var s3 = !(arguments.length > 4 && void 0 !== arguments[4]) || arguments[4], r3 = this.w, o3 = this.drawText({ x: -200, y: -200, text: t4, textAnchor: "start", fontSize: e3, fontFamily: i3, foreColor: "#fff", opacity: 0 });
          a3 && o3.attr("transform", a3), r3.globals.dom.Paper.add(o3);
          var n3 = o3.bbox();
          return s3 || (n3 = o3.node.getBoundingClientRect()), o3.remove(), { width: n3.width, height: n3.height };
        } }, { key: "placeTextWithEllipsis", value: function(t4, e3, i3) {
          if ("function" == typeof t4.getComputedTextLength && (t4.textContent = e3, e3.length > 0 && t4.getComputedTextLength() >= i3 / 1.1)) {
            for (var a3 = e3.length - 3; a3 > 0; a3 -= 3)
              if (t4.getSubStringLength(0, a3) <= i3 / 1.1)
                return void (t4.textContent = e3.substring(0, a3) + "...");
            t4.textContent = ".";
          }
        } }], [{ key: "setAttrs", value: function(t4, e3) {
          for (var i3 in e3)
            e3.hasOwnProperty(i3) && t4.setAttribute(i3, e3[i3]);
        } }]), t3;
      }();
      var y2 = function() {
        function t3(e3) {
          a2(this, t3), this.ctx = e3, this.w = e3.w;
        }
        return r2(t3, [{ key: "getStackedSeriesTotals", value: function() {
          var t4 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : [], e3 = this.w, i3 = [];
          if (0 === e3.globals.series.length)
            return i3;
          for (var a3 = 0; a3 < e3.globals.series[e3.globals.maxValsInArrayIndex].length; a3++) {
            for (var s3 = 0, r3 = 0; r3 < e3.globals.series.length; r3++)
              void 0 !== e3.globals.series[r3][a3] && -1 === t4.indexOf(r3) && (s3 += e3.globals.series[r3][a3]);
            i3.push(s3);
          }
          return i3;
        } }, { key: "getSeriesTotalByIndex", value: function() {
          var t4 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null;
          return null === t4 ? this.w.config.series.reduce(function(t5, e3) {
            return t5 + e3;
          }, 0) : this.w.globals.series[t4].reduce(function(t5, e3) {
            return t5 + e3;
          }, 0);
        } }, { key: "getStackedSeriesTotalsByGroups", value: function() {
          var t4 = this, e3 = this.w, i3 = [];
          return e3.globals.seriesGroups.forEach(function(a3) {
            var s3 = [];
            e3.config.series.forEach(function(t5, e4) {
              a3.indexOf(t5.name) > -1 && s3.push(e4);
            });
            var r3 = e3.globals.series.map(function(t5, e4) {
              return -1 === s3.indexOf(e4) ? e4 : -1;
            }).filter(function(t5) {
              return -1 !== t5;
            });
            i3.push(t4.getStackedSeriesTotals(r3));
          }), i3;
        } }, { key: "isSeriesNull", value: function() {
          var t4 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null;
          return 0 === (null === t4 ? this.w.config.series.filter(function(t5) {
            return null !== t5;
          }) : this.w.config.series[t4].data.filter(function(t5) {
            return null !== t5;
          })).length;
        } }, { key: "seriesHaveSameValues", value: function(t4) {
          return this.w.globals.series[t4].every(function(t5, e3, i3) {
            return t5 === i3[0];
          });
        } }, { key: "getCategoryLabels", value: function(t4) {
          var e3 = this.w, i3 = t4.slice();
          return e3.config.xaxis.convertedCatToNumeric && (i3 = t4.map(function(t5, i4) {
            return e3.config.xaxis.labels.formatter(t5 - e3.globals.minX + 1);
          })), i3;
        } }, { key: "getLargestSeries", value: function() {
          var t4 = this.w;
          t4.globals.maxValsInArrayIndex = t4.globals.series.map(function(t5) {
            return t5.length;
          }).indexOf(Math.max.apply(Math, t4.globals.series.map(function(t5) {
            return t5.length;
          })));
        } }, { key: "getLargestMarkerSize", value: function() {
          var t4 = this.w, e3 = 0;
          return t4.globals.markers.size.forEach(function(t5) {
            e3 = Math.max(e3, t5);
          }), t4.config.markers.discrete && t4.config.markers.discrete.length && t4.config.markers.discrete.forEach(function(t5) {
            e3 = Math.max(e3, t5.size);
          }), e3 > 0 && (e3 += t4.config.markers.hover.sizeOffset + 1), t4.globals.markers.largestSize = e3, e3;
        } }, { key: "getSeriesTotals", value: function() {
          var t4 = this.w;
          t4.globals.seriesTotals = t4.globals.series.map(function(t5, e3) {
            var i3 = 0;
            if (Array.isArray(t5))
              for (var a3 = 0; a3 < t5.length; a3++)
                i3 += t5[a3];
            else
              i3 += t5;
            return i3;
          });
        } }, { key: "getSeriesTotalsXRange", value: function(t4, e3) {
          var i3 = this.w;
          return i3.globals.series.map(function(a3, s3) {
            for (var r3 = 0, o3 = 0; o3 < a3.length; o3++)
              i3.globals.seriesX[s3][o3] > t4 && i3.globals.seriesX[s3][o3] < e3 && (r3 += a3[o3]);
            return r3;
          });
        } }, { key: "getPercentSeries", value: function() {
          var t4 = this.w;
          t4.globals.seriesPercent = t4.globals.series.map(function(e3, i3) {
            var a3 = [];
            if (Array.isArray(e3))
              for (var s3 = 0; s3 < e3.length; s3++) {
                var r3 = t4.globals.stackedSeriesTotals[s3], o3 = 0;
                r3 && (o3 = 100 * e3[s3] / r3), a3.push(o3);
              }
            else {
              var n3 = 100 * e3 / t4.globals.seriesTotals.reduce(function(t5, e4) {
                return t5 + e4;
              }, 0);
              a3.push(n3);
            }
            return a3;
          });
        } }, { key: "getCalculatedRatios", value: function() {
          var t4, e3, i3, a3 = this.w.globals, s3 = [], r3 = 0, o3 = [], n3 = 0.1, l3 = 0;
          if (a3.yRange = [], a3.isMultipleYAxis)
            for (var h3 = 0; h3 < a3.minYArr.length; h3++)
              a3.yRange.push(Math.abs(a3.minYArr[h3] - a3.maxYArr[h3])), o3.push(0);
          else
            a3.yRange.push(Math.abs(a3.minY - a3.maxY));
          a3.xRange = Math.abs(a3.maxX - a3.minX), a3.zRange = Math.abs(a3.maxZ - a3.minZ);
          for (var c3 = 0; c3 < a3.yRange.length; c3++)
            s3.push(a3.yRange[c3] / a3.gridHeight);
          if (e3 = a3.xRange / a3.gridWidth, t4 = a3.yRange / a3.gridWidth, i3 = a3.xRange / a3.gridHeight, (r3 = a3.zRange / a3.gridHeight * 16) || (r3 = 1), a3.minY !== Number.MIN_VALUE && 0 !== Math.abs(a3.minY) && (a3.hasNegs = true), a3.isMultipleYAxis) {
            o3 = [];
            for (var d3 = 0; d3 < s3.length; d3++)
              o3.push(-a3.minYArr[d3] / s3[d3]);
          } else
            o3.push(-a3.minY / s3[0]), a3.minY !== Number.MIN_VALUE && 0 !== Math.abs(a3.minY) && (n3 = -a3.minY / t4, l3 = a3.minX / e3);
          return { yRatio: s3, invertedYRatio: t4, zRatio: r3, xRatio: e3, invertedXRatio: i3, baseLineInvertedY: n3, baseLineY: o3, baseLineX: l3 };
        } }, { key: "getLogSeries", value: function(t4) {
          var e3 = this, i3 = this.w;
          return i3.globals.seriesLog = t4.map(function(t5, a3) {
            return i3.config.yaxis[a3] && i3.config.yaxis[a3].logarithmic ? t5.map(function(t6) {
              return null === t6 ? null : e3.getLogVal(i3.config.yaxis[a3].logBase, t6, a3);
            }) : t5;
          }), i3.globals.invalidLogScale ? t4 : i3.globals.seriesLog;
        } }, { key: "getBaseLog", value: function(t4, e3) {
          return Math.log(e3) / Math.log(t4);
        } }, { key: "getLogVal", value: function(t4, e3, i3) {
          if (0 === e3)
            return 0;
          var a3 = this.w, s3 = 0 === a3.globals.minYArr[i3] ? -1 : this.getBaseLog(t4, a3.globals.minYArr[i3]), r3 = (0 === a3.globals.maxYArr[i3] ? 0 : this.getBaseLog(t4, a3.globals.maxYArr[i3])) - s3;
          return e3 < 1 ? e3 / r3 : (this.getBaseLog(t4, e3) - s3) / r3;
        } }, { key: "getLogYRatios", value: function(t4) {
          var e3 = this, i3 = this.w, a3 = this.w.globals;
          return a3.yLogRatio = t4.slice(), a3.logYRange = a3.yRange.map(function(t5, s3) {
            if (i3.config.yaxis[s3] && e3.w.config.yaxis[s3].logarithmic) {
              var r3, o3 = -Number.MAX_VALUE, n3 = Number.MIN_VALUE;
              return a3.seriesLog.forEach(function(t6, e4) {
                t6.forEach(function(t7) {
                  i3.config.yaxis[e4] && i3.config.yaxis[e4].logarithmic && (o3 = Math.max(t7, o3), n3 = Math.min(t7, n3));
                });
              }), r3 = Math.pow(a3.yRange[s3], Math.abs(n3 - o3) / a3.yRange[s3]), a3.yLogRatio[s3] = r3 / a3.gridHeight, r3;
            }
          }), a3.invalidLogScale ? t4.slice() : a3.yLogRatio;
        } }], [{ key: "checkComboSeries", value: function(t4) {
          var e3 = false, i3 = 0, a3 = 0;
          return t4.length && void 0 !== t4[0].type && t4.forEach(function(t5) {
            "bar" !== t5.type && "column" !== t5.type && "candlestick" !== t5.type && "boxPlot" !== t5.type || i3++, void 0 !== t5.type && a3++;
          }), a3 > 0 && (e3 = true), { comboBarCount: i3, comboCharts: e3 };
        } }, { key: "extendArrayProps", value: function(t4, e3, i3) {
          return e3.yaxis && (e3 = t4.extendYAxis(e3, i3)), e3.annotations && (e3.annotations.yaxis && (e3 = t4.extendYAxisAnnotations(e3)), e3.annotations.xaxis && (e3 = t4.extendXAxisAnnotations(e3)), e3.annotations.points && (e3 = t4.extendPointAnnotations(e3))), e3;
        } }]), t3;
      }();
      var w2 = function() {
        function t3(e3) {
          a2(this, t3), this.w = e3.w, this.annoCtx = e3;
        }
        return r2(t3, [{ key: "setOrientations", value: function(t4) {
          var e3 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : null, i3 = this.w;
          if ("vertical" === t4.label.orientation) {
            var a3 = null !== e3 ? e3 : 0, s3 = i3.globals.dom.baseEl.querySelector(".apexcharts-xaxis-annotations .apexcharts-xaxis-annotation-label[rel='".concat(a3, "']"));
            if (null !== s3) {
              var r3 = s3.getBoundingClientRect();
              s3.setAttribute("x", parseFloat(s3.getAttribute("x")) - r3.height + 4), "top" === t4.label.position ? s3.setAttribute("y", parseFloat(s3.getAttribute("y")) + r3.width) : s3.setAttribute("y", parseFloat(s3.getAttribute("y")) - r3.width);
              var o3 = this.annoCtx.graphics.rotateAroundCenter(s3), n3 = o3.x, l3 = o3.y;
              s3.setAttribute("transform", "rotate(-90 ".concat(n3, " ").concat(l3, ")"));
            }
          }
        } }, { key: "addBackgroundToAnno", value: function(t4, e3) {
          var i3 = this.w;
          if (!t4 || void 0 === e3.label.text || void 0 !== e3.label.text && !String(e3.label.text).trim())
            return null;
          var a3 = i3.globals.dom.baseEl.querySelector(".apexcharts-grid").getBoundingClientRect(), s3 = t4.getBoundingClientRect(), r3 = e3.label.style.padding.left, o3 = e3.label.style.padding.right, n3 = e3.label.style.padding.top, l3 = e3.label.style.padding.bottom;
          "vertical" === e3.label.orientation && (n3 = e3.label.style.padding.left, l3 = e3.label.style.padding.right, r3 = e3.label.style.padding.top, o3 = e3.label.style.padding.bottom);
          var h3 = s3.left - a3.left - r3, c3 = s3.top - a3.top - n3, d3 = this.annoCtx.graphics.drawRect(h3 - i3.globals.barPadForNumericAxis, c3, s3.width + r3 + o3, s3.height + n3 + l3, e3.label.borderRadius, e3.label.style.background, 1, e3.label.borderWidth, e3.label.borderColor, 0);
          return e3.id && d3.node.classList.add(e3.id), d3;
        } }, { key: "annotationsBackground", value: function() {
          var t4 = this, e3 = this.w, i3 = function(i4, a3, s3) {
            var r3 = e3.globals.dom.baseEl.querySelector(".apexcharts-".concat(s3, "-annotations .apexcharts-").concat(s3, "-annotation-label[rel='").concat(a3, "']"));
            if (r3) {
              var o3 = r3.parentNode, n3 = t4.addBackgroundToAnno(r3, i4);
              n3 && (o3.insertBefore(n3.node, r3), i4.label.mouseEnter && n3.node.addEventListener("mouseenter", i4.label.mouseEnter.bind(t4, i4)), i4.label.mouseLeave && n3.node.addEventListener("mouseleave", i4.label.mouseLeave.bind(t4, i4)), i4.label.click && n3.node.addEventListener("click", i4.label.click.bind(t4, i4)));
            }
          };
          e3.config.annotations.xaxis.map(function(t5, e4) {
            i3(t5, e4, "xaxis");
          }), e3.config.annotations.yaxis.map(function(t5, e4) {
            i3(t5, e4, "yaxis");
          }), e3.config.annotations.points.map(function(t5, e4) {
            i3(t5, e4, "point");
          });
        } }, { key: "getY1Y2", value: function(t4, e3) {
          var i3, a3 = "y1" === t4 ? e3.y : e3.y2, s3 = this.w;
          if (this.annoCtx.invertAxis) {
            var r3 = s3.globals.labels.indexOf(a3);
            s3.config.xaxis.convertedCatToNumeric && (r3 = s3.globals.categoryLabels.indexOf(a3));
            var o3 = s3.globals.dom.baseEl.querySelector(".apexcharts-yaxis-texts-g text:nth-child(" + (r3 + 1) + ")");
            o3 && (i3 = parseFloat(o3.getAttribute("y"))), void 0 !== e3.seriesIndex && s3.globals.barHeight && (i3 = i3 - s3.globals.barHeight / 2 * (s3.globals.series.length - 1) + s3.globals.barHeight * e3.seriesIndex);
          } else {
            var n3;
            if (s3.config.yaxis[e3.yAxisIndex].logarithmic)
              n3 = (a3 = new y2(this.annoCtx.ctx).getLogVal(a3, e3.yAxisIndex)) / s3.globals.yLogRatio[e3.yAxisIndex];
            else
              n3 = (a3 - s3.globals.minYArr[e3.yAxisIndex]) / (s3.globals.yRange[e3.yAxisIndex] / s3.globals.gridHeight);
            i3 = s3.globals.gridHeight - n3, !e3.marker || void 0 !== e3.y && null !== e3.y || (i3 = 0), s3.config.yaxis[e3.yAxisIndex] && s3.config.yaxis[e3.yAxisIndex].reversed && (i3 = n3);
          }
          return "string" == typeof a3 && a3.indexOf("px") > -1 && (i3 = parseFloat(a3)), i3;
        } }, { key: "getX1X2", value: function(t4, e3) {
          var i3 = this.w, a3 = this.annoCtx.invertAxis ? i3.globals.minY : i3.globals.minX, s3 = this.annoCtx.invertAxis ? i3.globals.maxY : i3.globals.maxX, r3 = this.annoCtx.invertAxis ? i3.globals.yRange[0] : i3.globals.xRange, o3 = (e3.x - a3) / (r3 / i3.globals.gridWidth);
          this.annoCtx.inversedReversedAxis && (o3 = (s3 - e3.x) / (r3 / i3.globals.gridWidth)), "category" !== i3.config.xaxis.type && !i3.config.xaxis.convertedCatToNumeric || this.annoCtx.invertAxis || i3.globals.dataFormatXNumeric || (o3 = this.getStringX(e3.x));
          var n3 = (e3.x2 - a3) / (r3 / i3.globals.gridWidth);
          return this.annoCtx.inversedReversedAxis && (n3 = (s3 - e3.x2) / (r3 / i3.globals.gridWidth)), "category" !== i3.config.xaxis.type && !i3.config.xaxis.convertedCatToNumeric || this.annoCtx.invertAxis || i3.globals.dataFormatXNumeric || (n3 = this.getStringX(e3.x2)), void 0 !== e3.x && null !== e3.x || !e3.marker || (o3 = i3.globals.gridWidth), "x1" === t4 && "string" == typeof e3.x && e3.x.indexOf("px") > -1 && (o3 = parseFloat(e3.x)), "x2" === t4 && "string" == typeof e3.x2 && e3.x2.indexOf("px") > -1 && (n3 = parseFloat(e3.x2)), void 0 !== e3.seriesIndex && i3.globals.barWidth && !this.annoCtx.invertAxis && (o3 = o3 - i3.globals.barWidth / 2 * (i3.globals.series.length - 1) + i3.globals.barWidth * e3.seriesIndex), "x1" === t4 ? o3 : n3;
        } }, { key: "getStringX", value: function(t4) {
          var e3 = this.w, i3 = t4;
          e3.config.xaxis.convertedCatToNumeric && e3.globals.categoryLabels.length && (t4 = e3.globals.categoryLabels.indexOf(t4) + 1);
          var a3 = e3.globals.labels.indexOf(t4), s3 = e3.globals.dom.baseEl.querySelector(".apexcharts-xaxis-texts-g text:nth-child(" + (a3 + 1) + ")");
          return s3 && (i3 = parseFloat(s3.getAttribute("x"))), i3;
        } }]), t3;
      }();
      var k2 = function() {
        function t3(e3) {
          a2(this, t3), this.w = e3.w, this.annoCtx = e3, this.invertAxis = this.annoCtx.invertAxis, this.helpers = new w2(this.annoCtx);
        }
        return r2(t3, [{ key: "addXaxisAnnotation", value: function(t4, e3, i3) {
          var a3, s3 = this.w, r3 = this.helpers.getX1X2("x1", t4), o3 = t4.label.text, n3 = t4.strokeDashArray;
          if (x2.isNumber(r3)) {
            if (null === t4.x2 || void 0 === t4.x2) {
              var l3 = this.annoCtx.graphics.drawLine(r3 + t4.offsetX, 0 + t4.offsetY, r3 + t4.offsetX, s3.globals.gridHeight + t4.offsetY, t4.borderColor, n3, t4.borderWidth);
              e3.appendChild(l3.node), t4.id && l3.node.classList.add(t4.id);
            } else {
              if ((a3 = this.helpers.getX1X2("x2", t4)) < r3) {
                var h3 = r3;
                r3 = a3, a3 = h3;
              }
              var c3 = this.annoCtx.graphics.drawRect(r3 + t4.offsetX, 0 + t4.offsetY, a3 - r3, s3.globals.gridHeight + t4.offsetY, 0, t4.fillColor, t4.opacity, 1, t4.borderColor, n3);
              c3.node.classList.add("apexcharts-annotation-rect"), c3.attr("clip-path", "url(#gridRectMask".concat(s3.globals.cuid, ")")), e3.appendChild(c3.node), t4.id && c3.node.classList.add(t4.id);
            }
            var d3 = this.annoCtx.graphics.getTextRects(o3, parseFloat(t4.label.style.fontSize)), g3 = "top" === t4.label.position ? 4 : "center" === t4.label.position ? s3.globals.gridHeight / 2 + ("vertical" === t4.label.orientation ? d3.width / 2 : 0) : s3.globals.gridHeight, u3 = this.annoCtx.graphics.drawText({ x: r3 + t4.label.offsetX, y: g3 + t4.label.offsetY - ("vertical" === t4.label.orientation ? "top" === t4.label.position ? d3.width / 2 - 12 : -d3.width / 2 : 0), text: o3, textAnchor: t4.label.textAnchor, fontSize: t4.label.style.fontSize, fontFamily: t4.label.style.fontFamily, fontWeight: t4.label.style.fontWeight, foreColor: t4.label.style.color, cssClass: "apexcharts-xaxis-annotation-label ".concat(t4.label.style.cssClass, " ").concat(t4.id ? t4.id : "") });
            u3.attr({ rel: i3 }), e3.appendChild(u3.node), this.annoCtx.helpers.setOrientations(t4, i3);
          }
        } }, { key: "drawXAxisAnnotations", value: function() {
          var t4 = this, e3 = this.w, i3 = this.annoCtx.graphics.group({ class: "apexcharts-xaxis-annotations" });
          return e3.config.annotations.xaxis.map(function(e4, a3) {
            t4.addXaxisAnnotation(e4, i3.node, a3);
          }), i3;
        } }]), t3;
      }();
      var A2 = function() {
        function t3(e3) {
          a2(this, t3), this.w = e3.w, this.annoCtx = e3, this.helpers = new w2(this.annoCtx);
        }
        return r2(t3, [{ key: "addYaxisAnnotation", value: function(t4, e3, i3) {
          var a3, s3 = this.w, r3 = t4.strokeDashArray, o3 = this.helpers.getY1Y2("y1", t4), n3 = t4.label.text;
          if (null === t4.y2 || void 0 === t4.y2) {
            var l3 = this.annoCtx.graphics.drawLine(0 + t4.offsetX, o3 + t4.offsetY, this._getYAxisAnnotationWidth(t4), o3 + t4.offsetY, t4.borderColor, r3, t4.borderWidth);
            e3.appendChild(l3.node), t4.id && l3.node.classList.add(t4.id);
          } else {
            if ((a3 = this.helpers.getY1Y2("y2", t4)) > o3) {
              var h3 = o3;
              o3 = a3, a3 = h3;
            }
            var c3 = this.annoCtx.graphics.drawRect(0 + t4.offsetX, a3 + t4.offsetY, this._getYAxisAnnotationWidth(t4), o3 - a3, 0, t4.fillColor, t4.opacity, 1, t4.borderColor, r3);
            c3.node.classList.add("apexcharts-annotation-rect"), c3.attr("clip-path", "url(#gridRectMask".concat(s3.globals.cuid, ")")), e3.appendChild(c3.node), t4.id && c3.node.classList.add(t4.id);
          }
          var d3 = "right" === t4.label.position ? s3.globals.gridWidth : "center" === t4.label.position ? s3.globals.gridWidth / 2 : 0, g3 = this.annoCtx.graphics.drawText({ x: d3 + t4.label.offsetX, y: (null != a3 ? a3 : o3) + t4.label.offsetY - 3, text: n3, textAnchor: t4.label.textAnchor, fontSize: t4.label.style.fontSize, fontFamily: t4.label.style.fontFamily, fontWeight: t4.label.style.fontWeight, foreColor: t4.label.style.color, cssClass: "apexcharts-yaxis-annotation-label ".concat(t4.label.style.cssClass, " ").concat(t4.id ? t4.id : "") });
          g3.attr({ rel: i3 }), e3.appendChild(g3.node);
        } }, { key: "_getYAxisAnnotationWidth", value: function(t4) {
          var e3 = this.w;
          e3.globals.gridWidth;
          return (t4.width.indexOf("%") > -1 ? e3.globals.gridWidth * parseInt(t4.width, 10) / 100 : parseInt(t4.width, 10)) + t4.offsetX;
        } }, { key: "drawYAxisAnnotations", value: function() {
          var t4 = this, e3 = this.w, i3 = this.annoCtx.graphics.group({ class: "apexcharts-yaxis-annotations" });
          return e3.config.annotations.yaxis.map(function(e4, a3) {
            t4.addYaxisAnnotation(e4, i3.node, a3);
          }), i3;
        } }]), t3;
      }();
      var S2 = function() {
        function t3(e3) {
          a2(this, t3), this.w = e3.w, this.annoCtx = e3, this.helpers = new w2(this.annoCtx);
        }
        return r2(t3, [{ key: "addPointAnnotation", value: function(t4, e3, i3) {
          this.w;
          var a3 = this.helpers.getX1X2("x1", t4), s3 = this.helpers.getY1Y2("y1", t4);
          if (x2.isNumber(a3)) {
            var r3 = { pSize: t4.marker.size, pointStrokeWidth: t4.marker.strokeWidth, pointFillColor: t4.marker.fillColor, pointStrokeColor: t4.marker.strokeColor, shape: t4.marker.shape, pRadius: t4.marker.radius, class: "apexcharts-point-annotation-marker ".concat(t4.marker.cssClass, " ").concat(t4.id ? t4.id : "") }, o3 = this.annoCtx.graphics.drawMarker(a3 + t4.marker.offsetX, s3 + t4.marker.offsetY, r3);
            e3.appendChild(o3.node);
            var n3 = t4.label.text ? t4.label.text : "", l3 = this.annoCtx.graphics.drawText({ x: a3 + t4.label.offsetX, y: s3 + t4.label.offsetY - t4.marker.size - parseFloat(t4.label.style.fontSize) / 1.6, text: n3, textAnchor: t4.label.textAnchor, fontSize: t4.label.style.fontSize, fontFamily: t4.label.style.fontFamily, fontWeight: t4.label.style.fontWeight, foreColor: t4.label.style.color, cssClass: "apexcharts-point-annotation-label ".concat(t4.label.style.cssClass, " ").concat(t4.id ? t4.id : "") });
            if (l3.attr({ rel: i3 }), e3.appendChild(l3.node), t4.customSVG.SVG) {
              var h3 = this.annoCtx.graphics.group({ class: "apexcharts-point-annotations-custom-svg " + t4.customSVG.cssClass });
              h3.attr({ transform: "translate(".concat(a3 + t4.customSVG.offsetX, ", ").concat(s3 + t4.customSVG.offsetY, ")") }), h3.node.innerHTML = t4.customSVG.SVG, e3.appendChild(h3.node);
            }
            if (t4.image.path) {
              var c3 = t4.image.width ? t4.image.width : 20, d3 = t4.image.height ? t4.image.height : 20;
              o3 = this.annoCtx.addImage({ x: a3 + t4.image.offsetX - c3 / 2, y: s3 + t4.image.offsetY - d3 / 2, width: c3, height: d3, path: t4.image.path, appendTo: ".apexcharts-point-annotations" });
            }
            t4.mouseEnter && o3.node.addEventListener("mouseenter", t4.mouseEnter.bind(this, t4)), t4.mouseLeave && o3.node.addEventListener("mouseleave", t4.mouseLeave.bind(this, t4)), t4.click && o3.node.addEventListener("click", t4.click.bind(this, t4));
          }
        } }, { key: "drawPointAnnotations", value: function() {
          var t4 = this, e3 = this.w, i3 = this.annoCtx.graphics.group({ class: "apexcharts-point-annotations" });
          return e3.config.annotations.points.map(function(e4, a3) {
            t4.addPointAnnotation(e4, i3.node, a3);
          }), i3;
        } }]), t3;
      }();
      var C2 = { name: "en", options: { months: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"], shortMonths: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"], days: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"], shortDays: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"], toolbar: { exportToSVG: "Download SVG", exportToPNG: "Download PNG", exportToCSV: "Download CSV", menu: "Menu", selection: "Selection", selectionZoom: "Selection Zoom", zoomIn: "Zoom In", zoomOut: "Zoom Out", pan: "Panning", reset: "Reset Zoom" } } };
      var L2 = function() {
        function t3() {
          a2(this, t3), this.yAxis = { show: true, showAlways: false, showForNullSeries: true, seriesName: void 0, opposite: false, reversed: false, logarithmic: false, logBase: 10, tickAmount: void 0, stepSize: void 0, forceNiceScale: false, max: void 0, min: void 0, floating: false, decimalsInFloat: void 0, labels: { show: true, minWidth: 0, maxWidth: 160, offsetX: 0, offsetY: 0, align: void 0, rotate: 0, padding: 20, style: { colors: [], fontSize: "11px", fontWeight: 400, fontFamily: void 0, cssClass: "" }, formatter: void 0 }, axisBorder: { show: false, color: "#e0e0e0", width: 1, offsetX: 0, offsetY: 0 }, axisTicks: { show: false, color: "#e0e0e0", width: 6, offsetX: 0, offsetY: 0 }, title: { text: void 0, rotate: -90, offsetY: 0, offsetX: 0, style: { color: void 0, fontSize: "11px", fontWeight: 900, fontFamily: void 0, cssClass: "" } }, tooltip: { enabled: false, offsetX: 0 }, crosshairs: { show: true, position: "front", stroke: { color: "#b6b6b6", width: 1, dashArray: 0 } } }, this.pointAnnotation = { id: void 0, x: 0, y: null, yAxisIndex: 0, seriesIndex: void 0, mouseEnter: void 0, mouseLeave: void 0, click: void 0, marker: { size: 4, fillColor: "#fff", strokeWidth: 2, strokeColor: "#333", shape: "circle", offsetX: 0, offsetY: 0, radius: 2, cssClass: "" }, label: { borderColor: "#c2c2c2", borderWidth: 1, borderRadius: 2, text: void 0, textAnchor: "middle", offsetX: 0, offsetY: 0, mouseEnter: void 0, mouseLeave: void 0, click: void 0, style: { background: "#fff", color: void 0, fontSize: "11px", fontFamily: void 0, fontWeight: 400, cssClass: "", padding: { left: 5, right: 5, top: 2, bottom: 2 } } }, customSVG: { SVG: void 0, cssClass: void 0, offsetX: 0, offsetY: 0 }, image: { path: void 0, width: 20, height: 20, offsetX: 0, offsetY: 0 } }, this.yAxisAnnotation = { id: void 0, y: 0, y2: null, strokeDashArray: 1, fillColor: "#c2c2c2", borderColor: "#c2c2c2", borderWidth: 1, opacity: 0.3, offsetX: 0, offsetY: 0, width: "100%", yAxisIndex: 0, label: { borderColor: "#c2c2c2", borderWidth: 1, borderRadius: 2, text: void 0, textAnchor: "end", position: "right", offsetX: 0, offsetY: -3, mouseEnter: void 0, mouseLeave: void 0, click: void 0, style: { background: "#fff", color: void 0, fontSize: "11px", fontFamily: void 0, fontWeight: 400, cssClass: "", padding: { left: 5, right: 5, top: 2, bottom: 2 } } } }, this.xAxisAnnotation = { id: void 0, x: 0, x2: null, strokeDashArray: 1, fillColor: "#c2c2c2", borderColor: "#c2c2c2", borderWidth: 1, opacity: 0.3, offsetX: 0, offsetY: 0, label: { borderColor: "#c2c2c2", borderWidth: 1, borderRadius: 2, text: void 0, textAnchor: "middle", orientation: "vertical", position: "top", offsetX: 0, offsetY: 0, mouseEnter: void 0, mouseLeave: void 0, click: void 0, style: { background: "#fff", color: void 0, fontSize: "11px", fontFamily: void 0, fontWeight: 400, cssClass: "", padding: { left: 5, right: 5, top: 2, bottom: 2 } } } }, this.text = { x: 0, y: 0, text: "", textAnchor: "start", foreColor: void 0, fontSize: "13px", fontFamily: void 0, fontWeight: 400, appendTo: ".apexcharts-annotations", backgroundColor: "transparent", borderColor: "#c2c2c2", borderRadius: 0, borderWidth: 0, paddingLeft: 4, paddingRight: 4, paddingTop: 2, paddingBottom: 2 };
        }
        return r2(t3, [{ key: "init", value: function() {
          return { annotations: { yaxis: [this.yAxisAnnotation], xaxis: [this.xAxisAnnotation], points: [this.pointAnnotation], texts: [], images: [], shapes: [] }, chart: { animations: { enabled: true, easing: "easeinout", speed: 800, animateGradually: { delay: 150, enabled: true }, dynamicAnimation: { enabled: true, speed: 350 } }, background: "transparent", locales: [C2], defaultLocale: "en", dropShadow: { enabled: false, enabledOnSeries: void 0, top: 2, left: 2, blur: 4, color: "#000", opacity: 0.35 }, events: { animationEnd: void 0, beforeMount: void 0, mounted: void 0, updated: void 0, click: void 0, mouseMove: void 0, mouseLeave: void 0, xAxisLabelClick: void 0, legendClick: void 0, markerClick: void 0, selection: void 0, dataPointSelection: void 0, dataPointMouseEnter: void 0, dataPointMouseLeave: void 0, beforeZoom: void 0, beforeResetZoom: void 0, zoomed: void 0, scrolled: void 0, brushScrolled: void 0 }, foreColor: "#373d3f", fontFamily: "Helvetica, Arial, sans-serif", height: "auto", parentHeightOffset: 15, redrawOnParentResize: true, redrawOnWindowResize: true, id: void 0, group: void 0, nonce: void 0, offsetX: 0, offsetY: 0, selection: { enabled: false, type: "x", fill: { color: "#24292e", opacity: 0.1 }, stroke: { width: 1, color: "#24292e", opacity: 0.4, dashArray: 3 }, xaxis: { min: void 0, max: void 0 }, yaxis: { min: void 0, max: void 0 } }, sparkline: { enabled: false }, brush: { enabled: false, autoScaleYaxis: true, target: void 0, targets: void 0 }, stacked: false, stackOnlyBar: true, stackType: "normal", toolbar: { show: true, offsetX: 0, offsetY: 0, tools: { download: true, selection: true, zoom: true, zoomin: true, zoomout: true, pan: true, reset: true, customIcons: [] }, export: { csv: { filename: void 0, columnDelimiter: ",", headerCategory: "category", headerValue: "value", dateFormatter: function(t4) {
            return new Date(t4).toDateString();
          } }, png: { filename: void 0 }, svg: { filename: void 0 } }, autoSelected: "zoom" }, type: "line", width: "100%", zoom: { enabled: true, type: "x", autoScaleYaxis: false, zoomedArea: { fill: { color: "#90CAF9", opacity: 0.4 }, stroke: { color: "#0D47A1", opacity: 0.4, width: 1 } } } }, plotOptions: { area: { fillTo: "origin" }, bar: { horizontal: false, columnWidth: "70%", barHeight: "70%", distributed: false, borderRadius: 0, borderRadiusApplication: "around", borderRadiusWhenStacked: "last", rangeBarOverlap: true, rangeBarGroupRows: false, hideZeroBarsWhenGrouped: false, isDumbbell: false, dumbbellColors: void 0, isFunnel: false, isFunnel3d: true, colors: { ranges: [], backgroundBarColors: [], backgroundBarOpacity: 1, backgroundBarRadius: 0 }, dataLabels: { position: "top", maxItems: 100, hideOverflowingLabels: true, orientation: "horizontal", total: { enabled: false, formatter: void 0, offsetX: 0, offsetY: 0, style: { color: "#373d3f", fontSize: "12px", fontFamily: void 0, fontWeight: 600 } } } }, bubble: { zScaling: true, minBubbleRadius: void 0, maxBubbleRadius: void 0 }, candlestick: { colors: { upward: "#00B746", downward: "#EF403C" }, wick: { useFillColor: true } }, boxPlot: { colors: { upper: "#00E396", lower: "#008FFB" } }, heatmap: { radius: 2, enableShades: true, shadeIntensity: 0.5, reverseNegativeShade: false, distributed: false, useFillColorAsStroke: false, colorScale: { inverse: false, ranges: [], min: void 0, max: void 0 } }, treemap: { enableShades: true, shadeIntensity: 0.5, distributed: false, reverseNegativeShade: false, useFillColorAsStroke: false, borderRadius: 4, dataLabels: { format: "scale" }, colorScale: { inverse: false, ranges: [], min: void 0, max: void 0 } }, radialBar: { inverseOrder: false, startAngle: 0, endAngle: 360, offsetX: 0, offsetY: 0, hollow: { margin: 5, size: "50%", background: "transparent", image: void 0, imageWidth: 150, imageHeight: 150, imageOffsetX: 0, imageOffsetY: 0, imageClipped: true, position: "front", dropShadow: { enabled: false, top: 0, left: 0, blur: 3, color: "#000", opacity: 0.5 } }, track: { show: true, startAngle: void 0, endAngle: void 0, background: "#f2f2f2", strokeWidth: "97%", opacity: 1, margin: 5, dropShadow: { enabled: false, top: 0, left: 0, blur: 3, color: "#000", opacity: 0.5 } }, dataLabels: { show: true, name: { show: true, fontSize: "16px", fontFamily: void 0, fontWeight: 600, color: void 0, offsetY: 0, formatter: function(t4) {
            return t4;
          } }, value: { show: true, fontSize: "14px", fontFamily: void 0, fontWeight: 400, color: void 0, offsetY: 16, formatter: function(t4) {
            return t4 + "%";
          } }, total: { show: false, label: "Total", fontSize: "16px", fontWeight: 600, fontFamily: void 0, color: void 0, formatter: function(t4) {
            return t4.globals.seriesTotals.reduce(function(t5, e3) {
              return t5 + e3;
            }, 0) / t4.globals.series.length + "%";
          } } }, barLabels: { enabled: false, margin: 5, useSeriesColors: true, fontFamily: void 0, fontWeight: 600, fontSize: "16px", formatter: function(t4) {
            return t4;
          }, onClick: void 0 } }, pie: { customScale: 1, offsetX: 0, offsetY: 0, startAngle: 0, endAngle: 360, expandOnClick: true, dataLabels: { offset: 0, minAngleToShowLabel: 10 }, donut: { size: "65%", background: "transparent", labels: { show: false, name: { show: true, fontSize: "16px", fontFamily: void 0, fontWeight: 600, color: void 0, offsetY: -10, formatter: function(t4) {
            return t4;
          } }, value: { show: true, fontSize: "20px", fontFamily: void 0, fontWeight: 400, color: void 0, offsetY: 10, formatter: function(t4) {
            return t4;
          } }, total: { show: false, showAlways: false, label: "Total", fontSize: "16px", fontWeight: 400, fontFamily: void 0, color: void 0, formatter: function(t4) {
            return t4.globals.seriesTotals.reduce(function(t5, e3) {
              return t5 + e3;
            }, 0);
          } } } } }, polarArea: { rings: { strokeWidth: 1, strokeColor: "#e8e8e8" }, spokes: { strokeWidth: 1, connectorColors: "#e8e8e8" } }, radar: { size: void 0, offsetX: 0, offsetY: 0, polygons: { strokeWidth: 1, strokeColors: "#e8e8e8", connectorColors: "#e8e8e8", fill: { colors: void 0 } } } }, colors: void 0, dataLabels: { enabled: true, enabledOnSeries: void 0, formatter: function(t4) {
            return null !== t4 ? t4 : "";
          }, textAnchor: "middle", distributed: false, offsetX: 0, offsetY: 0, style: { fontSize: "12px", fontFamily: void 0, fontWeight: 600, colors: void 0 }, background: { enabled: true, foreColor: "#fff", borderRadius: 2, padding: 4, opacity: 0.9, borderWidth: 1, borderColor: "#fff", dropShadow: { enabled: false, top: 1, left: 1, blur: 1, color: "#000", opacity: 0.45 } }, dropShadow: { enabled: false, top: 1, left: 1, blur: 1, color: "#000", opacity: 0.45 } }, fill: { type: "solid", colors: void 0, opacity: 0.85, gradient: { shade: "dark", type: "horizontal", shadeIntensity: 0.5, gradientToColors: void 0, inverseColors: true, opacityFrom: 1, opacityTo: 1, stops: [0, 50, 100], colorStops: [] }, image: { src: [], width: void 0, height: void 0 }, pattern: { style: "squares", width: 6, height: 6, strokeWidth: 2 } }, forecastDataPoints: { count: 0, fillOpacity: 0.5, strokeWidth: void 0, dashArray: 4 }, grid: { show: true, borderColor: "#e0e0e0", strokeDashArray: 0, position: "back", xaxis: { lines: { show: false } }, yaxis: { lines: { show: true } }, row: { colors: void 0, opacity: 0.5 }, column: { colors: void 0, opacity: 0.5 }, padding: { top: 0, right: 10, bottom: 0, left: 12 } }, labels: [], legend: { show: true, showForSingleSeries: false, showForNullSeries: true, showForZeroSeries: true, floating: false, position: "bottom", horizontalAlign: "center", inverseOrder: false, fontSize: "12px", fontFamily: void 0, fontWeight: 400, width: void 0, height: void 0, formatter: void 0, tooltipHoverFormatter: void 0, offsetX: -20, offsetY: 4, customLegendItems: [], labels: { colors: void 0, useSeriesColors: false }, markers: { width: 12, height: 12, strokeWidth: 0, fillColors: void 0, strokeColor: "#fff", radius: 12, customHTML: void 0, offsetX: 0, offsetY: 0, onClick: void 0 }, itemMargin: { horizontal: 5, vertical: 2 }, onItemClick: { toggleDataSeries: true }, onItemHover: { highlightDataSeries: true } }, markers: { discrete: [], size: 0, colors: void 0, strokeColors: "#fff", strokeWidth: 2, strokeOpacity: 0.9, strokeDashArray: 0, fillOpacity: 1, shape: "circle", width: 8, height: 8, radius: 2, offsetX: 0, offsetY: 0, onClick: void 0, onDblClick: void 0, showNullDataPoints: true, hover: { size: void 0, sizeOffset: 3 } }, noData: { text: void 0, align: "center", verticalAlign: "middle", offsetX: 0, offsetY: 0, style: { color: void 0, fontSize: "14px", fontFamily: void 0 } }, responsive: [], series: void 0, states: { normal: { filter: { type: "none", value: 0 } }, hover: { filter: { type: "lighten", value: 0.1 } }, active: { allowMultipleDataPointsSelection: false, filter: { type: "darken", value: 0.5 } } }, title: { text: void 0, align: "left", margin: 5, offsetX: 0, offsetY: 0, floating: false, style: { fontSize: "14px", fontWeight: 900, fontFamily: void 0, color: void 0 } }, subtitle: { text: void 0, align: "left", margin: 5, offsetX: 0, offsetY: 30, floating: false, style: { fontSize: "12px", fontWeight: 400, fontFamily: void 0, color: void 0 } }, stroke: { show: true, curve: "smooth", lineCap: "butt", width: 2, colors: void 0, dashArray: 0, fill: { type: "solid", colors: void 0, opacity: 0.85, gradient: { shade: "dark", type: "horizontal", shadeIntensity: 0.5, gradientToColors: void 0, inverseColors: true, opacityFrom: 1, opacityTo: 1, stops: [0, 50, 100], colorStops: [] } } }, tooltip: { enabled: true, enabledOnSeries: void 0, shared: true, hideEmptySeries: false, followCursor: false, intersect: false, inverseOrder: false, custom: void 0, fillSeriesColor: false, theme: "light", cssClass: "", style: { fontSize: "12px", fontFamily: void 0 }, onDatasetHover: { highlightDataSeries: false }, x: { show: true, format: "dd MMM", formatter: void 0 }, y: { formatter: void 0, title: { formatter: function(t4) {
            return t4 ? t4 + ": " : "";
          } } }, z: { formatter: void 0, title: "Size: " }, marker: { show: true, fillColors: void 0 }, items: { display: "flex" }, fixed: { enabled: false, position: "topRight", offsetX: 0, offsetY: 0 } }, xaxis: { type: "category", categories: [], convertedCatToNumeric: false, offsetX: 0, offsetY: 0, overwriteCategories: void 0, labels: { show: true, rotate: -45, rotateAlways: false, hideOverlappingLabels: true, trim: false, minHeight: void 0, maxHeight: 120, showDuplicates: true, style: { colors: [], fontSize: "12px", fontWeight: 400, fontFamily: void 0, cssClass: "" }, offsetX: 0, offsetY: 0, format: void 0, formatter: void 0, datetimeUTC: true, datetimeFormatter: { year: "yyyy", month: "MMM 'yy", day: "dd MMM", hour: "HH:mm", minute: "HH:mm:ss", second: "HH:mm:ss" } }, group: { groups: [], style: { colors: [], fontSize: "12px", fontWeight: 400, fontFamily: void 0, cssClass: "" } }, axisBorder: { show: true, color: "#e0e0e0", width: "100%", height: 1, offsetX: 0, offsetY: 0 }, axisTicks: { show: true, color: "#e0e0e0", height: 6, offsetX: 0, offsetY: 0 }, stepSize: void 0, tickAmount: void 0, tickPlacement: "on", min: void 0, max: void 0, range: void 0, floating: false, decimalsInFloat: void 0, position: "bottom", title: { text: void 0, offsetX: 0, offsetY: 0, style: { color: void 0, fontSize: "12px", fontWeight: 900, fontFamily: void 0, cssClass: "" } }, crosshairs: { show: true, width: 1, position: "back", opacity: 0.9, stroke: { color: "#b6b6b6", width: 1, dashArray: 3 }, fill: { type: "solid", color: "#B1B9C4", gradient: { colorFrom: "#D8E3F0", colorTo: "#BED1E6", stops: [0, 100], opacityFrom: 0.4, opacityTo: 0.5 } }, dropShadow: { enabled: false, left: 0, top: 0, blur: 1, opacity: 0.4 } }, tooltip: { enabled: true, offsetY: 0, formatter: void 0, style: { fontSize: "12px", fontFamily: void 0 } } }, yaxis: this.yAxis, theme: { mode: "light", palette: "palette1", monochrome: { enabled: false, color: "#008FFB", shadeTo: "light", shadeIntensity: 0.65 } } };
        } }]), t3;
      }();
      var P2 = function() {
        function t3(e3) {
          a2(this, t3), this.ctx = e3, this.w = e3.w, this.graphics = new m2(this.ctx), this.w.globals.isBarHorizontal && (this.invertAxis = true), this.helpers = new w2(this), this.xAxisAnnotations = new k2(this), this.yAxisAnnotations = new A2(this), this.pointsAnnotations = new S2(this), this.w.globals.isBarHorizontal && this.w.config.yaxis[0].reversed && (this.inversedReversedAxis = true), this.xDivision = this.w.globals.gridWidth / this.w.globals.dataPoints;
        }
        return r2(t3, [{ key: "drawAxesAnnotations", value: function() {
          var t4 = this.w;
          if (t4.globals.axisCharts) {
            for (var e3 = this.yAxisAnnotations.drawYAxisAnnotations(), i3 = this.xAxisAnnotations.drawXAxisAnnotations(), a3 = this.pointsAnnotations.drawPointAnnotations(), s3 = t4.config.chart.animations.enabled, r3 = [e3, i3, a3], o3 = [i3.node, e3.node, a3.node], n3 = 0; n3 < 3; n3++)
              t4.globals.dom.elGraphical.add(r3[n3]), !s3 || t4.globals.resized || t4.globals.dataChanged || "scatter" !== t4.config.chart.type && "bubble" !== t4.config.chart.type && t4.globals.dataPoints > 1 && o3[n3].classList.add("apexcharts-element-hidden"), t4.globals.delayedElements.push({ el: o3[n3], index: 0 });
            this.helpers.annotationsBackground();
          }
        } }, { key: "drawImageAnnos", value: function() {
          var t4 = this;
          this.w.config.annotations.images.map(function(e3, i3) {
            t4.addImage(e3, i3);
          });
        } }, { key: "drawTextAnnos", value: function() {
          var t4 = this;
          this.w.config.annotations.texts.map(function(e3, i3) {
            t4.addText(e3, i3);
          });
        } }, { key: "addXaxisAnnotation", value: function(t4, e3, i3) {
          this.xAxisAnnotations.addXaxisAnnotation(t4, e3, i3);
        } }, { key: "addYaxisAnnotation", value: function(t4, e3, i3) {
          this.yAxisAnnotations.addYaxisAnnotation(t4, e3, i3);
        } }, { key: "addPointAnnotation", value: function(t4, e3, i3) {
          this.pointsAnnotations.addPointAnnotation(t4, e3, i3);
        } }, { key: "addText", value: function(t4, e3) {
          var i3 = t4.x, a3 = t4.y, s3 = t4.text, r3 = t4.textAnchor, o3 = t4.foreColor, n3 = t4.fontSize, l3 = t4.fontFamily, h3 = t4.fontWeight, c3 = t4.cssClass, d3 = t4.backgroundColor, g3 = t4.borderWidth, u3 = t4.strokeDashArray, p3 = t4.borderRadius, f3 = t4.borderColor, x3 = t4.appendTo, b3 = void 0 === x3 ? ".apexcharts-svg" : x3, v3 = t4.paddingLeft, m3 = void 0 === v3 ? 4 : v3, y3 = t4.paddingRight, w3 = void 0 === y3 ? 4 : y3, k3 = t4.paddingBottom, A3 = void 0 === k3 ? 2 : k3, S3 = t4.paddingTop, C3 = void 0 === S3 ? 2 : S3, L3 = this.w, P3 = this.graphics.drawText({ x: i3, y: a3, text: s3, textAnchor: r3 || "start", fontSize: n3 || "12px", fontWeight: h3 || "regular", fontFamily: l3 || L3.config.chart.fontFamily, foreColor: o3 || L3.config.chart.foreColor, cssClass: c3 }), I3 = L3.globals.dom.baseEl.querySelector(b3);
          I3 && I3.appendChild(P3.node);
          var T3 = P3.bbox();
          if (s3) {
            var M3 = this.graphics.drawRect(T3.x - m3, T3.y - C3, T3.width + m3 + w3, T3.height + A3 + C3, p3, d3 || "transparent", 1, g3, f3, u3);
            I3.insertBefore(M3.node, P3.node);
          }
        } }, { key: "addImage", value: function(t4, e3) {
          var i3 = this.w, a3 = t4.path, s3 = t4.x, r3 = void 0 === s3 ? 0 : s3, o3 = t4.y, n3 = void 0 === o3 ? 0 : o3, l3 = t4.width, h3 = void 0 === l3 ? 20 : l3, c3 = t4.height, d3 = void 0 === c3 ? 20 : c3, g3 = t4.appendTo, u3 = void 0 === g3 ? ".apexcharts-svg" : g3, p3 = i3.globals.dom.Paper.image(a3);
          p3.size(h3, d3).move(r3, n3);
          var f3 = i3.globals.dom.baseEl.querySelector(u3);
          return f3 && f3.appendChild(p3.node), p3;
        } }, { key: "addXaxisAnnotationExternal", value: function(t4, e3, i3) {
          return this.addAnnotationExternal({ params: t4, pushToMemory: e3, context: i3, type: "xaxis", contextMethod: i3.addXaxisAnnotation }), i3;
        } }, { key: "addYaxisAnnotationExternal", value: function(t4, e3, i3) {
          return this.addAnnotationExternal({ params: t4, pushToMemory: e3, context: i3, type: "yaxis", contextMethod: i3.addYaxisAnnotation }), i3;
        } }, { key: "addPointAnnotationExternal", value: function(t4, e3, i3) {
          return void 0 === this.invertAxis && (this.invertAxis = i3.w.globals.isBarHorizontal), this.addAnnotationExternal({ params: t4, pushToMemory: e3, context: i3, type: "point", contextMethod: i3.addPointAnnotation }), i3;
        } }, { key: "addAnnotationExternal", value: function(t4) {
          var e3 = t4.params, i3 = t4.pushToMemory, a3 = t4.context, s3 = t4.type, r3 = t4.contextMethod, o3 = a3, n3 = o3.w, l3 = n3.globals.dom.baseEl.querySelector(".apexcharts-".concat(s3, "-annotations")), h3 = l3.childNodes.length + 1, c3 = new L2(), d3 = Object.assign({}, "xaxis" === s3 ? c3.xAxisAnnotation : "yaxis" === s3 ? c3.yAxisAnnotation : c3.pointAnnotation), g3 = x2.extend(d3, e3);
          switch (s3) {
            case "xaxis":
              this.addXaxisAnnotation(g3, l3, h3);
              break;
            case "yaxis":
              this.addYaxisAnnotation(g3, l3, h3);
              break;
            case "point":
              this.addPointAnnotation(g3, l3, h3);
          }
          var u3 = n3.globals.dom.baseEl.querySelector(".apexcharts-".concat(s3, "-annotations .apexcharts-").concat(s3, "-annotation-label[rel='").concat(h3, "']")), p3 = this.helpers.addBackgroundToAnno(u3, g3);
          return p3 && l3.insertBefore(p3.node, u3), i3 && n3.globals.memory.methodsToExec.push({ context: o3, id: g3.id ? g3.id : x2.randomId(), method: r3, label: "addAnnotation", params: e3 }), a3;
        } }, { key: "clearAnnotations", value: function(t4) {
          var e3 = t4.w, i3 = e3.globals.dom.baseEl.querySelectorAll(".apexcharts-yaxis-annotations, .apexcharts-xaxis-annotations, .apexcharts-point-annotations");
          e3.globals.memory.methodsToExec.map(function(t5, i4) {
            "addText" !== t5.label && "addAnnotation" !== t5.label || e3.globals.memory.methodsToExec.splice(i4, 1);
          }), i3 = x2.listToArray(i3), Array.prototype.forEach.call(i3, function(t5) {
            for (; t5.firstChild; )
              t5.removeChild(t5.firstChild);
          });
        } }, { key: "removeAnnotation", value: function(t4, e3) {
          var i3 = t4.w, a3 = i3.globals.dom.baseEl.querySelectorAll(".".concat(e3));
          a3 && (i3.globals.memory.methodsToExec.map(function(t5, a4) {
            t5.id === e3 && i3.globals.memory.methodsToExec.splice(a4, 1);
          }), Array.prototype.forEach.call(a3, function(t5) {
            t5.parentElement.removeChild(t5);
          }));
        } }]), t3;
      }();
      var I2 = function() {
        function t3(e3) {
          a2(this, t3), this.ctx = e3, this.w = e3.w, this.months31 = [1, 3, 5, 7, 8, 10, 12], this.months30 = [2, 4, 6, 9, 11], this.daysCntOfYear = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334];
        }
        return r2(t3, [{ key: "isValidDate", value: function(t4) {
          return "number" != typeof t4 && !isNaN(this.parseDate(t4));
        } }, { key: "getTimeStamp", value: function(t4) {
          return Date.parse(t4) ? this.w.config.xaxis.labels.datetimeUTC ? new Date(new Date(t4).toISOString().substr(0, 25)).getTime() : new Date(t4).getTime() : t4;
        } }, { key: "getDate", value: function(t4) {
          return this.w.config.xaxis.labels.datetimeUTC ? new Date(new Date(t4).toUTCString()) : new Date(t4);
        } }, { key: "parseDate", value: function(t4) {
          var e3 = Date.parse(t4);
          if (!isNaN(e3))
            return this.getTimeStamp(t4);
          var i3 = Date.parse(t4.replace(/-/g, "/").replace(/[a-z]+/gi, " "));
          return i3 = this.getTimeStamp(i3);
        } }, { key: "parseDateWithTimezone", value: function(t4) {
          return Date.parse(t4.replace(/-/g, "/").replace(/[a-z]+/gi, " "));
        } }, { key: "formatDate", value: function(t4, e3) {
          var i3 = this.w.globals.locale, a3 = this.w.config.xaxis.labels.datetimeUTC, s3 = ["\0"].concat(u2(i3.months)), r3 = [""].concat(u2(i3.shortMonths)), o3 = [""].concat(u2(i3.days)), n3 = [""].concat(u2(i3.shortDays));
          function l3(t5, e4) {
            var i4 = t5 + "";
            for (e4 = e4 || 2; i4.length < e4; )
              i4 = "0" + i4;
            return i4;
          }
          var h3 = a3 ? t4.getUTCFullYear() : t4.getFullYear();
          e3 = (e3 = (e3 = e3.replace(/(^|[^\\])yyyy+/g, "$1" + h3)).replace(/(^|[^\\])yy/g, "$1" + h3.toString().substr(2, 2))).replace(/(^|[^\\])y/g, "$1" + h3);
          var c3 = (a3 ? t4.getUTCMonth() : t4.getMonth()) + 1;
          e3 = (e3 = (e3 = (e3 = e3.replace(/(^|[^\\])MMMM+/g, "$1" + s3[0])).replace(/(^|[^\\])MMM/g, "$1" + r3[0])).replace(/(^|[^\\])MM/g, "$1" + l3(c3))).replace(/(^|[^\\])M/g, "$1" + c3);
          var d3 = a3 ? t4.getUTCDate() : t4.getDate();
          e3 = (e3 = (e3 = (e3 = e3.replace(/(^|[^\\])dddd+/g, "$1" + o3[0])).replace(/(^|[^\\])ddd/g, "$1" + n3[0])).replace(/(^|[^\\])dd/g, "$1" + l3(d3))).replace(/(^|[^\\])d/g, "$1" + d3);
          var g3 = a3 ? t4.getUTCHours() : t4.getHours(), p3 = g3 > 12 ? g3 - 12 : 0 === g3 ? 12 : g3;
          e3 = (e3 = (e3 = (e3 = e3.replace(/(^|[^\\])HH+/g, "$1" + l3(g3))).replace(/(^|[^\\])H/g, "$1" + g3)).replace(/(^|[^\\])hh+/g, "$1" + l3(p3))).replace(/(^|[^\\])h/g, "$1" + p3);
          var f3 = a3 ? t4.getUTCMinutes() : t4.getMinutes();
          e3 = (e3 = e3.replace(/(^|[^\\])mm+/g, "$1" + l3(f3))).replace(/(^|[^\\])m/g, "$1" + f3);
          var x3 = a3 ? t4.getUTCSeconds() : t4.getSeconds();
          e3 = (e3 = e3.replace(/(^|[^\\])ss+/g, "$1" + l3(x3))).replace(/(^|[^\\])s/g, "$1" + x3);
          var b3 = a3 ? t4.getUTCMilliseconds() : t4.getMilliseconds();
          e3 = e3.replace(/(^|[^\\])fff+/g, "$1" + l3(b3, 3)), b3 = Math.round(b3 / 10), e3 = e3.replace(/(^|[^\\])ff/g, "$1" + l3(b3)), b3 = Math.round(b3 / 10);
          var v3 = g3 < 12 ? "AM" : "PM";
          e3 = (e3 = (e3 = e3.replace(/(^|[^\\])f/g, "$1" + b3)).replace(/(^|[^\\])TT+/g, "$1" + v3)).replace(/(^|[^\\])T/g, "$1" + v3.charAt(0));
          var m3 = v3.toLowerCase();
          e3 = (e3 = e3.replace(/(^|[^\\])tt+/g, "$1" + m3)).replace(/(^|[^\\])t/g, "$1" + m3.charAt(0));
          var y3 = -t4.getTimezoneOffset(), w3 = a3 || !y3 ? "Z" : y3 > 0 ? "+" : "-";
          if (!a3) {
            var k3 = (y3 = Math.abs(y3)) % 60;
            w3 += l3(Math.floor(y3 / 60)) + ":" + l3(k3);
          }
          e3 = e3.replace(/(^|[^\\])K/g, "$1" + w3);
          var A3 = (a3 ? t4.getUTCDay() : t4.getDay()) + 1;
          return e3 = (e3 = (e3 = (e3 = (e3 = e3.replace(new RegExp(o3[0], "g"), o3[A3])).replace(new RegExp(n3[0], "g"), n3[A3])).replace(new RegExp(s3[0], "g"), s3[c3])).replace(new RegExp(r3[0], "g"), r3[c3])).replace(/\\(.)/g, "$1");
        } }, { key: "getTimeUnitsfromTimestamp", value: function(t4, e3, i3) {
          var a3 = this.w;
          void 0 !== a3.config.xaxis.min && (t4 = a3.config.xaxis.min), void 0 !== a3.config.xaxis.max && (e3 = a3.config.xaxis.max);
          var s3 = this.getDate(t4), r3 = this.getDate(e3), o3 = this.formatDate(s3, "yyyy MM dd HH mm ss fff").split(" "), n3 = this.formatDate(r3, "yyyy MM dd HH mm ss fff").split(" ");
          return { minMillisecond: parseInt(o3[6], 10), maxMillisecond: parseInt(n3[6], 10), minSecond: parseInt(o3[5], 10), maxSecond: parseInt(n3[5], 10), minMinute: parseInt(o3[4], 10), maxMinute: parseInt(n3[4], 10), minHour: parseInt(o3[3], 10), maxHour: parseInt(n3[3], 10), minDate: parseInt(o3[2], 10), maxDate: parseInt(n3[2], 10), minMonth: parseInt(o3[1], 10) - 1, maxMonth: parseInt(n3[1], 10) - 1, minYear: parseInt(o3[0], 10), maxYear: parseInt(n3[0], 10) };
        } }, { key: "isLeapYear", value: function(t4) {
          return t4 % 4 == 0 && t4 % 100 != 0 || t4 % 400 == 0;
        } }, { key: "calculcateLastDaysOfMonth", value: function(t4, e3, i3) {
          return this.determineDaysOfMonths(t4, e3) - i3;
        } }, { key: "determineDaysOfYear", value: function(t4) {
          var e3 = 365;
          return this.isLeapYear(t4) && (e3 = 366), e3;
        } }, { key: "determineRemainingDaysOfYear", value: function(t4, e3, i3) {
          var a3 = this.daysCntOfYear[e3] + i3;
          return e3 > 1 && this.isLeapYear() && a3++, a3;
        } }, { key: "determineDaysOfMonths", value: function(t4, e3) {
          var i3 = 30;
          switch (t4 = x2.monthMod(t4), true) {
            case this.months30.indexOf(t4) > -1:
              2 === t4 && (i3 = this.isLeapYear(e3) ? 29 : 28);
              break;
            case this.months31.indexOf(t4) > -1:
            default:
              i3 = 31;
          }
          return i3;
        } }]), t3;
      }();
      var T2 = function() {
        function t3(e3) {
          a2(this, t3), this.ctx = e3, this.w = e3.w, this.tooltipKeyFormat = "dd MMM";
        }
        return r2(t3, [{ key: "xLabelFormat", value: function(t4, e3, i3, a3) {
          var s3 = this.w;
          if ("datetime" === s3.config.xaxis.type && void 0 === s3.config.xaxis.labels.formatter && void 0 === s3.config.tooltip.x.formatter) {
            var r3 = new I2(this.ctx);
            return r3.formatDate(r3.getDate(e3), s3.config.tooltip.x.format);
          }
          return t4(e3, i3, a3);
        } }, { key: "defaultGeneralFormatter", value: function(t4) {
          return Array.isArray(t4) ? t4.map(function(t5) {
            return t5;
          }) : t4;
        } }, { key: "defaultYFormatter", value: function(t4, e3, i3) {
          var a3 = this.w;
          return x2.isNumber(t4) && (t4 = 0 !== a3.globals.yValueDecimal ? t4.toFixed(void 0 !== e3.decimalsInFloat ? e3.decimalsInFloat : a3.globals.yValueDecimal) : a3.globals.maxYArr[i3] - a3.globals.minYArr[i3] < 5 ? t4.toFixed(1) : t4.toFixed(0)), t4;
        } }, { key: "setLabelFormatters", value: function() {
          var t4 = this, e3 = this.w;
          return e3.globals.xaxisTooltipFormatter = function(e4) {
            return t4.defaultGeneralFormatter(e4);
          }, e3.globals.ttKeyFormatter = function(e4) {
            return t4.defaultGeneralFormatter(e4);
          }, e3.globals.ttZFormatter = function(t5) {
            return t5;
          }, e3.globals.legendFormatter = function(e4) {
            return t4.defaultGeneralFormatter(e4);
          }, void 0 !== e3.config.xaxis.labels.formatter ? e3.globals.xLabelFormatter = e3.config.xaxis.labels.formatter : e3.globals.xLabelFormatter = function(t5) {
            if (x2.isNumber(t5)) {
              if (!e3.config.xaxis.convertedCatToNumeric && "numeric" === e3.config.xaxis.type) {
                if (x2.isNumber(e3.config.xaxis.decimalsInFloat))
                  return t5.toFixed(e3.config.xaxis.decimalsInFloat);
                var i3 = e3.globals.maxX - e3.globals.minX;
                return i3 > 0 && i3 < 100 ? t5.toFixed(1) : t5.toFixed(0);
              }
              if (e3.globals.isBarHorizontal) {
                if (e3.globals.maxY - e3.globals.minYArr < 4)
                  return t5.toFixed(1);
              }
              return t5.toFixed(0);
            }
            return t5;
          }, "function" == typeof e3.config.tooltip.x.formatter ? e3.globals.ttKeyFormatter = e3.config.tooltip.x.formatter : e3.globals.ttKeyFormatter = e3.globals.xLabelFormatter, "function" == typeof e3.config.xaxis.tooltip.formatter && (e3.globals.xaxisTooltipFormatter = e3.config.xaxis.tooltip.formatter), (Array.isArray(e3.config.tooltip.y) || void 0 !== e3.config.tooltip.y.formatter) && (e3.globals.ttVal = e3.config.tooltip.y), void 0 !== e3.config.tooltip.z.formatter && (e3.globals.ttZFormatter = e3.config.tooltip.z.formatter), void 0 !== e3.config.legend.formatter && (e3.globals.legendFormatter = e3.config.legend.formatter), e3.config.yaxis.forEach(function(i3, a3) {
            void 0 !== i3.labels.formatter ? e3.globals.yLabelFormatters[a3] = i3.labels.formatter : e3.globals.yLabelFormatters[a3] = function(s3) {
              return e3.globals.xyCharts ? Array.isArray(s3) ? s3.map(function(e4) {
                return t4.defaultYFormatter(e4, i3, a3);
              }) : t4.defaultYFormatter(s3, i3, a3) : s3;
            };
          }), e3.globals;
        } }, { key: "heatmapLabelFormatters", value: function() {
          var t4 = this.w;
          if ("heatmap" === t4.config.chart.type) {
            t4.globals.yAxisScale[0].result = t4.globals.seriesNames.slice();
            var e3 = t4.globals.seriesNames.reduce(function(t5, e4) {
              return t5.length > e4.length ? t5 : e4;
            }, 0);
            t4.globals.yAxisScale[0].niceMax = e3, t4.globals.yAxisScale[0].niceMin = e3;
          }
        } }]), t3;
      }();
      var M2 = function(t3) {
        var e3, i3 = t3.isTimeline, a3 = t3.ctx, s3 = t3.seriesIndex, r3 = t3.dataPointIndex, o3 = t3.y1, n3 = t3.y2, l3 = t3.w, h3 = l3.globals.seriesRangeStart[s3][r3], c3 = l3.globals.seriesRangeEnd[s3][r3], d3 = l3.globals.labels[r3], g3 = l3.config.series[s3].name ? l3.config.series[s3].name : "", u3 = l3.globals.ttKeyFormatter, p3 = l3.config.tooltip.y.title.formatter, f3 = { w: l3, seriesIndex: s3, dataPointIndex: r3, start: h3, end: c3 };
        ("function" == typeof p3 && (g3 = p3(g3, f3)), null !== (e3 = l3.config.series[s3].data[r3]) && void 0 !== e3 && e3.x && (d3 = l3.config.series[s3].data[r3].x), i3) || "datetime" === l3.config.xaxis.type && (d3 = new T2(a3).xLabelFormat(l3.globals.ttKeyFormatter, d3, d3, { i: void 0, dateFormatter: new I2(a3).formatDate, w: l3 }));
        "function" == typeof u3 && (d3 = u3(d3, f3)), Number.isFinite(o3) && Number.isFinite(n3) && (h3 = o3, c3 = n3);
        var x3 = "", b3 = "", v3 = l3.globals.colors[s3];
        if (void 0 === l3.config.tooltip.x.formatter)
          if ("datetime" === l3.config.xaxis.type) {
            var m3 = new I2(a3);
            x3 = m3.formatDate(m3.getDate(h3), l3.config.tooltip.x.format), b3 = m3.formatDate(m3.getDate(c3), l3.config.tooltip.x.format);
          } else
            x3 = h3, b3 = c3;
        else
          x3 = l3.config.tooltip.x.formatter(h3), b3 = l3.config.tooltip.x.formatter(c3);
        return { start: h3, end: c3, startVal: x3, endVal: b3, ylabel: d3, color: v3, seriesName: g3 };
      };
      var z2 = function(t3) {
        var e3 = t3.color, i3 = t3.seriesName, a3 = t3.ylabel, s3 = t3.start, r3 = t3.end, o3 = t3.seriesIndex, n3 = t3.dataPointIndex, l3 = t3.ctx.tooltip.tooltipLabels.getFormatters(o3);
        s3 = l3.yLbFormatter(s3), r3 = l3.yLbFormatter(r3);
        var h3 = l3.yLbFormatter(t3.w.globals.series[o3][n3]), c3 = '<span class="value start-value">\n  '.concat(s3, '\n  </span> <span class="separator">-</span> <span class="value end-value">\n  ').concat(r3, "\n  </span>");
        return '<div class="apexcharts-tooltip-rangebar"><div> <span class="series-name" style="color: ' + e3 + '">' + (i3 || "") + '</span></div><div> <span class="category">' + a3 + ": </span> " + (t3.w.globals.comboCharts ? "rangeArea" === t3.w.config.series[o3].type || "rangeBar" === t3.w.config.series[o3].type ? c3 : "<span>".concat(h3, "</span>") : c3) + " </div></div>";
      };
      var X2 = function() {
        function t3(e3) {
          a2(this, t3), this.opts = e3;
        }
        return r2(t3, [{ key: "hideYAxis", value: function() {
          this.opts.yaxis[0].show = false, this.opts.yaxis[0].title.text = "", this.opts.yaxis[0].axisBorder.show = false, this.opts.yaxis[0].axisTicks.show = false, this.opts.yaxis[0].floating = true;
        } }, { key: "line", value: function() {
          return { chart: { animations: { easing: "swing" } }, dataLabels: { enabled: false }, stroke: { width: 5, curve: "straight" }, markers: { size: 0, hover: { sizeOffset: 6 } }, xaxis: { crosshairs: { width: 1 } } };
        } }, { key: "sparkline", value: function(t4) {
          this.hideYAxis();
          return x2.extend(t4, { grid: { show: false, padding: { left: 0, right: 0, top: 0, bottom: 0 } }, legend: { show: false }, xaxis: { labels: { show: false }, tooltip: { enabled: false }, axisBorder: { show: false }, axisTicks: { show: false } }, chart: { toolbar: { show: false }, zoom: { enabled: false } }, dataLabels: { enabled: false } });
        } }, { key: "bar", value: function() {
          return { chart: { stacked: false, animations: { easing: "swing" } }, plotOptions: { bar: { dataLabels: { position: "center" } } }, dataLabels: { style: { colors: ["#fff"] }, background: { enabled: false } }, stroke: { width: 0, lineCap: "round" }, fill: { opacity: 0.85 }, legend: { markers: { shape: "square", radius: 2, size: 8 } }, tooltip: { shared: false, intersect: true }, xaxis: { tooltip: { enabled: false }, tickPlacement: "between", crosshairs: { width: "barWidth", position: "back", fill: { type: "gradient" }, dropShadow: { enabled: false }, stroke: { width: 0 } } } };
        } }, { key: "funnel", value: function() {
          return this.hideYAxis(), e2(e2({}, this.bar()), {}, { chart: { animations: { easing: "linear", speed: 800, animateGradually: { enabled: false } } }, plotOptions: { bar: { horizontal: true, borderRadiusApplication: "around", borderRadius: 0, dataLabels: { position: "center" } } }, grid: { show: false, padding: { left: 0, right: 0 } }, xaxis: { labels: { show: false }, tooltip: { enabled: false }, axisBorder: { show: false }, axisTicks: { show: false } } });
        } }, { key: "candlestick", value: function() {
          var t4 = this;
          return { stroke: { width: 1, colors: ["#333"] }, fill: { opacity: 1 }, dataLabels: { enabled: false }, tooltip: { shared: true, custom: function(e3) {
            var i3 = e3.seriesIndex, a3 = e3.dataPointIndex, s3 = e3.w;
            return t4._getBoxTooltip(s3, i3, a3, ["Open", "High", "", "Low", "Close"], "candlestick");
          } }, states: { active: { filter: { type: "none" } } }, xaxis: { crosshairs: { width: 1 } } };
        } }, { key: "boxPlot", value: function() {
          var t4 = this;
          return { chart: { animations: { dynamicAnimation: { enabled: false } } }, stroke: { width: 1, colors: ["#24292e"] }, dataLabels: { enabled: false }, tooltip: { shared: true, custom: function(e3) {
            var i3 = e3.seriesIndex, a3 = e3.dataPointIndex, s3 = e3.w;
            return t4._getBoxTooltip(s3, i3, a3, ["Minimum", "Q1", "Median", "Q3", "Maximum"], "boxPlot");
          } }, markers: { size: 5, strokeWidth: 1, strokeColors: "#111" }, xaxis: { crosshairs: { width: 1 } } };
        } }, { key: "rangeBar", value: function() {
          return { chart: { animations: { animateGradually: false } }, stroke: { width: 0, lineCap: "square" }, plotOptions: { bar: { borderRadius: 0, dataLabels: { position: "center" } } }, dataLabels: { enabled: false, formatter: function(t4, e3) {
            e3.ctx;
            var i3 = e3.seriesIndex, a3 = e3.dataPointIndex, s3 = e3.w, r3 = function() {
              var t5 = s3.globals.seriesRangeStart[i3][a3];
              return s3.globals.seriesRangeEnd[i3][a3] - t5;
            };
            return s3.globals.comboCharts ? "rangeBar" === s3.config.series[i3].type || "rangeArea" === s3.config.series[i3].type ? r3() : t4 : r3();
          }, background: { enabled: false }, style: { colors: ["#fff"] } }, markers: { size: 10 }, tooltip: { shared: false, followCursor: true, custom: function(t4) {
            return t4.w.config.plotOptions && t4.w.config.plotOptions.bar && t4.w.config.plotOptions.bar.horizontal ? function(t5) {
              var i3 = M2(e2(e2({}, t5), {}, { isTimeline: true })), a3 = i3.color, s3 = i3.seriesName, r3 = i3.ylabel, o3 = i3.startVal, n3 = i3.endVal;
              return z2(e2(e2({}, t5), {}, { color: a3, seriesName: s3, ylabel: r3, start: o3, end: n3 }));
            }(t4) : function(t5) {
              var i3 = M2(t5), a3 = i3.color, s3 = i3.seriesName, r3 = i3.ylabel, o3 = i3.start, n3 = i3.end;
              return z2(e2(e2({}, t5), {}, { color: a3, seriesName: s3, ylabel: r3, start: o3, end: n3 }));
            }(t4);
          } }, xaxis: { tickPlacement: "between", tooltip: { enabled: false }, crosshairs: { stroke: { width: 0 } } } };
        } }, { key: "dumbbell", value: function(t4) {
          var e3, i3;
          return null !== (e3 = t4.plotOptions.bar) && void 0 !== e3 && e3.barHeight || (t4.plotOptions.bar.barHeight = 2), null !== (i3 = t4.plotOptions.bar) && void 0 !== i3 && i3.columnWidth || (t4.plotOptions.bar.columnWidth = 2), t4;
        } }, { key: "area", value: function() {
          return { stroke: { width: 4, fill: { type: "solid", gradient: { inverseColors: false, shade: "light", type: "vertical", opacityFrom: 0.65, opacityTo: 0.5, stops: [0, 100, 100] } } }, fill: { type: "gradient", gradient: { inverseColors: false, shade: "light", type: "vertical", opacityFrom: 0.65, opacityTo: 0.5, stops: [0, 100, 100] } }, markers: { size: 0, hover: { sizeOffset: 6 } }, tooltip: { followCursor: false } };
        } }, { key: "rangeArea", value: function() {
          return { stroke: { curve: "straight", width: 0 }, fill: { type: "solid", opacity: 0.6 }, markers: { size: 0 }, states: { hover: { filter: { type: "none" } }, active: { filter: { type: "none" } } }, tooltip: { intersect: false, shared: true, followCursor: true, custom: function(t4) {
            return function(t5) {
              var i3 = M2(t5), a3 = i3.color, s3 = i3.seriesName, r3 = i3.ylabel, o3 = i3.start, n3 = i3.end;
              return z2(e2(e2({}, t5), {}, { color: a3, seriesName: s3, ylabel: r3, start: o3, end: n3 }));
            }(t4);
          } } };
        } }, { key: "brush", value: function(t4) {
          return x2.extend(t4, { chart: { toolbar: { autoSelected: "selection", show: false }, zoom: { enabled: false } }, dataLabels: { enabled: false }, stroke: { width: 1 }, tooltip: { enabled: false }, xaxis: { tooltip: { enabled: false } } });
        } }, { key: "stacked100", value: function(t4) {
          t4.dataLabels = t4.dataLabels || {}, t4.dataLabels.formatter = t4.dataLabels.formatter || void 0;
          var e3 = t4.dataLabels.formatter;
          return t4.yaxis.forEach(function(e4, i3) {
            t4.yaxis[i3].min = 0, t4.yaxis[i3].max = 100;
          }), "bar" === t4.chart.type && (t4.dataLabels.formatter = e3 || function(t5) {
            return "number" == typeof t5 && t5 ? t5.toFixed(0) + "%" : t5;
          }), t4;
        } }, { key: "stackedBars", value: function() {
          var t4 = this.bar();
          return e2(e2({}, t4), {}, { plotOptions: e2(e2({}, t4.plotOptions), {}, { bar: e2(e2({}, t4.plotOptions.bar), {}, { borderRadiusApplication: "end", borderRadiusWhenStacked: "last" }) }) });
        } }, { key: "convertCatToNumeric", value: function(t4) {
          return t4.xaxis.convertedCatToNumeric = true, t4;
        } }, { key: "convertCatToNumericXaxis", value: function(t4, e3, i3) {
          t4.xaxis.type = "numeric", t4.xaxis.labels = t4.xaxis.labels || {}, t4.xaxis.labels.formatter = t4.xaxis.labels.formatter || function(t5) {
            return x2.isNumber(t5) ? Math.floor(t5) : t5;
          };
          var a3 = t4.xaxis.labels.formatter, s3 = t4.xaxis.categories && t4.xaxis.categories.length ? t4.xaxis.categories : t4.labels;
          return i3 && i3.length && (s3 = i3.map(function(t5) {
            return Array.isArray(t5) ? t5 : String(t5);
          })), s3 && s3.length && (t4.xaxis.labels.formatter = function(t5) {
            return x2.isNumber(t5) ? a3(s3[Math.floor(t5) - 1]) : a3(t5);
          }), t4.xaxis.categories = [], t4.labels = [], t4.xaxis.tickAmount = t4.xaxis.tickAmount || "dataPoints", t4;
        } }, { key: "bubble", value: function() {
          return { dataLabels: { style: { colors: ["#fff"] } }, tooltip: { shared: false, intersect: true }, xaxis: { crosshairs: { width: 0 } }, fill: { type: "solid", gradient: { shade: "light", inverse: true, shadeIntensity: 0.55, opacityFrom: 0.4, opacityTo: 0.8 } } };
        } }, { key: "scatter", value: function() {
          return { dataLabels: { enabled: false }, tooltip: { shared: false, intersect: true }, markers: { size: 6, strokeWidth: 1, hover: { sizeOffset: 2 } } };
        } }, { key: "heatmap", value: function() {
          return { chart: { stacked: false }, fill: { opacity: 1 }, dataLabels: { style: { colors: ["#fff"] } }, stroke: { colors: ["#fff"] }, tooltip: { followCursor: true, marker: { show: false }, x: { show: false } }, legend: { position: "top", markers: { shape: "square", size: 10, offsetY: 2 } }, grid: { padding: { right: 20 } } };
        } }, { key: "treemap", value: function() {
          return { chart: { zoom: { enabled: false } }, dataLabels: { style: { fontSize: 14, fontWeight: 600, colors: ["#fff"] } }, stroke: { show: true, width: 2, colors: ["#fff"] }, legend: { show: false }, fill: { gradient: { stops: [0, 100] } }, tooltip: { followCursor: true, x: { show: false } }, grid: { padding: { left: 0, right: 0 } }, xaxis: { crosshairs: { show: false }, tooltip: { enabled: false } } };
        } }, { key: "pie", value: function() {
          return { chart: { toolbar: { show: false } }, plotOptions: { pie: { donut: { labels: { show: false } } } }, dataLabels: { formatter: function(t4) {
            return t4.toFixed(1) + "%";
          }, style: { colors: ["#fff"] }, background: { enabled: false }, dropShadow: { enabled: true } }, stroke: { colors: ["#fff"] }, fill: { opacity: 1, gradient: { shade: "light", stops: [0, 100] } }, tooltip: { theme: "dark", fillSeriesColor: true }, legend: { position: "right" } };
        } }, { key: "donut", value: function() {
          return { chart: { toolbar: { show: false } }, dataLabels: { formatter: function(t4) {
            return t4.toFixed(1) + "%";
          }, style: { colors: ["#fff"] }, background: { enabled: false }, dropShadow: { enabled: true } }, stroke: { colors: ["#fff"] }, fill: { opacity: 1, gradient: { shade: "light", shadeIntensity: 0.35, stops: [80, 100], opacityFrom: 1, opacityTo: 1 } }, tooltip: { theme: "dark", fillSeriesColor: true }, legend: { position: "right" } };
        } }, { key: "polarArea", value: function() {
          return this.opts.yaxis[0].tickAmount = this.opts.yaxis[0].tickAmount ? this.opts.yaxis[0].tickAmount : 6, { chart: { toolbar: { show: false } }, dataLabels: { formatter: function(t4) {
            return t4.toFixed(1) + "%";
          }, enabled: false }, stroke: { show: true, width: 2 }, fill: { opacity: 0.7 }, tooltip: { theme: "dark", fillSeriesColor: true }, legend: { position: "right" } };
        } }, { key: "radar", value: function() {
          return this.opts.yaxis[0].labels.offsetY = this.opts.yaxis[0].labels.offsetY ? this.opts.yaxis[0].labels.offsetY : 6, { dataLabels: { enabled: false, style: { fontSize: "11px" } }, stroke: { width: 2 }, markers: { size: 3, strokeWidth: 1, strokeOpacity: 1 }, fill: { opacity: 0.2 }, tooltip: { shared: false, intersect: true, followCursor: true }, grid: { show: false }, xaxis: { labels: { formatter: function(t4) {
            return t4;
          }, style: { colors: ["#a8a8a8"], fontSize: "11px" } }, tooltip: { enabled: false }, crosshairs: { show: false } } };
        } }, { key: "radialBar", value: function() {
          return { chart: { animations: { dynamicAnimation: { enabled: true, speed: 800 } }, toolbar: { show: false } }, fill: { gradient: { shade: "dark", shadeIntensity: 0.4, inverseColors: false, type: "diagonal2", opacityFrom: 1, opacityTo: 1, stops: [70, 98, 100] } }, legend: { show: false, position: "right" }, tooltip: { enabled: false, fillSeriesColor: true } };
        } }, { key: "_getBoxTooltip", value: function(t4, e3, i3, a3, s3) {
          var r3 = t4.globals.seriesCandleO[e3][i3], o3 = t4.globals.seriesCandleH[e3][i3], n3 = t4.globals.seriesCandleM[e3][i3], l3 = t4.globals.seriesCandleL[e3][i3], h3 = t4.globals.seriesCandleC[e3][i3];
          return t4.config.series[e3].type && t4.config.series[e3].type !== s3 ? '<div class="apexcharts-custom-tooltip">\n          '.concat(t4.config.series[e3].name ? t4.config.series[e3].name : "series-" + (e3 + 1), ": <strong>").concat(t4.globals.series[e3][i3], "</strong>\n        </div>") : '<div class="apexcharts-tooltip-box apexcharts-tooltip-'.concat(t4.config.chart.type, '">') + "<div>".concat(a3[0], ': <span class="value">') + r3 + "</span></div>" + "<div>".concat(a3[1], ': <span class="value">') + o3 + "</span></div>" + (n3 ? "<div>".concat(a3[2], ': <span class="value">') + n3 + "</span></div>" : "") + "<div>".concat(a3[3], ': <span class="value">') + l3 + "</span></div>" + "<div>".concat(a3[4], ': <span class="value">') + h3 + "</span></div></div>";
        } }]), t3;
      }();
      var E2 = function() {
        function t3(e3) {
          a2(this, t3), this.opts = e3;
        }
        return r2(t3, [{ key: "init", value: function(t4) {
          var e3 = t4.responsiveOverride, a3 = this.opts, s3 = new L2(), r3 = new X2(a3);
          this.chartType = a3.chart.type, a3 = this.extendYAxis(a3), a3 = this.extendAnnotations(a3);
          var o3 = s3.init(), n3 = {};
          if (a3 && "object" === i2(a3)) {
            var l3, h3, c3, d3, g3, u3, p3, f3, b3 = {};
            b3 = -1 !== ["line", "area", "bar", "candlestick", "boxPlot", "rangeBar", "rangeArea", "bubble", "scatter", "heatmap", "treemap", "pie", "polarArea", "donut", "radar", "radialBar"].indexOf(a3.chart.type) ? r3[a3.chart.type]() : r3.line(), null !== (l3 = a3.plotOptions) && void 0 !== l3 && null !== (h3 = l3.bar) && void 0 !== h3 && h3.isFunnel && (b3 = r3.funnel()), a3.chart.stacked && "bar" === a3.chart.type && (b3 = r3.stackedBars()), null !== (c3 = a3.chart.brush) && void 0 !== c3 && c3.enabled && (b3 = r3.brush(b3)), a3.chart.stacked && "100%" === a3.chart.stackType && (a3 = r3.stacked100(a3)), null !== (d3 = a3.plotOptions) && void 0 !== d3 && null !== (g3 = d3.bar) && void 0 !== g3 && g3.isDumbbell && (a3 = r3.dumbbell(a3)), this.checkForDarkTheme(window.Apex), this.checkForDarkTheme(a3), a3.xaxis = a3.xaxis || window.Apex.xaxis || {}, e3 || (a3.xaxis.convertedCatToNumeric = false), (null !== (u3 = (a3 = this.checkForCatToNumericXAxis(this.chartType, b3, a3)).chart.sparkline) && void 0 !== u3 && u3.enabled || null !== (p3 = window.Apex.chart) && void 0 !== p3 && null !== (f3 = p3.sparkline) && void 0 !== f3 && f3.enabled) && (b3 = r3.sparkline(b3)), n3 = x2.extend(o3, b3);
          }
          var v3 = x2.extend(n3, window.Apex);
          return o3 = x2.extend(v3, a3), o3 = this.handleUserInputErrors(o3);
        } }, { key: "checkForCatToNumericXAxis", value: function(t4, e3, i3) {
          var a3, s3, r3 = new X2(i3), o3 = ("bar" === t4 || "boxPlot" === t4) && (null === (a3 = i3.plotOptions) || void 0 === a3 || null === (s3 = a3.bar) || void 0 === s3 ? void 0 : s3.horizontal), n3 = "pie" === t4 || "polarArea" === t4 || "donut" === t4 || "radar" === t4 || "radialBar" === t4 || "heatmap" === t4, l3 = "datetime" !== i3.xaxis.type && "numeric" !== i3.xaxis.type, h3 = i3.xaxis.tickPlacement ? i3.xaxis.tickPlacement : e3.xaxis && e3.xaxis.tickPlacement;
          return o3 || n3 || !l3 || "between" === h3 || (i3 = r3.convertCatToNumeric(i3)), i3;
        } }, { key: "extendYAxis", value: function(t4, e3) {
          var i3 = new L2();
          (void 0 === t4.yaxis || !t4.yaxis || Array.isArray(t4.yaxis) && 0 === t4.yaxis.length) && (t4.yaxis = {}), t4.yaxis.constructor !== Array && window.Apex.yaxis && window.Apex.yaxis.constructor !== Array && (t4.yaxis = x2.extend(t4.yaxis, window.Apex.yaxis)), t4.yaxis.constructor !== Array ? t4.yaxis = [x2.extend(i3.yAxis, t4.yaxis)] : t4.yaxis = x2.extendArray(t4.yaxis, i3.yAxis);
          var a3 = false;
          t4.yaxis.forEach(function(t5) {
            t5.logarithmic && (a3 = true);
          });
          var s3 = t4.series;
          return e3 && !s3 && (s3 = e3.config.series), a3 && s3.length !== t4.yaxis.length && s3.length && (t4.yaxis = s3.map(function(e4, a4) {
            if (e4.name || (s3[a4].name = "series-".concat(a4 + 1)), t4.yaxis[a4])
              return t4.yaxis[a4].seriesName = s3[a4].name, t4.yaxis[a4];
            var r3 = x2.extend(i3.yAxis, t4.yaxis[0]);
            return r3.show = false, r3;
          })), a3 && s3.length > 1 && s3.length !== t4.yaxis.length && console.warn("A multi-series logarithmic chart should have equal number of series and y-axes"), t4;
        } }, { key: "extendAnnotations", value: function(t4) {
          return void 0 === t4.annotations && (t4.annotations = {}, t4.annotations.yaxis = [], t4.annotations.xaxis = [], t4.annotations.points = []), t4 = this.extendYAxisAnnotations(t4), t4 = this.extendXAxisAnnotations(t4), t4 = this.extendPointAnnotations(t4);
        } }, { key: "extendYAxisAnnotations", value: function(t4) {
          var e3 = new L2();
          return t4.annotations.yaxis = x2.extendArray(void 0 !== t4.annotations.yaxis ? t4.annotations.yaxis : [], e3.yAxisAnnotation), t4;
        } }, { key: "extendXAxisAnnotations", value: function(t4) {
          var e3 = new L2();
          return t4.annotations.xaxis = x2.extendArray(void 0 !== t4.annotations.xaxis ? t4.annotations.xaxis : [], e3.xAxisAnnotation), t4;
        } }, { key: "extendPointAnnotations", value: function(t4) {
          var e3 = new L2();
          return t4.annotations.points = x2.extendArray(void 0 !== t4.annotations.points ? t4.annotations.points : [], e3.pointAnnotation), t4;
        } }, { key: "checkForDarkTheme", value: function(t4) {
          t4.theme && "dark" === t4.theme.mode && (t4.tooltip || (t4.tooltip = {}), "light" !== t4.tooltip.theme && (t4.tooltip.theme = "dark"), t4.chart.foreColor || (t4.chart.foreColor = "#f6f7f8"), t4.chart.background || (t4.chart.background = "#424242"), t4.theme.palette || (t4.theme.palette = "palette4"));
        } }, { key: "handleUserInputErrors", value: function(t4) {
          var e3 = t4;
          if (e3.tooltip.shared && e3.tooltip.intersect)
            throw new Error("tooltip.shared cannot be enabled when tooltip.intersect is true. Turn off any other option by setting it to false.");
          if ("bar" === e3.chart.type && e3.plotOptions.bar.horizontal) {
            if (e3.yaxis.length > 1)
              throw new Error("Multiple Y Axis for bars are not supported. Switch to column chart by setting plotOptions.bar.horizontal=false");
            e3.yaxis[0].reversed && (e3.yaxis[0].opposite = true), e3.xaxis.tooltip.enabled = false, e3.yaxis[0].tooltip.enabled = false, e3.chart.zoom.enabled = false;
          }
          return "bar" !== e3.chart.type && "rangeBar" !== e3.chart.type || e3.tooltip.shared && "barWidth" === e3.xaxis.crosshairs.width && e3.series.length > 1 && (e3.xaxis.crosshairs.width = "tickWidth"), "candlestick" !== e3.chart.type && "boxPlot" !== e3.chart.type || e3.yaxis[0].reversed && (console.warn("Reversed y-axis in ".concat(e3.chart.type, " chart is not supported.")), e3.yaxis[0].reversed = false), e3;
        } }]), t3;
      }();
      var Y2 = function() {
        function t3() {
          a2(this, t3);
        }
        return r2(t3, [{ key: "initGlobalVars", value: function(t4) {
          t4.series = [], t4.seriesCandleO = [], t4.seriesCandleH = [], t4.seriesCandleM = [], t4.seriesCandleL = [], t4.seriesCandleC = [], t4.seriesRangeStart = [], t4.seriesRangeEnd = [], t4.seriesRange = [], t4.seriesPercent = [], t4.seriesGoals = [], t4.seriesX = [], t4.seriesZ = [], t4.seriesNames = [], t4.seriesTotals = [], t4.seriesLog = [], t4.seriesColors = [], t4.stackedSeriesTotals = [], t4.seriesXvalues = [], t4.seriesYvalues = [], t4.labels = [], t4.hasXaxisGroups = false, t4.groups = [], t4.hasSeriesGroups = false, t4.seriesGroups = [], t4.categoryLabels = [], t4.timescaleLabels = [], t4.noLabelsProvided = false, t4.resizeTimer = null, t4.selectionResizeTimer = null, t4.delayedElements = [], t4.pointsArray = [], t4.dataLabelsRects = [], t4.isXNumeric = false, t4.skipLastTimelinelabel = false, t4.skipFirstTimelinelabel = false, t4.isDataXYZ = false, t4.isMultiLineX = false, t4.isMultipleYAxis = false, t4.maxY = -Number.MAX_VALUE, t4.minY = Number.MIN_VALUE, t4.minYArr = [], t4.maxYArr = [], t4.maxX = -Number.MAX_VALUE, t4.minX = Number.MAX_VALUE, t4.initialMaxX = -Number.MAX_VALUE, t4.initialMinX = Number.MAX_VALUE, t4.maxDate = 0, t4.minDate = Number.MAX_VALUE, t4.minZ = Number.MAX_VALUE, t4.maxZ = -Number.MAX_VALUE, t4.minXDiff = Number.MAX_VALUE, t4.yAxisScale = [], t4.xAxisScale = null, t4.xAxisTicksPositions = [], t4.yLabelsCoords = [], t4.yTitleCoords = [], t4.barPadForNumericAxis = 0, t4.padHorizontal = 0, t4.xRange = 0, t4.yRange = [], t4.zRange = 0, t4.dataPoints = 0, t4.xTickAmount = 0;
        } }, { key: "globalVars", value: function(t4) {
          return { chartID: null, cuid: null, events: { beforeMount: [], mounted: [], updated: [], clicked: [], selection: [], dataPointSelection: [], zoomed: [], scrolled: [] }, colors: [], clientX: null, clientY: null, fill: { colors: [] }, stroke: { colors: [] }, dataLabels: { style: { colors: [] } }, radarPolygons: { fill: { colors: [] } }, markers: { colors: [], size: t4.markers.size, largestSize: 0 }, animationEnded: false, isTouchDevice: "ontouchstart" in window || navigator.msMaxTouchPoints, isDirty: false, isExecCalled: false, initialConfig: null, initialSeries: [], lastXAxis: [], lastYAxis: [], columnSeries: null, labels: [], timescaleLabels: [], noLabelsProvided: false, allSeriesCollapsed: false, collapsedSeries: [], collapsedSeriesIndices: [], ancillaryCollapsedSeries: [], ancillaryCollapsedSeriesIndices: [], risingSeries: [], dataFormatXNumeric: false, capturedSeriesIndex: -1, capturedDataPointIndex: -1, selectedDataPoints: [], goldenPadding: 35, invalidLogScale: false, ignoreYAxisIndexes: [], yAxisSameScaleIndices: [], maxValsInArrayIndex: 0, radialSize: 0, selection: void 0, zoomEnabled: "zoom" === t4.chart.toolbar.autoSelected && t4.chart.toolbar.tools.zoom && t4.chart.zoom.enabled, panEnabled: "pan" === t4.chart.toolbar.autoSelected && t4.chart.toolbar.tools.pan, selectionEnabled: "selection" === t4.chart.toolbar.autoSelected && t4.chart.toolbar.tools.selection, yaxis: null, mousedown: false, lastClientPosition: {}, visibleXRange: void 0, yValueDecimal: 0, total: 0, SVGNS: "http://www.w3.org/2000/svg", svgWidth: 0, svgHeight: 0, noData: false, locale: {}, dom: {}, memory: { methodsToExec: [] }, shouldAnimate: true, skipLastTimelinelabel: false, skipFirstTimelinelabel: false, delayedElements: [], axisCharts: true, isDataXYZ: false, resized: false, resizeTimer: null, comboCharts: false, dataChanged: false, previousPaths: [], allSeriesHasEqualX: true, pointsArray: [], dataLabelsRects: [], lastDrawnDataLabelsIndexes: [], hasNullValues: false, easing: null, zoomed: false, gridWidth: 0, gridHeight: 0, rotateXLabels: false, defaultLabels: false, xLabelFormatter: void 0, yLabelFormatters: [], xaxisTooltipFormatter: void 0, ttKeyFormatter: void 0, ttVal: void 0, ttZFormatter: void 0, LINE_HEIGHT_RATIO: 1.618, xAxisLabelsHeight: 0, xAxisGroupLabelsHeight: 0, xAxisLabelsWidth: 0, yAxisLabelsWidth: 0, scaleX: 1, scaleY: 1, translateX: 0, translateY: 0, translateYAxisX: [], yAxisWidths: [], translateXAxisY: 0, translateXAxisX: 0, tooltip: null };
        } }, { key: "init", value: function(t4) {
          var e3 = this.globalVars(t4);
          return this.initGlobalVars(e3), e3.initialConfig = x2.extend({}, t4), e3.initialSeries = x2.clone(t4.series), e3.lastXAxis = x2.clone(e3.initialConfig.xaxis), e3.lastYAxis = x2.clone(e3.initialConfig.yaxis), e3;
        } }]), t3;
      }();
      var F2 = function() {
        function t3(e3) {
          a2(this, t3), this.opts = e3;
        }
        return r2(t3, [{ key: "init", value: function() {
          var t4 = new E2(this.opts).init({ responsiveOverride: false });
          return { config: t4, globals: new Y2().init(t4) };
        } }]), t3;
      }();
      var R2 = function() {
        function t3(e3) {
          a2(this, t3), this.ctx = e3, this.w = e3.w, this.opts = null, this.seriesIndex = 0;
        }
        return r2(t3, [{ key: "clippedImgArea", value: function(t4) {
          var e3 = this.w, i3 = e3.config, a3 = parseInt(e3.globals.gridWidth, 10), s3 = parseInt(e3.globals.gridHeight, 10), r3 = a3 > s3 ? a3 : s3, o3 = t4.image, n3 = 0, l3 = 0;
          void 0 === t4.width && void 0 === t4.height ? void 0 !== i3.fill.image.width && void 0 !== i3.fill.image.height ? (n3 = i3.fill.image.width + 1, l3 = i3.fill.image.height) : (n3 = r3 + 1, l3 = r3) : (n3 = t4.width, l3 = t4.height);
          var h3 = document.createElementNS(e3.globals.SVGNS, "pattern");
          m2.setAttrs(h3, { id: t4.patternID, patternUnits: t4.patternUnits ? t4.patternUnits : "userSpaceOnUse", width: n3 + "px", height: l3 + "px" });
          var c3 = document.createElementNS(e3.globals.SVGNS, "image");
          h3.appendChild(c3), c3.setAttributeNS(window.SVG.xlink, "href", o3), m2.setAttrs(c3, { x: 0, y: 0, preserveAspectRatio: "none", width: n3 + "px", height: l3 + "px" }), c3.style.opacity = t4.opacity, e3.globals.dom.elDefs.node.appendChild(h3);
        } }, { key: "getSeriesIndex", value: function(t4) {
          var e3 = this.w, i3 = e3.config.chart.type;
          return ("bar" === i3 || "rangeBar" === i3) && e3.config.plotOptions.bar.distributed || "heatmap" === i3 || "treemap" === i3 ? this.seriesIndex = t4.seriesNumber : this.seriesIndex = t4.seriesNumber % e3.globals.series.length, this.seriesIndex;
        } }, { key: "fillPath", value: function(t4) {
          var e3 = this.w;
          this.opts = t4;
          var i3, a3, s3, r3 = this.w.config;
          this.seriesIndex = this.getSeriesIndex(t4);
          var o3 = this.getFillColors()[this.seriesIndex];
          void 0 !== e3.globals.seriesColors[this.seriesIndex] && (o3 = e3.globals.seriesColors[this.seriesIndex]), "function" == typeof o3 && (o3 = o3({ seriesIndex: this.seriesIndex, dataPointIndex: t4.dataPointIndex, value: t4.value, w: e3 }));
          var n3 = t4.fillType ? t4.fillType : this.getFillType(this.seriesIndex), l3 = Array.isArray(r3.fill.opacity) ? r3.fill.opacity[this.seriesIndex] : r3.fill.opacity;
          t4.color && (o3 = t4.color), o3 || (o3 = "#fff", console.warn("undefined color - ApexCharts"));
          var h3 = o3;
          if (-1 === o3.indexOf("rgb") ? o3.length < 9 && (h3 = x2.hexToRgba(o3, l3)) : o3.indexOf("rgba") > -1 && (l3 = x2.getOpacityFromRGBA(o3)), t4.opacity && (l3 = t4.opacity), "pattern" === n3 && (a3 = this.handlePatternFill({ fillConfig: t4.fillConfig, patternFill: a3, fillColor: o3, fillOpacity: l3, defaultColor: h3 })), "gradient" === n3 && (s3 = this.handleGradientFill({ fillConfig: t4.fillConfig, fillColor: o3, fillOpacity: l3, i: this.seriesIndex })), "image" === n3) {
            var c3 = r3.fill.image.src, d3 = t4.patternID ? t4.patternID : "";
            this.clippedImgArea({ opacity: l3, image: Array.isArray(c3) ? t4.seriesNumber < c3.length ? c3[t4.seriesNumber] : c3[0] : c3, width: t4.width ? t4.width : void 0, height: t4.height ? t4.height : void 0, patternUnits: t4.patternUnits, patternID: "pattern".concat(e3.globals.cuid).concat(t4.seriesNumber + 1).concat(d3) }), i3 = "url(#pattern".concat(e3.globals.cuid).concat(t4.seriesNumber + 1).concat(d3, ")");
          } else
            i3 = "gradient" === n3 ? s3 : "pattern" === n3 ? a3 : h3;
          return t4.solid && (i3 = h3), i3;
        } }, { key: "getFillType", value: function(t4) {
          var e3 = this.w;
          return Array.isArray(e3.config.fill.type) ? e3.config.fill.type[t4] : e3.config.fill.type;
        } }, { key: "getFillColors", value: function() {
          var t4 = this.w, e3 = t4.config, i3 = this.opts, a3 = [];
          return t4.globals.comboCharts ? "line" === t4.config.series[this.seriesIndex].type ? Array.isArray(t4.globals.stroke.colors) ? a3 = t4.globals.stroke.colors : a3.push(t4.globals.stroke.colors) : Array.isArray(t4.globals.fill.colors) ? a3 = t4.globals.fill.colors : a3.push(t4.globals.fill.colors) : "line" === e3.chart.type ? Array.isArray(t4.globals.stroke.colors) ? a3 = t4.globals.stroke.colors : a3.push(t4.globals.stroke.colors) : Array.isArray(t4.globals.fill.colors) ? a3 = t4.globals.fill.colors : a3.push(t4.globals.fill.colors), void 0 !== i3.fillColors && (a3 = [], Array.isArray(i3.fillColors) ? a3 = i3.fillColors.slice() : a3.push(i3.fillColors)), a3;
        } }, { key: "handlePatternFill", value: function(t4) {
          var e3 = t4.fillConfig, i3 = t4.patternFill, a3 = t4.fillColor, s3 = t4.fillOpacity, r3 = t4.defaultColor, o3 = this.w.config.fill;
          e3 && (o3 = e3);
          var n3 = this.opts, l3 = new m2(this.ctx), h3 = Array.isArray(o3.pattern.strokeWidth) ? o3.pattern.strokeWidth[this.seriesIndex] : o3.pattern.strokeWidth, c3 = a3;
          Array.isArray(o3.pattern.style) ? i3 = void 0 !== o3.pattern.style[n3.seriesNumber] ? l3.drawPattern(o3.pattern.style[n3.seriesNumber], o3.pattern.width, o3.pattern.height, c3, h3, s3) : r3 : i3 = l3.drawPattern(o3.pattern.style, o3.pattern.width, o3.pattern.height, c3, h3, s3);
          return i3;
        } }, { key: "handleGradientFill", value: function(t4) {
          var i3 = t4.fillColor, a3 = t4.fillOpacity, s3 = t4.fillConfig, r3 = t4.i, o3 = this.w.config.fill;
          s3 && (o3 = e2(e2({}, o3), s3));
          var n3, l3 = this.opts, h3 = new m2(this.ctx), c3 = new x2(), d3 = o3.gradient.type, g3 = i3, u3 = void 0 === o3.gradient.opacityFrom ? a3 : Array.isArray(o3.gradient.opacityFrom) ? o3.gradient.opacityFrom[r3] : o3.gradient.opacityFrom;
          g3.indexOf("rgba") > -1 && (u3 = x2.getOpacityFromRGBA(g3));
          var p3 = void 0 === o3.gradient.opacityTo ? a3 : Array.isArray(o3.gradient.opacityTo) ? o3.gradient.opacityTo[r3] : o3.gradient.opacityTo;
          if (void 0 === o3.gradient.gradientToColors || 0 === o3.gradient.gradientToColors.length)
            n3 = "dark" === o3.gradient.shade ? c3.shadeColor(-1 * parseFloat(o3.gradient.shadeIntensity), i3.indexOf("rgb") > -1 ? x2.rgb2hex(i3) : i3) : c3.shadeColor(parseFloat(o3.gradient.shadeIntensity), i3.indexOf("rgb") > -1 ? x2.rgb2hex(i3) : i3);
          else if (o3.gradient.gradientToColors[l3.seriesNumber]) {
            var f3 = o3.gradient.gradientToColors[l3.seriesNumber];
            n3 = f3, f3.indexOf("rgba") > -1 && (p3 = x2.getOpacityFromRGBA(f3));
          } else
            n3 = i3;
          if (o3.gradient.gradientFrom && (g3 = o3.gradient.gradientFrom), o3.gradient.gradientTo && (n3 = o3.gradient.gradientTo), o3.gradient.inverseColors) {
            var b3 = g3;
            g3 = n3, n3 = b3;
          }
          return g3.indexOf("rgb") > -1 && (g3 = x2.rgb2hex(g3)), n3.indexOf("rgb") > -1 && (n3 = x2.rgb2hex(n3)), h3.drawGradient(d3, g3, n3, u3, p3, l3.size, o3.gradient.stops, o3.gradient.colorStops, r3);
        } }]), t3;
      }();
      var H2 = function() {
        function t3(e3, i3) {
          a2(this, t3), this.ctx = e3, this.w = e3.w;
        }
        return r2(t3, [{ key: "setGlobalMarkerSize", value: function() {
          var t4 = this.w;
          if (t4.globals.markers.size = Array.isArray(t4.config.markers.size) ? t4.config.markers.size : [t4.config.markers.size], t4.globals.markers.size.length > 0) {
            if (t4.globals.markers.size.length < t4.globals.series.length + 1)
              for (var e3 = 0; e3 <= t4.globals.series.length; e3++)
                void 0 === t4.globals.markers.size[e3] && t4.globals.markers.size.push(t4.globals.markers.size[0]);
          } else
            t4.globals.markers.size = t4.config.series.map(function(e4) {
              return t4.config.markers.size;
            });
        } }, { key: "plotChartMarkers", value: function(t4, e3, i3, a3) {
          var s3, r3 = arguments.length > 4 && void 0 !== arguments[4] && arguments[4], o3 = this.w, n3 = e3, l3 = t4, h3 = null, c3 = new m2(this.ctx), d3 = o3.config.markers.discrete && o3.config.markers.discrete.length;
          if ((o3.globals.markers.size[e3] > 0 || r3 || d3) && (h3 = c3.group({ class: r3 || d3 ? "" : "apexcharts-series-markers" })).attr("clip-path", "url(#gridRectMarkerMask".concat(o3.globals.cuid, ")")), Array.isArray(l3.x))
            for (var g3 = 0; g3 < l3.x.length; g3++) {
              var u3 = i3;
              1 === i3 && 0 === g3 && (u3 = 0), 1 === i3 && 1 === g3 && (u3 = 1);
              var p3 = "apexcharts-marker";
              if ("line" !== o3.config.chart.type && "area" !== o3.config.chart.type || o3.globals.comboCharts || o3.config.tooltip.intersect || (p3 += " no-pointer-events"), (Array.isArray(o3.config.markers.size) ? o3.globals.markers.size[e3] > 0 : o3.config.markers.size > 0) || r3 || d3) {
                x2.isNumber(l3.y[g3]) ? p3 += " w".concat(x2.randomId()) : p3 = "apexcharts-nullpoint";
                var f3 = this.getMarkerConfig({ cssClass: p3, seriesIndex: e3, dataPointIndex: u3 });
                o3.config.series[n3].data[u3] && (o3.config.series[n3].data[u3].fillColor && (f3.pointFillColor = o3.config.series[n3].data[u3].fillColor), o3.config.series[n3].data[u3].strokeColor && (f3.pointStrokeColor = o3.config.series[n3].data[u3].strokeColor)), a3 && (f3.pSize = a3), (l3.x[g3] < 0 || l3.x[g3] > o3.globals.gridWidth || l3.y[g3] < -o3.globals.markers.largestSize || l3.y[g3] > o3.globals.gridHeight + o3.globals.markers.largestSize) && (f3.pSize = 0), (s3 = c3.drawMarker(l3.x[g3], l3.y[g3], f3)).attr("rel", u3), s3.attr("j", u3), s3.attr("index", e3), s3.node.setAttribute("default-marker-size", f3.pSize), new v2(this.ctx).setSelectionFilter(s3, e3, u3), this.addEvents(s3), h3 && h3.add(s3);
              } else
                void 0 === o3.globals.pointsArray[e3] && (o3.globals.pointsArray[e3] = []), o3.globals.pointsArray[e3].push([l3.x[g3], l3.y[g3]]);
            }
          return h3;
        } }, { key: "getMarkerConfig", value: function(t4) {
          var e3 = t4.cssClass, i3 = t4.seriesIndex, a3 = t4.dataPointIndex, s3 = void 0 === a3 ? null : a3, r3 = t4.finishRadius, o3 = void 0 === r3 ? null : r3, n3 = this.w, l3 = this.getMarkerStyle(i3), h3 = n3.globals.markers.size[i3], c3 = n3.config.markers;
          return null !== s3 && c3.discrete.length && c3.discrete.map(function(t5) {
            t5.seriesIndex === i3 && t5.dataPointIndex === s3 && (l3.pointStrokeColor = t5.strokeColor, l3.pointFillColor = t5.fillColor, h3 = t5.size, l3.pointShape = t5.shape);
          }), { pSize: null === o3 ? h3 : o3, pRadius: c3.radius, width: Array.isArray(c3.width) ? c3.width[i3] : c3.width, height: Array.isArray(c3.height) ? c3.height[i3] : c3.height, pointStrokeWidth: Array.isArray(c3.strokeWidth) ? c3.strokeWidth[i3] : c3.strokeWidth, pointStrokeColor: l3.pointStrokeColor, pointFillColor: l3.pointFillColor, shape: l3.pointShape || (Array.isArray(c3.shape) ? c3.shape[i3] : c3.shape), class: e3, pointStrokeOpacity: Array.isArray(c3.strokeOpacity) ? c3.strokeOpacity[i3] : c3.strokeOpacity, pointStrokeDashArray: Array.isArray(c3.strokeDashArray) ? c3.strokeDashArray[i3] : c3.strokeDashArray, pointFillOpacity: Array.isArray(c3.fillOpacity) ? c3.fillOpacity[i3] : c3.fillOpacity, seriesIndex: i3 };
        } }, { key: "addEvents", value: function(t4) {
          var e3 = this.w, i3 = new m2(this.ctx);
          t4.node.addEventListener("mouseenter", i3.pathMouseEnter.bind(this.ctx, t4)), t4.node.addEventListener("mouseleave", i3.pathMouseLeave.bind(this.ctx, t4)), t4.node.addEventListener("mousedown", i3.pathMouseDown.bind(this.ctx, t4)), t4.node.addEventListener("click", e3.config.markers.onClick), t4.node.addEventListener("dblclick", e3.config.markers.onDblClick), t4.node.addEventListener("touchstart", i3.pathMouseDown.bind(this.ctx, t4), { passive: true });
        } }, { key: "getMarkerStyle", value: function(t4) {
          var e3 = this.w, i3 = e3.globals.markers.colors, a3 = e3.config.markers.strokeColor || e3.config.markers.strokeColors;
          return { pointStrokeColor: Array.isArray(a3) ? a3[t4] : a3, pointFillColor: Array.isArray(i3) ? i3[t4] : i3 };
        } }]), t3;
      }();
      var D2 = function() {
        function t3(e3) {
          a2(this, t3), this.ctx = e3, this.w = e3.w, this.initialAnim = this.w.config.chart.animations.enabled, this.dynamicAnim = this.initialAnim && this.w.config.chart.animations.dynamicAnimation.enabled;
        }
        return r2(t3, [{ key: "draw", value: function(t4, e3, i3) {
          var a3 = this.w, s3 = new m2(this.ctx), r3 = i3.realIndex, o3 = i3.pointsPos, n3 = i3.zRatio, l3 = i3.elParent, h3 = s3.group({ class: "apexcharts-series-markers apexcharts-series-".concat(a3.config.chart.type) });
          if (h3.attr("clip-path", "url(#gridRectMarkerMask".concat(a3.globals.cuid, ")")), Array.isArray(o3.x))
            for (var c3 = 0; c3 < o3.x.length; c3++) {
              var d3 = e3 + 1, g3 = true;
              0 === e3 && 0 === c3 && (d3 = 0), 0 === e3 && 1 === c3 && (d3 = 1);
              var u3 = 0, p3 = a3.globals.markers.size[r3];
              if (n3 !== 1 / 0) {
                var f3 = a3.config.plotOptions.bubble;
                p3 = a3.globals.seriesZ[r3][d3], f3.zScaling && (p3 /= n3), f3.minBubbleRadius && p3 < f3.minBubbleRadius && (p3 = f3.minBubbleRadius), f3.maxBubbleRadius && p3 > f3.maxBubbleRadius && (p3 = f3.maxBubbleRadius);
              }
              a3.config.chart.animations.enabled || (u3 = p3);
              var x3 = o3.x[c3], b3 = o3.y[c3];
              if (u3 = u3 || 0, null !== b3 && void 0 !== a3.globals.series[r3][d3] || (g3 = false), g3) {
                var v3 = this.drawPoint(x3, b3, u3, p3, r3, d3, e3);
                h3.add(v3);
              }
              l3.add(h3);
            }
        } }, { key: "drawPoint", value: function(t4, e3, i3, a3, s3, r3, o3) {
          var n3 = this.w, l3 = s3, h3 = new b2(this.ctx), c3 = new v2(this.ctx), d3 = new R2(this.ctx), g3 = new H2(this.ctx), u3 = new m2(this.ctx), p3 = g3.getMarkerConfig({ cssClass: "apexcharts-marker", seriesIndex: l3, dataPointIndex: r3, finishRadius: "bubble" === n3.config.chart.type || n3.globals.comboCharts && n3.config.series[s3] && "bubble" === n3.config.series[s3].type ? a3 : null });
          a3 = p3.pSize;
          var f3, x3 = d3.fillPath({ seriesNumber: s3, dataPointIndex: r3, color: p3.pointFillColor, patternUnits: "objectBoundingBox", value: n3.globals.series[s3][o3] });
          if ("circle" === p3.shape ? f3 = u3.drawCircle(i3) : "square" !== p3.shape && "rect" !== p3.shape || (f3 = u3.drawRect(0, 0, p3.width - p3.pointStrokeWidth / 2, p3.height - p3.pointStrokeWidth / 2, p3.pRadius)), n3.config.series[l3].data[r3] && n3.config.series[l3].data[r3].fillColor && (x3 = n3.config.series[l3].data[r3].fillColor), f3.attr({ x: t4 - p3.width / 2 - p3.pointStrokeWidth / 2, y: e3 - p3.height / 2 - p3.pointStrokeWidth / 2, cx: t4, cy: e3, fill: x3, "fill-opacity": p3.pointFillOpacity, stroke: p3.pointStrokeColor, r: a3, "stroke-width": p3.pointStrokeWidth, "stroke-dasharray": p3.pointStrokeDashArray, "stroke-opacity": p3.pointStrokeOpacity }), n3.config.chart.dropShadow.enabled) {
            var y3 = n3.config.chart.dropShadow;
            c3.dropShadow(f3, y3, s3);
          }
          if (!this.initialAnim || n3.globals.dataChanged || n3.globals.resized)
            n3.globals.animationEnded = true;
          else {
            var w3 = n3.config.chart.animations.speed;
            h3.animateMarker(f3, 0, "circle" === p3.shape ? a3 : { width: p3.width, height: p3.height }, w3, n3.globals.easing, function() {
              window.setTimeout(function() {
                h3.animationCompleted(f3);
              }, 100);
            });
          }
          if (n3.globals.dataChanged && "circle" === p3.shape)
            if (this.dynamicAnim) {
              var k3, A3, S3, C3, L3 = n3.config.chart.animations.dynamicAnimation.speed;
              null != (C3 = n3.globals.previousPaths[s3] && n3.globals.previousPaths[s3][o3]) && (k3 = C3.x, A3 = C3.y, S3 = void 0 !== C3.r ? C3.r : a3);
              for (var P3 = 0; P3 < n3.globals.collapsedSeries.length; P3++)
                n3.globals.collapsedSeries[P3].index === s3 && (L3 = 1, a3 = 0);
              0 === t4 && 0 === e3 && (a3 = 0), h3.animateCircle(f3, { cx: k3, cy: A3, r: S3 }, { cx: t4, cy: e3, r: a3 }, L3, n3.globals.easing);
            } else
              f3.attr({ r: a3 });
          return f3.attr({ rel: r3, j: r3, index: s3, "default-marker-size": a3 }), c3.setSelectionFilter(f3, s3, r3), g3.addEvents(f3), f3.node.classList.add("apexcharts-marker"), f3;
        } }, { key: "centerTextInBubble", value: function(t4) {
          var e3 = this.w;
          return { y: t4 += parseInt(e3.config.dataLabels.style.fontSize, 10) / 4 };
        } }]), t3;
      }();
      var O2 = function() {
        function t3(e3) {
          a2(this, t3), this.ctx = e3, this.w = e3.w;
        }
        return r2(t3, [{ key: "dataLabelsCorrection", value: function(t4, e3, i3, a3, s3, r3, o3) {
          var n3 = this.w, l3 = false, h3 = new m2(this.ctx).getTextRects(i3, o3), c3 = h3.width, d3 = h3.height;
          e3 < 0 && (e3 = 0), e3 > n3.globals.gridHeight + d3 && (e3 = n3.globals.gridHeight + d3 / 2), void 0 === n3.globals.dataLabelsRects[a3] && (n3.globals.dataLabelsRects[a3] = []), n3.globals.dataLabelsRects[a3].push({ x: t4, y: e3, width: c3, height: d3 });
          var g3 = n3.globals.dataLabelsRects[a3].length - 2, u3 = void 0 !== n3.globals.lastDrawnDataLabelsIndexes[a3] ? n3.globals.lastDrawnDataLabelsIndexes[a3][n3.globals.lastDrawnDataLabelsIndexes[a3].length - 1] : 0;
          if (void 0 !== n3.globals.dataLabelsRects[a3][g3]) {
            var p3 = n3.globals.dataLabelsRects[a3][u3];
            (t4 > p3.x + p3.width || e3 > p3.y + p3.height || e3 + d3 < p3.y || t4 + c3 < p3.x) && (l3 = true);
          }
          return (0 === s3 || r3) && (l3 = true), { x: t4, y: e3, textRects: h3, drawnextLabel: l3 };
        } }, { key: "drawDataLabel", value: function(t4) {
          var e3 = this, i3 = t4.type, a3 = t4.pos, s3 = t4.i, r3 = t4.j, o3 = t4.isRangeStart, n3 = t4.strokeWidth, l3 = void 0 === n3 ? 2 : n3, h3 = this.w, c3 = new m2(this.ctx), d3 = h3.config.dataLabels, g3 = 0, u3 = 0, p3 = r3, f3 = null;
          if (!d3.enabled || !Array.isArray(a3.x))
            return f3;
          f3 = c3.group({ class: "apexcharts-data-labels" });
          for (var x3 = 0; x3 < a3.x.length; x3++)
            if (g3 = a3.x[x3] + d3.offsetX, u3 = a3.y[x3] + d3.offsetY + l3, !isNaN(g3)) {
              1 === r3 && 0 === x3 && (p3 = 0), 1 === r3 && 1 === x3 && (p3 = 1);
              var b3 = h3.globals.series[s3][p3];
              "rangeArea" === i3 && (b3 = o3 ? h3.globals.seriesRangeStart[s3][p3] : h3.globals.seriesRangeEnd[s3][p3]);
              var v3 = "", y3 = function(t5) {
                return h3.config.dataLabels.formatter(t5, { ctx: e3.ctx, seriesIndex: s3, dataPointIndex: p3, w: h3 });
              };
              if ("bubble" === h3.config.chart.type)
                v3 = y3(b3 = h3.globals.seriesZ[s3][p3]), u3 = a3.y[x3], u3 = new D2(this.ctx).centerTextInBubble(u3, s3, p3).y;
              else
                void 0 !== b3 && (v3 = y3(b3));
              this.plotDataLabelsText({ x: g3, y: u3, text: v3, i: s3, j: p3, parent: f3, offsetCorrection: true, dataLabelsConfig: h3.config.dataLabels });
            }
          return f3;
        } }, { key: "plotDataLabelsText", value: function(t4) {
          var e3 = this.w, i3 = new m2(this.ctx), a3 = t4.x, s3 = t4.y, r3 = t4.i, o3 = t4.j, n3 = t4.text, l3 = t4.textAnchor, h3 = t4.fontSize, c3 = t4.parent, d3 = t4.dataLabelsConfig, g3 = t4.color, u3 = t4.alwaysDrawDataLabel, p3 = t4.offsetCorrection;
          if (!(Array.isArray(e3.config.dataLabels.enabledOnSeries) && e3.config.dataLabels.enabledOnSeries.indexOf(r3) < 0)) {
            var f3 = { x: a3, y: s3, drawnextLabel: true, textRects: null };
            p3 && (f3 = this.dataLabelsCorrection(a3, s3, n3, r3, o3, u3, parseInt(d3.style.fontSize, 10))), e3.globals.zoomed || (a3 = f3.x, s3 = f3.y), f3.textRects && (a3 < -20 - f3.textRects.width || a3 > e3.globals.gridWidth + f3.textRects.width + 30) && (n3 = "");
            var x3 = e3.globals.dataLabels.style.colors[r3];
            (("bar" === e3.config.chart.type || "rangeBar" === e3.config.chart.type) && e3.config.plotOptions.bar.distributed || e3.config.dataLabels.distributed) && (x3 = e3.globals.dataLabels.style.colors[o3]), "function" == typeof x3 && (x3 = x3({ series: e3.globals.series, seriesIndex: r3, dataPointIndex: o3, w: e3 })), g3 && (x3 = g3);
            var b3 = d3.offsetX, y3 = d3.offsetY;
            if ("bar" !== e3.config.chart.type && "rangeBar" !== e3.config.chart.type || (b3 = 0, y3 = 0), f3.drawnextLabel) {
              var w3 = i3.drawText({ width: 100, height: parseInt(d3.style.fontSize, 10), x: a3 + b3, y: s3 + y3, foreColor: x3, textAnchor: l3 || d3.textAnchor, text: n3, fontSize: h3 || d3.style.fontSize, fontFamily: d3.style.fontFamily, fontWeight: d3.style.fontWeight || "normal" });
              if (w3.attr({ class: "apexcharts-datalabel", cx: a3, cy: s3 }), d3.dropShadow.enabled) {
                var k3 = d3.dropShadow;
                new v2(this.ctx).dropShadow(w3, k3);
              }
              c3.add(w3), void 0 === e3.globals.lastDrawnDataLabelsIndexes[r3] && (e3.globals.lastDrawnDataLabelsIndexes[r3] = []), e3.globals.lastDrawnDataLabelsIndexes[r3].push(o3);
            }
          }
        } }, { key: "addBackgroundToDataLabel", value: function(t4, e3) {
          var i3 = this.w, a3 = i3.config.dataLabels.background, s3 = a3.padding, r3 = a3.padding / 2, o3 = e3.width, n3 = e3.height, l3 = new m2(this.ctx).drawRect(e3.x - s3, e3.y - r3 / 2, o3 + 2 * s3, n3 + r3, a3.borderRadius, "transparent" === i3.config.chart.background ? "#fff" : i3.config.chart.background, a3.opacity, a3.borderWidth, a3.borderColor);
          a3.dropShadow.enabled && new v2(this.ctx).dropShadow(l3, a3.dropShadow);
          return l3;
        } }, { key: "dataLabelsBackground", value: function() {
          var t4 = this.w;
          if ("bubble" !== t4.config.chart.type)
            for (var e3 = t4.globals.dom.baseEl.querySelectorAll(".apexcharts-datalabels text"), i3 = 0; i3 < e3.length; i3++) {
              var a3 = e3[i3], s3 = a3.getBBox(), r3 = null;
              if (s3.width && s3.height && (r3 = this.addBackgroundToDataLabel(a3, s3)), r3) {
                a3.parentNode.insertBefore(r3.node, a3);
                var o3 = a3.getAttribute("fill");
                t4.config.chart.animations.enabled && !t4.globals.resized && !t4.globals.dataChanged ? r3.animate().attr({ fill: o3 }) : r3.attr({ fill: o3 }), a3.setAttribute("fill", t4.config.dataLabels.background.foreColor);
              }
            }
        } }, { key: "bringForward", value: function() {
          for (var t4 = this.w, e3 = t4.globals.dom.baseEl.querySelectorAll(".apexcharts-datalabels"), i3 = t4.globals.dom.baseEl.querySelector(".apexcharts-plot-series:last-child"), a3 = 0; a3 < e3.length; a3++)
            i3 && i3.insertBefore(e3[a3], i3.nextSibling);
        } }]), t3;
      }();
      var N2 = function() {
        function t3(e3) {
          a2(this, t3), this.ctx = e3, this.w = e3.w, this.legendInactiveClass = "legend-mouseover-inactive";
        }
        return r2(t3, [{ key: "getAllSeriesEls", value: function() {
          return this.w.globals.dom.baseEl.getElementsByClassName("apexcharts-series");
        } }, { key: "getSeriesByName", value: function(t4) {
          return this.w.globals.dom.baseEl.querySelector(".apexcharts-inner .apexcharts-series[seriesName='".concat(x2.escapeString(t4), "']"));
        } }, { key: "isSeriesHidden", value: function(t4) {
          var e3 = this.getSeriesByName(t4), i3 = parseInt(e3.getAttribute("data:realIndex"), 10);
          return { isHidden: e3.classList.contains("apexcharts-series-collapsed"), realIndex: i3 };
        } }, { key: "addCollapsedClassToSeries", value: function(t4, e3) {
          var i3 = this.w;
          function a3(i4) {
            for (var a4 = 0; a4 < i4.length; a4++)
              i4[a4].index === e3 && t4.node.classList.add("apexcharts-series-collapsed");
          }
          a3(i3.globals.collapsedSeries), a3(i3.globals.ancillaryCollapsedSeries);
        } }, { key: "toggleSeries", value: function(t4) {
          var e3 = this.isSeriesHidden(t4);
          return this.ctx.legend.legendHelpers.toggleDataSeries(e3.realIndex, e3.isHidden), e3.isHidden;
        } }, { key: "showSeries", value: function(t4) {
          var e3 = this.isSeriesHidden(t4);
          e3.isHidden && this.ctx.legend.legendHelpers.toggleDataSeries(e3.realIndex, true);
        } }, { key: "hideSeries", value: function(t4) {
          var e3 = this.isSeriesHidden(t4);
          e3.isHidden || this.ctx.legend.legendHelpers.toggleDataSeries(e3.realIndex, false);
        } }, { key: "resetSeries", value: function() {
          var t4 = !(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0], e3 = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1], i3 = !(arguments.length > 2 && void 0 !== arguments[2]) || arguments[2], a3 = this.w, s3 = x2.clone(a3.globals.initialSeries);
          a3.globals.previousPaths = [], i3 ? (a3.globals.collapsedSeries = [], a3.globals.ancillaryCollapsedSeries = [], a3.globals.collapsedSeriesIndices = [], a3.globals.ancillaryCollapsedSeriesIndices = []) : s3 = this.emptyCollapsedSeries(s3), a3.config.series = s3, t4 && (e3 && (a3.globals.zoomed = false, this.ctx.updateHelpers.revertDefaultAxisMinMax()), this.ctx.updateHelpers._updateSeries(s3, a3.config.chart.animations.dynamicAnimation.enabled));
        } }, { key: "emptyCollapsedSeries", value: function(t4) {
          for (var e3 = this.w, i3 = 0; i3 < t4.length; i3++)
            e3.globals.collapsedSeriesIndices.indexOf(i3) > -1 && (t4[i3].data = []);
          return t4;
        } }, { key: "toggleSeriesOnHover", value: function(t4, e3) {
          var i3 = this.w;
          e3 || (e3 = t4.target);
          var a3 = i3.globals.dom.baseEl.querySelectorAll(".apexcharts-series, .apexcharts-datalabels");
          if ("mousemove" === t4.type) {
            var s3 = parseInt(e3.getAttribute("rel"), 10) - 1, r3 = null, o3 = null;
            i3.globals.axisCharts || "radialBar" === i3.config.chart.type ? i3.globals.axisCharts ? (r3 = i3.globals.dom.baseEl.querySelector(".apexcharts-series[data\\:realIndex='".concat(s3, "']")), o3 = i3.globals.dom.baseEl.querySelector(".apexcharts-datalabels[data\\:realIndex='".concat(s3, "']"))) : r3 = i3.globals.dom.baseEl.querySelector(".apexcharts-series[rel='".concat(s3 + 1, "']")) : r3 = i3.globals.dom.baseEl.querySelector(".apexcharts-series[rel='".concat(s3 + 1, "'] path"));
            for (var n3 = 0; n3 < a3.length; n3++)
              a3[n3].classList.add(this.legendInactiveClass);
            null !== r3 && (i3.globals.axisCharts || r3.parentNode.classList.remove(this.legendInactiveClass), r3.classList.remove(this.legendInactiveClass), null !== o3 && o3.classList.remove(this.legendInactiveClass));
          } else if ("mouseout" === t4.type)
            for (var l3 = 0; l3 < a3.length; l3++)
              a3[l3].classList.remove(this.legendInactiveClass);
        } }, { key: "highlightRangeInSeries", value: function(t4, e3) {
          var i3 = this, a3 = this.w, s3 = a3.globals.dom.baseEl.getElementsByClassName("apexcharts-heatmap-rect"), r3 = function(t5) {
            for (var e4 = 0; e4 < s3.length; e4++)
              s3[e4].classList[t5](i3.legendInactiveClass);
          };
          if ("mousemove" === t4.type) {
            var o3 = parseInt(e3.getAttribute("rel"), 10) - 1;
            r3("add"), function(t5) {
              for (var e4 = 0; e4 < s3.length; e4++) {
                var a4 = parseInt(s3[e4].getAttribute("val"), 10);
                a4 >= t5.from && a4 <= t5.to && s3[e4].classList.remove(i3.legendInactiveClass);
              }
            }(a3.config.plotOptions.heatmap.colorScale.ranges[o3]);
          } else
            "mouseout" === t4.type && r3("remove");
        } }, { key: "getActiveConfigSeriesIndex", value: function() {
          var t4 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : "asc", e3 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : [], i3 = this.w, a3 = 0;
          if (i3.config.series.length > 1) {
            for (var s3 = i3.config.series.map(function(t5, a4) {
              return t5.data && t5.data.length > 0 && -1 === i3.globals.collapsedSeriesIndices.indexOf(a4) && (!i3.globals.comboCharts || 0 === e3.length || e3.length && e3.indexOf(i3.config.series[a4].type) > -1) ? a4 : -1;
            }), r3 = "asc" === t4 ? 0 : s3.length - 1; "asc" === t4 ? r3 < s3.length : r3 >= 0; "asc" === t4 ? r3++ : r3--)
              if (-1 !== s3[r3]) {
                a3 = s3[r3];
                break;
              }
          }
          return a3;
        } }, { key: "getBarSeriesIndices", value: function() {
          return this.w.globals.comboCharts ? this.w.config.series.map(function(t4, e3) {
            return "bar" === t4.type || "column" === t4.type ? e3 : -1;
          }).filter(function(t4) {
            return -1 !== t4;
          }) : this.w.config.series.map(function(t4, e3) {
            return e3;
          });
        } }, { key: "getPreviousPaths", value: function() {
          var t4 = this.w;
          function e3(e4, i4, a4) {
            for (var s4 = e4[i4].childNodes, r3 = { type: a4, paths: [], realIndex: e4[i4].getAttribute("data:realIndex") }, o3 = 0; o3 < s4.length; o3++)
              if (s4[o3].hasAttribute("pathTo")) {
                var n3 = s4[o3].getAttribute("pathTo");
                r3.paths.push({ d: n3 });
              }
            t4.globals.previousPaths.push(r3);
          }
          t4.globals.previousPaths = [];
          ["line", "area", "bar", "rangebar", "rangeArea", "candlestick", "radar"].forEach(function(i4) {
            for (var a4, s4 = (a4 = i4, t4.globals.dom.baseEl.querySelectorAll(".apexcharts-".concat(a4, "-series .apexcharts-series"))), r3 = 0; r3 < s4.length; r3++)
              e3(s4, r3, i4);
          }), this.handlePrevBubbleScatterPaths("bubble"), this.handlePrevBubbleScatterPaths("scatter");
          var i3 = t4.globals.dom.baseEl.querySelectorAll(".apexcharts-".concat(t4.config.chart.type, " .apexcharts-series"));
          if (i3.length > 0)
            for (var a3 = function(e4) {
              for (var i4 = t4.globals.dom.baseEl.querySelectorAll(".apexcharts-".concat(t4.config.chart.type, " .apexcharts-series[data\\:realIndex='").concat(e4, "'] rect")), a4 = [], s4 = function(t5) {
                var e5 = function(e6) {
                  return i4[t5].getAttribute(e6);
                }, s5 = { x: parseFloat(e5("x")), y: parseFloat(e5("y")), width: parseFloat(e5("width")), height: parseFloat(e5("height")) };
                a4.push({ rect: s5, color: i4[t5].getAttribute("color") });
              }, r3 = 0; r3 < i4.length; r3++)
                s4(r3);
              t4.globals.previousPaths.push(a4);
            }, s3 = 0; s3 < i3.length; s3++)
              a3(s3);
          t4.globals.axisCharts || (t4.globals.previousPaths = t4.globals.series);
        } }, { key: "handlePrevBubbleScatterPaths", value: function(t4) {
          var e3 = this.w, i3 = e3.globals.dom.baseEl.querySelectorAll(".apexcharts-".concat(t4, "-series .apexcharts-series"));
          if (i3.length > 0)
            for (var a3 = 0; a3 < i3.length; a3++) {
              for (var s3 = e3.globals.dom.baseEl.querySelectorAll(".apexcharts-".concat(t4, "-series .apexcharts-series[data\\:realIndex='").concat(a3, "'] circle")), r3 = [], o3 = 0; o3 < s3.length; o3++)
                r3.push({ x: s3[o3].getAttribute("cx"), y: s3[o3].getAttribute("cy"), r: s3[o3].getAttribute("r") });
              e3.globals.previousPaths.push(r3);
            }
        } }, { key: "clearPreviousPaths", value: function() {
          var t4 = this.w;
          t4.globals.previousPaths = [], t4.globals.allSeriesCollapsed = false;
        } }, { key: "handleNoData", value: function() {
          var t4 = this.w, e3 = t4.config.noData, i3 = new m2(this.ctx), a3 = t4.globals.svgWidth / 2, s3 = t4.globals.svgHeight / 2, r3 = "middle";
          if (t4.globals.noData = true, t4.globals.animationEnded = true, "left" === e3.align ? (a3 = 10, r3 = "start") : "right" === e3.align && (a3 = t4.globals.svgWidth - 10, r3 = "end"), "top" === e3.verticalAlign ? s3 = 50 : "bottom" === e3.verticalAlign && (s3 = t4.globals.svgHeight - 50), a3 += e3.offsetX, s3 = s3 + parseInt(e3.style.fontSize, 10) + 2 + e3.offsetY, void 0 !== e3.text && "" !== e3.text) {
            var o3 = i3.drawText({ x: a3, y: s3, text: e3.text, textAnchor: r3, fontSize: e3.style.fontSize, fontFamily: e3.style.fontFamily, foreColor: e3.style.color, opacity: 1, class: "apexcharts-text-nodata" });
            t4.globals.dom.Paper.add(o3);
          }
        } }, { key: "setNullSeriesToZeroValues", value: function(t4) {
          for (var e3 = this.w, i3 = 0; i3 < t4.length; i3++)
            if (0 === t4[i3].length)
              for (var a3 = 0; a3 < t4[e3.globals.maxValsInArrayIndex].length; a3++)
                t4[i3].push(0);
          return t4;
        } }, { key: "hasAllSeriesEqualX", value: function() {
          for (var t4 = true, e3 = this.w, i3 = this.filteredSeriesX(), a3 = 0; a3 < i3.length - 1; a3++)
            if (i3[a3][0] !== i3[a3 + 1][0]) {
              t4 = false;
              break;
            }
          return e3.globals.allSeriesHasEqualX = t4, t4;
        } }, { key: "filteredSeriesX", value: function() {
          var t4 = this.w.globals.seriesX.map(function(t5) {
            return t5.length > 0 ? t5 : [];
          });
          return t4;
        } }]), t3;
      }();
      var W2 = function() {
        function t3(e3) {
          a2(this, t3), this.ctx = e3, this.w = e3.w, this.twoDSeries = [], this.threeDSeries = [], this.twoDSeriesX = [], this.seriesGoals = [], this.coreUtils = new y2(this.ctx);
        }
        return r2(t3, [{ key: "isMultiFormat", value: function() {
          return this.isFormatXY() || this.isFormat2DArray();
        } }, { key: "isFormatXY", value: function() {
          var t4 = this.w.config.series.slice(), e3 = new N2(this.ctx);
          if (this.activeSeriesIndex = e3.getActiveConfigSeriesIndex(), void 0 !== t4[this.activeSeriesIndex].data && t4[this.activeSeriesIndex].data.length > 0 && null !== t4[this.activeSeriesIndex].data[0] && void 0 !== t4[this.activeSeriesIndex].data[0].x && null !== t4[this.activeSeriesIndex].data[0])
            return true;
        } }, { key: "isFormat2DArray", value: function() {
          var t4 = this.w.config.series.slice(), e3 = new N2(this.ctx);
          if (this.activeSeriesIndex = e3.getActiveConfigSeriesIndex(), void 0 !== t4[this.activeSeriesIndex].data && t4[this.activeSeriesIndex].data.length > 0 && void 0 !== t4[this.activeSeriesIndex].data[0] && null !== t4[this.activeSeriesIndex].data[0] && t4[this.activeSeriesIndex].data[0].constructor === Array)
            return true;
        } }, { key: "handleFormat2DArray", value: function(t4, e3) {
          for (var i3 = this.w.config, a3 = this.w.globals, s3 = "boxPlot" === i3.chart.type || "boxPlot" === i3.series[e3].type, r3 = 0; r3 < t4[e3].data.length; r3++)
            if (void 0 !== t4[e3].data[r3][1] && (Array.isArray(t4[e3].data[r3][1]) && 4 === t4[e3].data[r3][1].length && !s3 ? this.twoDSeries.push(x2.parseNumber(t4[e3].data[r3][1][3])) : t4[e3].data[r3].length >= 5 ? this.twoDSeries.push(x2.parseNumber(t4[e3].data[r3][4])) : this.twoDSeries.push(x2.parseNumber(t4[e3].data[r3][1])), a3.dataFormatXNumeric = true), "datetime" === i3.xaxis.type) {
              var o3 = new Date(t4[e3].data[r3][0]);
              o3 = new Date(o3).getTime(), this.twoDSeriesX.push(o3);
            } else
              this.twoDSeriesX.push(t4[e3].data[r3][0]);
          for (var n3 = 0; n3 < t4[e3].data.length; n3++)
            void 0 !== t4[e3].data[n3][2] && (this.threeDSeries.push(t4[e3].data[n3][2]), a3.isDataXYZ = true);
        } }, { key: "handleFormatXY", value: function(t4, e3) {
          var i3 = this.w.config, a3 = this.w.globals, s3 = new I2(this.ctx), r3 = e3;
          a3.collapsedSeriesIndices.indexOf(e3) > -1 && (r3 = this.activeSeriesIndex);
          for (var o3 = 0; o3 < t4[e3].data.length; o3++)
            void 0 !== t4[e3].data[o3].y && (Array.isArray(t4[e3].data[o3].y) ? this.twoDSeries.push(x2.parseNumber(t4[e3].data[o3].y[t4[e3].data[o3].y.length - 1])) : this.twoDSeries.push(x2.parseNumber(t4[e3].data[o3].y))), void 0 !== t4[e3].data[o3].goals && Array.isArray(t4[e3].data[o3].goals) ? (void 0 === this.seriesGoals[e3] && (this.seriesGoals[e3] = []), this.seriesGoals[e3].push(t4[e3].data[o3].goals)) : (void 0 === this.seriesGoals[e3] && (this.seriesGoals[e3] = []), this.seriesGoals[e3].push(null));
          for (var n3 = 0; n3 < t4[r3].data.length; n3++) {
            var l3 = "string" == typeof t4[r3].data[n3].x, h3 = Array.isArray(t4[r3].data[n3].x), c3 = !h3 && !!s3.isValidDate(t4[r3].data[n3].x);
            if (l3 || c3)
              if (l3 || i3.xaxis.convertedCatToNumeric) {
                var d3 = a3.isBarHorizontal && a3.isRangeData;
                "datetime" !== i3.xaxis.type || d3 ? (this.fallbackToCategory = true, this.twoDSeriesX.push(t4[r3].data[n3].x), isNaN(t4[r3].data[n3].x) || "category" === this.w.config.xaxis.type || "string" == typeof t4[r3].data[n3].x || (a3.isXNumeric = true)) : this.twoDSeriesX.push(s3.parseDate(t4[r3].data[n3].x));
              } else
                "datetime" === i3.xaxis.type ? this.twoDSeriesX.push(s3.parseDate(t4[r3].data[n3].x.toString())) : (a3.dataFormatXNumeric = true, a3.isXNumeric = true, this.twoDSeriesX.push(parseFloat(t4[r3].data[n3].x)));
            else
              h3 ? (this.fallbackToCategory = true, this.twoDSeriesX.push(t4[r3].data[n3].x)) : (a3.isXNumeric = true, a3.dataFormatXNumeric = true, this.twoDSeriesX.push(t4[r3].data[n3].x));
          }
          if (t4[e3].data[0] && void 0 !== t4[e3].data[0].z) {
            for (var g3 = 0; g3 < t4[e3].data.length; g3++)
              this.threeDSeries.push(t4[e3].data[g3].z);
            a3.isDataXYZ = true;
          }
        } }, { key: "handleRangeData", value: function(t4, e3) {
          var i3 = this.w.globals, a3 = {};
          return this.isFormat2DArray() ? a3 = this.handleRangeDataFormat("array", t4, e3) : this.isFormatXY() && (a3 = this.handleRangeDataFormat("xy", t4, e3)), i3.seriesRangeStart.push(a3.start), i3.seriesRangeEnd.push(a3.end), i3.seriesRange.push(a3.rangeUniques), i3.seriesRange.forEach(function(t5, e4) {
            t5 && t5.forEach(function(t6, e5) {
              t6.y.forEach(function(e6, i4) {
                for (var a4 = 0; a4 < t6.y.length; a4++)
                  if (i4 !== a4) {
                    var s3 = e6.y1, r3 = e6.y2, o3 = t6.y[a4].y1;
                    s3 <= t6.y[a4].y2 && o3 <= r3 && (t6.overlaps.indexOf(e6.rangeName) < 0 && t6.overlaps.push(e6.rangeName), t6.overlaps.indexOf(t6.y[a4].rangeName) < 0 && t6.overlaps.push(t6.y[a4].rangeName));
                  }
              });
            });
          }), a3;
        } }, { key: "handleCandleStickBoxData", value: function(t4, e3) {
          var i3 = this.w.globals, a3 = {};
          return this.isFormat2DArray() ? a3 = this.handleCandleStickBoxDataFormat("array", t4, e3) : this.isFormatXY() && (a3 = this.handleCandleStickBoxDataFormat("xy", t4, e3)), i3.seriesCandleO[e3] = a3.o, i3.seriesCandleH[e3] = a3.h, i3.seriesCandleM[e3] = a3.m, i3.seriesCandleL[e3] = a3.l, i3.seriesCandleC[e3] = a3.c, a3;
        } }, { key: "handleRangeDataFormat", value: function(t4, e3, i3) {
          var a3 = [], s3 = [], r3 = e3[i3].data.filter(function(t5, e4, i4) {
            return e4 === i4.findIndex(function(e5) {
              return e5.x === t5.x;
            });
          }).map(function(t5, e4) {
            return { x: t5.x, overlaps: [], y: [] };
          });
          if ("array" === t4)
            for (var o3 = 0; o3 < e3[i3].data.length; o3++)
              Array.isArray(e3[i3].data[o3]) ? (a3.push(e3[i3].data[o3][1][0]), s3.push(e3[i3].data[o3][1][1])) : (a3.push(e3[i3].data[o3]), s3.push(e3[i3].data[o3]));
          else if ("xy" === t4)
            for (var n3 = function(t5) {
              var o4 = Array.isArray(e3[i3].data[t5].y), n4 = x2.randomId(), l4 = e3[i3].data[t5].x, h3 = { y1: o4 ? e3[i3].data[t5].y[0] : e3[i3].data[t5].y, y2: o4 ? e3[i3].data[t5].y[1] : e3[i3].data[t5].y, rangeName: n4 };
              e3[i3].data[t5].rangeName = n4;
              var c3 = r3.findIndex(function(t6) {
                return t6.x === l4;
              });
              r3[c3].y.push(h3), a3.push(h3.y1), s3.push(h3.y2);
            }, l3 = 0; l3 < e3[i3].data.length; l3++)
              n3(l3);
          return { start: a3, end: s3, rangeUniques: r3 };
        } }, { key: "handleCandleStickBoxDataFormat", value: function(t4, e3, i3) {
          var a3 = this.w, s3 = "boxPlot" === a3.config.chart.type || "boxPlot" === a3.config.series[i3].type, r3 = [], o3 = [], n3 = [], l3 = [], h3 = [];
          if ("array" === t4)
            if (s3 && 6 === e3[i3].data[0].length || !s3 && 5 === e3[i3].data[0].length)
              for (var c3 = 0; c3 < e3[i3].data.length; c3++)
                r3.push(e3[i3].data[c3][1]), o3.push(e3[i3].data[c3][2]), s3 ? (n3.push(e3[i3].data[c3][3]), l3.push(e3[i3].data[c3][4]), h3.push(e3[i3].data[c3][5])) : (l3.push(e3[i3].data[c3][3]), h3.push(e3[i3].data[c3][4]));
            else
              for (var d3 = 0; d3 < e3[i3].data.length; d3++)
                Array.isArray(e3[i3].data[d3][1]) && (r3.push(e3[i3].data[d3][1][0]), o3.push(e3[i3].data[d3][1][1]), s3 ? (n3.push(e3[i3].data[d3][1][2]), l3.push(e3[i3].data[d3][1][3]), h3.push(e3[i3].data[d3][1][4])) : (l3.push(e3[i3].data[d3][1][2]), h3.push(e3[i3].data[d3][1][3])));
          else if ("xy" === t4)
            for (var g3 = 0; g3 < e3[i3].data.length; g3++)
              Array.isArray(e3[i3].data[g3].y) && (r3.push(e3[i3].data[g3].y[0]), o3.push(e3[i3].data[g3].y[1]), s3 ? (n3.push(e3[i3].data[g3].y[2]), l3.push(e3[i3].data[g3].y[3]), h3.push(e3[i3].data[g3].y[4])) : (l3.push(e3[i3].data[g3].y[2]), h3.push(e3[i3].data[g3].y[3])));
          return { o: r3, h: o3, m: n3, l: l3, c: h3 };
        } }, { key: "parseDataAxisCharts", value: function(t4) {
          var e3, i3 = this, a3 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : this.ctx, s3 = this.w.config, r3 = this.w.globals, o3 = new I2(a3), n3 = s3.labels.length > 0 ? s3.labels.slice() : s3.xaxis.categories.slice();
          if (r3.isRangeBar = "rangeBar" === s3.chart.type && r3.isBarHorizontal, r3.hasXaxisGroups = "category" === s3.xaxis.type && s3.xaxis.group.groups.length > 0, r3.hasXaxisGroups && (r3.groups = s3.xaxis.group.groups), r3.hasSeriesGroups = null === (e3 = t4[0]) || void 0 === e3 ? void 0 : e3.group, r3.hasSeriesGroups) {
            var l3 = [], h3 = u2(new Set(t4.map(function(t5) {
              return t5.group;
            })));
            t4.forEach(function(t5, e4) {
              var i4 = h3.indexOf(t5.group);
              l3[i4] || (l3[i4] = []), l3[i4].push(t5.name);
            }), r3.seriesGroups = l3;
          }
          for (var c3 = function() {
            for (var t5 = 0; t5 < n3.length; t5++)
              if ("string" == typeof n3[t5]) {
                if (!o3.isValidDate(n3[t5]))
                  throw new Error("You have provided invalid Date format. Please provide a valid JavaScript Date");
                i3.twoDSeriesX.push(o3.parseDate(n3[t5]));
              } else
                i3.twoDSeriesX.push(n3[t5]);
          }, d3 = 0; d3 < t4.length; d3++) {
            if (this.twoDSeries = [], this.twoDSeriesX = [], this.threeDSeries = [], void 0 === t4[d3].data)
              return void console.error("It is a possibility that you may have not included 'data' property in series.");
            if ("rangeBar" !== s3.chart.type && "rangeArea" !== s3.chart.type && "rangeBar" !== t4[d3].type && "rangeArea" !== t4[d3].type || (r3.isRangeData = true, "rangeBar" !== s3.chart.type && "rangeArea" !== s3.chart.type || this.handleRangeData(t4, d3)), this.isMultiFormat())
              this.isFormat2DArray() ? this.handleFormat2DArray(t4, d3) : this.isFormatXY() && this.handleFormatXY(t4, d3), "candlestick" !== s3.chart.type && "candlestick" !== t4[d3].type && "boxPlot" !== s3.chart.type && "boxPlot" !== t4[d3].type || this.handleCandleStickBoxData(t4, d3), r3.series.push(this.twoDSeries), r3.labels.push(this.twoDSeriesX), r3.seriesX.push(this.twoDSeriesX), r3.seriesGoals = this.seriesGoals, d3 !== this.activeSeriesIndex || this.fallbackToCategory || (r3.isXNumeric = true);
            else {
              "datetime" === s3.xaxis.type ? (r3.isXNumeric = true, c3(), r3.seriesX.push(this.twoDSeriesX)) : "numeric" === s3.xaxis.type && (r3.isXNumeric = true, n3.length > 0 && (this.twoDSeriesX = n3, r3.seriesX.push(this.twoDSeriesX))), r3.labels.push(this.twoDSeriesX);
              var g3 = t4[d3].data.map(function(t5) {
                return x2.parseNumber(t5);
              });
              r3.series.push(g3);
            }
            r3.seriesZ.push(this.threeDSeries), void 0 !== t4[d3].name ? r3.seriesNames.push(t4[d3].name) : r3.seriesNames.push("series-" + parseInt(d3 + 1, 10)), void 0 !== t4[d3].color ? r3.seriesColors.push(t4[d3].color) : r3.seriesColors.push(void 0);
          }
          return this.w;
        } }, { key: "parseDataNonAxisCharts", value: function(t4) {
          var e3 = this.w.globals, i3 = this.w.config;
          e3.series = t4.slice(), e3.seriesNames = i3.labels.slice();
          for (var a3 = 0; a3 < e3.series.length; a3++)
            void 0 === e3.seriesNames[a3] && e3.seriesNames.push("series-" + (a3 + 1));
          return this.w;
        } }, { key: "handleExternalLabelsData", value: function(t4) {
          var e3 = this.w.config, i3 = this.w.globals;
          if (e3.xaxis.categories.length > 0)
            i3.labels = e3.xaxis.categories;
          else if (e3.labels.length > 0)
            i3.labels = e3.labels.slice();
          else if (this.fallbackToCategory) {
            if (i3.labels = i3.labels[0], i3.seriesRange.length && (i3.seriesRange.map(function(t5) {
              t5.forEach(function(t6) {
                i3.labels.indexOf(t6.x) < 0 && t6.x && i3.labels.push(t6.x);
              });
            }), i3.labels = Array.from(new Set(i3.labels.map(JSON.stringify)), JSON.parse)), e3.xaxis.convertedCatToNumeric)
              new X2(e3).convertCatToNumericXaxis(e3, this.ctx, i3.seriesX[0]), this._generateExternalLabels(t4);
          } else
            this._generateExternalLabels(t4);
        } }, { key: "_generateExternalLabels", value: function(t4) {
          var e3 = this.w.globals, i3 = this.w.config, a3 = [];
          if (e3.axisCharts) {
            if (e3.series.length > 0)
              if (this.isFormatXY())
                for (var s3 = i3.series.map(function(t5, e4) {
                  return t5.data.filter(function(t6, e5, i4) {
                    return i4.findIndex(function(e6) {
                      return e6.x === t6.x;
                    }) === e5;
                  });
                }), r3 = s3.reduce(function(t5, e4, i4, a4) {
                  return a4[t5].length > e4.length ? t5 : i4;
                }, 0), o3 = 0; o3 < s3[r3].length; o3++)
                  a3.push(o3 + 1);
              else
                for (var n3 = 0; n3 < e3.series[e3.maxValsInArrayIndex].length; n3++)
                  a3.push(n3 + 1);
            e3.seriesX = [];
            for (var l3 = 0; l3 < t4.length; l3++)
              e3.seriesX.push(a3);
            this.w.globals.isBarHorizontal || (e3.isXNumeric = true);
          }
          if (0 === a3.length) {
            a3 = e3.axisCharts ? [] : e3.series.map(function(t5, e4) {
              return e4 + 1;
            });
            for (var h3 = 0; h3 < t4.length; h3++)
              e3.seriesX.push(a3);
          }
          e3.labels = a3, i3.xaxis.convertedCatToNumeric && (e3.categoryLabels = a3.map(function(t5) {
            return i3.xaxis.labels.formatter(t5);
          })), e3.noLabelsProvided = true;
        } }, { key: "parseData", value: function(t4) {
          var e3 = this.w, i3 = e3.config, a3 = e3.globals;
          if (this.excludeCollapsedSeriesInYAxis(), this.fallbackToCategory = false, this.ctx.core.resetGlobals(), this.ctx.core.isMultipleY(), a3.axisCharts ? (this.parseDataAxisCharts(t4), this.coreUtils.getLargestSeries()) : this.parseDataNonAxisCharts(t4), i3.chart.stacked) {
            var s3 = new N2(this.ctx);
            a3.series = s3.setNullSeriesToZeroValues(a3.series);
          }
          this.coreUtils.getSeriesTotals(), a3.axisCharts && (a3.stackedSeriesTotals = this.coreUtils.getStackedSeriesTotals(), a3.stackedSeriesTotalsByGroups = this.coreUtils.getStackedSeriesTotalsByGroups()), this.coreUtils.getPercentSeries(), a3.dataFormatXNumeric || a3.isXNumeric && ("numeric" !== i3.xaxis.type || 0 !== i3.labels.length || 0 !== i3.xaxis.categories.length) || this.handleExternalLabelsData(t4);
          for (var r3 = this.coreUtils.getCategoryLabels(a3.labels), o3 = 0; o3 < r3.length; o3++)
            if (Array.isArray(r3[o3])) {
              a3.isMultiLineX = true;
              break;
            }
        } }, { key: "excludeCollapsedSeriesInYAxis", value: function() {
          var t4 = this, e3 = this.w;
          e3.globals.ignoreYAxisIndexes = e3.globals.collapsedSeries.map(function(i3, a3) {
            if (t4.w.globals.isMultipleYAxis && !e3.config.chart.stacked)
              return i3.index;
          });
        } }]), t3;
      }();
      var B2 = function() {
        function t3(e3) {
          a2(this, t3), this.ctx = e3, this.w = e3.w;
        }
        return r2(t3, [{ key: "getLabel", value: function(t4, e3, i3, a3) {
          var s3 = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : [], r3 = arguments.length > 5 && void 0 !== arguments[5] ? arguments[5] : "12px", o3 = !(arguments.length > 6 && void 0 !== arguments[6]) || arguments[6], n3 = this.w, l3 = void 0 === t4[a3] ? "" : t4[a3], h3 = l3, c3 = n3.globals.xLabelFormatter, d3 = n3.config.xaxis.labels.formatter, g3 = false, u3 = new T2(this.ctx), p3 = l3;
          o3 && (h3 = u3.xLabelFormat(c3, l3, p3, { i: a3, dateFormatter: new I2(this.ctx).formatDate, w: n3 }), void 0 !== d3 && (h3 = d3(l3, t4[a3], { i: a3, dateFormatter: new I2(this.ctx).formatDate, w: n3 })));
          var f3, x3;
          e3.length > 0 ? (f3 = e3[a3].unit, x3 = null, e3.forEach(function(t5) {
            "month" === t5.unit ? x3 = "year" : "day" === t5.unit ? x3 = "month" : "hour" === t5.unit ? x3 = "day" : "minute" === t5.unit && (x3 = "hour");
          }), g3 = x3 === f3, i3 = e3[a3].position, h3 = e3[a3].value) : "datetime" === n3.config.xaxis.type && void 0 === d3 && (h3 = ""), void 0 === h3 && (h3 = ""), h3 = Array.isArray(h3) ? h3 : h3.toString();
          var b3 = new m2(this.ctx), v3 = {};
          v3 = n3.globals.rotateXLabels && o3 ? b3.getTextRects(h3, parseInt(r3, 10), null, "rotate(".concat(n3.config.xaxis.labels.rotate, " 0 0)"), false) : b3.getTextRects(h3, parseInt(r3, 10));
          var y3 = !n3.config.xaxis.labels.showDuplicates && this.ctx.timeScale;
          return !Array.isArray(h3) && (0 === h3.indexOf("NaN") || 0 === h3.toLowerCase().indexOf("invalid") || h3.toLowerCase().indexOf("infinity") >= 0 || s3.indexOf(h3) >= 0 && y3) && (h3 = ""), { x: i3, text: h3, textRect: v3, isBold: g3 };
        } }, { key: "checkLabelBasedOnTickamount", value: function(t4, e3, i3) {
          var a3 = this.w, s3 = a3.config.xaxis.tickAmount;
          return "dataPoints" === s3 && (s3 = Math.round(a3.globals.gridWidth / 120)), s3 > i3 || t4 % Math.round(i3 / (s3 + 1)) == 0 || (e3.text = ""), e3;
        } }, { key: "checkForOverflowingLabels", value: function(t4, e3, i3, a3, s3) {
          var r3 = this.w;
          if (0 === t4 && r3.globals.skipFirstTimelinelabel && (e3.text = ""), t4 === i3 - 1 && r3.globals.skipLastTimelinelabel && (e3.text = ""), r3.config.xaxis.labels.hideOverlappingLabels && a3.length > 0) {
            var o3 = s3[s3.length - 1];
            e3.x < o3.textRect.width / (r3.globals.rotateXLabels ? Math.abs(r3.config.xaxis.labels.rotate) / 12 : 1.01) + o3.x && (e3.text = "");
          }
          return e3;
        } }, { key: "checkForReversedLabels", value: function(t4, e3) {
          var i3 = this.w;
          return i3.config.yaxis[t4] && i3.config.yaxis[t4].reversed && e3.reverse(), e3;
        } }, { key: "isYAxisHidden", value: function(t4) {
          var e3 = this.w, i3 = new y2(this.ctx);
          return !e3.config.yaxis[t4].show || !e3.config.yaxis[t4].showForNullSeries && i3.isSeriesNull(t4) && -1 === e3.globals.collapsedSeriesIndices.indexOf(t4);
        } }, { key: "getYAxisForeColor", value: function(t4, e3) {
          var i3 = this.w;
          return Array.isArray(t4) && i3.globals.yAxisScale[e3] && this.ctx.theme.pushExtraColors(t4, i3.globals.yAxisScale[e3].result.length, false), t4;
        } }, { key: "drawYAxisTicks", value: function(t4, e3, i3, a3, s3, r3, o3) {
          var n3 = this.w, l3 = new m2(this.ctx), h3 = n3.globals.translateY;
          if (a3.show && e3 > 0) {
            true === n3.config.yaxis[s3].opposite && (t4 += a3.width);
            for (var c3 = e3; c3 >= 0; c3--) {
              var d3 = h3 + e3 / 10 + n3.config.yaxis[s3].labels.offsetY - 1;
              n3.globals.isBarHorizontal && (d3 = r3 * c3), "heatmap" === n3.config.chart.type && (d3 += r3 / 2);
              var g3 = l3.drawLine(t4 + i3.offsetX - a3.width + a3.offsetX, d3 + a3.offsetY, t4 + i3.offsetX + a3.offsetX, d3 + a3.offsetY, a3.color);
              o3.add(g3), h3 += r3;
            }
          }
        } }]), t3;
      }();
      var G2 = function() {
        function t3(e3) {
          a2(this, t3), this.ctx = e3, this.w = e3.w;
        }
        return r2(t3, [{ key: "scaleSvgNode", value: function(t4, e3) {
          var i3 = parseFloat(t4.getAttributeNS(null, "width")), a3 = parseFloat(t4.getAttributeNS(null, "height"));
          t4.setAttributeNS(null, "width", i3 * e3), t4.setAttributeNS(null, "height", a3 * e3), t4.setAttributeNS(null, "viewBox", "0 0 " + i3 + " " + a3);
        } }, { key: "fixSvgStringForIe11", value: function(t4) {
          if (!x2.isIE11())
            return t4.replace(/&nbsp;/g, "&#160;");
          var e3 = 0, i3 = t4.replace(/xmlns="http:\/\/www.w3.org\/2000\/svg"/g, function(t5) {
            return 2 === ++e3 ? 'xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:svgjs="http://svgjs.dev"' : t5;
          });
          return i3 = (i3 = i3.replace(/xmlns:NS\d+=""/g, "")).replace(/NS\d+:(\w+:\w+=")/g, "$1");
        } }, { key: "getSvgString", value: function(t4) {
          null == t4 && (t4 = 1);
          var e3 = this.w.globals.dom.Paper.svg();
          if (1 !== t4) {
            var i3 = this.w.globals.dom.Paper.node.cloneNode(true);
            this.scaleSvgNode(i3, t4), e3 = new XMLSerializer().serializeToString(i3);
          }
          return this.fixSvgStringForIe11(e3);
        } }, { key: "cleanup", value: function() {
          var t4 = this.w, e3 = t4.globals.dom.baseEl.getElementsByClassName("apexcharts-xcrosshairs"), i3 = t4.globals.dom.baseEl.getElementsByClassName("apexcharts-ycrosshairs"), a3 = t4.globals.dom.baseEl.querySelectorAll(".apexcharts-zoom-rect, .apexcharts-selection-rect");
          Array.prototype.forEach.call(a3, function(t5) {
            t5.setAttribute("width", 0);
          }), e3 && e3[0] && (e3[0].setAttribute("x", -500), e3[0].setAttribute("x1", -500), e3[0].setAttribute("x2", -500)), i3 && i3[0] && (i3[0].setAttribute("y", -100), i3[0].setAttribute("y1", -100), i3[0].setAttribute("y2", -100));
        } }, { key: "svgUrl", value: function() {
          this.cleanup();
          var t4 = this.getSvgString(), e3 = new Blob([t4], { type: "image/svg+xml;charset=utf-8" });
          return URL.createObjectURL(e3);
        } }, { key: "dataURI", value: function(t4) {
          var e3 = this;
          return new Promise(function(i3) {
            var a3 = e3.w, s3 = t4 ? t4.scale || t4.width / a3.globals.svgWidth : 1;
            e3.cleanup();
            var r3 = document.createElement("canvas");
            r3.width = a3.globals.svgWidth * s3, r3.height = parseInt(a3.globals.dom.elWrap.style.height, 10) * s3;
            var o3 = "transparent" === a3.config.chart.background ? "#fff" : a3.config.chart.background, n3 = r3.getContext("2d");
            n3.fillStyle = o3, n3.fillRect(0, 0, r3.width * s3, r3.height * s3);
            var l3 = e3.getSvgString(s3);
            if (window.canvg && x2.isIE11()) {
              var h3 = window.canvg.Canvg.fromString(n3, l3, { ignoreClear: true, ignoreDimensions: true });
              h3.start();
              var c3 = r3.msToBlob();
              h3.stop(), i3({ blob: c3 });
            } else {
              var d3 = "data:image/svg+xml," + encodeURIComponent(l3), g3 = new Image();
              g3.crossOrigin = "anonymous", g3.onload = function() {
                if (n3.drawImage(g3, 0, 0), r3.msToBlob) {
                  var t5 = r3.msToBlob();
                  i3({ blob: t5 });
                } else {
                  var e4 = r3.toDataURL("image/png");
                  i3({ imgURI: e4 });
                }
              }, g3.src = d3;
            }
          });
        } }, { key: "exportToSVG", value: function() {
          this.triggerDownload(this.svgUrl(), this.w.config.chart.toolbar.export.svg.filename, ".svg");
        } }, { key: "exportToPng", value: function() {
          var t4 = this;
          this.dataURI().then(function(e3) {
            var i3 = e3.imgURI, a3 = e3.blob;
            a3 ? navigator.msSaveOrOpenBlob(a3, t4.w.globals.chartID + ".png") : t4.triggerDownload(i3, t4.w.config.chart.toolbar.export.png.filename, ".png");
          });
        } }, { key: "exportToCSV", value: function(t4) {
          var e3 = this, i3 = t4.series, a3 = t4.fileName, s3 = t4.columnDelimiter, r3 = void 0 === s3 ? "," : s3, o3 = t4.lineDelimiter, n3 = void 0 === o3 ? "\n" : o3, l3 = this.w;
          i3 || (i3 = l3.config.series);
          var h3, c3, d3 = [], g3 = [], p3 = "", f3 = l3.globals.series.map(function(t5, e4) {
            return -1 === l3.globals.collapsedSeriesIndices.indexOf(e4) ? t5 : [];
          }), b3 = function(t5) {
            return "datetime" === l3.config.xaxis.type && String(t5).length >= 10;
          }, v3 = Math.max.apply(Math, u2(i3.map(function(t5) {
            return t5.data ? t5.data.length : 0;
          }))), m3 = new W2(this.ctx), y3 = new B2(this.ctx), w3 = function(t5) {
            var i4 = "";
            if (l3.globals.axisCharts) {
              if ("category" === l3.config.xaxis.type || l3.config.xaxis.convertedCatToNumeric)
                if (l3.globals.isBarHorizontal) {
                  var a4 = l3.globals.yLabelFormatters[0], s4 = new N2(e3.ctx).getActiveConfigSeriesIndex();
                  i4 = a4(l3.globals.labels[t5], { seriesIndex: s4, dataPointIndex: t5, w: l3 });
                } else
                  i4 = y3.getLabel(l3.globals.labels, l3.globals.timescaleLabels, 0, t5).text;
              "datetime" === l3.config.xaxis.type && (l3.config.xaxis.categories.length ? i4 = l3.config.xaxis.categories[t5] : l3.config.labels.length && (i4 = l3.config.labels[t5]));
            } else
              i4 = l3.config.labels[t5];
            return Array.isArray(i4) && (i4 = i4.join(" ")), x2.isNumber(i4) ? i4 : i4.split(r3).join("");
          }, k3 = function(t5, e4) {
            if (d3.length && 0 === e4 && g3.push(d3.join(r3)), t5.data) {
              t5.data = t5.data.length && t5.data || u2(Array(v3)).map(function() {
                return "";
              });
              for (var a4 = 0; a4 < t5.data.length; a4++) {
                d3 = [];
                var s4 = w3(a4);
                if (s4 || (m3.isFormatXY() ? s4 = i3[e4].data[a4].x : m3.isFormat2DArray() && (s4 = i3[e4].data[a4] ? i3[e4].data[a4][0] : "")), 0 === e4) {
                  d3.push(b3(s4) ? l3.config.chart.toolbar.export.csv.dateFormatter(s4) : x2.isNumber(s4) ? s4 : s4.split(r3).join(""));
                  for (var o4 = 0; o4 < l3.globals.series.length; o4++) {
                    var n4;
                    if (m3.isFormatXY())
                      d3.push(null === (n4 = i3[o4].data[a4]) || void 0 === n4 ? void 0 : n4.y);
                    else
                      d3.push(f3[o4][a4]);
                  }
                }
                ("candlestick" === l3.config.chart.type || t5.type && "candlestick" === t5.type) && (d3.pop(), d3.push(l3.globals.seriesCandleO[e4][a4]), d3.push(l3.globals.seriesCandleH[e4][a4]), d3.push(l3.globals.seriesCandleL[e4][a4]), d3.push(l3.globals.seriesCandleC[e4][a4])), ("boxPlot" === l3.config.chart.type || t5.type && "boxPlot" === t5.type) && (d3.pop(), d3.push(l3.globals.seriesCandleO[e4][a4]), d3.push(l3.globals.seriesCandleH[e4][a4]), d3.push(l3.globals.seriesCandleM[e4][a4]), d3.push(l3.globals.seriesCandleL[e4][a4]), d3.push(l3.globals.seriesCandleC[e4][a4])), "rangeBar" === l3.config.chart.type && (d3.pop(), d3.push(l3.globals.seriesRangeStart[e4][a4]), d3.push(l3.globals.seriesRangeEnd[e4][a4])), d3.length && g3.push(d3.join(r3));
              }
            }
          };
          d3.push(l3.config.chart.toolbar.export.csv.headerCategory), "boxPlot" === l3.config.chart.type ? (d3.push("minimum"), d3.push("q1"), d3.push("median"), d3.push("q3"), d3.push("maximum")) : "candlestick" === l3.config.chart.type ? (d3.push("open"), d3.push("high"), d3.push("low"), d3.push("close")) : "rangeBar" === l3.config.chart.type ? (d3.push("minimum"), d3.push("maximum")) : i3.map(function(t5, e4) {
            var i4 = (t5.name ? t5.name : "series-".concat(e4)) + "";
            l3.globals.axisCharts && d3.push(i4.split(r3).join("") ? i4.split(r3).join("") : "series-".concat(e4));
          }), l3.globals.axisCharts || (d3.push(l3.config.chart.toolbar.export.csv.headerValue), g3.push(d3.join(r3))), l3.globals.allSeriesHasEqualX || !l3.globals.axisCharts || l3.config.xaxis.categories.length || l3.config.labels.length ? i3.map(function(t5, e4) {
            l3.globals.axisCharts ? k3(t5, e4) : ((d3 = []).push(l3.globals.labels[e4].split(r3).join("")), d3.push(f3[e4]), g3.push(d3.join(r3)));
          }) : (h3 = /* @__PURE__ */ new Set(), c3 = {}, i3.forEach(function(t5, e4) {
            null == t5 || t5.data.forEach(function(t6) {
              var a4, s4;
              if (m3.isFormatXY())
                a4 = t6.x, s4 = t6.y;
              else {
                if (!m3.isFormat2DArray())
                  return;
                a4 = t6[0], s4 = t6[1];
              }
              c3[a4] || (c3[a4] = Array(i3.length).fill("")), c3[a4][e4] = s4, h3.add(a4);
            });
          }), d3.length && g3.push(d3.join(r3)), Array.from(h3).sort().forEach(function(t5) {
            g3.push([b3(t5) && "datetime" === l3.config.xaxis.type ? l3.config.chart.toolbar.export.csv.dateFormatter(t5) : x2.isNumber(t5) ? t5 : t5.split(r3).join(""), c3[t5].join(r3)]);
          })), p3 += g3.join(n3), this.triggerDownload("data:text/csv; charset=utf-8," + encodeURIComponent("\uFEFF" + p3), a3 || l3.config.chart.toolbar.export.csv.filename, ".csv");
        } }, { key: "triggerDownload", value: function(t4, e3, i3) {
          var a3 = document.createElement("a");
          a3.href = t4, a3.download = (e3 || this.w.globals.chartID) + i3, document.body.appendChild(a3), a3.click(), document.body.removeChild(a3);
        } }]), t3;
      }();
      var V2 = function() {
        function t3(e3, i3) {
          a2(this, t3), this.ctx = e3, this.elgrid = i3, this.w = e3.w;
          var s3 = this.w;
          this.axesUtils = new B2(e3), this.xaxisLabels = s3.globals.labels.slice(), s3.globals.timescaleLabels.length > 0 && !s3.globals.isBarHorizontal && (this.xaxisLabels = s3.globals.timescaleLabels.slice()), s3.config.xaxis.overwriteCategories && (this.xaxisLabels = s3.config.xaxis.overwriteCategories), this.drawnLabels = [], this.drawnLabelsRects = [], "top" === s3.config.xaxis.position ? this.offY = 0 : this.offY = s3.globals.gridHeight + 1, this.offY = this.offY + s3.config.xaxis.axisBorder.offsetY, this.isCategoryBarHorizontal = "bar" === s3.config.chart.type && s3.config.plotOptions.bar.horizontal, this.xaxisFontSize = s3.config.xaxis.labels.style.fontSize, this.xaxisFontFamily = s3.config.xaxis.labels.style.fontFamily, this.xaxisForeColors = s3.config.xaxis.labels.style.colors, this.xaxisBorderWidth = s3.config.xaxis.axisBorder.width, this.isCategoryBarHorizontal && (this.xaxisBorderWidth = s3.config.yaxis[0].axisBorder.width.toString()), this.xaxisBorderWidth.indexOf("%") > -1 ? this.xaxisBorderWidth = s3.globals.gridWidth * parseInt(this.xaxisBorderWidth, 10) / 100 : this.xaxisBorderWidth = parseInt(this.xaxisBorderWidth, 10), this.xaxisBorderHeight = s3.config.xaxis.axisBorder.height, this.yaxis = s3.config.yaxis[0];
        }
        return r2(t3, [{ key: "drawXaxis", value: function() {
          var t4 = this.w, e3 = new m2(this.ctx), i3 = e3.group({ class: "apexcharts-xaxis", transform: "translate(".concat(t4.config.xaxis.offsetX, ", ").concat(t4.config.xaxis.offsetY, ")") }), a3 = e3.group({ class: "apexcharts-xaxis-texts-g", transform: "translate(".concat(t4.globals.translateXAxisX, ", ").concat(t4.globals.translateXAxisY, ")") });
          i3.add(a3);
          for (var s3 = [], r3 = 0; r3 < this.xaxisLabels.length; r3++)
            s3.push(this.xaxisLabels[r3]);
          if (this.drawXAxisLabelAndGroup(true, e3, a3, s3, t4.globals.isXNumeric, function(t5, e4) {
            return e4;
          }), t4.globals.hasXaxisGroups) {
            var o3 = t4.globals.groups;
            s3 = [];
            for (var n3 = 0; n3 < o3.length; n3++)
              s3.push(o3[n3].title);
            var l3 = {};
            t4.config.xaxis.group.style && (l3.xaxisFontSize = t4.config.xaxis.group.style.fontSize, l3.xaxisFontFamily = t4.config.xaxis.group.style.fontFamily, l3.xaxisForeColors = t4.config.xaxis.group.style.colors, l3.fontWeight = t4.config.xaxis.group.style.fontWeight, l3.cssClass = t4.config.xaxis.group.style.cssClass), this.drawXAxisLabelAndGroup(false, e3, a3, s3, false, function(t5, e4) {
              return o3[t5].cols * e4;
            }, l3);
          }
          if (void 0 !== t4.config.xaxis.title.text) {
            var h3 = e3.group({ class: "apexcharts-xaxis-title" }), c3 = e3.drawText({ x: t4.globals.gridWidth / 2 + t4.config.xaxis.title.offsetX, y: this.offY + parseFloat(this.xaxisFontSize) + ("bottom" === t4.config.xaxis.position ? t4.globals.xAxisLabelsHeight : -t4.globals.xAxisLabelsHeight - 10) + t4.config.xaxis.title.offsetY, text: t4.config.xaxis.title.text, textAnchor: "middle", fontSize: t4.config.xaxis.title.style.fontSize, fontFamily: t4.config.xaxis.title.style.fontFamily, fontWeight: t4.config.xaxis.title.style.fontWeight, foreColor: t4.config.xaxis.title.style.color, cssClass: "apexcharts-xaxis-title-text " + t4.config.xaxis.title.style.cssClass });
            h3.add(c3), i3.add(h3);
          }
          if (t4.config.xaxis.axisBorder.show) {
            var d3 = t4.globals.barPadForNumericAxis, g3 = e3.drawLine(t4.globals.padHorizontal + t4.config.xaxis.axisBorder.offsetX - d3, this.offY, this.xaxisBorderWidth + d3, this.offY, t4.config.xaxis.axisBorder.color, 0, this.xaxisBorderHeight);
            this.elgrid && this.elgrid.elGridBorders && t4.config.grid.show ? this.elgrid.elGridBorders.add(g3) : i3.add(g3);
          }
          return i3;
        } }, { key: "drawXAxisLabelAndGroup", value: function(t4, e3, i3, a3, s3, r3) {
          var o3, n3 = this, l3 = arguments.length > 6 && void 0 !== arguments[6] ? arguments[6] : {}, h3 = [], c3 = [], d3 = this.w, g3 = l3.xaxisFontSize || this.xaxisFontSize, u3 = l3.xaxisFontFamily || this.xaxisFontFamily, p3 = l3.xaxisForeColors || this.xaxisForeColors, f3 = l3.fontWeight || d3.config.xaxis.labels.style.fontWeight, x3 = l3.cssClass || d3.config.xaxis.labels.style.cssClass, b3 = d3.globals.padHorizontal, v3 = a3.length, m3 = "category" === d3.config.xaxis.type ? d3.globals.dataPoints : v3;
          if (0 === m3 && v3 > m3 && (m3 = v3), s3) {
            var y3 = m3 > 1 ? m3 - 1 : m3;
            o3 = d3.globals.gridWidth / Math.min(y3, v3 - 1), b3 = b3 + r3(0, o3) / 2 + d3.config.xaxis.labels.offsetX;
          } else
            o3 = d3.globals.gridWidth / m3, b3 = b3 + r3(0, o3) + d3.config.xaxis.labels.offsetX;
          for (var w3 = function(s4) {
            var l4 = b3 - r3(s4, o3) / 2 + d3.config.xaxis.labels.offsetX;
            0 === s4 && 1 === v3 && o3 / 2 === b3 && 1 === m3 && (l4 = d3.globals.gridWidth / 2);
            var y4 = n3.axesUtils.getLabel(a3, d3.globals.timescaleLabels, l4, s4, h3, g3, t4), w4 = 28;
            d3.globals.rotateXLabels && t4 && (w4 = 22), d3.config.xaxis.title.text && "top" === d3.config.xaxis.position && (w4 += parseFloat(d3.config.xaxis.title.style.fontSize) + 2), t4 || (w4 = w4 + parseFloat(g3) + (d3.globals.xAxisLabelsHeight - d3.globals.xAxisGroupLabelsHeight) + (d3.globals.rotateXLabels ? 10 : 0)), y4 = void 0 !== d3.config.xaxis.tickAmount && "dataPoints" !== d3.config.xaxis.tickAmount && "datetime" !== d3.config.xaxis.type ? n3.axesUtils.checkLabelBasedOnTickamount(s4, y4, v3) : n3.axesUtils.checkForOverflowingLabels(s4, y4, v3, h3, c3);
            if (d3.config.xaxis.labels.show) {
              var k4 = e3.drawText({ x: y4.x, y: n3.offY + d3.config.xaxis.labels.offsetY + w4 - ("top" === d3.config.xaxis.position ? d3.globals.xAxisHeight + d3.config.xaxis.axisTicks.height - 2 : 0), text: y4.text, textAnchor: "middle", fontWeight: y4.isBold ? 600 : f3, fontSize: g3, fontFamily: u3, foreColor: Array.isArray(p3) ? t4 && d3.config.xaxis.convertedCatToNumeric ? p3[d3.globals.minX + s4 - 1] : p3[s4] : p3, isPlainText: false, cssClass: (t4 ? "apexcharts-xaxis-label " : "apexcharts-xaxis-group-label ") + x3 });
              if (i3.add(k4), k4.on("click", function(t5) {
                if ("function" == typeof d3.config.chart.events.xAxisLabelClick) {
                  var e4 = Object.assign({}, d3, { labelIndex: s4 });
                  d3.config.chart.events.xAxisLabelClick(t5, n3.ctx, e4);
                }
              }), t4) {
                var A3 = document.createElementNS(d3.globals.SVGNS, "title");
                A3.textContent = Array.isArray(y4.text) ? y4.text.join(" ") : y4.text, k4.node.appendChild(A3), "" !== y4.text && (h3.push(y4.text), c3.push(y4));
              }
            }
            s4 < v3 - 1 && (b3 += r3(s4 + 1, o3));
          }, k3 = 0; k3 <= v3 - 1; k3++)
            w3(k3);
        } }, { key: "drawXaxisInversed", value: function(t4) {
          var e3, i3, a3 = this, s3 = this.w, r3 = new m2(this.ctx), o3 = s3.config.yaxis[0].opposite ? s3.globals.translateYAxisX[t4] : 0, n3 = r3.group({ class: "apexcharts-yaxis apexcharts-xaxis-inversed", rel: t4 }), l3 = r3.group({ class: "apexcharts-yaxis-texts-g apexcharts-xaxis-inversed-texts-g", transform: "translate(" + o3 + ", 0)" });
          n3.add(l3);
          var h3 = [];
          if (s3.config.yaxis[t4].show)
            for (var c3 = 0; c3 < this.xaxisLabels.length; c3++)
              h3.push(this.xaxisLabels[c3]);
          e3 = s3.globals.gridHeight / h3.length, i3 = -e3 / 2.2;
          var d3 = s3.globals.yLabelFormatters[0], g3 = s3.config.yaxis[0].labels;
          if (g3.show)
            for (var u3 = function(o4) {
              var n4 = void 0 === h3[o4] ? "" : h3[o4];
              n4 = d3(n4, { seriesIndex: t4, dataPointIndex: o4, w: s3 });
              var c4 = a3.axesUtils.getYAxisForeColor(g3.style.colors, t4), u4 = 0;
              Array.isArray(n4) && (u4 = n4.length / 2 * parseInt(g3.style.fontSize, 10));
              var p4 = g3.offsetX - 15, f4 = "end";
              a3.yaxis.opposite && (f4 = "start"), "left" === s3.config.yaxis[0].labels.align ? (p4 = g3.offsetX, f4 = "start") : "center" === s3.config.yaxis[0].labels.align ? (p4 = g3.offsetX, f4 = "middle") : "right" === s3.config.yaxis[0].labels.align && (f4 = "end");
              var x4 = r3.drawText({ x: p4, y: i3 + e3 + g3.offsetY - u4, text: n4, textAnchor: f4, foreColor: Array.isArray(c4) ? c4[o4] : c4, fontSize: g3.style.fontSize, fontFamily: g3.style.fontFamily, fontWeight: g3.style.fontWeight, isPlainText: false, cssClass: "apexcharts-yaxis-label " + g3.style.cssClass, maxWidth: g3.maxWidth });
              l3.add(x4), x4.on("click", function(t5) {
                if ("function" == typeof s3.config.chart.events.xAxisLabelClick) {
                  var e4 = Object.assign({}, s3, { labelIndex: o4 });
                  s3.config.chart.events.xAxisLabelClick(t5, a3.ctx, e4);
                }
              });
              var b4 = document.createElementNS(s3.globals.SVGNS, "title");
              if (b4.textContent = Array.isArray(n4) ? n4.join(" ") : n4, x4.node.appendChild(b4), 0 !== s3.config.yaxis[t4].labels.rotate) {
                var v4 = r3.rotateAroundCenter(x4.node);
                x4.node.setAttribute("transform", "rotate(".concat(s3.config.yaxis[t4].labels.rotate, " 0 ").concat(v4.y, ")"));
              }
              i3 += e3;
            }, p3 = 0; p3 <= h3.length - 1; p3++)
              u3(p3);
          if (void 0 !== s3.config.yaxis[0].title.text) {
            var f3 = r3.group({ class: "apexcharts-yaxis-title apexcharts-xaxis-title-inversed", transform: "translate(" + o3 + ", 0)" }), x3 = r3.drawText({ x: s3.config.yaxis[0].title.offsetX, y: s3.globals.gridHeight / 2 + s3.config.yaxis[0].title.offsetY, text: s3.config.yaxis[0].title.text, textAnchor: "middle", foreColor: s3.config.yaxis[0].title.style.color, fontSize: s3.config.yaxis[0].title.style.fontSize, fontWeight: s3.config.yaxis[0].title.style.fontWeight, fontFamily: s3.config.yaxis[0].title.style.fontFamily, cssClass: "apexcharts-yaxis-title-text " + s3.config.yaxis[0].title.style.cssClass });
            f3.add(x3), n3.add(f3);
          }
          var b3 = 0;
          this.isCategoryBarHorizontal && s3.config.yaxis[0].opposite && (b3 = s3.globals.gridWidth);
          var v3 = s3.config.xaxis.axisBorder;
          if (v3.show) {
            var y3 = r3.drawLine(s3.globals.padHorizontal + v3.offsetX + b3, 1 + v3.offsetY, s3.globals.padHorizontal + v3.offsetX + b3, s3.globals.gridHeight + v3.offsetY, v3.color, 0);
            this.elgrid && this.elgrid.elGridBorders && s3.config.grid.show ? this.elgrid.elGridBorders.add(y3) : n3.add(y3);
          }
          return s3.config.yaxis[0].axisTicks.show && this.axesUtils.drawYAxisTicks(b3, h3.length, s3.config.yaxis[0].axisBorder, s3.config.yaxis[0].axisTicks, 0, e3, n3), n3;
        } }, { key: "drawXaxisTicks", value: function(t4, e3, i3) {
          var a3 = this.w, s3 = t4;
          if (!(t4 < 0 || t4 - 2 > a3.globals.gridWidth)) {
            var r3 = this.offY + a3.config.xaxis.axisTicks.offsetY;
            if (e3 = e3 + r3 + a3.config.xaxis.axisTicks.height, "top" === a3.config.xaxis.position && (e3 = r3 - a3.config.xaxis.axisTicks.height), a3.config.xaxis.axisTicks.show) {
              var o3 = new m2(this.ctx).drawLine(t4 + a3.config.xaxis.axisTicks.offsetX, r3 + a3.config.xaxis.offsetY, s3 + a3.config.xaxis.axisTicks.offsetX, e3 + a3.config.xaxis.offsetY, a3.config.xaxis.axisTicks.color);
              i3.add(o3), o3.node.classList.add("apexcharts-xaxis-tick");
            }
          }
        } }, { key: "getXAxisTicksPositions", value: function() {
          var t4 = this.w, e3 = [], i3 = this.xaxisLabels.length, a3 = t4.globals.padHorizontal;
          if (t4.globals.timescaleLabels.length > 0)
            for (var s3 = 0; s3 < i3; s3++)
              a3 = this.xaxisLabels[s3].position, e3.push(a3);
          else
            for (var r3 = i3, o3 = 0; o3 < r3; o3++) {
              var n3 = r3;
              t4.globals.isXNumeric && "bar" !== t4.config.chart.type && (n3 -= 1), a3 += t4.globals.gridWidth / n3, e3.push(a3);
            }
          return e3;
        } }, { key: "xAxisLabelCorrections", value: function() {
          var t4 = this.w, e3 = new m2(this.ctx), i3 = t4.globals.dom.baseEl.querySelector(".apexcharts-xaxis-texts-g"), a3 = t4.globals.dom.baseEl.querySelectorAll(".apexcharts-xaxis-texts-g text:not(.apexcharts-xaxis-group-label)"), s3 = t4.globals.dom.baseEl.querySelectorAll(".apexcharts-yaxis-inversed text"), r3 = t4.globals.dom.baseEl.querySelectorAll(".apexcharts-xaxis-inversed-texts-g text tspan");
          if (t4.globals.rotateXLabels || t4.config.xaxis.labels.rotateAlways)
            for (var o3 = 0; o3 < a3.length; o3++) {
              var n3 = e3.rotateAroundCenter(a3[o3]);
              n3.y = n3.y - 1, n3.x = n3.x + 1, a3[o3].setAttribute("transform", "rotate(".concat(t4.config.xaxis.labels.rotate, " ").concat(n3.x, " ").concat(n3.y, ")")), a3[o3].setAttribute("text-anchor", "end");
              i3.setAttribute("transform", "translate(0, ".concat(-10, ")"));
              var l3 = a3[o3].childNodes;
              t4.config.xaxis.labels.trim && Array.prototype.forEach.call(l3, function(i4) {
                e3.placeTextWithEllipsis(i4, i4.textContent, t4.globals.xAxisLabelsHeight - ("bottom" === t4.config.legend.position ? 20 : 10));
              });
            }
          else
            !function() {
              for (var i4 = t4.globals.gridWidth / (t4.globals.labels.length + 1), s4 = 0; s4 < a3.length; s4++) {
                var r4 = a3[s4].childNodes;
                t4.config.xaxis.labels.trim && "datetime" !== t4.config.xaxis.type && Array.prototype.forEach.call(r4, function(t5) {
                  e3.placeTextWithEllipsis(t5, t5.textContent, i4);
                });
              }
            }();
          if (s3.length > 0) {
            var h3 = s3[s3.length - 1].getBBox(), c3 = s3[0].getBBox();
            h3.x < -20 && s3[s3.length - 1].parentNode.removeChild(s3[s3.length - 1]), c3.x + c3.width > t4.globals.gridWidth && !t4.globals.isBarHorizontal && s3[0].parentNode.removeChild(s3[0]);
            for (var d3 = 0; d3 < r3.length; d3++)
              e3.placeTextWithEllipsis(r3[d3], r3[d3].textContent, t4.config.yaxis[0].labels.maxWidth - (t4.config.yaxis[0].title.text ? 2 * parseFloat(t4.config.yaxis[0].title.style.fontSize) : 0) - 15);
          }
        } }]), t3;
      }();
      var j2 = function() {
        function t3(e3) {
          a2(this, t3), this.ctx = e3, this.w = e3.w;
          var i3 = this.w;
          this.xaxisLabels = i3.globals.labels.slice(), this.axesUtils = new B2(e3), this.isRangeBar = i3.globals.seriesRange.length && i3.globals.isBarHorizontal, i3.globals.timescaleLabels.length > 0 && (this.xaxisLabels = i3.globals.timescaleLabels.slice());
        }
        return r2(t3, [{ key: "drawGridArea", value: function() {
          var t4 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null, e3 = this.w, i3 = new m2(this.ctx);
          null === t4 && (t4 = i3.group({ class: "apexcharts-grid" }));
          var a3 = i3.drawLine(e3.globals.padHorizontal, 1, e3.globals.padHorizontal, e3.globals.gridHeight, "transparent"), s3 = i3.drawLine(e3.globals.padHorizontal, e3.globals.gridHeight, e3.globals.gridWidth, e3.globals.gridHeight, "transparent");
          return t4.add(s3), t4.add(a3), t4;
        } }, { key: "drawGrid", value: function() {
          var t4 = null;
          return this.w.globals.axisCharts && (t4 = this.renderGrid(), this.drawGridArea(t4.el)), t4;
        } }, { key: "createGridMask", value: function() {
          var t4 = this.w, e3 = t4.globals, i3 = new m2(this.ctx), a3 = Array.isArray(t4.config.stroke.width) ? 0 : t4.config.stroke.width;
          if (Array.isArray(t4.config.stroke.width)) {
            var s3 = 0;
            t4.config.stroke.width.forEach(function(t5) {
              s3 = Math.max(s3, t5);
            }), a3 = s3;
          }
          e3.dom.elGridRectMask = document.createElementNS(e3.SVGNS, "clipPath"), e3.dom.elGridRectMask.setAttribute("id", "gridRectMask".concat(e3.cuid)), e3.dom.elGridRectMarkerMask = document.createElementNS(e3.SVGNS, "clipPath"), e3.dom.elGridRectMarkerMask.setAttribute("id", "gridRectMarkerMask".concat(e3.cuid)), e3.dom.elForecastMask = document.createElementNS(e3.SVGNS, "clipPath"), e3.dom.elForecastMask.setAttribute("id", "forecastMask".concat(e3.cuid)), e3.dom.elNonForecastMask = document.createElementNS(e3.SVGNS, "clipPath"), e3.dom.elNonForecastMask.setAttribute("id", "nonForecastMask".concat(e3.cuid));
          var r3 = t4.config.chart.type, o3 = 0, n3 = 0;
          ("bar" === r3 || "rangeBar" === r3 || "candlestick" === r3 || "boxPlot" === r3 || t4.globals.comboBarCount > 0) && t4.globals.isXNumeric && !t4.globals.isBarHorizontal && (o3 = t4.config.grid.padding.left, n3 = t4.config.grid.padding.right, e3.barPadForNumericAxis > o3 && (o3 = e3.barPadForNumericAxis, n3 = e3.barPadForNumericAxis)), e3.dom.elGridRect = i3.drawRect(-a3 - o3 - 2, 2 * -a3 - 2, e3.gridWidth + a3 + n3 + o3 + 4, e3.gridHeight + 4 * a3 + 4, 0, "#fff");
          var l3 = t4.globals.markers.largestSize + 1;
          e3.dom.elGridRectMarker = i3.drawRect(2 * -l3, 2 * -l3, e3.gridWidth + 4 * l3, e3.gridHeight + 4 * l3, 0, "#fff"), e3.dom.elGridRectMask.appendChild(e3.dom.elGridRect.node), e3.dom.elGridRectMarkerMask.appendChild(e3.dom.elGridRectMarker.node);
          var h3 = e3.dom.baseEl.querySelector("defs");
          h3.appendChild(e3.dom.elGridRectMask), h3.appendChild(e3.dom.elForecastMask), h3.appendChild(e3.dom.elNonForecastMask), h3.appendChild(e3.dom.elGridRectMarkerMask);
        } }, { key: "_drawGridLines", value: function(t4) {
          var e3 = t4.i, i3 = t4.x1, a3 = t4.y1, s3 = t4.x2, r3 = t4.y2, o3 = t4.xCount, n3 = t4.parent, l3 = this.w;
          if (!(0 === e3 && l3.globals.skipFirstTimelinelabel || e3 === o3 - 1 && l3.globals.skipLastTimelinelabel && !l3.config.xaxis.labels.formatter || "radar" === l3.config.chart.type)) {
            l3.config.grid.xaxis.lines.show && this._drawGridLine({ i: e3, x1: i3, y1: a3, x2: s3, y2: r3, xCount: o3, parent: n3 });
            var h3 = 0;
            if (l3.globals.hasXaxisGroups && "between" === l3.config.xaxis.tickPlacement) {
              var c3 = l3.globals.groups;
              if (c3) {
                for (var d3 = 0, g3 = 0; d3 < e3 && g3 < c3.length; g3++)
                  d3 += c3[g3].cols;
                d3 === e3 && (h3 = 0.6 * l3.globals.xAxisLabelsHeight);
              }
            }
            new V2(this.ctx).drawXaxisTicks(i3, h3, l3.globals.dom.elGraphical);
          }
        } }, { key: "_drawGridLine", value: function(t4) {
          var e3 = t4.i, i3 = t4.x1, a3 = t4.y1, s3 = t4.x2, r3 = t4.y2, o3 = t4.xCount, n3 = t4.parent, l3 = this.w, h3 = false, c3 = n3.node.classList.contains("apexcharts-gridlines-horizontal"), d3 = l3.config.grid.strokeDashArray, g3 = l3.globals.barPadForNumericAxis;
          (0 === a3 && 0 === r3 || 0 === i3 && 0 === s3) && (h3 = true), a3 === l3.globals.gridHeight && r3 === l3.globals.gridHeight && (h3 = true), !l3.globals.isBarHorizontal || 0 !== e3 && e3 !== o3 - 1 || (h3 = true);
          var u3 = new m2(this).drawLine(i3 - (c3 ? g3 : 0), a3, s3 + (c3 ? g3 : 0), r3, l3.config.grid.borderColor, d3);
          u3.node.classList.add("apexcharts-gridline"), h3 && l3.config.grid.show ? this.elGridBorders.add(u3) : n3.add(u3);
        } }, { key: "_drawGridBandRect", value: function(t4) {
          var e3 = t4.c, i3 = t4.x1, a3 = t4.y1, s3 = t4.x2, r3 = t4.y2, o3 = t4.type, n3 = this.w, l3 = new m2(this.ctx), h3 = n3.globals.barPadForNumericAxis;
          if ("column" !== o3 || "datetime" !== n3.config.xaxis.type) {
            var c3 = n3.config.grid[o3].colors[e3], d3 = l3.drawRect(i3 - ("row" === o3 ? h3 : 0), a3, s3 + ("row" === o3 ? 2 * h3 : 0), r3, 0, c3, n3.config.grid[o3].opacity);
            this.elg.add(d3), d3.attr("clip-path", "url(#gridRectMask".concat(n3.globals.cuid, ")")), d3.node.classList.add("apexcharts-grid-".concat(o3));
          }
        } }, { key: "_drawXYLines", value: function(t4) {
          var e3 = this, i3 = t4.xCount, a3 = t4.tickAmount, s3 = this.w;
          if (s3.config.grid.xaxis.lines.show || s3.config.xaxis.axisTicks.show) {
            var r3, o3 = s3.globals.padHorizontal, n3 = s3.globals.gridHeight;
            s3.globals.timescaleLabels.length ? function(t5) {
              for (var a4 = t5.xC, s4 = t5.x1, r4 = t5.y1, o4 = t5.x2, n4 = t5.y2, l4 = 0; l4 < a4; l4++)
                s4 = e3.xaxisLabels[l4].position, o4 = e3.xaxisLabels[l4].position, e3._drawGridLines({ i: l4, x1: s4, y1: r4, x2: o4, y2: n4, xCount: i3, parent: e3.elgridLinesV });
            }({ xC: i3, x1: o3, y1: 0, x2: r3, y2: n3 }) : (s3.globals.isXNumeric && (i3 = s3.globals.xAxisScale.result.length), function(t5) {
              for (var a4 = t5.xC, r4 = t5.x1, o4 = t5.y1, n4 = t5.x2, l4 = t5.y2, h4 = 0; h4 < a4 + (s3.globals.isXNumeric ? 0 : 1); h4++)
                0 === h4 && 1 === a4 && 1 === s3.globals.dataPoints && (n4 = r4 = s3.globals.gridWidth / 2), e3._drawGridLines({ i: h4, x1: r4, y1: o4, x2: n4, y2: l4, xCount: i3, parent: e3.elgridLinesV }), n4 = r4 += s3.globals.gridWidth / (s3.globals.isXNumeric ? a4 - 1 : a4);
            }({ xC: i3, x1: o3, y1: 0, x2: r3, y2: n3 }));
          }
          if (s3.config.grid.yaxis.lines.show) {
            var l3 = 0, h3 = 0, c3 = s3.globals.gridWidth, d3 = a3 + 1;
            this.isRangeBar && (d3 = s3.globals.labels.length);
            for (var g3 = 0; g3 < d3 + (this.isRangeBar ? 1 : 0); g3++)
              this._drawGridLine({ i: g3, xCount: d3 + (this.isRangeBar ? 1 : 0), x1: 0, y1: l3, x2: c3, y2: h3, parent: this.elgridLinesH }), h3 = l3 += s3.globals.gridHeight / (this.isRangeBar ? d3 : a3);
          }
        } }, { key: "_drawInvertedXYLines", value: function(t4) {
          var e3 = t4.xCount, i3 = this.w;
          if (i3.config.grid.xaxis.lines.show || i3.config.xaxis.axisTicks.show)
            for (var a3, s3 = i3.globals.padHorizontal, r3 = i3.globals.gridHeight, o3 = 0; o3 < e3 + 1; o3++) {
              i3.config.grid.xaxis.lines.show && this._drawGridLine({ i: o3, xCount: e3 + 1, x1: s3, y1: 0, x2: a3, y2: r3, parent: this.elgridLinesV }), new V2(this.ctx).drawXaxisTicks(s3, 0, i3.globals.dom.elGraphical), a3 = s3 = s3 + i3.globals.gridWidth / e3 + 0.3;
            }
          if (i3.config.grid.yaxis.lines.show)
            for (var n3 = 0, l3 = 0, h3 = i3.globals.gridWidth, c3 = 0; c3 < i3.globals.dataPoints + 1; c3++)
              this._drawGridLine({ i: c3, xCount: i3.globals.dataPoints + 1, x1: 0, y1: n3, x2: h3, y2: l3, parent: this.elgridLinesH }), l3 = n3 += i3.globals.gridHeight / i3.globals.dataPoints;
        } }, { key: "renderGrid", value: function() {
          var t4 = this.w, e3 = new m2(this.ctx);
          this.elg = e3.group({ class: "apexcharts-grid" }), this.elgridLinesH = e3.group({ class: "apexcharts-gridlines-horizontal" }), this.elgridLinesV = e3.group({ class: "apexcharts-gridlines-vertical" }), this.elGridBorders = e3.group({ class: "apexcharts-grid-borders" }), this.elg.add(this.elgridLinesH), this.elg.add(this.elgridLinesV), t4.config.grid.show || (this.elgridLinesV.hide(), this.elgridLinesH.hide(), this.elGridBorders.hide());
          for (var i3, a3 = t4.globals.yAxisScale.length ? t4.globals.yAxisScale[0].result.length - 1 : 5, s3 = 0; s3 < t4.globals.series.length && (void 0 !== t4.globals.yAxisScale[s3] && (a3 = t4.globals.yAxisScale[s3].result.length - 1), !(a3 > 2)); s3++)
            ;
          if (!t4.globals.isBarHorizontal || this.isRangeBar) {
            var r3, o3, n3;
            if (i3 = this.xaxisLabels.length, this.isRangeBar)
              i3--, a3 = t4.globals.labels.length, t4.config.xaxis.tickAmount && t4.config.xaxis.labels.formatter && (i3 = t4.config.xaxis.tickAmount), (null === (r3 = t4.globals.yAxisScale) || void 0 === r3 || null === (o3 = r3[0]) || void 0 === o3 || null === (n3 = o3.result) || void 0 === n3 ? void 0 : n3.length) > 0 && "datetime" !== t4.config.xaxis.type && (i3 = t4.globals.yAxisScale[0].result.length - 1);
            this._drawXYLines({ xCount: i3, tickAmount: a3 });
          } else
            i3 = a3, a3 = t4.globals.xTickAmount, this._drawInvertedXYLines({ xCount: i3, tickAmount: a3 });
          return this.drawGridBands(i3, a3), { el: this.elg, elGridBorders: this.elGridBorders, xAxisTickWidth: t4.globals.gridWidth / i3 };
        } }, { key: "drawGridBands", value: function(t4, e3) {
          var i3 = this.w;
          if (void 0 !== i3.config.grid.row.colors && i3.config.grid.row.colors.length > 0)
            for (var a3 = 0, s3 = i3.globals.gridHeight / e3, r3 = i3.globals.gridWidth, o3 = 0, n3 = 0; o3 < e3; o3++, n3++)
              n3 >= i3.config.grid.row.colors.length && (n3 = 0), this._drawGridBandRect({ c: n3, x1: 0, y1: a3, x2: r3, y2: s3, type: "row" }), a3 += i3.globals.gridHeight / e3;
          if (void 0 !== i3.config.grid.column.colors && i3.config.grid.column.colors.length > 0)
            for (var l3 = i3.globals.isBarHorizontal || "on" !== i3.config.xaxis.tickPlacement || "category" !== i3.config.xaxis.type && !i3.config.xaxis.convertedCatToNumeric ? t4 : t4 - 1, h3 = i3.globals.padHorizontal, c3 = i3.globals.padHorizontal + i3.globals.gridWidth / l3, d3 = i3.globals.gridHeight, g3 = 0, u3 = 0; g3 < t4; g3++, u3++)
              u3 >= i3.config.grid.column.colors.length && (u3 = 0), this._drawGridBandRect({ c: u3, x1: h3, y1: 0, x2: c3, y2: d3, type: "column" }), h3 += i3.globals.gridWidth / l3;
        } }]), t3;
      }();
      var _2 = function() {
        function t3(e3) {
          a2(this, t3), this.ctx = e3, this.w = e3.w;
        }
        return r2(t3, [{ key: "niceScale", value: function(t4, e3) {
          var i3 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 5, a3 = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : 0, s3 = arguments.length > 4 ? arguments[4] : void 0, r3 = this.w, o3 = Math.abs(e3 - t4);
          if ("dataPoints" === (i3 = this._adjustTicksForSmallRange(i3, a3, o3)) && (i3 = r3.globals.dataPoints - 1), t4 === Number.MIN_VALUE && 0 === e3 || !x2.isNumber(t4) && !x2.isNumber(e3) || t4 === Number.MIN_VALUE && e3 === -Number.MAX_VALUE)
            return t4 = 0, e3 = i3, this.linearScale(t4, e3, i3, a3, r3.config.yaxis[a3].stepSize);
          t4 > e3 ? (console.warn("axis.min cannot be greater than axis.max"), e3 = t4 + 0.1) : t4 === e3 && (t4 = 0 === t4 ? 0 : t4 - 0.5, e3 = 0 === e3 ? 2 : e3 + 0.5);
          var n3 = [];
          o3 < 1 && s3 && ("candlestick" === r3.config.chart.type || "candlestick" === r3.config.series[a3].type || "boxPlot" === r3.config.chart.type || "boxPlot" === r3.config.series[a3].type || r3.globals.isRangeData) && (e3 *= 1.01);
          var l3 = i3 + 1;
          l3 < 2 ? l3 = 2 : l3 > 2 && (l3 -= 2);
          var h3 = o3 / l3, c3 = Math.floor(x2.log10(h3)), d3 = Math.pow(10, c3), g3 = Math.round(h3 / d3);
          g3 < 1 && (g3 = 1);
          var u3 = g3 * d3;
          r3.config.yaxis[a3].stepSize && (u3 = r3.config.yaxis[a3].stepSize), r3.globals.isBarHorizontal && r3.config.xaxis.stepSize && "datetime" !== r3.config.xaxis.type && (u3 = r3.config.xaxis.stepSize);
          var p3 = u3 * Math.floor(t4 / u3), f3 = u3 * Math.ceil(e3 / u3), b3 = p3;
          if (s3 && o3 > 2) {
            for (; n3.push(x2.stripNumber(b3, 7)), !((b3 += u3) > f3); )
              ;
            return { result: n3, niceMin: n3[0], niceMax: n3[n3.length - 1] };
          }
          var v3 = t4;
          (n3 = []).push(x2.stripNumber(v3, 7));
          for (var m3 = Math.abs(e3 - t4) / i3, y3 = 0; y3 <= i3; y3++)
            v3 += m3, n3.push(v3);
          return n3[n3.length - 2] >= e3 && n3.pop(), { result: n3, niceMin: n3[0], niceMax: n3[n3.length - 1] };
        } }, { key: "linearScale", value: function(t4, e3) {
          var i3 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 5, a3 = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : 0, s3 = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : void 0, r3 = Math.abs(e3 - t4);
          "dataPoints" === (i3 = this._adjustTicksForSmallRange(i3, a3, r3)) && (i3 = this.w.globals.dataPoints - 1), s3 || (s3 = r3 / i3), i3 === Number.MAX_VALUE && (i3 = 5, s3 = 1);
          for (var o3 = [], n3 = t4; i3 >= 0; )
            o3.push(n3), n3 += s3, i3 -= 1;
          return { result: o3, niceMin: o3[0], niceMax: o3[o3.length - 1] };
        } }, { key: "logarithmicScaleNice", value: function(t4, e3, i3) {
          e3 <= 0 && (e3 = Math.max(t4, i3)), t4 <= 0 && (t4 = Math.min(e3, i3));
          for (var a3 = [], s3 = Math.ceil(Math.log(e3) / Math.log(i3) + 1), r3 = Math.floor(Math.log(t4) / Math.log(i3)); r3 < s3; r3++)
            a3.push(Math.pow(i3, r3));
          return { result: a3, niceMin: a3[0], niceMax: a3[a3.length - 1] };
        } }, { key: "logarithmicScale", value: function(t4, e3, i3) {
          e3 <= 0 && (e3 = Math.max(t4, i3)), t4 <= 0 && (t4 = Math.min(e3, i3));
          for (var a3 = [], s3 = Math.log(e3) / Math.log(i3), r3 = Math.log(t4) / Math.log(i3), o3 = s3 - r3, n3 = Math.round(o3), l3 = o3 / n3, h3 = 0, c3 = r3; h3 < n3; h3++, c3 += l3)
            a3.push(Math.pow(i3, c3));
          return a3.push(Math.pow(i3, s3)), { result: a3, niceMin: t4, niceMax: e3 };
        } }, { key: "_adjustTicksForSmallRange", value: function(t4, e3, i3) {
          var a3 = t4;
          if (void 0 !== e3 && this.w.config.yaxis[e3].labels.formatter && void 0 === this.w.config.yaxis[e3].tickAmount) {
            var s3 = Number(this.w.config.yaxis[e3].labels.formatter(1));
            x2.isNumber(s3) && 0 === this.w.globals.yValueDecimal && (a3 = Math.ceil(i3));
          }
          return a3 < t4 ? a3 : t4;
        } }, { key: "setYScaleForIndex", value: function(t4, e3, i3) {
          var a3 = this.w.globals, s3 = this.w.config, r3 = a3.isBarHorizontal ? s3.xaxis : s3.yaxis[t4];
          void 0 === a3.yAxisScale[t4] && (a3.yAxisScale[t4] = []);
          var o3 = Math.abs(i3 - e3);
          if (r3.logarithmic && o3 <= 5 && (a3.invalidLogScale = true), r3.logarithmic && o3 > 5)
            a3.allSeriesCollapsed = false, a3.yAxisScale[t4] = this.logarithmicScale(e3, i3, r3.logBase), a3.yAxisScale[t4] = r3.forceNiceScale ? this.logarithmicScaleNice(e3, i3, r3.logBase) : this.logarithmicScale(e3, i3, r3.logBase);
          else if (i3 !== -Number.MAX_VALUE && x2.isNumber(i3))
            if (a3.allSeriesCollapsed = false, void 0 === r3.min && void 0 === r3.max || r3.forceNiceScale) {
              var n3 = void 0 === s3.yaxis[t4].max && void 0 === s3.yaxis[t4].min || s3.yaxis[t4].forceNiceScale;
              a3.yAxisScale[t4] = this.niceScale(e3, i3, r3.tickAmount ? r3.tickAmount : o3 < 5 && o3 > 1 ? o3 + 1 : 5, t4, n3);
            } else
              a3.yAxisScale[t4] = this.linearScale(e3, i3, r3.tickAmount, t4, s3.yaxis[t4].stepSize);
          else
            a3.yAxisScale[t4] = this.linearScale(0, 5, 5, t4, s3.yaxis[t4].stepSize);
        } }, { key: "setXScale", value: function(t4, e3) {
          var i3 = this.w, a3 = i3.globals, s3 = Math.abs(e3 - t4);
          return e3 !== -Number.MAX_VALUE && x2.isNumber(e3) ? a3.xAxisScale = this.linearScale(t4, e3, i3.config.xaxis.tickAmount ? i3.config.xaxis.tickAmount : s3 < 5 && s3 > 1 ? s3 + 1 : 5, 0, i3.config.xaxis.stepSize) : a3.xAxisScale = this.linearScale(0, 5, 5), a3.xAxisScale;
        } }, { key: "setMultipleYScales", value: function() {
          var t4 = this, e3 = this.w.globals, i3 = this.w.config, a3 = e3.minYArr.concat([]), s3 = e3.maxYArr.concat([]), r3 = [];
          i3.yaxis.forEach(function(e4, o3) {
            var n3 = o3;
            i3.series.forEach(function(t5, i4) {
              t5.name === e4.seriesName && (n3 = i4, o3 !== i4 ? r3.push({ index: i4, similarIndex: o3, alreadyExists: true }) : r3.push({ index: i4 }));
            });
            var l3 = a3[n3], h3 = s3[n3];
            t4.setYScaleForIndex(o3, l3, h3);
          }), this.sameScaleInMultipleAxes(a3, s3, r3);
        } }, { key: "sameScaleInMultipleAxes", value: function(t4, e3, i3) {
          var a3 = this, s3 = this.w.config, r3 = this.w.globals, o3 = [];
          i3.forEach(function(t5) {
            t5.alreadyExists && (void 0 === o3[t5.index] && (o3[t5.index] = []), o3[t5.index].push(t5.index), o3[t5.index].push(t5.similarIndex));
          }), r3.yAxisSameScaleIndices = o3, o3.forEach(function(t5, e4) {
            o3.forEach(function(i4, a4) {
              var s4, r4;
              e4 !== a4 && (s4 = t5, r4 = i4, s4.filter(function(t6) {
                return -1 !== r4.indexOf(t6);
              })).length > 0 && (o3[e4] = o3[e4].concat(o3[a4]));
            });
          });
          var n3 = o3.map(function(t5) {
            return t5.filter(function(e4, i4) {
              return t5.indexOf(e4) === i4;
            });
          }).map(function(t5) {
            return t5.sort();
          });
          o3 = o3.filter(function(t5) {
            return !!t5;
          });
          var l3 = n3.slice(), h3 = l3.map(function(t5) {
            return JSON.stringify(t5);
          });
          l3 = l3.filter(function(t5, e4) {
            return h3.indexOf(JSON.stringify(t5)) === e4;
          });
          var c3 = [], d3 = [];
          t4.forEach(function(t5, i4) {
            l3.forEach(function(a4, s4) {
              a4.indexOf(i4) > -1 && (void 0 === c3[s4] && (c3[s4] = [], d3[s4] = []), c3[s4].push({ key: i4, value: t5 }), d3[s4].push({ key: i4, value: e3[i4] }));
            });
          });
          var g3 = Array.apply(null, Array(l3.length)).map(Number.prototype.valueOf, Number.MIN_VALUE), u3 = Array.apply(null, Array(l3.length)).map(Number.prototype.valueOf, -Number.MAX_VALUE);
          c3.forEach(function(t5, e4) {
            t5.forEach(function(t6, i4) {
              g3[e4] = Math.min(t6.value, g3[e4]);
            });
          }), d3.forEach(function(t5, e4) {
            t5.forEach(function(t6, i4) {
              u3[e4] = Math.max(t6.value, u3[e4]);
            });
          }), t4.forEach(function(t5, e4) {
            d3.forEach(function(t6, i4) {
              var o4 = g3[i4], n4 = u3[i4];
              s3.chart.stacked && (n4 = 0, t6.forEach(function(t7, e5) {
                t7.value !== -Number.MAX_VALUE && (n4 += t7.value), o4 !== Number.MIN_VALUE && (o4 += c3[i4][e5].value);
              })), t6.forEach(function(i5, l4) {
                t6[l4].key === e4 && (void 0 !== s3.yaxis[e4].min && (o4 = "function" == typeof s3.yaxis[e4].min ? s3.yaxis[e4].min(r3.minY) : s3.yaxis[e4].min), void 0 !== s3.yaxis[e4].max && (n4 = "function" == typeof s3.yaxis[e4].max ? s3.yaxis[e4].max(r3.maxY) : s3.yaxis[e4].max), a3.setYScaleForIndex(e4, o4, n4));
              });
            });
          });
        } }, { key: "autoScaleY", value: function(t4, e3, i3) {
          t4 || (t4 = this);
          var a3 = t4.w;
          if (a3.globals.isMultipleYAxis || a3.globals.collapsedSeries.length)
            return console.warn("autoScaleYaxis not supported in a multi-yaxis chart."), e3;
          var s3 = a3.globals.seriesX[0], r3 = a3.config.chart.stacked;
          return e3.forEach(function(t5, o3) {
            for (var n3 = 0, l3 = 0; l3 < s3.length; l3++)
              if (s3[l3] >= i3.xaxis.min) {
                n3 = l3;
                break;
              }
            var h3, c3, d3 = a3.globals.minYArr[o3], g3 = a3.globals.maxYArr[o3], u3 = a3.globals.stackedSeriesTotals;
            a3.globals.series.forEach(function(o4, l4) {
              var p3 = o4[n3];
              r3 ? (p3 = u3[n3], h3 = c3 = p3, u3.forEach(function(t6, e4) {
                s3[e4] <= i3.xaxis.max && s3[e4] >= i3.xaxis.min && (t6 > c3 && null !== t6 && (c3 = t6), o4[e4] < h3 && null !== o4[e4] && (h3 = o4[e4]));
              })) : (h3 = c3 = p3, o4.forEach(function(t6, e4) {
                if (s3[e4] <= i3.xaxis.max && s3[e4] >= i3.xaxis.min) {
                  var r4 = t6, o5 = t6;
                  a3.globals.series.forEach(function(i4, a4) {
                    null !== t6 && (r4 = Math.min(i4[e4], r4), o5 = Math.max(i4[e4], o5));
                  }), o5 > c3 && null !== o5 && (c3 = o5), r4 < h3 && null !== r4 && (h3 = r4);
                }
              })), void 0 === h3 && void 0 === c3 && (h3 = d3, c3 = g3), c3 *= c3 < 0 ? 0.9 : 1.1, 0 === (h3 *= h3 < 0 ? 1.1 : 0.9) && 0 === c3 && (h3 = -1, c3 = 1), c3 < 0 && c3 < g3 && (c3 = g3), h3 < 0 && h3 > d3 && (h3 = d3), e3.length > 1 ? (e3[l4].min = void 0 === t5.min ? h3 : t5.min, e3[l4].max = void 0 === t5.max ? c3 : t5.max) : (e3[0].min = void 0 === t5.min ? h3 : t5.min, e3[0].max = void 0 === t5.max ? c3 : t5.max);
            });
          }), e3;
        } }]), t3;
      }();
      var U2 = function() {
        function t3(e3) {
          a2(this, t3), this.ctx = e3, this.w = e3.w, this.scales = new _2(e3);
        }
        return r2(t3, [{ key: "init", value: function() {
          this.setYRange(), this.setXRange(), this.setZRange();
        } }, { key: "getMinYMaxY", value: function(t4) {
          var e3 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : Number.MAX_VALUE, i3 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : -Number.MAX_VALUE, a3 = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : null, s3 = this.w.config, r3 = this.w.globals, o3 = -Number.MAX_VALUE, n3 = Number.MIN_VALUE;
          null === a3 && (a3 = t4 + 1);
          var l3 = r3.series, h3 = l3, c3 = l3;
          "candlestick" === s3.chart.type ? (h3 = r3.seriesCandleL, c3 = r3.seriesCandleH) : "boxPlot" === s3.chart.type ? (h3 = r3.seriesCandleO, c3 = r3.seriesCandleC) : r3.isRangeData && (h3 = r3.seriesRangeStart, c3 = r3.seriesRangeEnd);
          for (var d3 = t4; d3 < a3; d3++) {
            r3.dataPoints = Math.max(r3.dataPoints, l3[d3].length), r3.categoryLabels.length && (r3.dataPoints = r3.categoryLabels.filter(function(t5) {
              return void 0 !== t5;
            }).length), r3.labels.length && "datetime" !== s3.xaxis.type && 0 !== r3.series.reduce(function(t5, e4) {
              return t5 + e4.length;
            }, 0) && (r3.dataPoints = Math.max(r3.dataPoints, r3.labels.length));
            for (var g3 = 0; g3 < r3.series[d3].length; g3++) {
              var u3 = l3[d3][g3];
              null !== u3 && x2.isNumber(u3) ? (void 0 !== c3[d3][g3] && (o3 = Math.max(o3, c3[d3][g3]), e3 = Math.min(e3, c3[d3][g3])), void 0 !== h3[d3][g3] && (e3 = Math.min(e3, h3[d3][g3]), i3 = Math.max(i3, h3[d3][g3])), "candlestick" !== this.w.config.chart.type && "boxPlot" !== this.w.config.chart.type && "rangeArea" === this.w.config.chart.type && "rangeBar" === this.w.config.chart.type || ("candlestick" !== this.w.config.chart.type && "boxPlot" !== this.w.config.chart.type || void 0 !== r3.seriesCandleC[d3][g3] && (o3 = Math.max(o3, r3.seriesCandleO[d3][g3]), o3 = Math.max(o3, r3.seriesCandleH[d3][g3]), o3 = Math.max(o3, r3.seriesCandleL[d3][g3]), o3 = Math.max(o3, r3.seriesCandleC[d3][g3]), "boxPlot" === this.w.config.chart.type && (o3 = Math.max(o3, r3.seriesCandleM[d3][g3]))), !s3.series[d3].type || "candlestick" === s3.series[d3].type && "boxPlot" === s3.series[d3].type && "rangeArea" === s3.series[d3].type && "rangeBar" === s3.series[d3].type || (o3 = Math.max(o3, r3.series[d3][g3]), e3 = Math.min(e3, r3.series[d3][g3])), i3 = o3), r3.seriesGoals[d3] && r3.seriesGoals[d3][g3] && Array.isArray(r3.seriesGoals[d3][g3]) && r3.seriesGoals[d3][g3].forEach(function(t5) {
                n3 !== Number.MIN_VALUE && (n3 = Math.min(n3, t5.value), e3 = n3), o3 = Math.max(o3, t5.value), i3 = o3;
              }), x2.isFloat(u3) && (u3 = x2.noExponents(u3), r3.yValueDecimal = Math.max(r3.yValueDecimal, u3.toString().split(".")[1].length)), n3 > h3[d3][g3] && h3[d3][g3] < 0 && (n3 = h3[d3][g3])) : r3.hasNullValues = true;
            }
          }
          return "rangeBar" === s3.chart.type && r3.seriesRangeStart.length && r3.isBarHorizontal && (n3 = e3), "bar" === s3.chart.type && (n3 < 0 && o3 < 0 && (o3 = 0), n3 === Number.MIN_VALUE && (n3 = 0)), { minY: n3, maxY: o3, lowestY: e3, highestY: i3 };
        } }, { key: "setYRange", value: function() {
          var t4 = this.w.globals, e3 = this.w.config;
          t4.maxY = -Number.MAX_VALUE, t4.minY = Number.MIN_VALUE;
          var i3 = Number.MAX_VALUE;
          if (t4.isMultipleYAxis)
            for (var a3 = 0; a3 < t4.series.length; a3++) {
              var s3 = this.getMinYMaxY(a3, i3, null, a3 + 1);
              t4.minYArr.push(s3.minY), t4.maxYArr.push(s3.maxY), i3 = s3.lowestY;
            }
          var r3 = this.getMinYMaxY(0, i3, null, t4.series.length);
          if (t4.minY = r3.minY, t4.maxY = r3.maxY, i3 = r3.lowestY, e3.chart.stacked && this._setStackedMinMax(), ("line" === e3.chart.type || "area" === e3.chart.type || "candlestick" === e3.chart.type || "boxPlot" === e3.chart.type || "rangeBar" === e3.chart.type && !t4.isBarHorizontal) && t4.minY === Number.MIN_VALUE && i3 !== -Number.MAX_VALUE && i3 !== t4.maxY) {
            var o3 = t4.maxY - i3;
            (i3 >= 0 && i3 <= 10 || void 0 !== e3.yaxis[0].min || void 0 !== e3.yaxis[0].max) && (o3 = 0), t4.minY = i3 - 5 * o3 / 100, i3 > 0 && t4.minY < 0 && (t4.minY = 0), t4.maxY = t4.maxY + 5 * o3 / 100;
          }
          if (e3.yaxis.forEach(function(e4, i4) {
            void 0 !== e4.max && ("number" == typeof e4.max ? t4.maxYArr[i4] = e4.max : "function" == typeof e4.max && (t4.maxYArr[i4] = e4.max(t4.isMultipleYAxis ? t4.maxYArr[i4] : t4.maxY)), t4.maxY = t4.maxYArr[i4]), void 0 !== e4.min && ("number" == typeof e4.min ? t4.minYArr[i4] = e4.min : "function" == typeof e4.min && (t4.minYArr[i4] = e4.min(t4.isMultipleYAxis ? t4.minYArr[i4] === Number.MIN_VALUE ? 0 : t4.minYArr[i4] : t4.minY)), t4.minY = t4.minYArr[i4]);
          }), t4.isBarHorizontal) {
            ["min", "max"].forEach(function(i4) {
              void 0 !== e3.xaxis[i4] && "number" == typeof e3.xaxis[i4] && ("min" === i4 ? t4.minY = e3.xaxis[i4] : t4.maxY = e3.xaxis[i4]);
            });
          }
          return t4.isMultipleYAxis ? (this.scales.setMultipleYScales(), t4.minY = i3, t4.yAxisScale.forEach(function(e4, i4) {
            t4.minYArr[i4] = e4.niceMin, t4.maxYArr[i4] = e4.niceMax;
          })) : (this.scales.setYScaleForIndex(0, t4.minY, t4.maxY), t4.minY = t4.yAxisScale[0].niceMin, t4.maxY = t4.yAxisScale[0].niceMax, t4.minYArr[0] = t4.yAxisScale[0].niceMin, t4.maxYArr[0] = t4.yAxisScale[0].niceMax), { minY: t4.minY, maxY: t4.maxY, minYArr: t4.minYArr, maxYArr: t4.maxYArr, yAxisScale: t4.yAxisScale };
        } }, { key: "setXRange", value: function() {
          var t4 = this.w.globals, e3 = this.w.config, i3 = "numeric" === e3.xaxis.type || "datetime" === e3.xaxis.type || "category" === e3.xaxis.type && !t4.noLabelsProvided || t4.noLabelsProvided || t4.isXNumeric;
          if (t4.isXNumeric && function() {
            for (var e4 = 0; e4 < t4.series.length; e4++)
              if (t4.labels[e4])
                for (var i4 = 0; i4 < t4.labels[e4].length; i4++)
                  null !== t4.labels[e4][i4] && x2.isNumber(t4.labels[e4][i4]) && (t4.maxX = Math.max(t4.maxX, t4.labels[e4][i4]), t4.initialMaxX = Math.max(t4.maxX, t4.labels[e4][i4]), t4.minX = Math.min(t4.minX, t4.labels[e4][i4]), t4.initialMinX = Math.min(t4.minX, t4.labels[e4][i4]));
          }(), t4.noLabelsProvided && 0 === e3.xaxis.categories.length && (t4.maxX = t4.labels[t4.labels.length - 1], t4.initialMaxX = t4.labels[t4.labels.length - 1], t4.minX = 1, t4.initialMinX = 1), t4.isXNumeric || t4.noLabelsProvided || t4.dataFormatXNumeric) {
            var a3;
            if (void 0 === e3.xaxis.tickAmount ? (a3 = Math.round(t4.svgWidth / 150), "numeric" === e3.xaxis.type && t4.dataPoints < 30 && (a3 = t4.dataPoints - 1), a3 > t4.dataPoints && 0 !== t4.dataPoints && (a3 = t4.dataPoints - 1)) : "dataPoints" === e3.xaxis.tickAmount ? (t4.series.length > 1 && (a3 = t4.series[t4.maxValsInArrayIndex].length - 1), t4.isXNumeric && (a3 = t4.maxX - t4.minX - 1)) : a3 = e3.xaxis.tickAmount, t4.xTickAmount = a3, void 0 !== e3.xaxis.max && "number" == typeof e3.xaxis.max && (t4.maxX = e3.xaxis.max), void 0 !== e3.xaxis.min && "number" == typeof e3.xaxis.min && (t4.minX = e3.xaxis.min), void 0 !== e3.xaxis.range && (t4.minX = t4.maxX - e3.xaxis.range), t4.minX !== Number.MAX_VALUE && t4.maxX !== -Number.MAX_VALUE)
              if (e3.xaxis.convertedCatToNumeric && !t4.dataFormatXNumeric) {
                for (var s3 = [], r3 = t4.minX - 1; r3 < t4.maxX; r3++)
                  s3.push(r3 + 1);
                t4.xAxisScale = { result: s3, niceMin: s3[0], niceMax: s3[s3.length - 1] };
              } else
                t4.xAxisScale = this.scales.setXScale(t4.minX, t4.maxX);
            else
              t4.xAxisScale = this.scales.linearScale(0, a3, a3, 0, e3.xaxis.stepSize), t4.noLabelsProvided && t4.labels.length > 0 && (t4.xAxisScale = this.scales.linearScale(1, t4.labels.length, a3 - 1, 0, e3.xaxis.stepSize), t4.seriesX = t4.labels.slice());
            i3 && (t4.labels = t4.xAxisScale.result.slice());
          }
          return t4.isBarHorizontal && t4.labels.length && (t4.xTickAmount = t4.labels.length), this._handleSingleDataPoint(), this._getMinXDiff(), { minX: t4.minX, maxX: t4.maxX };
        } }, { key: "setZRange", value: function() {
          var t4 = this.w.globals;
          if (t4.isDataXYZ) {
            for (var e3 = 0; e3 < t4.series.length; e3++)
              if (void 0 !== t4.seriesZ[e3])
                for (var i3 = 0; i3 < t4.seriesZ[e3].length; i3++)
                  null !== t4.seriesZ[e3][i3] && x2.isNumber(t4.seriesZ[e3][i3]) && (t4.maxZ = Math.max(t4.maxZ, t4.seriesZ[e3][i3]), t4.minZ = Math.min(t4.minZ, t4.seriesZ[e3][i3]));
          }
        } }, { key: "_handleSingleDataPoint", value: function() {
          var t4 = this.w.globals, e3 = this.w.config;
          if (t4.minX === t4.maxX) {
            var i3 = new I2(this.ctx);
            if ("datetime" === e3.xaxis.type) {
              var a3 = i3.getDate(t4.minX);
              e3.xaxis.labels.datetimeUTC ? a3.setUTCDate(a3.getUTCDate() - 2) : a3.setDate(a3.getDate() - 2), t4.minX = new Date(a3).getTime();
              var s3 = i3.getDate(t4.maxX);
              e3.xaxis.labels.datetimeUTC ? s3.setUTCDate(s3.getUTCDate() + 2) : s3.setDate(s3.getDate() + 2), t4.maxX = new Date(s3).getTime();
            } else
              ("numeric" === e3.xaxis.type || "category" === e3.xaxis.type && !t4.noLabelsProvided) && (t4.minX = t4.minX - 2, t4.initialMinX = t4.minX, t4.maxX = t4.maxX + 2, t4.initialMaxX = t4.maxX);
          }
        } }, { key: "_getMinXDiff", value: function() {
          var t4 = this.w.globals;
          t4.isXNumeric && t4.seriesX.forEach(function(e3, i3) {
            1 === e3.length && e3.push(t4.seriesX[t4.maxValsInArrayIndex][t4.seriesX[t4.maxValsInArrayIndex].length - 1]);
            var a3 = e3.slice();
            a3.sort(function(t5, e4) {
              return t5 - e4;
            }), a3.forEach(function(e4, i4) {
              if (i4 > 0) {
                var s3 = e4 - a3[i4 - 1];
                s3 > 0 && (t4.minXDiff = Math.min(s3, t4.minXDiff));
              }
            }), 1 !== t4.dataPoints && t4.minXDiff !== Number.MAX_VALUE || (t4.minXDiff = 0.5);
          });
        } }, { key: "_setStackedMinMax", value: function() {
          var t4 = this, e3 = this.w.globals;
          if (e3.series.length) {
            var i3 = e3.seriesGroups;
            i3.length || (i3 = [this.w.config.series.map(function(t5) {
              return t5.name;
            })]);
            var a3 = {}, s3 = {};
            i3.forEach(function(i4) {
              a3[i4] = [], s3[i4] = [], t4.w.config.series.map(function(t5, e4) {
                return i4.indexOf(t5.name) > -1 ? e4 : null;
              }).filter(function(t5) {
                return null !== t5;
              }).forEach(function(r3) {
                for (var o3 = 0; o3 < e3.series[e3.maxValsInArrayIndex].length; o3++) {
                  var n3, l3;
                  void 0 === a3[i4][o3] && (a3[i4][o3] = 0, s3[i4][o3] = 0), (t4.w.config.chart.stacked && !e3.comboCharts || t4.w.config.chart.stacked && e3.comboCharts && (!t4.w.config.chart.stackOnlyBar || "bar" === (null === (n3 = t4.w.config.series) || void 0 === n3 || null === (l3 = n3[r3]) || void 0 === l3 ? void 0 : l3.type))) && null !== e3.series[r3][o3] && x2.isNumber(e3.series[r3][o3]) && (e3.series[r3][o3] > 0 ? a3[i4][o3] += parseFloat(e3.series[r3][o3]) + 1e-4 : s3[i4][o3] += parseFloat(e3.series[r3][o3]));
                }
              });
            }), Object.entries(a3).forEach(function(t5) {
              var i4 = g2(t5, 1)[0];
              a3[i4].forEach(function(t6, r3) {
                e3.maxY = Math.max(e3.maxY, a3[i4][r3]), e3.minY = Math.min(e3.minY, s3[i4][r3]);
              });
            });
          }
        } }]), t3;
      }();
      var q2 = function() {
        function t3(e3, i3) {
          a2(this, t3), this.ctx = e3, this.elgrid = i3, this.w = e3.w;
          var s3 = this.w;
          this.xaxisFontSize = s3.config.xaxis.labels.style.fontSize, this.axisFontFamily = s3.config.xaxis.labels.style.fontFamily, this.xaxisForeColors = s3.config.xaxis.labels.style.colors, this.isCategoryBarHorizontal = "bar" === s3.config.chart.type && s3.config.plotOptions.bar.horizontal, this.xAxisoffX = 0, "bottom" === s3.config.xaxis.position && (this.xAxisoffX = s3.globals.gridHeight), this.drawnLabels = [], this.axesUtils = new B2(e3);
        }
        return r2(t3, [{ key: "drawYaxis", value: function(t4) {
          var e3 = this, i3 = this.w, a3 = new m2(this.ctx), s3 = i3.config.yaxis[t4].labels.style, r3 = s3.fontSize, o3 = s3.fontFamily, n3 = s3.fontWeight, l3 = a3.group({ class: "apexcharts-yaxis", rel: t4, transform: "translate(" + i3.globals.translateYAxisX[t4] + ", 0)" });
          if (this.axesUtils.isYAxisHidden(t4))
            return l3;
          var h3 = a3.group({ class: "apexcharts-yaxis-texts-g" });
          l3.add(h3);
          var c3 = i3.globals.yAxisScale[t4].result.length - 1, d3 = i3.globals.gridHeight / c3, g3 = i3.globals.translateY, u3 = i3.globals.yLabelFormatters[t4], p3 = i3.globals.yAxisScale[t4].result.slice();
          p3 = this.axesUtils.checkForReversedLabels(t4, p3);
          var f3 = "";
          if (i3.config.yaxis[t4].labels.show)
            for (var x3 = function(l4) {
              var x4 = p3[l4];
              x4 = u3(x4, l4, i3);
              var b4 = i3.config.yaxis[t4].labels.padding;
              i3.config.yaxis[t4].opposite && 0 !== i3.config.yaxis.length && (b4 *= -1);
              var v4 = "end";
              i3.config.yaxis[t4].opposite && (v4 = "start"), "left" === i3.config.yaxis[t4].labels.align ? v4 = "start" : "center" === i3.config.yaxis[t4].labels.align ? v4 = "middle" : "right" === i3.config.yaxis[t4].labels.align && (v4 = "end");
              var m3 = e3.axesUtils.getYAxisForeColor(s3.colors, t4), y4 = i3.config.yaxis[t4].labels.offsetY;
              "heatmap" === i3.config.chart.type && (y4 -= (i3.globals.gridHeight / i3.globals.series.length - 1) / 2);
              var w4 = a3.drawText({ x: b4, y: g3 + c3 / 10 + y4 + 1, text: x4, textAnchor: v4, fontSize: r3, fontFamily: o3, fontWeight: n3, maxWidth: i3.config.yaxis[t4].labels.maxWidth, foreColor: Array.isArray(m3) ? m3[l4] : m3, isPlainText: false, cssClass: "apexcharts-yaxis-label " + s3.cssClass });
              l4 === c3 && (f3 = w4), h3.add(w4);
              var k4 = document.createElementNS(i3.globals.SVGNS, "title");
              if (k4.textContent = Array.isArray(x4) ? x4.join(" ") : x4, w4.node.appendChild(k4), 0 !== i3.config.yaxis[t4].labels.rotate) {
                var A4 = a3.rotateAroundCenter(f3.node), S4 = a3.rotateAroundCenter(w4.node);
                w4.node.setAttribute("transform", "rotate(".concat(i3.config.yaxis[t4].labels.rotate, " ").concat(A4.x, " ").concat(S4.y, ")"));
              }
              g3 += d3;
            }, b3 = c3; b3 >= 0; b3--)
              x3(b3);
          if (void 0 !== i3.config.yaxis[t4].title.text) {
            var v3 = a3.group({ class: "apexcharts-yaxis-title" }), y3 = 0;
            i3.config.yaxis[t4].opposite && (y3 = i3.globals.translateYAxisX[t4]);
            var w3 = a3.drawText({ x: y3, y: i3.globals.gridHeight / 2 + i3.globals.translateY + i3.config.yaxis[t4].title.offsetY, text: i3.config.yaxis[t4].title.text, textAnchor: "end", foreColor: i3.config.yaxis[t4].title.style.color, fontSize: i3.config.yaxis[t4].title.style.fontSize, fontWeight: i3.config.yaxis[t4].title.style.fontWeight, fontFamily: i3.config.yaxis[t4].title.style.fontFamily, cssClass: "apexcharts-yaxis-title-text " + i3.config.yaxis[t4].title.style.cssClass });
            v3.add(w3), l3.add(v3);
          }
          var k3 = i3.config.yaxis[t4].axisBorder, A3 = 31 + k3.offsetX;
          if (i3.config.yaxis[t4].opposite && (A3 = -31 - k3.offsetX), k3.show) {
            var S3 = a3.drawLine(A3, i3.globals.translateY + k3.offsetY - 2, A3, i3.globals.gridHeight + i3.globals.translateY + k3.offsetY + 2, k3.color, 0, k3.width);
            l3.add(S3);
          }
          return i3.config.yaxis[t4].axisTicks.show && this.axesUtils.drawYAxisTicks(A3, c3, k3, i3.config.yaxis[t4].axisTicks, t4, d3, l3), l3;
        } }, { key: "drawYaxisInversed", value: function(t4) {
          var e3 = this.w, i3 = new m2(this.ctx), a3 = i3.group({ class: "apexcharts-xaxis apexcharts-yaxis-inversed" }), s3 = i3.group({ class: "apexcharts-xaxis-texts-g", transform: "translate(".concat(e3.globals.translateXAxisX, ", ").concat(e3.globals.translateXAxisY, ")") });
          a3.add(s3);
          var r3 = e3.globals.yAxisScale[t4].result.length - 1, o3 = e3.globals.gridWidth / r3 + 0.1, n3 = o3 + e3.config.xaxis.labels.offsetX, l3 = e3.globals.xLabelFormatter, h3 = e3.globals.yAxisScale[t4].result.slice(), c3 = e3.globals.timescaleLabels;
          c3.length > 0 && (this.xaxisLabels = c3.slice(), r3 = (h3 = c3.slice()).length), h3 = this.axesUtils.checkForReversedLabels(t4, h3);
          var d3 = c3.length;
          if (e3.config.xaxis.labels.show)
            for (var g3 = d3 ? 0 : r3; d3 ? g3 < d3 : g3 >= 0; d3 ? g3++ : g3--) {
              var u3 = h3[g3];
              u3 = l3(u3, g3, e3);
              var p3 = e3.globals.gridWidth + e3.globals.padHorizontal - (n3 - o3 + e3.config.xaxis.labels.offsetX);
              if (c3.length) {
                var f3 = this.axesUtils.getLabel(h3, c3, p3, g3, this.drawnLabels, this.xaxisFontSize);
                p3 = f3.x, u3 = f3.text, this.drawnLabels.push(f3.text), 0 === g3 && e3.globals.skipFirstTimelinelabel && (u3 = ""), g3 === h3.length - 1 && e3.globals.skipLastTimelinelabel && (u3 = "");
              }
              var x3 = i3.drawText({ x: p3, y: this.xAxisoffX + e3.config.xaxis.labels.offsetY + 30 - ("top" === e3.config.xaxis.position ? e3.globals.xAxisHeight + e3.config.xaxis.axisTicks.height - 2 : 0), text: u3, textAnchor: "middle", foreColor: Array.isArray(this.xaxisForeColors) ? this.xaxisForeColors[t4] : this.xaxisForeColors, fontSize: this.xaxisFontSize, fontFamily: this.xaxisFontFamily, fontWeight: e3.config.xaxis.labels.style.fontWeight, isPlainText: false, cssClass: "apexcharts-xaxis-label " + e3.config.xaxis.labels.style.cssClass });
              s3.add(x3), x3.tspan(u3);
              var b3 = document.createElementNS(e3.globals.SVGNS, "title");
              b3.textContent = u3, x3.node.appendChild(b3), n3 += o3;
            }
          return this.inversedYAxisTitleText(a3), this.inversedYAxisBorder(a3), a3;
        } }, { key: "inversedYAxisBorder", value: function(t4) {
          var e3 = this.w, i3 = new m2(this.ctx), a3 = e3.config.xaxis.axisBorder;
          if (a3.show) {
            var s3 = 0;
            "bar" === e3.config.chart.type && e3.globals.isXNumeric && (s3 -= 15);
            var r3 = i3.drawLine(e3.globals.padHorizontal + s3 + a3.offsetX, this.xAxisoffX, e3.globals.gridWidth, this.xAxisoffX, a3.color, 0, a3.height);
            this.elgrid && this.elgrid.elGridBorders && e3.config.grid.show ? this.elgrid.elGridBorders.add(r3) : t4.add(r3);
          }
        } }, { key: "inversedYAxisTitleText", value: function(t4) {
          var e3 = this.w, i3 = new m2(this.ctx);
          if (void 0 !== e3.config.xaxis.title.text) {
            var a3 = i3.group({ class: "apexcharts-xaxis-title apexcharts-yaxis-title-inversed" }), s3 = i3.drawText({ x: e3.globals.gridWidth / 2 + e3.config.xaxis.title.offsetX, y: this.xAxisoffX + parseFloat(this.xaxisFontSize) + parseFloat(e3.config.xaxis.title.style.fontSize) + e3.config.xaxis.title.offsetY + 20, text: e3.config.xaxis.title.text, textAnchor: "middle", fontSize: e3.config.xaxis.title.style.fontSize, fontFamily: e3.config.xaxis.title.style.fontFamily, fontWeight: e3.config.xaxis.title.style.fontWeight, foreColor: e3.config.xaxis.title.style.color, cssClass: "apexcharts-xaxis-title-text " + e3.config.xaxis.title.style.cssClass });
            a3.add(s3), t4.add(a3);
          }
        } }, { key: "yAxisTitleRotate", value: function(t4, e3) {
          var i3 = this.w, a3 = new m2(this.ctx), s3 = { width: 0, height: 0 }, r3 = { width: 0, height: 0 }, o3 = i3.globals.dom.baseEl.querySelector(" .apexcharts-yaxis[rel='".concat(t4, "'] .apexcharts-yaxis-texts-g"));
          null !== o3 && (s3 = o3.getBoundingClientRect());
          var n3 = i3.globals.dom.baseEl.querySelector(".apexcharts-yaxis[rel='".concat(t4, "'] .apexcharts-yaxis-title text"));
          if (null !== n3 && (r3 = n3.getBoundingClientRect()), null !== n3) {
            var l3 = this.xPaddingForYAxisTitle(t4, s3, r3, e3);
            n3.setAttribute("x", l3.xPos - (e3 ? 10 : 0));
          }
          if (null !== n3) {
            var h3 = a3.rotateAroundCenter(n3);
            n3.setAttribute("transform", "rotate(".concat(e3 ? -1 * i3.config.yaxis[t4].title.rotate : i3.config.yaxis[t4].title.rotate, " ").concat(h3.x, " ").concat(h3.y, ")"));
          }
        } }, { key: "xPaddingForYAxisTitle", value: function(t4, e3, i3, a3) {
          var s3 = this.w, r3 = 0, o3 = 0, n3 = 10;
          return void 0 === s3.config.yaxis[t4].title.text || t4 < 0 ? { xPos: o3, padd: 0 } : (a3 ? (o3 = e3.width + s3.config.yaxis[t4].title.offsetX + i3.width / 2 + n3 / 2, 0 === (r3 += 1) && (o3 -= n3 / 2)) : (o3 = -1 * e3.width + s3.config.yaxis[t4].title.offsetX + n3 / 2 + i3.width / 2, s3.globals.isBarHorizontal && (n3 = 25, o3 = -1 * e3.width - s3.config.yaxis[t4].title.offsetX - n3)), { xPos: o3, padd: n3 });
        } }, { key: "setYAxisXPosition", value: function(t4, e3) {
          var i3 = this.w, a3 = 0, s3 = 0, r3 = 18, o3 = 1;
          i3.config.yaxis.length > 1 && (this.multipleYs = true), i3.config.yaxis.map(function(n3, l3) {
            var h3 = i3.globals.ignoreYAxisIndexes.indexOf(l3) > -1 || !n3.show || n3.floating || 0 === t4[l3].width, c3 = t4[l3].width + e3[l3].width;
            n3.opposite ? i3.globals.isBarHorizontal ? (s3 = i3.globals.gridWidth + i3.globals.translateX - 1, i3.globals.translateYAxisX[l3] = s3 - n3.labels.offsetX) : (s3 = i3.globals.gridWidth + i3.globals.translateX + o3, h3 || (o3 = o3 + c3 + 20), i3.globals.translateYAxisX[l3] = s3 - n3.labels.offsetX + 20) : (a3 = i3.globals.translateX - r3, h3 || (r3 = r3 + c3 + 20), i3.globals.translateYAxisX[l3] = a3 + n3.labels.offsetX);
          });
        } }, { key: "setYAxisTextAlignments", value: function() {
          var t4 = this.w, e3 = t4.globals.dom.baseEl.getElementsByClassName("apexcharts-yaxis");
          (e3 = x2.listToArray(e3)).forEach(function(e4, i3) {
            var a3 = t4.config.yaxis[i3];
            if (a3 && !a3.floating && void 0 !== a3.labels.align) {
              var s3 = t4.globals.dom.baseEl.querySelector(".apexcharts-yaxis[rel='".concat(i3, "'] .apexcharts-yaxis-texts-g")), r3 = t4.globals.dom.baseEl.querySelectorAll(".apexcharts-yaxis[rel='".concat(i3, "'] .apexcharts-yaxis-label"));
              r3 = x2.listToArray(r3);
              var o3 = s3.getBoundingClientRect();
              "left" === a3.labels.align ? (r3.forEach(function(t5, e5) {
                t5.setAttribute("text-anchor", "start");
              }), a3.opposite || s3.setAttribute("transform", "translate(-".concat(o3.width, ", 0)"))) : "center" === a3.labels.align ? (r3.forEach(function(t5, e5) {
                t5.setAttribute("text-anchor", "middle");
              }), s3.setAttribute("transform", "translate(".concat(o3.width / 2 * (a3.opposite ? 1 : -1), ", 0)"))) : "right" === a3.labels.align && (r3.forEach(function(t5, e5) {
                t5.setAttribute("text-anchor", "end");
              }), a3.opposite && s3.setAttribute("transform", "translate(".concat(o3.width, ", 0)")));
            }
          });
        } }]), t3;
      }();
      var Z2 = function() {
        function t3(e3) {
          a2(this, t3), this.ctx = e3, this.w = e3.w, this.documentEvent = x2.bind(this.documentEvent, this);
        }
        return r2(t3, [{ key: "addEventListener", value: function(t4, e3) {
          var i3 = this.w;
          i3.globals.events.hasOwnProperty(t4) ? i3.globals.events[t4].push(e3) : i3.globals.events[t4] = [e3];
        } }, { key: "removeEventListener", value: function(t4, e3) {
          var i3 = this.w;
          if (i3.globals.events.hasOwnProperty(t4)) {
            var a3 = i3.globals.events[t4].indexOf(e3);
            -1 !== a3 && i3.globals.events[t4].splice(a3, 1);
          }
        } }, { key: "fireEvent", value: function(t4, e3) {
          var i3 = this.w;
          if (i3.globals.events.hasOwnProperty(t4)) {
            e3 && e3.length || (e3 = []);
            for (var a3 = i3.globals.events[t4], s3 = a3.length, r3 = 0; r3 < s3; r3++)
              a3[r3].apply(null, e3);
          }
        } }, { key: "setupEventHandlers", value: function() {
          var t4 = this, e3 = this.w, i3 = this.ctx, a3 = e3.globals.dom.baseEl.querySelector(e3.globals.chartClass);
          this.ctx.eventList.forEach(function(t5) {
            a3.addEventListener(t5, function(t6) {
              var a4 = Object.assign({}, e3, { seriesIndex: e3.globals.capturedSeriesIndex, dataPointIndex: e3.globals.capturedDataPointIndex });
              "mousemove" === t6.type || "touchmove" === t6.type ? "function" == typeof e3.config.chart.events.mouseMove && e3.config.chart.events.mouseMove(t6, i3, a4) : "mouseleave" === t6.type || "touchleave" === t6.type ? "function" == typeof e3.config.chart.events.mouseLeave && e3.config.chart.events.mouseLeave(t6, i3, a4) : ("mouseup" === t6.type && 1 === t6.which || "touchend" === t6.type) && ("function" == typeof e3.config.chart.events.click && e3.config.chart.events.click(t6, i3, a4), i3.ctx.events.fireEvent("click", [t6, i3, a4]));
            }, { capture: false, passive: true });
          }), this.ctx.eventList.forEach(function(i4) {
            e3.globals.dom.baseEl.addEventListener(i4, t4.documentEvent, { passive: true });
          }), this.ctx.core.setupBrushHandler();
        } }, { key: "documentEvent", value: function(t4) {
          var e3 = this.w, i3 = t4.target.className;
          if ("click" === t4.type) {
            var a3 = e3.globals.dom.baseEl.querySelector(".apexcharts-menu");
            a3 && a3.classList.contains("apexcharts-menu-open") && "apexcharts-menu-icon" !== i3 && a3.classList.remove("apexcharts-menu-open");
          }
          e3.globals.clientX = "touchmove" === t4.type ? t4.touches[0].clientX : t4.clientX, e3.globals.clientY = "touchmove" === t4.type ? t4.touches[0].clientY : t4.clientY;
        } }]), t3;
      }();
      var $2 = function() {
        function t3(e3) {
          a2(this, t3), this.ctx = e3, this.w = e3.w;
        }
        return r2(t3, [{ key: "setCurrentLocaleValues", value: function(t4) {
          var e3 = this.w.config.chart.locales;
          window.Apex.chart && window.Apex.chart.locales && window.Apex.chart.locales.length > 0 && (e3 = this.w.config.chart.locales.concat(window.Apex.chart.locales));
          var i3 = e3.filter(function(e4) {
            return e4.name === t4;
          })[0];
          if (!i3)
            throw new Error("Wrong locale name provided. Please make sure you set the correct locale name in options");
          var a3 = x2.extend(C2, i3);
          this.w.globals.locale = a3.options;
        } }]), t3;
      }();
      var J2 = function() {
        function t3(e3) {
          a2(this, t3), this.ctx = e3, this.w = e3.w;
        }
        return r2(t3, [{ key: "drawAxis", value: function(t4, e3) {
          var i3, a3, s3 = this, r3 = this.w.globals, o3 = this.w.config, n3 = new V2(this.ctx, e3), l3 = new q2(this.ctx, e3);
          r3.axisCharts && "radar" !== t4 && (r3.isBarHorizontal ? (a3 = l3.drawYaxisInversed(0), i3 = n3.drawXaxisInversed(0), r3.dom.elGraphical.add(i3), r3.dom.elGraphical.add(a3)) : (i3 = n3.drawXaxis(), r3.dom.elGraphical.add(i3), o3.yaxis.map(function(t5, e4) {
            if (-1 === r3.ignoreYAxisIndexes.indexOf(e4) && (a3 = l3.drawYaxis(e4), r3.dom.Paper.add(a3), "back" === s3.w.config.grid.position)) {
              var i4 = r3.dom.Paper.children()[1];
              i4.remove(), r3.dom.Paper.add(i4);
            }
          })));
        } }]), t3;
      }();
      var Q2 = function() {
        function t3(e3) {
          a2(this, t3), this.ctx = e3, this.w = e3.w;
        }
        return r2(t3, [{ key: "drawXCrosshairs", value: function() {
          var t4 = this.w, e3 = new m2(this.ctx), i3 = new v2(this.ctx), a3 = t4.config.xaxis.crosshairs.fill.gradient, s3 = t4.config.xaxis.crosshairs.dropShadow, r3 = t4.config.xaxis.crosshairs.fill.type, o3 = a3.colorFrom, n3 = a3.colorTo, l3 = a3.opacityFrom, h3 = a3.opacityTo, c3 = a3.stops, d3 = s3.enabled, g3 = s3.left, u3 = s3.top, p3 = s3.blur, f3 = s3.color, b3 = s3.opacity, y3 = t4.config.xaxis.crosshairs.fill.color;
          if (t4.config.xaxis.crosshairs.show) {
            "gradient" === r3 && (y3 = e3.drawGradient("vertical", o3, n3, l3, h3, null, c3, null));
            var w3 = e3.drawRect();
            1 === t4.config.xaxis.crosshairs.width && (w3 = e3.drawLine());
            var k3 = t4.globals.gridHeight;
            (!x2.isNumber(k3) || k3 < 0) && (k3 = 0);
            var A3 = t4.config.xaxis.crosshairs.width;
            (!x2.isNumber(A3) || A3 < 0) && (A3 = 0), w3.attr({ class: "apexcharts-xcrosshairs", x: 0, y: 0, y2: k3, width: A3, height: k3, fill: y3, filter: "none", "fill-opacity": t4.config.xaxis.crosshairs.opacity, stroke: t4.config.xaxis.crosshairs.stroke.color, "stroke-width": t4.config.xaxis.crosshairs.stroke.width, "stroke-dasharray": t4.config.xaxis.crosshairs.stroke.dashArray }), d3 && (w3 = i3.dropShadow(w3, { left: g3, top: u3, blur: p3, color: f3, opacity: b3 })), t4.globals.dom.elGraphical.add(w3);
          }
        } }, { key: "drawYCrosshairs", value: function() {
          var t4 = this.w, e3 = new m2(this.ctx), i3 = t4.config.yaxis[0].crosshairs, a3 = t4.globals.barPadForNumericAxis;
          if (t4.config.yaxis[0].crosshairs.show) {
            var s3 = e3.drawLine(-a3, 0, t4.globals.gridWidth + a3, 0, i3.stroke.color, i3.stroke.dashArray, i3.stroke.width);
            s3.attr({ class: "apexcharts-ycrosshairs" }), t4.globals.dom.elGraphical.add(s3);
          }
          var r3 = e3.drawLine(-a3, 0, t4.globals.gridWidth + a3, 0, i3.stroke.color, 0, 0);
          r3.attr({ class: "apexcharts-ycrosshairs-hidden" }), t4.globals.dom.elGraphical.add(r3);
        } }]), t3;
      }();
      var K2 = function() {
        function t3(e3) {
          a2(this, t3), this.ctx = e3, this.w = e3.w;
        }
        return r2(t3, [{ key: "checkResponsiveConfig", value: function(t4) {
          var e3 = this, i3 = this.w, a3 = i3.config;
          if (0 !== a3.responsive.length) {
            var s3 = a3.responsive.slice();
            s3.sort(function(t5, e4) {
              return t5.breakpoint > e4.breakpoint ? 1 : e4.breakpoint > t5.breakpoint ? -1 : 0;
            }).reverse();
            var r3 = new E2({}), o3 = function() {
              var t5 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}, a4 = s3[0].breakpoint, o4 = window.innerWidth > 0 ? window.innerWidth : screen.width;
              if (o4 > a4) {
                var n4 = y2.extendArrayProps(r3, i3.globals.initialConfig, i3);
                t5 = x2.extend(n4, t5), t5 = x2.extend(i3.config, t5), e3.overrideResponsiveOptions(t5);
              } else
                for (var l3 = 0; l3 < s3.length; l3++)
                  o4 < s3[l3].breakpoint && (t5 = y2.extendArrayProps(r3, s3[l3].options, i3), t5 = x2.extend(i3.config, t5), e3.overrideResponsiveOptions(t5));
            };
            if (t4) {
              var n3 = y2.extendArrayProps(r3, t4, i3);
              n3 = x2.extend(i3.config, n3), o3(n3 = x2.extend(n3, t4));
            } else
              o3({});
          }
        } }, { key: "overrideResponsiveOptions", value: function(t4) {
          var e3 = new E2(t4).init({ responsiveOverride: true });
          this.w.config = e3;
        } }]), t3;
      }();
      var tt2 = function() {
        function t3(e3) {
          a2(this, t3), this.ctx = e3, this.colors = [], this.w = e3.w;
          var i3 = this.w;
          this.isColorFn = false, this.isHeatmapDistributed = "treemap" === i3.config.chart.type && i3.config.plotOptions.treemap.distributed || "heatmap" === i3.config.chart.type && i3.config.plotOptions.heatmap.distributed, this.isBarDistributed = i3.config.plotOptions.bar.distributed && ("bar" === i3.config.chart.type || "rangeBar" === i3.config.chart.type);
        }
        return r2(t3, [{ key: "init", value: function() {
          this.setDefaultColors();
        } }, { key: "setDefaultColors", value: function() {
          var t4, e3 = this, i3 = this.w, a3 = new x2();
          if (i3.globals.dom.elWrap.classList.add("apexcharts-theme-".concat(i3.config.theme.mode)), void 0 === i3.config.colors || 0 === (null === (t4 = i3.config.colors) || void 0 === t4 ? void 0 : t4.length) ? i3.globals.colors = this.predefined() : (i3.globals.colors = i3.config.colors, Array.isArray(i3.config.colors) && i3.config.colors.length > 0 && "function" == typeof i3.config.colors[0] && (i3.globals.colors = i3.config.series.map(function(t5, a4) {
            var s4 = i3.config.colors[a4];
            return s4 || (s4 = i3.config.colors[0]), "function" == typeof s4 ? (e3.isColorFn = true, s4({ value: i3.globals.axisCharts ? i3.globals.series[a4][0] ? i3.globals.series[a4][0] : 0 : i3.globals.series[a4], seriesIndex: a4, dataPointIndex: a4, w: i3 })) : s4;
          }))), i3.globals.seriesColors.map(function(t5, e4) {
            t5 && (i3.globals.colors[e4] = t5);
          }), i3.config.theme.monochrome.enabled) {
            var s3 = [], r3 = i3.globals.series.length;
            (this.isBarDistributed || this.isHeatmapDistributed) && (r3 = i3.globals.series[0].length * i3.globals.series.length);
            for (var o3 = i3.config.theme.monochrome.color, n3 = 1 / (r3 / i3.config.theme.monochrome.shadeIntensity), l3 = i3.config.theme.monochrome.shadeTo, h3 = 0, c3 = 0; c3 < r3; c3++) {
              var d3 = void 0;
              "dark" === l3 ? (d3 = a3.shadeColor(-1 * h3, o3), h3 += n3) : (d3 = a3.shadeColor(h3, o3), h3 += n3), s3.push(d3);
            }
            i3.globals.colors = s3.slice();
          }
          var g3 = i3.globals.colors.slice();
          this.pushExtraColors(i3.globals.colors);
          ["fill", "stroke"].forEach(function(t5) {
            void 0 === i3.config[t5].colors ? i3.globals[t5].colors = e3.isColorFn ? i3.config.colors : g3 : i3.globals[t5].colors = i3.config[t5].colors.slice(), e3.pushExtraColors(i3.globals[t5].colors);
          }), void 0 === i3.config.dataLabels.style.colors ? i3.globals.dataLabels.style.colors = g3 : i3.globals.dataLabels.style.colors = i3.config.dataLabels.style.colors.slice(), this.pushExtraColors(i3.globals.dataLabels.style.colors, 50), void 0 === i3.config.plotOptions.radar.polygons.fill.colors ? i3.globals.radarPolygons.fill.colors = ["dark" === i3.config.theme.mode ? "#424242" : "none"] : i3.globals.radarPolygons.fill.colors = i3.config.plotOptions.radar.polygons.fill.colors.slice(), this.pushExtraColors(i3.globals.radarPolygons.fill.colors, 20), void 0 === i3.config.markers.colors ? i3.globals.markers.colors = g3 : i3.globals.markers.colors = i3.config.markers.colors.slice(), this.pushExtraColors(i3.globals.markers.colors);
        } }, { key: "pushExtraColors", value: function(t4, e3) {
          var i3 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : null, a3 = this.w, s3 = e3 || a3.globals.series.length;
          if (null === i3 && (i3 = this.isBarDistributed || this.isHeatmapDistributed || "heatmap" === a3.config.chart.type && a3.config.plotOptions.heatmap.colorScale.inverse), i3 && a3.globals.series.length && (s3 = a3.globals.series[a3.globals.maxValsInArrayIndex].length * a3.globals.series.length), t4.length < s3)
            for (var r3 = s3 - t4.length, o3 = 0; o3 < r3; o3++)
              t4.push(t4[o3]);
        } }, { key: "updateThemeOptions", value: function(t4) {
          t4.chart = t4.chart || {}, t4.tooltip = t4.tooltip || {};
          var e3 = t4.theme.mode || "light", i3 = t4.theme.palette ? t4.theme.palette : "dark" === e3 ? "palette4" : "palette1", a3 = t4.chart.foreColor ? t4.chart.foreColor : "dark" === e3 ? "#f6f7f8" : "#373d3f";
          return t4.tooltip.theme = e3, t4.chart.foreColor = a3, t4.theme.palette = i3, t4;
        } }, { key: "predefined", value: function() {
          switch (this.w.config.theme.palette) {
            case "palette1":
            default:
              this.colors = ["#008FFB", "#00E396", "#FEB019", "#FF4560", "#775DD0"];
              break;
            case "palette2":
              this.colors = ["#3f51b5", "#03a9f4", "#4caf50", "#f9ce1d", "#FF9800"];
              break;
            case "palette3":
              this.colors = ["#33b2df", "#546E7A", "#d4526e", "#13d8aa", "#A5978B"];
              break;
            case "palette4":
              this.colors = ["#4ecdc4", "#c7f464", "#81D4FA", "#fd6a6a", "#546E7A"];
              break;
            case "palette5":
              this.colors = ["#2b908f", "#f9a3a4", "#90ee7e", "#fa4443", "#69d2e7"];
              break;
            case "palette6":
              this.colors = ["#449DD1", "#F86624", "#EA3546", "#662E9B", "#C5D86D"];
              break;
            case "palette7":
              this.colors = ["#D7263D", "#1B998B", "#2E294E", "#F46036", "#E2C044"];
              break;
            case "palette8":
              this.colors = ["#662E9B", "#F86624", "#F9C80E", "#EA3546", "#43BCCD"];
              break;
            case "palette9":
              this.colors = ["#5C4742", "#A5978B", "#8D5B4C", "#5A2A27", "#C4BBAF"];
              break;
            case "palette10":
              this.colors = ["#A300D6", "#7D02EB", "#5653FE", "#2983FF", "#00B1F2"];
          }
          return this.colors;
        } }]), t3;
      }();
      var et2 = function() {
        function t3(e3) {
          a2(this, t3), this.ctx = e3, this.w = e3.w;
        }
        return r2(t3, [{ key: "draw", value: function() {
          this.drawTitleSubtitle("title"), this.drawTitleSubtitle("subtitle");
        } }, { key: "drawTitleSubtitle", value: function(t4) {
          var e3 = this.w, i3 = "title" === t4 ? e3.config.title : e3.config.subtitle, a3 = e3.globals.svgWidth / 2, s3 = i3.offsetY, r3 = "middle";
          if ("left" === i3.align ? (a3 = 10, r3 = "start") : "right" === i3.align && (a3 = e3.globals.svgWidth - 10, r3 = "end"), a3 += i3.offsetX, s3 = s3 + parseInt(i3.style.fontSize, 10) + i3.margin / 2, void 0 !== i3.text) {
            var o3 = new m2(this.ctx).drawText({ x: a3, y: s3, text: i3.text, textAnchor: r3, fontSize: i3.style.fontSize, fontFamily: i3.style.fontFamily, fontWeight: i3.style.fontWeight, foreColor: i3.style.color, opacity: 1 });
            o3.node.setAttribute("class", "apexcharts-".concat(t4, "-text")), e3.globals.dom.Paper.add(o3);
          }
        } }]), t3;
      }();
      var it2 = function() {
        function t3(e3) {
          a2(this, t3), this.w = e3.w, this.dCtx = e3;
        }
        return r2(t3, [{ key: "getTitleSubtitleCoords", value: function(t4) {
          var e3 = this.w, i3 = 0, a3 = 0, s3 = "title" === t4 ? e3.config.title.floating : e3.config.subtitle.floating, r3 = e3.globals.dom.baseEl.querySelector(".apexcharts-".concat(t4, "-text"));
          if (null !== r3 && !s3) {
            var o3 = r3.getBoundingClientRect();
            i3 = o3.width, a3 = e3.globals.axisCharts ? o3.height + 5 : o3.height;
          }
          return { width: i3, height: a3 };
        } }, { key: "getLegendsRect", value: function() {
          var t4 = this.w, e3 = t4.globals.dom.elLegendWrap;
          t4.config.legend.height || "top" !== t4.config.legend.position && "bottom" !== t4.config.legend.position || (e3.style.maxHeight = t4.globals.svgHeight / 2 + "px");
          var i3 = Object.assign({}, x2.getBoundingClientRect(e3));
          return null !== e3 && !t4.config.legend.floating && t4.config.legend.show ? this.dCtx.lgRect = { x: i3.x, y: i3.y, height: i3.height, width: 0 === i3.height ? 0 : i3.width } : this.dCtx.lgRect = { x: 0, y: 0, height: 0, width: 0 }, "left" !== t4.config.legend.position && "right" !== t4.config.legend.position || 1.5 * this.dCtx.lgRect.width > t4.globals.svgWidth && (this.dCtx.lgRect.width = t4.globals.svgWidth / 1.5), this.dCtx.lgRect;
        } }, { key: "getLargestStringFromMultiArr", value: function(t4, e3) {
          var i3 = t4;
          if (this.w.globals.isMultiLineX) {
            var a3 = e3.map(function(t5, e4) {
              return Array.isArray(t5) ? t5.length : 1;
            }), s3 = Math.max.apply(Math, u2(a3));
            i3 = e3[a3.indexOf(s3)];
          }
          return i3;
        } }]), t3;
      }();
      var at2 = function() {
        function t3(e3) {
          a2(this, t3), this.w = e3.w, this.dCtx = e3;
        }
        return r2(t3, [{ key: "getxAxisLabelsCoords", value: function() {
          var t4, e3 = this.w, i3 = e3.globals.labels.slice();
          if (e3.config.xaxis.convertedCatToNumeric && 0 === i3.length && (i3 = e3.globals.categoryLabels), e3.globals.timescaleLabels.length > 0) {
            var a3 = this.getxAxisTimeScaleLabelsCoords();
            t4 = { width: a3.width, height: a3.height }, e3.globals.rotateXLabels = false;
          } else {
            this.dCtx.lgWidthForSideLegends = "left" !== e3.config.legend.position && "right" !== e3.config.legend.position || e3.config.legend.floating ? 0 : this.dCtx.lgRect.width;
            var s3 = e3.globals.xLabelFormatter, r3 = x2.getLargestStringFromArr(i3), o3 = this.dCtx.dimHelpers.getLargestStringFromMultiArr(r3, i3);
            e3.globals.isBarHorizontal && (o3 = r3 = e3.globals.yAxisScale[0].result.reduce(function(t5, e4) {
              return t5.length > e4.length ? t5 : e4;
            }, 0));
            var n3 = new T2(this.dCtx.ctx), l3 = r3;
            r3 = n3.xLabelFormat(s3, r3, l3, { i: void 0, dateFormatter: new I2(this.dCtx.ctx).formatDate, w: e3 }), o3 = n3.xLabelFormat(s3, o3, l3, { i: void 0, dateFormatter: new I2(this.dCtx.ctx).formatDate, w: e3 }), (e3.config.xaxis.convertedCatToNumeric && void 0 === r3 || "" === String(r3).trim()) && (o3 = r3 = "1");
            var h3 = new m2(this.dCtx.ctx), c3 = h3.getTextRects(r3, e3.config.xaxis.labels.style.fontSize), d3 = c3;
            if (r3 !== o3 && (d3 = h3.getTextRects(o3, e3.config.xaxis.labels.style.fontSize)), (t4 = { width: c3.width >= d3.width ? c3.width : d3.width, height: c3.height >= d3.height ? c3.height : d3.height }).width * i3.length > e3.globals.svgWidth - this.dCtx.lgWidthForSideLegends - this.dCtx.yAxisWidth - this.dCtx.gridPad.left - this.dCtx.gridPad.right && 0 !== e3.config.xaxis.labels.rotate || e3.config.xaxis.labels.rotateAlways) {
              if (!e3.globals.isBarHorizontal) {
                e3.globals.rotateXLabels = true;
                var g3 = function(t5) {
                  return h3.getTextRects(t5, e3.config.xaxis.labels.style.fontSize, e3.config.xaxis.labels.style.fontFamily, "rotate(".concat(e3.config.xaxis.labels.rotate, " 0 0)"), false);
                };
                c3 = g3(r3), r3 !== o3 && (d3 = g3(o3)), t4.height = (c3.height > d3.height ? c3.height : d3.height) / 1.5, t4.width = c3.width > d3.width ? c3.width : d3.width;
              }
            } else
              e3.globals.rotateXLabels = false;
          }
          return e3.config.xaxis.labels.show || (t4 = { width: 0, height: 0 }), { width: t4.width, height: t4.height };
        } }, { key: "getxAxisGroupLabelsCoords", value: function() {
          var t4, e3 = this.w;
          if (!e3.globals.hasXaxisGroups)
            return { width: 0, height: 0 };
          var i3, a3 = (null === (t4 = e3.config.xaxis.group.style) || void 0 === t4 ? void 0 : t4.fontSize) || e3.config.xaxis.labels.style.fontSize, s3 = e3.globals.groups.map(function(t5) {
            return t5.title;
          }), r3 = x2.getLargestStringFromArr(s3), o3 = this.dCtx.dimHelpers.getLargestStringFromMultiArr(r3, s3), n3 = new m2(this.dCtx.ctx), l3 = n3.getTextRects(r3, a3), h3 = l3;
          return r3 !== o3 && (h3 = n3.getTextRects(o3, a3)), i3 = { width: l3.width >= h3.width ? l3.width : h3.width, height: l3.height >= h3.height ? l3.height : h3.height }, e3.config.xaxis.labels.show || (i3 = { width: 0, height: 0 }), { width: i3.width, height: i3.height };
        } }, { key: "getxAxisTitleCoords", value: function() {
          var t4 = this.w, e3 = 0, i3 = 0;
          if (void 0 !== t4.config.xaxis.title.text) {
            var a3 = new m2(this.dCtx.ctx).getTextRects(t4.config.xaxis.title.text, t4.config.xaxis.title.style.fontSize);
            e3 = a3.width, i3 = a3.height;
          }
          return { width: e3, height: i3 };
        } }, { key: "getxAxisTimeScaleLabelsCoords", value: function() {
          var t4, e3 = this.w;
          this.dCtx.timescaleLabels = e3.globals.timescaleLabels.slice();
          var i3 = this.dCtx.timescaleLabels.map(function(t5) {
            return t5.value;
          }), a3 = i3.reduce(function(t5, e4) {
            return void 0 === t5 ? (console.error("You have possibly supplied invalid Date format. Please supply a valid JavaScript Date"), 0) : t5.length > e4.length ? t5 : e4;
          }, 0);
          return 1.05 * (t4 = new m2(this.dCtx.ctx).getTextRects(a3, e3.config.xaxis.labels.style.fontSize)).width * i3.length > e3.globals.gridWidth && 0 !== e3.config.xaxis.labels.rotate && (e3.globals.overlappingXLabels = true), t4;
        } }, { key: "additionalPaddingXLabels", value: function(t4) {
          var e3 = this, i3 = this.w, a3 = i3.globals, s3 = i3.config, r3 = s3.xaxis.type, o3 = t4.width;
          a3.skipLastTimelinelabel = false, a3.skipFirstTimelinelabel = false;
          var n3 = i3.config.yaxis[0].opposite && i3.globals.isBarHorizontal, l3 = function(t5, n4) {
            s3.yaxis.length > 1 && function(t6) {
              return -1 !== a3.collapsedSeriesIndices.indexOf(t6);
            }(n4) || function(t6) {
              if (e3.dCtx.timescaleLabels && e3.dCtx.timescaleLabels.length) {
                var n5 = e3.dCtx.timescaleLabels[0], l4 = e3.dCtx.timescaleLabels[e3.dCtx.timescaleLabels.length - 1].position + o3 / 1.75 - e3.dCtx.yAxisWidthRight, h3 = n5.position - o3 / 1.75 + e3.dCtx.yAxisWidthLeft, c3 = "right" === i3.config.legend.position && e3.dCtx.lgRect.width > 0 ? e3.dCtx.lgRect.width : 0;
                l4 > a3.svgWidth - a3.translateX - c3 && (a3.skipLastTimelinelabel = true), h3 < -(t6.show && !t6.floating || "bar" !== s3.chart.type && "candlestick" !== s3.chart.type && "rangeBar" !== s3.chart.type && "boxPlot" !== s3.chart.type ? 10 : o3 / 1.75) && (a3.skipFirstTimelinelabel = true);
              } else
                "datetime" === r3 ? e3.dCtx.gridPad.right < o3 && !a3.rotateXLabels && (a3.skipLastTimelinelabel = true) : "datetime" !== r3 && e3.dCtx.gridPad.right < o3 / 2 - e3.dCtx.yAxisWidthRight && !a3.rotateXLabels && !i3.config.xaxis.labels.trim && ("between" !== i3.config.xaxis.tickPlacement || i3.globals.isBarHorizontal) && (e3.dCtx.xPadRight = o3 / 2 + 1);
            }(t5);
          };
          s3.yaxis.forEach(function(t5, i4) {
            n3 ? (e3.dCtx.gridPad.left < o3 && (e3.dCtx.xPadLeft = o3 / 2 + 1), e3.dCtx.xPadRight = o3 / 2 + 1) : l3(t5, i4);
          });
        } }]), t3;
      }();
      var st2 = function() {
        function t3(e3) {
          a2(this, t3), this.w = e3.w, this.dCtx = e3;
        }
        return r2(t3, [{ key: "getyAxisLabelsCoords", value: function() {
          var t4 = this, e3 = this.w, i3 = [], a3 = 10, s3 = new B2(this.dCtx.ctx);
          return e3.config.yaxis.map(function(r3, o3) {
            var n3 = { seriesIndex: o3, dataPointIndex: -1, w: e3 }, l3 = e3.globals.yAxisScale[o3], h3 = 0;
            if (!s3.isYAxisHidden(o3) && r3.labels.show && void 0 !== r3.labels.minWidth && (h3 = r3.labels.minWidth), !s3.isYAxisHidden(o3) && r3.labels.show && l3.result.length) {
              var c3 = e3.globals.yLabelFormatters[o3], d3 = l3.niceMin === Number.MIN_VALUE ? 0 : l3.niceMin, g3 = l3.result.reduce(function(t5, e4) {
                var i4, a4;
                return (null === (i4 = String(c3(t5, n3))) || void 0 === i4 ? void 0 : i4.length) > (null === (a4 = String(c3(e4, n3))) || void 0 === a4 ? void 0 : a4.length) ? t5 : e4;
              }, d3), u3 = g3 = c3(g3, n3);
              if (void 0 !== g3 && 0 !== g3.length || (g3 = l3.niceMax), e3.globals.isBarHorizontal) {
                a3 = 0;
                var p3 = e3.globals.labels.slice();
                g3 = x2.getLargestStringFromArr(p3), g3 = c3(g3, { seriesIndex: o3, dataPointIndex: -1, w: e3 }), u3 = t4.dCtx.dimHelpers.getLargestStringFromMultiArr(g3, p3);
              }
              var f3 = new m2(t4.dCtx.ctx), b3 = "rotate(".concat(r3.labels.rotate, " 0 0)"), v3 = f3.getTextRects(g3, r3.labels.style.fontSize, r3.labels.style.fontFamily, b3, false), y3 = v3;
              g3 !== u3 && (y3 = f3.getTextRects(u3, r3.labels.style.fontSize, r3.labels.style.fontFamily, b3, false)), i3.push({ width: (h3 > y3.width || h3 > v3.width ? h3 : y3.width > v3.width ? y3.width : v3.width) + a3, height: y3.height > v3.height ? y3.height : v3.height });
            } else
              i3.push({ width: 0, height: 0 });
          }), i3;
        } }, { key: "getyAxisTitleCoords", value: function() {
          var t4 = this, e3 = this.w, i3 = [];
          return e3.config.yaxis.map(function(e4, a3) {
            if (e4.show && void 0 !== e4.title.text) {
              var s3 = new m2(t4.dCtx.ctx), r3 = "rotate(".concat(e4.title.rotate, " 0 0)"), o3 = s3.getTextRects(e4.title.text, e4.title.style.fontSize, e4.title.style.fontFamily, r3, false);
              i3.push({ width: o3.width, height: o3.height });
            } else
              i3.push({ width: 0, height: 0 });
          }), i3;
        } }, { key: "getTotalYAxisWidth", value: function() {
          var t4 = this.w, e3 = 0, i3 = 0, a3 = 0, s3 = t4.globals.yAxisScale.length > 1 ? 10 : 0, r3 = new B2(this.dCtx.ctx), o3 = function(o4, n3) {
            var l3 = t4.config.yaxis[n3].floating, h3 = 0;
            o4.width > 0 && !l3 ? (h3 = o4.width + s3, function(e4) {
              return t4.globals.ignoreYAxisIndexes.indexOf(e4) > -1;
            }(n3) && (h3 = h3 - o4.width - s3)) : h3 = l3 || r3.isYAxisHidden(n3) ? 0 : 5, t4.config.yaxis[n3].opposite ? a3 += h3 : i3 += h3, e3 += h3;
          };
          return t4.globals.yLabelsCoords.map(function(t5, e4) {
            o3(t5, e4);
          }), t4.globals.yTitleCoords.map(function(t5, e4) {
            o3(t5, e4);
          }), t4.globals.isBarHorizontal && !t4.config.yaxis[0].floating && (e3 = t4.globals.yLabelsCoords[0].width + t4.globals.yTitleCoords[0].width + 15), this.dCtx.yAxisWidthLeft = i3, this.dCtx.yAxisWidthRight = a3, e3;
        } }]), t3;
      }();
      var rt2 = function() {
        function t3(e3) {
          a2(this, t3), this.w = e3.w, this.dCtx = e3;
        }
        return r2(t3, [{ key: "gridPadForColumnsInNumericAxis", value: function(t4) {
          var e3 = this.w;
          if (e3.globals.noData || e3.globals.allSeriesCollapsed)
            return 0;
          var i3 = function(t5) {
            return "bar" === t5 || "rangeBar" === t5 || "candlestick" === t5 || "boxPlot" === t5;
          }, a3 = e3.config.chart.type, s3 = 0, r3 = i3(a3) ? e3.config.series.length : 1;
          if (e3.globals.comboBarCount > 0 && (r3 = e3.globals.comboBarCount), e3.globals.collapsedSeries.forEach(function(t5) {
            i3(t5.type) && (r3 -= 1);
          }), e3.config.chart.stacked && (r3 = 1), (i3(a3) || e3.globals.comboBarCount > 0) && e3.globals.isXNumeric && !e3.globals.isBarHorizontal && r3 > 0) {
            var o3, n3, l3 = Math.abs(e3.globals.initialMaxX - e3.globals.initialMinX);
            l3 <= 3 && (l3 = e3.globals.dataPoints), o3 = l3 / t4, e3.globals.minXDiff && e3.globals.minXDiff / o3 > 0 && (n3 = e3.globals.minXDiff / o3), n3 > t4 / 2 && (n3 /= 2), (s3 = n3 / r3 * parseInt(e3.config.plotOptions.bar.columnWidth, 10) / 100) < 1 && (s3 = 1), s3 = s3 / (r3 > 1 ? 1 : 1.5) + 5, e3.globals.barPadForNumericAxis = s3;
          }
          return s3;
        } }, { key: "gridPadFortitleSubtitle", value: function() {
          var t4 = this, e3 = this.w, i3 = e3.globals, a3 = this.dCtx.isSparkline || !e3.globals.axisCharts ? 0 : 10;
          ["title", "subtitle"].forEach(function(i4) {
            void 0 !== e3.config[i4].text ? a3 += e3.config[i4].margin : a3 += t4.dCtx.isSparkline || !e3.globals.axisCharts ? 0 : 5;
          }), !e3.config.legend.show || "bottom" !== e3.config.legend.position || e3.config.legend.floating || e3.globals.axisCharts || (a3 += 10);
          var s3 = this.dCtx.dimHelpers.getTitleSubtitleCoords("title"), r3 = this.dCtx.dimHelpers.getTitleSubtitleCoords("subtitle");
          i3.gridHeight = i3.gridHeight - s3.height - r3.height - a3, i3.translateY = i3.translateY + s3.height + r3.height + a3;
        } }, { key: "setGridXPosForDualYAxis", value: function(t4, e3) {
          var i3 = this.w, a3 = new B2(this.dCtx.ctx);
          i3.config.yaxis.map(function(s3, r3) {
            -1 !== i3.globals.ignoreYAxisIndexes.indexOf(r3) || s3.floating || a3.isYAxisHidden(r3) || (s3.opposite && (i3.globals.translateX = i3.globals.translateX - (e3[r3].width + t4[r3].width) - parseInt(i3.config.yaxis[r3].labels.style.fontSize, 10) / 1.2 - 12), i3.globals.translateX < 2 && (i3.globals.translateX = 2));
          });
        } }]), t3;
      }();
      var ot2 = function() {
        function t3(e3) {
          a2(this, t3), this.ctx = e3, this.w = e3.w, this.lgRect = {}, this.yAxisWidth = 0, this.yAxisWidthLeft = 0, this.yAxisWidthRight = 0, this.xAxisHeight = 0, this.isSparkline = this.w.config.chart.sparkline.enabled, this.dimHelpers = new it2(this), this.dimYAxis = new st2(this), this.dimXAxis = new at2(this), this.dimGrid = new rt2(this), this.lgWidthForSideLegends = 0, this.gridPad = this.w.config.grid.padding, this.xPadRight = 0, this.xPadLeft = 0;
        }
        return r2(t3, [{ key: "plotCoords", value: function() {
          var t4 = this, e3 = this.w, i3 = e3.globals;
          this.lgRect = this.dimHelpers.getLegendsRect(), this.isSparkline && ((e3.config.markers.discrete.length > 0 || e3.config.markers.size > 0) && Object.entries(this.gridPad).forEach(function(e4) {
            var i4 = g2(e4, 2), a4 = i4[0], s3 = i4[1];
            t4.gridPad[a4] = Math.max(s3, t4.w.globals.markers.largestSize / 1.5);
          }), this.gridPad.top = Math.max(e3.config.stroke.width / 2, this.gridPad.top), this.gridPad.bottom = Math.max(e3.config.stroke.width / 2, this.gridPad.bottom)), i3.axisCharts ? this.setDimensionsForAxisCharts() : this.setDimensionsForNonAxisCharts(), this.dimGrid.gridPadFortitleSubtitle(), i3.gridHeight = i3.gridHeight - this.gridPad.top - this.gridPad.bottom, i3.gridWidth = i3.gridWidth - this.gridPad.left - this.gridPad.right - this.xPadRight - this.xPadLeft;
          var a3 = this.dimGrid.gridPadForColumnsInNumericAxis(i3.gridWidth);
          i3.gridWidth = i3.gridWidth - 2 * a3, i3.translateX = i3.translateX + this.gridPad.left + this.xPadLeft + (a3 > 0 ? a3 + 4 : 0), i3.translateY = i3.translateY + this.gridPad.top;
        } }, { key: "setDimensionsForAxisCharts", value: function() {
          var t4 = this, e3 = this.w, i3 = e3.globals, a3 = this.dimYAxis.getyAxisLabelsCoords(), s3 = this.dimYAxis.getyAxisTitleCoords();
          e3.globals.yLabelsCoords = [], e3.globals.yTitleCoords = [], e3.config.yaxis.map(function(t5, i4) {
            e3.globals.yLabelsCoords.push({ width: a3[i4].width, index: i4 }), e3.globals.yTitleCoords.push({ width: s3[i4].width, index: i4 });
          }), this.yAxisWidth = this.dimYAxis.getTotalYAxisWidth();
          var r3 = this.dimXAxis.getxAxisLabelsCoords(), o3 = this.dimXAxis.getxAxisGroupLabelsCoords(), n3 = this.dimXAxis.getxAxisTitleCoords();
          this.conditionalChecksForAxisCoords(r3, n3, o3), i3.translateXAxisY = e3.globals.rotateXLabels ? this.xAxisHeight / 8 : -4, i3.translateXAxisX = e3.globals.rotateXLabels && e3.globals.isXNumeric && e3.config.xaxis.labels.rotate <= -45 ? -this.xAxisWidth / 4 : 0, e3.globals.isBarHorizontal && (i3.rotateXLabels = false, i3.translateXAxisY = parseInt(e3.config.xaxis.labels.style.fontSize, 10) / 1.5 * -1), i3.translateXAxisY = i3.translateXAxisY + e3.config.xaxis.labels.offsetY, i3.translateXAxisX = i3.translateXAxisX + e3.config.xaxis.labels.offsetX;
          var l3 = this.yAxisWidth, h3 = this.xAxisHeight;
          i3.xAxisLabelsHeight = this.xAxisHeight - n3.height, i3.xAxisGroupLabelsHeight = i3.xAxisLabelsHeight - r3.height, i3.xAxisLabelsWidth = this.xAxisWidth, i3.xAxisHeight = this.xAxisHeight;
          var c3 = 10;
          ("radar" === e3.config.chart.type || this.isSparkline) && (l3 = 0, h3 = i3.goldenPadding), this.isSparkline && (this.lgRect = { height: 0, width: 0 }), (this.isSparkline || "treemap" === e3.config.chart.type) && (l3 = 0, h3 = 0, c3 = 0), this.isSparkline || this.dimXAxis.additionalPaddingXLabels(r3);
          var d3 = function() {
            i3.translateX = l3, i3.gridHeight = i3.svgHeight - t4.lgRect.height - h3 - (t4.isSparkline || "treemap" === e3.config.chart.type ? 0 : e3.globals.rotateXLabels ? 10 : 15), i3.gridWidth = i3.svgWidth - l3;
          };
          switch ("top" === e3.config.xaxis.position && (c3 = i3.xAxisHeight - e3.config.xaxis.axisTicks.height - 5), e3.config.legend.position) {
            case "bottom":
              i3.translateY = c3, d3();
              break;
            case "top":
              i3.translateY = this.lgRect.height + c3, d3();
              break;
            case "left":
              i3.translateY = c3, i3.translateX = this.lgRect.width + l3, i3.gridHeight = i3.svgHeight - h3 - 12, i3.gridWidth = i3.svgWidth - this.lgRect.width - l3;
              break;
            case "right":
              i3.translateY = c3, i3.translateX = l3, i3.gridHeight = i3.svgHeight - h3 - 12, i3.gridWidth = i3.svgWidth - this.lgRect.width - l3 - 5;
              break;
            default:
              throw new Error("Legend position not supported");
          }
          this.dimGrid.setGridXPosForDualYAxis(s3, a3), new q2(this.ctx).setYAxisXPosition(a3, s3);
        } }, { key: "setDimensionsForNonAxisCharts", value: function() {
          var t4 = this.w, e3 = t4.globals, i3 = t4.config, a3 = 0;
          t4.config.legend.show && !t4.config.legend.floating && (a3 = 20);
          var s3 = "pie" === i3.chart.type || "polarArea" === i3.chart.type || "donut" === i3.chart.type ? "pie" : "radialBar", r3 = i3.plotOptions[s3].offsetY, o3 = i3.plotOptions[s3].offsetX;
          if (!i3.legend.show || i3.legend.floating)
            return e3.gridHeight = e3.svgHeight - i3.grid.padding.left + i3.grid.padding.right, e3.gridWidth = e3.gridHeight, e3.translateY = r3, void (e3.translateX = o3 + (e3.svgWidth - e3.gridWidth) / 2);
          switch (i3.legend.position) {
            case "bottom":
              e3.gridHeight = e3.svgHeight - this.lgRect.height - e3.goldenPadding, e3.gridWidth = e3.svgWidth, e3.translateY = r3 - 10, e3.translateX = o3 + (e3.svgWidth - e3.gridWidth) / 2;
              break;
            case "top":
              e3.gridHeight = e3.svgHeight - this.lgRect.height - e3.goldenPadding, e3.gridWidth = e3.svgWidth, e3.translateY = this.lgRect.height + r3 + 10, e3.translateX = o3 + (e3.svgWidth - e3.gridWidth) / 2;
              break;
            case "left":
              e3.gridWidth = e3.svgWidth - this.lgRect.width - a3, e3.gridHeight = "auto" !== i3.chart.height ? e3.svgHeight : e3.gridWidth, e3.translateY = r3, e3.translateX = o3 + this.lgRect.width + a3;
              break;
            case "right":
              e3.gridWidth = e3.svgWidth - this.lgRect.width - a3 - 5, e3.gridHeight = "auto" !== i3.chart.height ? e3.svgHeight : e3.gridWidth, e3.translateY = r3, e3.translateX = o3 + 10;
              break;
            default:
              throw new Error("Legend position not supported");
          }
        } }, { key: "conditionalChecksForAxisCoords", value: function(t4, e3, i3) {
          var a3 = this.w, s3 = a3.globals.hasXaxisGroups ? 2 : 1, r3 = i3.height + t4.height + e3.height, o3 = a3.globals.isMultiLineX ? 1.2 : a3.globals.LINE_HEIGHT_RATIO, n3 = a3.globals.rotateXLabels ? 22 : 10, l3 = a3.globals.rotateXLabels && "bottom" === a3.config.legend.position ? 10 : 0;
          this.xAxisHeight = r3 * o3 + s3 * n3 + l3, this.xAxisWidth = t4.width, this.xAxisHeight - e3.height > a3.config.xaxis.labels.maxHeight && (this.xAxisHeight = a3.config.xaxis.labels.maxHeight), a3.config.xaxis.labels.minHeight && this.xAxisHeight < a3.config.xaxis.labels.minHeight && (this.xAxisHeight = a3.config.xaxis.labels.minHeight), a3.config.xaxis.floating && (this.xAxisHeight = 0);
          var h3 = 0, c3 = 0;
          a3.config.yaxis.forEach(function(t5) {
            h3 += t5.labels.minWidth, c3 += t5.labels.maxWidth;
          }), this.yAxisWidth < h3 && (this.yAxisWidth = h3), this.yAxisWidth > c3 && (this.yAxisWidth = c3);
        } }]), t3;
      }();
      var nt2 = function() {
        function t3(e3) {
          a2(this, t3), this.w = e3.w, this.lgCtx = e3;
        }
        return r2(t3, [{ key: "getLegendStyles", value: function() {
          var t4, e3, i3, a3 = document.createElement("style");
          a3.setAttribute("type", "text/css");
          var s3 = (null === (t4 = this.lgCtx.ctx) || void 0 === t4 || null === (e3 = t4.opts) || void 0 === e3 || null === (i3 = e3.chart) || void 0 === i3 ? void 0 : i3.nonce) || this.w.config.chart.nonce;
          s3 && a3.setAttribute("nonce", s3);
          var r3 = document.createTextNode("\n      .apexcharts-legend {\n        display: flex;\n        overflow: auto;\n        padding: 0 10px;\n      }\n      .apexcharts-legend.apx-legend-position-bottom, .apexcharts-legend.apx-legend-position-top {\n        flex-wrap: wrap\n      }\n      .apexcharts-legend.apx-legend-position-right, .apexcharts-legend.apx-legend-position-left {\n        flex-direction: column;\n        bottom: 0;\n      }\n      .apexcharts-legend.apx-legend-position-bottom.apexcharts-align-left, .apexcharts-legend.apx-legend-position-top.apexcharts-align-left, .apexcharts-legend.apx-legend-position-right, .apexcharts-legend.apx-legend-position-left {\n        justify-content: flex-start;\n      }\n      .apexcharts-legend.apx-legend-position-bottom.apexcharts-align-center, .apexcharts-legend.apx-legend-position-top.apexcharts-align-center {\n        justify-content: center;\n      }\n      .apexcharts-legend.apx-legend-position-bottom.apexcharts-align-right, .apexcharts-legend.apx-legend-position-top.apexcharts-align-right {\n        justify-content: flex-end;\n      }\n      .apexcharts-legend-series {\n        cursor: pointer;\n        line-height: normal;\n      }\n      .apexcharts-legend.apx-legend-position-bottom .apexcharts-legend-series, .apexcharts-legend.apx-legend-position-top .apexcharts-legend-series{\n        display: flex;\n        align-items: center;\n      }\n      .apexcharts-legend-text {\n        position: relative;\n        font-size: 14px;\n      }\n      .apexcharts-legend-text *, .apexcharts-legend-marker * {\n        pointer-events: none;\n      }\n      .apexcharts-legend-marker {\n        position: relative;\n        display: inline-block;\n        cursor: pointer;\n        margin-right: 3px;\n        border-style: solid;\n      }\n\n      .apexcharts-legend.apexcharts-align-right .apexcharts-legend-series, .apexcharts-legend.apexcharts-align-left .apexcharts-legend-series{\n        display: inline-block;\n      }\n      .apexcharts-legend-series.apexcharts-no-click {\n        cursor: auto;\n      }\n      .apexcharts-legend .apexcharts-hidden-zero-series, .apexcharts-legend .apexcharts-hidden-null-series {\n        display: none !important;\n      }\n      .apexcharts-inactive-legend {\n        opacity: 0.45;\n      }");
          return a3.appendChild(r3), a3;
        } }, { key: "getLegendBBox", value: function() {
          var t4 = this.w.globals.dom.baseEl.querySelector(".apexcharts-legend").getBoundingClientRect(), e3 = t4.width;
          return { clwh: t4.height, clww: e3 };
        } }, { key: "appendToForeignObject", value: function() {
          this.w.globals.dom.elLegendForeign.appendChild(this.getLegendStyles());
        } }, { key: "toggleDataSeries", value: function(t4, e3) {
          var i3 = this, a3 = this.w;
          if (a3.globals.axisCharts || "radialBar" === a3.config.chart.type) {
            a3.globals.resized = true;
            var s3 = null, r3 = null;
            if (a3.globals.risingSeries = [], a3.globals.axisCharts ? (s3 = a3.globals.dom.baseEl.querySelector(".apexcharts-series[data\\:realIndex='".concat(t4, "']")), r3 = parseInt(s3.getAttribute("data:realIndex"), 10)) : (s3 = a3.globals.dom.baseEl.querySelector(".apexcharts-series[rel='".concat(t4 + 1, "']")), r3 = parseInt(s3.getAttribute("rel"), 10) - 1), e3)
              [{ cs: a3.globals.collapsedSeries, csi: a3.globals.collapsedSeriesIndices }, { cs: a3.globals.ancillaryCollapsedSeries, csi: a3.globals.ancillaryCollapsedSeriesIndices }].forEach(function(t5) {
                i3.riseCollapsedSeries(t5.cs, t5.csi, r3);
              });
            else
              this.hideSeries({ seriesEl: s3, realIndex: r3 });
          } else {
            var o3 = a3.globals.dom.Paper.select(" .apexcharts-series[rel='".concat(t4 + 1, "'] path")), n3 = a3.config.chart.type;
            if ("pie" === n3 || "polarArea" === n3 || "donut" === n3) {
              var l3 = a3.config.plotOptions.pie.donut.labels;
              new m2(this.lgCtx.ctx).pathMouseDown(o3.members[0], null), this.lgCtx.ctx.pie.printDataLabelsInner(o3.members[0].node, l3);
            }
            o3.fire("click");
          }
        } }, { key: "hideSeries", value: function(t4) {
          var e3 = t4.seriesEl, i3 = t4.realIndex, a3 = this.w, s3 = x2.clone(a3.config.series);
          if (a3.globals.axisCharts) {
            var r3 = false;
            if (a3.config.yaxis[i3] && a3.config.yaxis[i3].show && a3.config.yaxis[i3].showAlways && (r3 = true, a3.globals.ancillaryCollapsedSeriesIndices.indexOf(i3) < 0 && (a3.globals.ancillaryCollapsedSeries.push({ index: i3, data: s3[i3].data.slice(), type: e3.parentNode.className.baseVal.split("-")[1] }), a3.globals.ancillaryCollapsedSeriesIndices.push(i3))), !r3) {
              a3.globals.collapsedSeries.push({ index: i3, data: s3[i3].data.slice(), type: e3.parentNode.className.baseVal.split("-")[1] }), a3.globals.collapsedSeriesIndices.push(i3);
              var o3 = a3.globals.risingSeries.indexOf(i3);
              a3.globals.risingSeries.splice(o3, 1);
            }
          } else
            a3.globals.collapsedSeries.push({ index: i3, data: s3[i3] }), a3.globals.collapsedSeriesIndices.push(i3);
          for (var n3 = e3.childNodes, l3 = 0; l3 < n3.length; l3++)
            n3[l3].classList.contains("apexcharts-series-markers-wrap") && (n3[l3].classList.contains("apexcharts-hide") ? n3[l3].classList.remove("apexcharts-hide") : n3[l3].classList.add("apexcharts-hide"));
          a3.globals.allSeriesCollapsed = a3.globals.collapsedSeries.length === a3.config.series.length, s3 = this._getSeriesBasedOnCollapsedState(s3), this.lgCtx.ctx.updateHelpers._updateSeries(s3, a3.config.chart.animations.dynamicAnimation.enabled);
        } }, { key: "riseCollapsedSeries", value: function(t4, e3, i3) {
          var a3 = this.w, s3 = x2.clone(a3.config.series);
          if (t4.length > 0) {
            for (var r3 = 0; r3 < t4.length; r3++)
              t4[r3].index === i3 && (a3.globals.axisCharts ? (s3[i3].data = t4[r3].data.slice(), t4.splice(r3, 1), e3.splice(r3, 1), a3.globals.risingSeries.push(i3)) : (s3[i3] = t4[r3].data, t4.splice(r3, 1), e3.splice(r3, 1), a3.globals.risingSeries.push(i3)));
            s3 = this._getSeriesBasedOnCollapsedState(s3), this.lgCtx.ctx.updateHelpers._updateSeries(s3, a3.config.chart.animations.dynamicAnimation.enabled);
          }
        } }, { key: "_getSeriesBasedOnCollapsedState", value: function(t4) {
          var e3 = this.w;
          return e3.globals.axisCharts ? t4.forEach(function(i3, a3) {
            e3.globals.collapsedSeriesIndices.indexOf(a3) > -1 && (t4[a3].data = []);
          }) : t4.forEach(function(i3, a3) {
            e3.globals.collapsedSeriesIndices.indexOf(a3) > -1 && (t4[a3] = 0);
          }), t4;
        } }]), t3;
      }();
      var lt2 = function() {
        function t3(e3) {
          a2(this, t3), this.ctx = e3, this.w = e3.w, this.onLegendClick = this.onLegendClick.bind(this), this.onLegendHovered = this.onLegendHovered.bind(this), this.isBarsDistributed = "bar" === this.w.config.chart.type && this.w.config.plotOptions.bar.distributed && 1 === this.w.config.series.length, this.legendHelpers = new nt2(this);
        }
        return r2(t3, [{ key: "init", value: function() {
          var t4 = this.w, e3 = t4.globals, i3 = t4.config;
          if ((i3.legend.showForSingleSeries && 1 === e3.series.length || this.isBarsDistributed || e3.series.length > 1 || !e3.axisCharts) && i3.legend.show) {
            for (; e3.dom.elLegendWrap.firstChild; )
              e3.dom.elLegendWrap.removeChild(e3.dom.elLegendWrap.firstChild);
            this.drawLegends(), x2.isIE11() ? document.getElementsByTagName("head")[0].appendChild(this.legendHelpers.getLegendStyles()) : this.legendHelpers.appendToForeignObject(), "bottom" === i3.legend.position || "top" === i3.legend.position ? this.legendAlignHorizontal() : "right" !== i3.legend.position && "left" !== i3.legend.position || this.legendAlignVertical();
          }
        } }, { key: "drawLegends", value: function() {
          var t4 = this, e3 = this.w, i3 = e3.config.legend.fontFamily, a3 = e3.globals.seriesNames, s3 = e3.globals.colors.slice();
          if ("heatmap" === e3.config.chart.type) {
            var r3 = e3.config.plotOptions.heatmap.colorScale.ranges;
            a3 = r3.map(function(t5) {
              return t5.name ? t5.name : t5.from + " - " + t5.to;
            }), s3 = r3.map(function(t5) {
              return t5.color;
            });
          } else
            this.isBarsDistributed && (a3 = e3.globals.labels.slice());
          e3.config.legend.customLegendItems.length && (a3 = e3.config.legend.customLegendItems);
          for (var o3 = e3.globals.legendFormatter, n3 = e3.config.legend.inverseOrder, l3 = n3 ? a3.length - 1 : 0; n3 ? l3 >= 0 : l3 <= a3.length - 1; n3 ? l3-- : l3++) {
            var h3, c3 = o3(a3[l3], { seriesIndex: l3, w: e3 }), d3 = false, g3 = false;
            if (e3.globals.collapsedSeries.length > 0)
              for (var u3 = 0; u3 < e3.globals.collapsedSeries.length; u3++)
                e3.globals.collapsedSeries[u3].index === l3 && (d3 = true);
            if (e3.globals.ancillaryCollapsedSeriesIndices.length > 0)
              for (var p3 = 0; p3 < e3.globals.ancillaryCollapsedSeriesIndices.length; p3++)
                e3.globals.ancillaryCollapsedSeriesIndices[p3] === l3 && (g3 = true);
            var f3 = document.createElement("span");
            f3.classList.add("apexcharts-legend-marker");
            var b3 = e3.config.legend.markers.offsetX, v3 = e3.config.legend.markers.offsetY, w3 = e3.config.legend.markers.height, k3 = e3.config.legend.markers.width, A3 = e3.config.legend.markers.strokeWidth, S3 = e3.config.legend.markers.strokeColor, C3 = e3.config.legend.markers.radius, L3 = f3.style;
            L3.background = s3[l3], L3.color = s3[l3], L3.setProperty("background", s3[l3], "important"), e3.config.legend.markers.fillColors && e3.config.legend.markers.fillColors[l3] && (L3.background = e3.config.legend.markers.fillColors[l3]), void 0 !== e3.globals.seriesColors[l3] && (L3.background = e3.globals.seriesColors[l3], L3.color = e3.globals.seriesColors[l3]), L3.height = Array.isArray(w3) ? parseFloat(w3[l3]) + "px" : parseFloat(w3) + "px", L3.width = Array.isArray(k3) ? parseFloat(k3[l3]) + "px" : parseFloat(k3) + "px", L3.left = (Array.isArray(b3) ? parseFloat(b3[l3]) : parseFloat(b3)) + "px", L3.top = (Array.isArray(v3) ? parseFloat(v3[l3]) : parseFloat(v3)) + "px", L3.borderWidth = Array.isArray(A3) ? A3[l3] : A3, L3.borderColor = Array.isArray(S3) ? S3[l3] : S3, L3.borderRadius = Array.isArray(C3) ? parseFloat(C3[l3]) + "px" : parseFloat(C3) + "px", e3.config.legend.markers.customHTML && (Array.isArray(e3.config.legend.markers.customHTML) ? e3.config.legend.markers.customHTML[l3] && (f3.innerHTML = e3.config.legend.markers.customHTML[l3]()) : f3.innerHTML = e3.config.legend.markers.customHTML()), m2.setAttrs(f3, { rel: l3 + 1, "data:collapsed": d3 || g3 }), (d3 || g3) && f3.classList.add("apexcharts-inactive-legend");
            var P3 = document.createElement("div"), I3 = document.createElement("span");
            I3.classList.add("apexcharts-legend-text"), I3.innerHTML = Array.isArray(c3) ? c3.join(" ") : c3;
            var T3 = e3.config.legend.labels.useSeriesColors ? e3.globals.colors[l3] : Array.isArray(e3.config.legend.labels.colors) ? null === (h3 = e3.config.legend.labels.colors) || void 0 === h3 ? void 0 : h3[l3] : e3.config.legend.labels.colors;
            T3 || (T3 = e3.config.chart.foreColor), I3.style.color = T3, I3.style.fontSize = parseFloat(e3.config.legend.fontSize) + "px", I3.style.fontWeight = e3.config.legend.fontWeight, I3.style.fontFamily = i3 || e3.config.chart.fontFamily, m2.setAttrs(I3, { rel: l3 + 1, i: l3, "data:default-text": encodeURIComponent(c3), "data:collapsed": d3 || g3 }), P3.appendChild(f3), P3.appendChild(I3);
            var M3 = new y2(this.ctx);
            if (!e3.config.legend.showForZeroSeries)
              0 === M3.getSeriesTotalByIndex(l3) && M3.seriesHaveSameValues(l3) && !M3.isSeriesNull(l3) && -1 === e3.globals.collapsedSeriesIndices.indexOf(l3) && -1 === e3.globals.ancillaryCollapsedSeriesIndices.indexOf(l3) && P3.classList.add("apexcharts-hidden-zero-series");
            e3.config.legend.showForNullSeries || M3.isSeriesNull(l3) && -1 === e3.globals.collapsedSeriesIndices.indexOf(l3) && -1 === e3.globals.ancillaryCollapsedSeriesIndices.indexOf(l3) && P3.classList.add("apexcharts-hidden-null-series"), e3.globals.dom.elLegendWrap.appendChild(P3), e3.globals.dom.elLegendWrap.classList.add("apexcharts-align-".concat(e3.config.legend.horizontalAlign)), e3.globals.dom.elLegendWrap.classList.add("apx-legend-position-" + e3.config.legend.position), P3.classList.add("apexcharts-legend-series"), P3.style.margin = "".concat(e3.config.legend.itemMargin.vertical, "px ").concat(e3.config.legend.itemMargin.horizontal, "px"), e3.globals.dom.elLegendWrap.style.width = e3.config.legend.width ? e3.config.legend.width + "px" : "", e3.globals.dom.elLegendWrap.style.height = e3.config.legend.height ? e3.config.legend.height + "px" : "", m2.setAttrs(P3, { rel: l3 + 1, seriesName: x2.escapeString(a3[l3]), "data:collapsed": d3 || g3 }), (d3 || g3) && P3.classList.add("apexcharts-inactive-legend"), e3.config.legend.onItemClick.toggleDataSeries || P3.classList.add("apexcharts-no-click");
          }
          e3.globals.dom.elWrap.addEventListener("click", t4.onLegendClick, true), e3.config.legend.onItemHover.highlightDataSeries && 0 === e3.config.legend.customLegendItems.length && (e3.globals.dom.elWrap.addEventListener("mousemove", t4.onLegendHovered, true), e3.globals.dom.elWrap.addEventListener("mouseout", t4.onLegendHovered, true));
        } }, { key: "setLegendWrapXY", value: function(t4, e3) {
          var i3 = this.w, a3 = i3.globals.dom.elLegendWrap, s3 = a3.getBoundingClientRect(), r3 = 0, o3 = 0;
          if ("bottom" === i3.config.legend.position)
            o3 += i3.globals.svgHeight - s3.height / 2;
          else if ("top" === i3.config.legend.position) {
            var n3 = new ot2(this.ctx), l3 = n3.dimHelpers.getTitleSubtitleCoords("title").height, h3 = n3.dimHelpers.getTitleSubtitleCoords("subtitle").height;
            o3 = o3 + (l3 > 0 ? l3 - 10 : 0) + (h3 > 0 ? h3 - 10 : 0);
          }
          a3.style.position = "absolute", r3 = r3 + t4 + i3.config.legend.offsetX, o3 = o3 + e3 + i3.config.legend.offsetY, a3.style.left = r3 + "px", a3.style.top = o3 + "px", "bottom" === i3.config.legend.position ? (a3.style.top = "auto", a3.style.bottom = 5 - i3.config.legend.offsetY + "px") : "right" === i3.config.legend.position && (a3.style.left = "auto", a3.style.right = 25 + i3.config.legend.offsetX + "px");
          ["width", "height"].forEach(function(t5) {
            a3.style[t5] && (a3.style[t5] = parseInt(i3.config.legend[t5], 10) + "px");
          });
        } }, { key: "legendAlignHorizontal", value: function() {
          var t4 = this.w;
          t4.globals.dom.elLegendWrap.style.right = 0;
          var e3 = this.legendHelpers.getLegendBBox(), i3 = new ot2(this.ctx), a3 = i3.dimHelpers.getTitleSubtitleCoords("title"), s3 = i3.dimHelpers.getTitleSubtitleCoords("subtitle"), r3 = 0;
          "bottom" === t4.config.legend.position ? r3 = -e3.clwh / 1.8 : "top" === t4.config.legend.position && (r3 = a3.height + s3.height + t4.config.title.margin + t4.config.subtitle.margin - 10), this.setLegendWrapXY(20, r3);
        } }, { key: "legendAlignVertical", value: function() {
          var t4 = this.w, e3 = this.legendHelpers.getLegendBBox(), i3 = 0;
          "left" === t4.config.legend.position && (i3 = 20), "right" === t4.config.legend.position && (i3 = t4.globals.svgWidth - e3.clww - 10), this.setLegendWrapXY(i3, 20);
        } }, { key: "onLegendHovered", value: function(t4) {
          var e3 = this.w, i3 = t4.target.classList.contains("apexcharts-legend-series") || t4.target.classList.contains("apexcharts-legend-text") || t4.target.classList.contains("apexcharts-legend-marker");
          if ("heatmap" === e3.config.chart.type || this.isBarsDistributed) {
            if (i3) {
              var a3 = parseInt(t4.target.getAttribute("rel"), 10) - 1;
              this.ctx.events.fireEvent("legendHover", [this.ctx, a3, this.w]), new N2(this.ctx).highlightRangeInSeries(t4, t4.target);
            }
          } else
            !t4.target.classList.contains("apexcharts-inactive-legend") && i3 && new N2(this.ctx).toggleSeriesOnHover(t4, t4.target);
        } }, { key: "onLegendClick", value: function(t4) {
          var e3 = this.w;
          if (!e3.config.legend.customLegendItems.length && (t4.target.classList.contains("apexcharts-legend-series") || t4.target.classList.contains("apexcharts-legend-text") || t4.target.classList.contains("apexcharts-legend-marker"))) {
            var i3 = parseInt(t4.target.getAttribute("rel"), 10) - 1, a3 = "true" === t4.target.getAttribute("data:collapsed"), s3 = this.w.config.chart.events.legendClick;
            "function" == typeof s3 && s3(this.ctx, i3, this.w), this.ctx.events.fireEvent("legendClick", [this.ctx, i3, this.w]);
            var r3 = this.w.config.legend.markers.onClick;
            "function" == typeof r3 && t4.target.classList.contains("apexcharts-legend-marker") && (r3(this.ctx, i3, this.w), this.ctx.events.fireEvent("legendMarkerClick", [this.ctx, i3, this.w])), "treemap" !== e3.config.chart.type && "heatmap" !== e3.config.chart.type && !this.isBarsDistributed && e3.config.legend.onItemClick.toggleDataSeries && this.legendHelpers.toggleDataSeries(i3, a3);
          }
        } }]), t3;
      }();
      var ht2 = function() {
        function t3(e3) {
          a2(this, t3), this.ctx = e3, this.w = e3.w;
          var i3 = this.w;
          this.ev = this.w.config.chart.events, this.selectedClass = "apexcharts-selected", this.localeValues = this.w.globals.locale.toolbar, this.minX = i3.globals.minX, this.maxX = i3.globals.maxX;
        }
        return r2(t3, [{ key: "createToolbar", value: function() {
          var t4 = this, e3 = this.w, i3 = function() {
            return document.createElement("div");
          }, a3 = i3();
          if (a3.setAttribute("class", "apexcharts-toolbar"), a3.style.top = e3.config.chart.toolbar.offsetY + "px", a3.style.right = 3 - e3.config.chart.toolbar.offsetX + "px", e3.globals.dom.elWrap.appendChild(a3), this.elZoom = i3(), this.elZoomIn = i3(), this.elZoomOut = i3(), this.elPan = i3(), this.elSelection = i3(), this.elZoomReset = i3(), this.elMenuIcon = i3(), this.elMenu = i3(), this.elCustomIcons = [], this.t = e3.config.chart.toolbar.tools, Array.isArray(this.t.customIcons))
            for (var s3 = 0; s3 < this.t.customIcons.length; s3++)
              this.elCustomIcons.push(i3());
          var r3 = [], o3 = function(i4, a4, s4) {
            var o4 = i4.toLowerCase();
            t4.t[o4] && e3.config.chart.zoom.enabled && r3.push({ el: a4, icon: "string" == typeof t4.t[o4] ? t4.t[o4] : s4, title: t4.localeValues[i4], class: "apexcharts-".concat(o4, "-icon") });
          };
          o3("zoomIn", this.elZoomIn, '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24">\n    <path d="M0 0h24v24H0z" fill="none"/>\n    <path d="M13 7h-2v4H7v2h4v4h2v-4h4v-2h-4V7zm-1-5C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8z"/>\n</svg>\n'), o3("zoomOut", this.elZoomOut, '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24">\n    <path d="M0 0h24v24H0z" fill="none"/>\n    <path d="M7 11v2h10v-2H7zm5-9C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8z"/>\n</svg>\n');
          var n3 = function(i4) {
            t4.t[i4] && e3.config.chart[i4].enabled && r3.push({ el: "zoom" === i4 ? t4.elZoom : t4.elSelection, icon: "string" == typeof t4.t[i4] ? t4.t[i4] : "zoom" === i4 ? '<svg xmlns="http://www.w3.org/2000/svg" fill="#000000" height="24" viewBox="0 0 24 24" width="24">\n    <path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/>\n    <path d="M0 0h24v24H0V0z" fill="none"/>\n    <path d="M12 10h-2v2H9v-2H7V9h2V7h1v2h2v1z"/>\n</svg>' : '<svg fill="#6E8192" height="24" viewBox="0 0 24 24" width="24" xmlns="http://www.w3.org/2000/svg">\n    <path d="M0 0h24v24H0z" fill="none"/>\n    <path d="M3 5h2V3c-1.1 0-2 .9-2 2zm0 8h2v-2H3v2zm4 8h2v-2H7v2zM3 9h2V7H3v2zm10-6h-2v2h2V3zm6 0v2h2c0-1.1-.9-2-2-2zM5 21v-2H3c0 1.1.9 2 2 2zm-2-4h2v-2H3v2zM9 3H7v2h2V3zm2 18h2v-2h-2v2zm8-8h2v-2h-2v2zm0 8c1.1 0 2-.9 2-2h-2v2zm0-12h2V7h-2v2zm0 8h2v-2h-2v2zm-4 4h2v-2h-2v2zm0-16h2V3h-2v2z"/>\n</svg>', title: t4.localeValues["zoom" === i4 ? "selectionZoom" : "selection"], class: e3.globals.isTouchDevice ? "apexcharts-element-hidden" : "apexcharts-".concat(i4, "-icon") });
          };
          n3("zoom"), n3("selection"), this.t.pan && e3.config.chart.zoom.enabled && r3.push({ el: this.elPan, icon: "string" == typeof this.t.pan ? this.t.pan : '<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" fill="#000000" height="24" viewBox="0 0 24 24" width="24">\n    <defs>\n        <path d="M0 0h24v24H0z" id="a"/>\n    </defs>\n    <clipPath id="b">\n        <use overflow="visible" xlink:href="#a"/>\n    </clipPath>\n    <path clip-path="url(#b)" d="M23 5.5V20c0 2.2-1.8 4-4 4h-7.3c-1.08 0-2.1-.43-2.85-1.19L1 14.83s1.26-1.23 1.3-1.25c.22-.19.49-.29.79-.29.22 0 .42.06.6.16.04.01 4.31 2.46 4.31 2.46V4c0-.83.67-1.5 1.5-1.5S11 3.17 11 4v7h1V1.5c0-.83.67-1.5 1.5-1.5S15 .67 15 1.5V11h1V2.5c0-.83.67-1.5 1.5-1.5s1.5.67 1.5 1.5V11h1V5.5c0-.83.67-1.5 1.5-1.5s1.5.67 1.5 1.5z"/>\n</svg>', title: this.localeValues.pan, class: e3.globals.isTouchDevice ? "apexcharts-element-hidden" : "apexcharts-pan-icon" }), o3("reset", this.elZoomReset, '<svg fill="#000000" height="24" viewBox="0 0 24 24" width="24" xmlns="http://www.w3.org/2000/svg">\n    <path d="M10 20v-6h4v6h5v-8h3L12 3 2 12h3v8z"/>\n    <path d="M0 0h24v24H0z" fill="none"/>\n</svg>'), this.t.download && r3.push({ el: this.elMenuIcon, icon: "string" == typeof this.t.download ? this.t.download : '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path fill="none" d="M0 0h24v24H0V0z"/><path d="M3 18h18v-2H3v2zm0-5h18v-2H3v2zm0-7v2h18V6H3z"/></svg>', title: this.localeValues.menu, class: "apexcharts-menu-icon" });
          for (var l3 = 0; l3 < this.elCustomIcons.length; l3++)
            r3.push({ el: this.elCustomIcons[l3], icon: this.t.customIcons[l3].icon, title: this.t.customIcons[l3].title, index: this.t.customIcons[l3].index, class: "apexcharts-toolbar-custom-icon " + this.t.customIcons[l3].class });
          r3.forEach(function(t5, e4) {
            t5.index && x2.moveIndexInArray(r3, e4, t5.index);
          });
          for (var h3 = 0; h3 < r3.length; h3++)
            m2.setAttrs(r3[h3].el, { class: r3[h3].class, title: r3[h3].title }), r3[h3].el.innerHTML = r3[h3].icon, a3.appendChild(r3[h3].el);
          this._createHamburgerMenu(a3), e3.globals.zoomEnabled ? this.elZoom.classList.add(this.selectedClass) : e3.globals.panEnabled ? this.elPan.classList.add(this.selectedClass) : e3.globals.selectionEnabled && this.elSelection.classList.add(this.selectedClass), this.addToolbarEventListeners();
        } }, { key: "_createHamburgerMenu", value: function(t4) {
          this.elMenuItems = [], t4.appendChild(this.elMenu), m2.setAttrs(this.elMenu, { class: "apexcharts-menu" });
          for (var e3 = [{ name: "exportSVG", title: this.localeValues.exportToSVG }, { name: "exportPNG", title: this.localeValues.exportToPNG }, { name: "exportCSV", title: this.localeValues.exportToCSV }], i3 = 0; i3 < e3.length; i3++)
            this.elMenuItems.push(document.createElement("div")), this.elMenuItems[i3].innerHTML = e3[i3].title, m2.setAttrs(this.elMenuItems[i3], { class: "apexcharts-menu-item ".concat(e3[i3].name), title: e3[i3].title }), this.elMenu.appendChild(this.elMenuItems[i3]);
        } }, { key: "addToolbarEventListeners", value: function() {
          var t4 = this;
          this.elZoomReset.addEventListener("click", this.handleZoomReset.bind(this)), this.elSelection.addEventListener("click", this.toggleZoomSelection.bind(this, "selection")), this.elZoom.addEventListener("click", this.toggleZoomSelection.bind(this, "zoom")), this.elZoomIn.addEventListener("click", this.handleZoomIn.bind(this)), this.elZoomOut.addEventListener("click", this.handleZoomOut.bind(this)), this.elPan.addEventListener("click", this.togglePanning.bind(this)), this.elMenuIcon.addEventListener("click", this.toggleMenu.bind(this)), this.elMenuItems.forEach(function(e4) {
            e4.classList.contains("exportSVG") ? e4.addEventListener("click", t4.handleDownload.bind(t4, "svg")) : e4.classList.contains("exportPNG") ? e4.addEventListener("click", t4.handleDownload.bind(t4, "png")) : e4.classList.contains("exportCSV") && e4.addEventListener("click", t4.handleDownload.bind(t4, "csv"));
          });
          for (var e3 = 0; e3 < this.t.customIcons.length; e3++)
            this.elCustomIcons[e3].addEventListener("click", this.t.customIcons[e3].click.bind(this, this.ctx, this.ctx.w));
        } }, { key: "toggleZoomSelection", value: function(t4) {
          this.ctx.getSyncedCharts().forEach(function(e3) {
            e3.ctx.toolbar.toggleOtherControls();
            var i3 = "selection" === t4 ? e3.ctx.toolbar.elSelection : e3.ctx.toolbar.elZoom, a3 = "selection" === t4 ? "selectionEnabled" : "zoomEnabled";
            e3.w.globals[a3] = !e3.w.globals[a3], i3.classList.contains(e3.ctx.toolbar.selectedClass) ? i3.classList.remove(e3.ctx.toolbar.selectedClass) : i3.classList.add(e3.ctx.toolbar.selectedClass);
          });
        } }, { key: "getToolbarIconsReference", value: function() {
          var t4 = this.w;
          this.elZoom || (this.elZoom = t4.globals.dom.baseEl.querySelector(".apexcharts-zoom-icon")), this.elPan || (this.elPan = t4.globals.dom.baseEl.querySelector(".apexcharts-pan-icon")), this.elSelection || (this.elSelection = t4.globals.dom.baseEl.querySelector(".apexcharts-selection-icon"));
        } }, { key: "enableZoomPanFromToolbar", value: function(t4) {
          this.toggleOtherControls(), "pan" === t4 ? this.w.globals.panEnabled = true : this.w.globals.zoomEnabled = true;
          var e3 = "pan" === t4 ? this.elPan : this.elZoom, i3 = "pan" === t4 ? this.elZoom : this.elPan;
          e3 && e3.classList.add(this.selectedClass), i3 && i3.classList.remove(this.selectedClass);
        } }, { key: "togglePanning", value: function() {
          this.ctx.getSyncedCharts().forEach(function(t4) {
            t4.ctx.toolbar.toggleOtherControls(), t4.w.globals.panEnabled = !t4.w.globals.panEnabled, t4.ctx.toolbar.elPan.classList.contains(t4.ctx.toolbar.selectedClass) ? t4.ctx.toolbar.elPan.classList.remove(t4.ctx.toolbar.selectedClass) : t4.ctx.toolbar.elPan.classList.add(t4.ctx.toolbar.selectedClass);
          });
        } }, { key: "toggleOtherControls", value: function() {
          var t4 = this, e3 = this.w;
          e3.globals.panEnabled = false, e3.globals.zoomEnabled = false, e3.globals.selectionEnabled = false, this.getToolbarIconsReference(), [this.elPan, this.elSelection, this.elZoom].forEach(function(e4) {
            e4 && e4.classList.remove(t4.selectedClass);
          });
        } }, { key: "handleZoomIn", value: function() {
          var t4 = this.w;
          t4.globals.isRangeBar && (this.minX = t4.globals.minY, this.maxX = t4.globals.maxY);
          var e3 = (this.minX + this.maxX) / 2, i3 = (this.minX + e3) / 2, a3 = (this.maxX + e3) / 2, s3 = this._getNewMinXMaxX(i3, a3);
          t4.globals.disableZoomIn || this.zoomUpdateOptions(s3.minX, s3.maxX);
        } }, { key: "handleZoomOut", value: function() {
          var t4 = this.w;
          if (t4.globals.isRangeBar && (this.minX = t4.globals.minY, this.maxX = t4.globals.maxY), !("datetime" === t4.config.xaxis.type && new Date(this.minX).getUTCFullYear() < 1e3)) {
            var e3 = (this.minX + this.maxX) / 2, i3 = this.minX - (e3 - this.minX), a3 = this.maxX - (e3 - this.maxX), s3 = this._getNewMinXMaxX(i3, a3);
            t4.globals.disableZoomOut || this.zoomUpdateOptions(s3.minX, s3.maxX);
          }
        } }, { key: "_getNewMinXMaxX", value: function(t4, e3) {
          var i3 = this.w.config.xaxis.convertedCatToNumeric;
          return { minX: i3 ? Math.floor(t4) : t4, maxX: i3 ? Math.floor(e3) : e3 };
        } }, { key: "zoomUpdateOptions", value: function(t4, e3) {
          var i3 = this.w;
          if (void 0 !== t4 || void 0 !== e3) {
            if (!(i3.config.xaxis.convertedCatToNumeric && (t4 < 1 && (t4 = 1, e3 = i3.globals.dataPoints), e3 - t4 < 2))) {
              var a3 = { min: t4, max: e3 }, s3 = this.getBeforeZoomRange(a3);
              s3 && (a3 = s3.xaxis);
              var r3 = { xaxis: a3 }, o3 = x2.clone(i3.globals.initialConfig.yaxis);
              if (i3.config.chart.zoom.autoScaleYaxis)
                o3 = new _2(this.ctx).autoScaleY(this.ctx, o3, { xaxis: a3 });
              i3.config.chart.group || (r3.yaxis = o3), this.w.globals.zoomed = true, this.ctx.updateHelpers._updateOptions(r3, false, this.w.config.chart.animations.dynamicAnimation.enabled), this.zoomCallback(a3, o3);
            }
          } else
            this.handleZoomReset();
        } }, { key: "zoomCallback", value: function(t4, e3) {
          "function" == typeof this.ev.zoomed && this.ev.zoomed(this.ctx, { xaxis: t4, yaxis: e3 });
        } }, { key: "getBeforeZoomRange", value: function(t4, e3) {
          var i3 = null;
          return "function" == typeof this.ev.beforeZoom && (i3 = this.ev.beforeZoom(this, { xaxis: t4, yaxis: e3 })), i3;
        } }, { key: "toggleMenu", value: function() {
          var t4 = this;
          window.setTimeout(function() {
            t4.elMenu.classList.contains("apexcharts-menu-open") ? t4.elMenu.classList.remove("apexcharts-menu-open") : t4.elMenu.classList.add("apexcharts-menu-open");
          }, 0);
        } }, { key: "handleDownload", value: function(t4) {
          var e3 = this.w, i3 = new G2(this.ctx);
          switch (t4) {
            case "svg":
              i3.exportToSVG(this.ctx);
              break;
            case "png":
              i3.exportToPng(this.ctx);
              break;
            case "csv":
              i3.exportToCSV({ series: e3.config.series, columnDelimiter: e3.config.chart.toolbar.export.csv.columnDelimiter });
          }
        } }, { key: "handleZoomReset", value: function(t4) {
          this.ctx.getSyncedCharts().forEach(function(t5) {
            var e3 = t5.w;
            if (e3.globals.lastXAxis.min = e3.globals.initialConfig.xaxis.min, e3.globals.lastXAxis.max = e3.globals.initialConfig.xaxis.max, t5.updateHelpers.revertDefaultAxisMinMax(), "function" == typeof e3.config.chart.events.beforeResetZoom) {
              var i3 = e3.config.chart.events.beforeResetZoom(t5, e3);
              i3 && t5.updateHelpers.revertDefaultAxisMinMax(i3);
            }
            "function" == typeof e3.config.chart.events.zoomed && t5.ctx.toolbar.zoomCallback({ min: e3.config.xaxis.min, max: e3.config.xaxis.max }), e3.globals.zoomed = false;
            var a3 = t5.ctx.series.emptyCollapsedSeries(x2.clone(e3.globals.initialSeries));
            t5.updateHelpers._updateSeries(a3, e3.config.chart.animations.dynamicAnimation.enabled);
          });
        } }, { key: "destroy", value: function() {
          this.elZoom = null, this.elZoomIn = null, this.elZoomOut = null, this.elPan = null, this.elSelection = null, this.elZoomReset = null, this.elMenuIcon = null;
        } }]), t3;
      }();
      var ct2 = function(t3) {
        n2(i3, ht2);
        var e3 = d2(i3);
        function i3(t4) {
          var s3;
          return a2(this, i3), (s3 = e3.call(this, t4)).ctx = t4, s3.w = t4.w, s3.dragged = false, s3.graphics = new m2(s3.ctx), s3.eventList = ["mousedown", "mouseleave", "mousemove", "touchstart", "touchmove", "mouseup", "touchend"], s3.clientX = 0, s3.clientY = 0, s3.startX = 0, s3.endX = 0, s3.dragX = 0, s3.startY = 0, s3.endY = 0, s3.dragY = 0, s3.moveDirection = "none", s3;
        }
        return r2(i3, [{ key: "init", value: function(t4) {
          var e4 = this, i4 = t4.xyRatios, a3 = this.w, s3 = this;
          this.xyRatios = i4, this.zoomRect = this.graphics.drawRect(0, 0, 0, 0), this.selectionRect = this.graphics.drawRect(0, 0, 0, 0), this.gridRect = a3.globals.dom.baseEl.querySelector(".apexcharts-grid"), this.zoomRect.node.classList.add("apexcharts-zoom-rect"), this.selectionRect.node.classList.add("apexcharts-selection-rect"), a3.globals.dom.elGraphical.add(this.zoomRect), a3.globals.dom.elGraphical.add(this.selectionRect), "x" === a3.config.chart.selection.type ? this.slDraggableRect = this.selectionRect.draggable({ minX: 0, minY: 0, maxX: a3.globals.gridWidth, maxY: a3.globals.gridHeight }).on("dragmove", this.selectionDragging.bind(this, "dragging")) : "y" === a3.config.chart.selection.type ? this.slDraggableRect = this.selectionRect.draggable({ minX: 0, maxX: a3.globals.gridWidth }).on("dragmove", this.selectionDragging.bind(this, "dragging")) : this.slDraggableRect = this.selectionRect.draggable().on("dragmove", this.selectionDragging.bind(this, "dragging")), this.preselectedSelection(), this.hoverArea = a3.globals.dom.baseEl.querySelector("".concat(a3.globals.chartClass, " .apexcharts-svg")), this.hoverArea.classList.add("apexcharts-zoomable"), this.eventList.forEach(function(t5) {
            e4.hoverArea.addEventListener(t5, s3.svgMouseEvents.bind(s3, i4), { capture: false, passive: true });
          });
        } }, { key: "destroy", value: function() {
          this.slDraggableRect && (this.slDraggableRect.draggable(false), this.slDraggableRect.off(), this.selectionRect.off()), this.selectionRect = null, this.zoomRect = null, this.gridRect = null;
        } }, { key: "svgMouseEvents", value: function(t4, e4) {
          var i4 = this.w, a3 = this, s3 = this.ctx.toolbar, r3 = i4.globals.zoomEnabled ? i4.config.chart.zoom.type : i4.config.chart.selection.type, o3 = i4.config.chart.toolbar.autoSelected;
          if (e4.shiftKey ? (this.shiftWasPressed = true, s3.enableZoomPanFromToolbar("pan" === o3 ? "zoom" : "pan")) : this.shiftWasPressed && (s3.enableZoomPanFromToolbar(o3), this.shiftWasPressed = false), e4.target) {
            var n3, l3 = e4.target.classList;
            if (e4.target.parentNode && null !== e4.target.parentNode && (n3 = e4.target.parentNode.classList), !(l3.contains("apexcharts-selection-rect") || l3.contains("apexcharts-legend-marker") || l3.contains("apexcharts-legend-text") || n3 && n3.contains("apexcharts-toolbar"))) {
              if (a3.clientX = "touchmove" === e4.type || "touchstart" === e4.type ? e4.touches[0].clientX : "touchend" === e4.type ? e4.changedTouches[0].clientX : e4.clientX, a3.clientY = "touchmove" === e4.type || "touchstart" === e4.type ? e4.touches[0].clientY : "touchend" === e4.type ? e4.changedTouches[0].clientY : e4.clientY, "mousedown" === e4.type && 1 === e4.which) {
                var h3 = a3.gridRect.getBoundingClientRect();
                a3.startX = a3.clientX - h3.left, a3.startY = a3.clientY - h3.top, a3.dragged = false, a3.w.globals.mousedown = true;
              }
              if (("mousemove" === e4.type && 1 === e4.which || "touchmove" === e4.type) && (a3.dragged = true, i4.globals.panEnabled ? (i4.globals.selection = null, a3.w.globals.mousedown && a3.panDragging({ context: a3, zoomtype: r3, xyRatios: t4 })) : (a3.w.globals.mousedown && i4.globals.zoomEnabled || a3.w.globals.mousedown && i4.globals.selectionEnabled) && (a3.selection = a3.selectionDrawing({ context: a3, zoomtype: r3 }))), "mouseup" === e4.type || "touchend" === e4.type || "mouseleave" === e4.type) {
                var c3 = a3.gridRect.getBoundingClientRect();
                a3.w.globals.mousedown && (a3.endX = a3.clientX - c3.left, a3.endY = a3.clientY - c3.top, a3.dragX = Math.abs(a3.endX - a3.startX), a3.dragY = Math.abs(a3.endY - a3.startY), (i4.globals.zoomEnabled || i4.globals.selectionEnabled) && a3.selectionDrawn({ context: a3, zoomtype: r3 }), i4.globals.panEnabled && i4.config.xaxis.convertedCatToNumeric && a3.delayedPanScrolled()), i4.globals.zoomEnabled && a3.hideSelectionRect(this.selectionRect), a3.dragged = false, a3.w.globals.mousedown = false;
              }
              this.makeSelectionRectDraggable();
            }
          }
        } }, { key: "makeSelectionRectDraggable", value: function() {
          var t4 = this.w;
          if (this.selectionRect) {
            var e4 = this.selectionRect.node.getBoundingClientRect();
            e4.width > 0 && e4.height > 0 && this.slDraggableRect.selectize({ points: "l, r", pointSize: 8, pointType: "rect" }).resize({ constraint: { minX: 0, minY: 0, maxX: t4.globals.gridWidth, maxY: t4.globals.gridHeight } }).on("resizing", this.selectionDragging.bind(this, "resizing"));
          }
        } }, { key: "preselectedSelection", value: function() {
          var t4 = this.w, e4 = this.xyRatios;
          if (!t4.globals.zoomEnabled) {
            if (void 0 !== t4.globals.selection && null !== t4.globals.selection)
              this.drawSelectionRect(t4.globals.selection);
            else if (void 0 !== t4.config.chart.selection.xaxis.min && void 0 !== t4.config.chart.selection.xaxis.max) {
              var i4 = (t4.config.chart.selection.xaxis.min - t4.globals.minX) / e4.xRatio, a3 = t4.globals.gridWidth - (t4.globals.maxX - t4.config.chart.selection.xaxis.max) / e4.xRatio - i4;
              t4.globals.isRangeBar && (i4 = (t4.config.chart.selection.xaxis.min - t4.globals.yAxisScale[0].niceMin) / e4.invertedYRatio, a3 = (t4.config.chart.selection.xaxis.max - t4.config.chart.selection.xaxis.min) / e4.invertedYRatio);
              var s3 = { x: i4, y: 0, width: a3, height: t4.globals.gridHeight, translateX: 0, translateY: 0, selectionEnabled: true };
              this.drawSelectionRect(s3), this.makeSelectionRectDraggable(), "function" == typeof t4.config.chart.events.selection && t4.config.chart.events.selection(this.ctx, { xaxis: { min: t4.config.chart.selection.xaxis.min, max: t4.config.chart.selection.xaxis.max }, yaxis: {} });
            }
          }
        } }, { key: "drawSelectionRect", value: function(t4) {
          var e4 = t4.x, i4 = t4.y, a3 = t4.width, s3 = t4.height, r3 = t4.translateX, o3 = void 0 === r3 ? 0 : r3, n3 = t4.translateY, l3 = void 0 === n3 ? 0 : n3, h3 = this.w, c3 = this.zoomRect, d3 = this.selectionRect;
          if (this.dragged || null !== h3.globals.selection) {
            var g3 = { transform: "translate(" + o3 + ", " + l3 + ")" };
            h3.globals.zoomEnabled && this.dragged && (a3 < 0 && (a3 = 1), c3.attr({ x: e4, y: i4, width: a3, height: s3, fill: h3.config.chart.zoom.zoomedArea.fill.color, "fill-opacity": h3.config.chart.zoom.zoomedArea.fill.opacity, stroke: h3.config.chart.zoom.zoomedArea.stroke.color, "stroke-width": h3.config.chart.zoom.zoomedArea.stroke.width, "stroke-opacity": h3.config.chart.zoom.zoomedArea.stroke.opacity }), m2.setAttrs(c3.node, g3)), h3.globals.selectionEnabled && (d3.attr({ x: e4, y: i4, width: a3 > 0 ? a3 : 0, height: s3 > 0 ? s3 : 0, fill: h3.config.chart.selection.fill.color, "fill-opacity": h3.config.chart.selection.fill.opacity, stroke: h3.config.chart.selection.stroke.color, "stroke-width": h3.config.chart.selection.stroke.width, "stroke-dasharray": h3.config.chart.selection.stroke.dashArray, "stroke-opacity": h3.config.chart.selection.stroke.opacity }), m2.setAttrs(d3.node, g3));
          }
        } }, { key: "hideSelectionRect", value: function(t4) {
          t4 && t4.attr({ x: 0, y: 0, width: 0, height: 0 });
        } }, { key: "selectionDrawing", value: function(t4) {
          var e4 = t4.context, i4 = t4.zoomtype, a3 = this.w, s3 = e4, r3 = this.gridRect.getBoundingClientRect(), o3 = s3.startX - 1, n3 = s3.startY, l3 = false, h3 = false, c3 = s3.clientX - r3.left - o3, d3 = s3.clientY - r3.top - n3, g3 = {};
          return Math.abs(c3 + o3) > a3.globals.gridWidth ? c3 = a3.globals.gridWidth - o3 : s3.clientX - r3.left < 0 && (c3 = o3), o3 > s3.clientX - r3.left && (l3 = true, c3 = Math.abs(c3)), n3 > s3.clientY - r3.top && (h3 = true, d3 = Math.abs(d3)), g3 = "x" === i4 ? { x: l3 ? o3 - c3 : o3, y: 0, width: c3, height: a3.globals.gridHeight } : "y" === i4 ? { x: 0, y: h3 ? n3 - d3 : n3, width: a3.globals.gridWidth, height: d3 } : { x: l3 ? o3 - c3 : o3, y: h3 ? n3 - d3 : n3, width: c3, height: d3 }, s3.drawSelectionRect(g3), s3.selectionDragging("resizing"), g3;
        } }, { key: "selectionDragging", value: function(t4, e4) {
          var i4 = this, a3 = this.w, s3 = this.xyRatios, r3 = this.selectionRect, o3 = 0;
          "resizing" === t4 && (o3 = 30);
          var n3 = function(t5) {
            return parseFloat(r3.node.getAttribute(t5));
          }, l3 = { x: n3("x"), y: n3("y"), width: n3("width"), height: n3("height") };
          a3.globals.selection = l3, "function" == typeof a3.config.chart.events.selection && a3.globals.selectionEnabled && (clearTimeout(this.w.globals.selectionResizeTimer), this.w.globals.selectionResizeTimer = window.setTimeout(function() {
            var t5, e5, o4, n4, l4 = i4.gridRect.getBoundingClientRect(), h3 = r3.node.getBoundingClientRect();
            a3.globals.isRangeBar ? (t5 = a3.globals.yAxisScale[0].niceMin + (h3.left - l4.left) * s3.invertedYRatio, e5 = a3.globals.yAxisScale[0].niceMin + (h3.right - l4.left) * s3.invertedYRatio, o4 = 0, n4 = 1) : (t5 = a3.globals.xAxisScale.niceMin + (h3.left - l4.left) * s3.xRatio, e5 = a3.globals.xAxisScale.niceMin + (h3.right - l4.left) * s3.xRatio, o4 = a3.globals.yAxisScale[0].niceMin + (l4.bottom - h3.bottom) * s3.yRatio[0], n4 = a3.globals.yAxisScale[0].niceMax - (h3.top - l4.top) * s3.yRatio[0]);
            var c3 = { xaxis: { min: t5, max: e5 }, yaxis: { min: o4, max: n4 } };
            a3.config.chart.events.selection(i4.ctx, c3), a3.config.chart.brush.enabled && void 0 !== a3.config.chart.events.brushScrolled && a3.config.chart.events.brushScrolled(i4.ctx, c3);
          }, o3));
        } }, { key: "selectionDrawn", value: function(t4) {
          var e4 = t4.context, i4 = t4.zoomtype, a3 = this.w, s3 = e4, r3 = this.xyRatios, o3 = this.ctx.toolbar;
          if (s3.startX > s3.endX) {
            var n3 = s3.startX;
            s3.startX = s3.endX, s3.endX = n3;
          }
          if (s3.startY > s3.endY) {
            var l3 = s3.startY;
            s3.startY = s3.endY, s3.endY = l3;
          }
          var h3 = void 0, c3 = void 0;
          a3.globals.isRangeBar ? (h3 = a3.globals.yAxisScale[0].niceMin + s3.startX * r3.invertedYRatio, c3 = a3.globals.yAxisScale[0].niceMin + s3.endX * r3.invertedYRatio) : (h3 = a3.globals.xAxisScale.niceMin + s3.startX * r3.xRatio, c3 = a3.globals.xAxisScale.niceMin + s3.endX * r3.xRatio);
          var d3 = [], g3 = [];
          if (a3.config.yaxis.forEach(function(t5, e5) {
            d3.push(a3.globals.yAxisScale[e5].niceMax - r3.yRatio[e5] * s3.startY), g3.push(a3.globals.yAxisScale[e5].niceMax - r3.yRatio[e5] * s3.endY);
          }), s3.dragged && (s3.dragX > 10 || s3.dragY > 10) && h3 !== c3) {
            if (a3.globals.zoomEnabled) {
              var u3 = x2.clone(a3.globals.initialConfig.yaxis), p3 = x2.clone(a3.globals.initialConfig.xaxis);
              if (a3.globals.zoomed = true, a3.config.xaxis.convertedCatToNumeric && (h3 = Math.floor(h3), c3 = Math.floor(c3), h3 < 1 && (h3 = 1, c3 = a3.globals.dataPoints), c3 - h3 < 2 && (c3 = h3 + 1)), "xy" !== i4 && "x" !== i4 || (p3 = { min: h3, max: c3 }), "xy" !== i4 && "y" !== i4 || u3.forEach(function(t5, e5) {
                u3[e5].min = g3[e5], u3[e5].max = d3[e5];
              }), a3.config.chart.zoom.autoScaleYaxis) {
                var f3 = new _2(s3.ctx);
                u3 = f3.autoScaleY(s3.ctx, u3, { xaxis: p3 });
              }
              if (o3) {
                var b3 = o3.getBeforeZoomRange(p3, u3);
                b3 && (p3 = b3.xaxis ? b3.xaxis : p3, u3 = b3.yaxis ? b3.yaxis : u3);
              }
              var v3 = { xaxis: p3 };
              a3.config.chart.group || (v3.yaxis = u3), s3.ctx.updateHelpers._updateOptions(v3, false, s3.w.config.chart.animations.dynamicAnimation.enabled), "function" == typeof a3.config.chart.events.zoomed && o3.zoomCallback(p3, u3);
            } else if (a3.globals.selectionEnabled) {
              var m3, y3 = null;
              m3 = { min: h3, max: c3 }, "xy" !== i4 && "y" !== i4 || (y3 = x2.clone(a3.config.yaxis)).forEach(function(t5, e5) {
                y3[e5].min = g3[e5], y3[e5].max = d3[e5];
              }), a3.globals.selection = s3.selection, "function" == typeof a3.config.chart.events.selection && a3.config.chart.events.selection(s3.ctx, { xaxis: m3, yaxis: y3 });
            }
          }
        } }, { key: "panDragging", value: function(t4) {
          var e4 = t4.context, i4 = this.w, a3 = e4;
          if (void 0 !== i4.globals.lastClientPosition.x) {
            var s3 = i4.globals.lastClientPosition.x - a3.clientX, r3 = i4.globals.lastClientPosition.y - a3.clientY;
            Math.abs(s3) > Math.abs(r3) && s3 > 0 ? this.moveDirection = "left" : Math.abs(s3) > Math.abs(r3) && s3 < 0 ? this.moveDirection = "right" : Math.abs(r3) > Math.abs(s3) && r3 > 0 ? this.moveDirection = "up" : Math.abs(r3) > Math.abs(s3) && r3 < 0 && (this.moveDirection = "down");
          }
          i4.globals.lastClientPosition = { x: a3.clientX, y: a3.clientY };
          var o3 = i4.globals.isRangeBar ? i4.globals.minY : i4.globals.minX, n3 = i4.globals.isRangeBar ? i4.globals.maxY : i4.globals.maxX;
          i4.config.xaxis.convertedCatToNumeric || a3.panScrolled(o3, n3);
        } }, { key: "delayedPanScrolled", value: function() {
          var t4 = this.w, e4 = t4.globals.minX, i4 = t4.globals.maxX, a3 = (t4.globals.maxX - t4.globals.minX) / 2;
          "left" === this.moveDirection ? (e4 = t4.globals.minX + a3, i4 = t4.globals.maxX + a3) : "right" === this.moveDirection && (e4 = t4.globals.minX - a3, i4 = t4.globals.maxX - a3), e4 = Math.floor(e4), i4 = Math.floor(i4), this.updateScrolledChart({ xaxis: { min: e4, max: i4 } }, e4, i4);
        } }, { key: "panScrolled", value: function(t4, e4) {
          var i4 = this.w, a3 = this.xyRatios, s3 = x2.clone(i4.globals.initialConfig.yaxis), r3 = a3.xRatio, o3 = i4.globals.minX, n3 = i4.globals.maxX;
          i4.globals.isRangeBar && (r3 = a3.invertedYRatio, o3 = i4.globals.minY, n3 = i4.globals.maxY), "left" === this.moveDirection ? (t4 = o3 + i4.globals.gridWidth / 15 * r3, e4 = n3 + i4.globals.gridWidth / 15 * r3) : "right" === this.moveDirection && (t4 = o3 - i4.globals.gridWidth / 15 * r3, e4 = n3 - i4.globals.gridWidth / 15 * r3), i4.globals.isRangeBar || (t4 < i4.globals.initialMinX || e4 > i4.globals.initialMaxX) && (t4 = o3, e4 = n3);
          var l3 = { min: t4, max: e4 };
          i4.config.chart.zoom.autoScaleYaxis && (s3 = new _2(this.ctx).autoScaleY(this.ctx, s3, { xaxis: l3 }));
          var h3 = { xaxis: { min: t4, max: e4 } };
          i4.config.chart.group || (h3.yaxis = s3), this.updateScrolledChart(h3, t4, e4);
        } }, { key: "updateScrolledChart", value: function(t4, e4, i4) {
          var a3 = this.w;
          this.ctx.updateHelpers._updateOptions(t4, false, false), "function" == typeof a3.config.chart.events.scrolled && a3.config.chart.events.scrolled(this.ctx, { xaxis: { min: e4, max: i4 } });
        } }]), i3;
      }();
      var dt2 = function() {
        function t3(e3) {
          a2(this, t3), this.w = e3.w, this.ttCtx = e3, this.ctx = e3.ctx;
        }
        return r2(t3, [{ key: "getNearestValues", value: function(t4) {
          var e3 = t4.hoverArea, i3 = t4.elGrid, a3 = t4.clientX, s3 = t4.clientY, r3 = this.w, o3 = i3.getBoundingClientRect(), n3 = o3.width, l3 = o3.height, h3 = n3 / (r3.globals.dataPoints - 1), c3 = l3 / r3.globals.dataPoints, d3 = this.hasBars();
          !r3.globals.comboCharts && !d3 || r3.config.xaxis.convertedCatToNumeric || (h3 = n3 / r3.globals.dataPoints);
          var g3 = a3 - o3.left - r3.globals.barPadForNumericAxis, u3 = s3 - o3.top;
          g3 < 0 || u3 < 0 || g3 > n3 || u3 > l3 ? (e3.classList.remove("hovering-zoom"), e3.classList.remove("hovering-pan")) : r3.globals.zoomEnabled ? (e3.classList.remove("hovering-pan"), e3.classList.add("hovering-zoom")) : r3.globals.panEnabled && (e3.classList.remove("hovering-zoom"), e3.classList.add("hovering-pan"));
          var p3 = Math.round(g3 / h3), f3 = Math.floor(u3 / c3);
          d3 && !r3.config.xaxis.convertedCatToNumeric && (p3 = Math.ceil(g3 / h3), p3 -= 1);
          var b3 = null, v3 = null, m3 = r3.globals.seriesXvalues.map(function(t5) {
            return t5.filter(function(t6) {
              return x2.isNumber(t6);
            });
          }), y3 = r3.globals.seriesYvalues.map(function(t5) {
            return t5.filter(function(t6) {
              return x2.isNumber(t6);
            });
          });
          if (r3.globals.isXNumeric) {
            var w3 = this.ttCtx.getElGrid().getBoundingClientRect(), k3 = g3 * (w3.width / n3), A3 = u3 * (w3.height / l3);
            b3 = (v3 = this.closestInMultiArray(k3, A3, m3, y3)).index, p3 = v3.j, null !== b3 && (m3 = r3.globals.seriesXvalues[b3], p3 = (v3 = this.closestInArray(k3, m3)).index);
          }
          return r3.globals.capturedSeriesIndex = null === b3 ? -1 : b3, (!p3 || p3 < 1) && (p3 = 0), r3.globals.isBarHorizontal ? r3.globals.capturedDataPointIndex = f3 : r3.globals.capturedDataPointIndex = p3, { capturedSeries: b3, j: r3.globals.isBarHorizontal ? f3 : p3, hoverX: g3, hoverY: u3 };
        } }, { key: "closestInMultiArray", value: function(t4, e3, i3, a3) {
          var s3 = this.w, r3 = 0, o3 = null, n3 = -1;
          s3.globals.series.length > 1 ? r3 = this.getFirstActiveXArray(i3) : o3 = 0;
          var l3 = i3[r3][0], h3 = Math.abs(t4 - l3);
          if (i3.forEach(function(e4) {
            e4.forEach(function(e5, i4) {
              var a4 = Math.abs(t4 - e5);
              a4 <= h3 && (h3 = a4, n3 = i4);
            });
          }), -1 !== n3) {
            var c3 = a3[r3][n3], d3 = Math.abs(e3 - c3);
            o3 = r3, a3.forEach(function(t5, i4) {
              var a4 = Math.abs(e3 - t5[n3]);
              a4 <= d3 && (d3 = a4, o3 = i4);
            });
          }
          return { index: o3, j: n3 };
        } }, { key: "getFirstActiveXArray", value: function(t4) {
          for (var e3 = this.w, i3 = 0, a3 = t4.map(function(t5, e4) {
            return t5.length > 0 ? e4 : -1;
          }), s3 = 0; s3 < a3.length; s3++)
            if (-1 !== a3[s3] && -1 === e3.globals.collapsedSeriesIndices.indexOf(s3) && -1 === e3.globals.ancillaryCollapsedSeriesIndices.indexOf(s3)) {
              i3 = a3[s3];
              break;
            }
          return i3;
        } }, { key: "closestInArray", value: function(t4, e3) {
          for (var i3 = e3[0], a3 = null, s3 = Math.abs(t4 - i3), r3 = 0; r3 < e3.length; r3++) {
            var o3 = Math.abs(t4 - e3[r3]);
            o3 < s3 && (s3 = o3, a3 = r3);
          }
          return { index: a3 };
        } }, { key: "isXoverlap", value: function(t4) {
          var e3 = [], i3 = this.w.globals.seriesX.filter(function(t5) {
            return void 0 !== t5[0];
          });
          if (i3.length > 0)
            for (var a3 = 0; a3 < i3.length - 1; a3++)
              void 0 !== i3[a3][t4] && void 0 !== i3[a3 + 1][t4] && i3[a3][t4] !== i3[a3 + 1][t4] && e3.push("unEqual");
          return 0 === e3.length;
        } }, { key: "isInitialSeriesSameLen", value: function() {
          for (var t4 = true, e3 = this.w.globals.initialSeries, i3 = 0; i3 < e3.length - 1; i3++)
            if (e3[i3].data.length !== e3[i3 + 1].data.length) {
              t4 = false;
              break;
            }
          return t4;
        } }, { key: "getBarsHeight", value: function(t4) {
          return u2(t4).reduce(function(t5, e3) {
            return t5 + e3.getBBox().height;
          }, 0);
        } }, { key: "getElMarkers", value: function(t4) {
          return "number" == typeof t4 ? this.w.globals.dom.baseEl.querySelectorAll(".apexcharts-series[data\\:realIndex='".concat(t4, "'] .apexcharts-series-markers-wrap > *")) : this.w.globals.dom.baseEl.querySelectorAll(".apexcharts-series-markers-wrap > *");
        } }, { key: "getAllMarkers", value: function() {
          var t4 = this.w.globals.dom.baseEl.querySelectorAll(".apexcharts-series-markers-wrap");
          (t4 = u2(t4)).sort(function(t5, e4) {
            var i3 = Number(t5.getAttribute("data:realIndex")), a3 = Number(e4.getAttribute("data:realIndex"));
            return a3 < i3 ? 1 : a3 > i3 ? -1 : 0;
          });
          var e3 = [];
          return t4.forEach(function(t5) {
            e3.push(t5.querySelector(".apexcharts-marker"));
          }), e3;
        } }, { key: "hasMarkers", value: function(t4) {
          return this.getElMarkers(t4).length > 0;
        } }, { key: "getElBars", value: function() {
          return this.w.globals.dom.baseEl.querySelectorAll(".apexcharts-bar-series,  .apexcharts-candlestick-series, .apexcharts-boxPlot-series, .apexcharts-rangebar-series");
        } }, { key: "hasBars", value: function() {
          return this.getElBars().length > 0;
        } }, { key: "getHoverMarkerSize", value: function(t4) {
          var e3 = this.w, i3 = e3.config.markers.hover.size;
          return void 0 === i3 && (i3 = e3.globals.markers.size[t4] + e3.config.markers.hover.sizeOffset), i3;
        } }, { key: "toggleAllTooltipSeriesGroups", value: function(t4) {
          var e3 = this.w, i3 = this.ttCtx;
          0 === i3.allTooltipSeriesGroups.length && (i3.allTooltipSeriesGroups = e3.globals.dom.baseEl.querySelectorAll(".apexcharts-tooltip-series-group"));
          for (var a3 = i3.allTooltipSeriesGroups, s3 = 0; s3 < a3.length; s3++)
            "enable" === t4 ? (a3[s3].classList.add("apexcharts-active"), a3[s3].style.display = e3.config.tooltip.items.display) : (a3[s3].classList.remove("apexcharts-active"), a3[s3].style.display = "none");
        } }]), t3;
      }();
      var gt2 = function() {
        function t3(e3) {
          a2(this, t3), this.w = e3.w, this.ctx = e3.ctx, this.ttCtx = e3, this.tooltipUtil = new dt2(e3);
        }
        return r2(t3, [{ key: "drawSeriesTexts", value: function(t4) {
          var e3 = t4.shared, i3 = void 0 === e3 || e3, a3 = t4.ttItems, s3 = t4.i, r3 = void 0 === s3 ? 0 : s3, o3 = t4.j, n3 = void 0 === o3 ? null : o3, l3 = t4.y1, h3 = t4.y2, c3 = t4.e, d3 = this.w;
          void 0 !== d3.config.tooltip.custom ? this.handleCustomTooltip({ i: r3, j: n3, y1: l3, y2: h3, w: d3 }) : this.toggleActiveInactiveSeries(i3);
          var g3 = this.getValuesToPrint({ i: r3, j: n3 });
          this.printLabels({ i: r3, j: n3, values: g3, ttItems: a3, shared: i3, e: c3 });
          var u3 = this.ttCtx.getElTooltip();
          this.ttCtx.tooltipRect.ttWidth = u3.getBoundingClientRect().width, this.ttCtx.tooltipRect.ttHeight = u3.getBoundingClientRect().height;
        } }, { key: "printLabels", value: function(t4) {
          var i3, a3 = this, s3 = t4.i, r3 = t4.j, o3 = t4.values, n3 = t4.ttItems, l3 = t4.shared, h3 = t4.e, c3 = this.w, d3 = [], g3 = function(t5) {
            return c3.globals.seriesGoals[t5] && c3.globals.seriesGoals[t5][r3] && Array.isArray(c3.globals.seriesGoals[t5][r3]);
          }, u3 = o3.xVal, p3 = o3.zVal, f3 = o3.xAxisTTVal, x3 = "", b3 = c3.globals.colors[s3];
          null !== r3 && c3.config.plotOptions.bar.distributed && (b3 = c3.globals.colors[r3]);
          for (var v3 = function(t5, o4) {
            var v4 = a3.getFormatters(s3);
            x3 = a3.getSeriesName({ fn: v4.yLbTitleFormatter, index: s3, seriesIndex: s3, j: r3 }), "treemap" === c3.config.chart.type && (x3 = v4.yLbTitleFormatter(String(c3.config.series[s3].data[r3].x), { series: c3.globals.series, seriesIndex: s3, dataPointIndex: r3, w: c3 }));
            var m4 = c3.config.tooltip.inverseOrder ? o4 : t5;
            if (c3.globals.axisCharts) {
              var y4 = function(t6) {
                var e3, i4, a4, s4;
                return c3.globals.isRangeData ? v4.yLbFormatter(null === (e3 = c3.globals.seriesRangeStart) || void 0 === e3 || null === (i4 = e3[t6]) || void 0 === i4 ? void 0 : i4[r3], { series: c3.globals.seriesRangeStart, seriesIndex: t6, dataPointIndex: r3, w: c3 }) + " - " + v4.yLbFormatter(null === (a4 = c3.globals.seriesRangeEnd) || void 0 === a4 || null === (s4 = a4[t6]) || void 0 === s4 ? void 0 : s4[r3], { series: c3.globals.seriesRangeEnd, seriesIndex: t6, dataPointIndex: r3, w: c3 }) : v4.yLbFormatter(c3.globals.series[t6][r3], { series: c3.globals.series, seriesIndex: t6, dataPointIndex: r3, w: c3 });
              };
              if (l3)
                v4 = a3.getFormatters(m4), x3 = a3.getSeriesName({ fn: v4.yLbTitleFormatter, index: m4, seriesIndex: s3, j: r3 }), b3 = c3.globals.colors[m4], i3 = y4(m4), g3(m4) && (d3 = c3.globals.seriesGoals[m4][r3].map(function(t6) {
                  return { attrs: t6, val: v4.yLbFormatter(t6.value, { seriesIndex: m4, dataPointIndex: r3, w: c3 }) };
                }));
              else {
                var w3, k3 = null == h3 || null === (w3 = h3.target) || void 0 === w3 ? void 0 : w3.getAttribute("fill");
                k3 && (b3 = -1 !== k3.indexOf("url") ? document.querySelector(k3.substr(4).slice(0, -1)).childNodes[0].getAttribute("stroke") : k3), i3 = y4(s3), g3(s3) && Array.isArray(c3.globals.seriesGoals[s3][r3]) && (d3 = c3.globals.seriesGoals[s3][r3].map(function(t6) {
                  return { attrs: t6, val: v4.yLbFormatter(t6.value, { seriesIndex: s3, dataPointIndex: r3, w: c3 }) };
                }));
              }
            }
            null === r3 && (i3 = v4.yLbFormatter(c3.globals.series[s3], e2(e2({}, c3), {}, { seriesIndex: s3, dataPointIndex: s3 }))), a3.DOMHandling({ i: s3, t: m4, j: r3, ttItems: n3, values: { val: i3, goalVals: d3, xVal: u3, xAxisTTVal: f3, zVal: p3 }, seriesName: x3, shared: l3, pColor: b3 });
          }, m3 = 0, y3 = c3.globals.series.length - 1; m3 < c3.globals.series.length; m3++, y3--)
            v3(m3, y3);
        } }, { key: "getFormatters", value: function(t4) {
          var e3, i3 = this.w, a3 = i3.globals.yLabelFormatters[t4];
          return void 0 !== i3.globals.ttVal ? Array.isArray(i3.globals.ttVal) ? (a3 = i3.globals.ttVal[t4] && i3.globals.ttVal[t4].formatter, e3 = i3.globals.ttVal[t4] && i3.globals.ttVal[t4].title && i3.globals.ttVal[t4].title.formatter) : (a3 = i3.globals.ttVal.formatter, "function" == typeof i3.globals.ttVal.title.formatter && (e3 = i3.globals.ttVal.title.formatter)) : e3 = i3.config.tooltip.y.title.formatter, "function" != typeof a3 && (a3 = i3.globals.yLabelFormatters[0] ? i3.globals.yLabelFormatters[0] : function(t5) {
            return t5;
          }), "function" != typeof e3 && (e3 = function(t5) {
            return t5;
          }), { yLbFormatter: a3, yLbTitleFormatter: e3 };
        } }, { key: "getSeriesName", value: function(t4) {
          var e3 = t4.fn, i3 = t4.index, a3 = t4.seriesIndex, s3 = t4.j, r3 = this.w;
          return e3(String(r3.globals.seriesNames[i3]), { series: r3.globals.series, seriesIndex: a3, dataPointIndex: s3, w: r3 });
        } }, { key: "DOMHandling", value: function(t4) {
          t4.i;
          var e3 = t4.t, i3 = t4.j, a3 = t4.ttItems, s3 = t4.values, r3 = t4.seriesName, o3 = t4.shared, n3 = t4.pColor, l3 = this.w, h3 = this.ttCtx, c3 = s3.val, d3 = s3.goalVals, g3 = s3.xVal, u3 = s3.xAxisTTVal, p3 = s3.zVal, f3 = null;
          f3 = a3[e3].children, l3.config.tooltip.fillSeriesColor && (a3[e3].style.backgroundColor = n3, f3[0].style.display = "none"), h3.showTooltipTitle && (null === h3.tooltipTitle && (h3.tooltipTitle = l3.globals.dom.baseEl.querySelector(".apexcharts-tooltip-title")), h3.tooltipTitle.innerHTML = g3), h3.isXAxisTooltipEnabled && (h3.xaxisTooltipText.innerHTML = "" !== u3 ? u3 : g3);
          var x3 = a3[e3].querySelector(".apexcharts-tooltip-text-y-label");
          x3 && (x3.innerHTML = r3 || "");
          var b3 = a3[e3].querySelector(".apexcharts-tooltip-text-y-value");
          b3 && (b3.innerHTML = void 0 !== c3 ? c3 : ""), f3[0] && f3[0].classList.contains("apexcharts-tooltip-marker") && (l3.config.tooltip.marker.fillColors && Array.isArray(l3.config.tooltip.marker.fillColors) && (n3 = l3.config.tooltip.marker.fillColors[e3]), f3[0].style.backgroundColor = n3), l3.config.tooltip.marker.show || (f3[0].style.display = "none");
          var v3 = a3[e3].querySelector(".apexcharts-tooltip-text-goals-label"), m3 = a3[e3].querySelector(".apexcharts-tooltip-text-goals-value");
          if (d3.length && l3.globals.seriesGoals[e3]) {
            var y3 = function() {
              var t5 = "<div >", e4 = "<div>";
              d3.forEach(function(i4, a4) {
                t5 += ' <div style="display: flex"><span class="apexcharts-tooltip-marker" style="background-color: '.concat(i4.attrs.strokeColor, '; height: 3px; border-radius: 0; top: 5px;"></span> ').concat(i4.attrs.name, "</div>"), e4 += "<div>".concat(i4.val, "</div>");
              }), v3.innerHTML = t5 + "</div>", m3.innerHTML = e4 + "</div>";
            };
            o3 ? l3.globals.seriesGoals[e3][i3] && Array.isArray(l3.globals.seriesGoals[e3][i3]) ? y3() : (v3.innerHTML = "", m3.innerHTML = "") : y3();
          } else
            v3.innerHTML = "", m3.innerHTML = "";
          null !== p3 && (a3[e3].querySelector(".apexcharts-tooltip-text-z-label").innerHTML = l3.config.tooltip.z.title, a3[e3].querySelector(".apexcharts-tooltip-text-z-value").innerHTML = void 0 !== p3 ? p3 : "");
          if (o3 && f3[0]) {
            if (l3.config.tooltip.hideEmptySeries) {
              var w3 = a3[e3].querySelector(".apexcharts-tooltip-marker"), k3 = a3[e3].querySelector(".apexcharts-tooltip-text");
              0 == parseFloat(c3) ? (w3.style.display = "none", k3.style.display = "none") : (w3.style.display = "block", k3.style.display = "block");
            }
            null == c3 || l3.globals.ancillaryCollapsedSeriesIndices.indexOf(e3) > -1 || l3.globals.collapsedSeriesIndices.indexOf(e3) > -1 ? f3[0].parentNode.style.display = "none" : f3[0].parentNode.style.display = l3.config.tooltip.items.display;
          }
        } }, { key: "toggleActiveInactiveSeries", value: function(t4) {
          var e3 = this.w;
          if (t4)
            this.tooltipUtil.toggleAllTooltipSeriesGroups("enable");
          else {
            this.tooltipUtil.toggleAllTooltipSeriesGroups("disable");
            var i3 = e3.globals.dom.baseEl.querySelector(".apexcharts-tooltip-series-group");
            i3 && (i3.classList.add("apexcharts-active"), i3.style.display = e3.config.tooltip.items.display);
          }
        } }, { key: "getValuesToPrint", value: function(t4) {
          var e3 = t4.i, i3 = t4.j, a3 = this.w, s3 = this.ctx.series.filteredSeriesX(), r3 = "", o3 = "", n3 = null, l3 = null, h3 = { series: a3.globals.series, seriesIndex: e3, dataPointIndex: i3, w: a3 }, c3 = a3.globals.ttZFormatter;
          null === i3 ? l3 = a3.globals.series[e3] : a3.globals.isXNumeric && "treemap" !== a3.config.chart.type ? (r3 = s3[e3][i3], 0 === s3[e3].length && (r3 = s3[this.tooltipUtil.getFirstActiveXArray(s3)][i3])) : r3 = void 0 !== a3.globals.labels[i3] ? a3.globals.labels[i3] : "";
          var d3 = r3;
          a3.globals.isXNumeric && "datetime" === a3.config.xaxis.type ? r3 = new T2(this.ctx).xLabelFormat(a3.globals.ttKeyFormatter, d3, d3, { i: void 0, dateFormatter: new I2(this.ctx).formatDate, w: this.w }) : r3 = a3.globals.isBarHorizontal ? a3.globals.yLabelFormatters[0](d3, h3) : a3.globals.xLabelFormatter(d3, h3);
          return void 0 !== a3.config.tooltip.x.formatter && (r3 = a3.globals.ttKeyFormatter(d3, h3)), a3.globals.seriesZ.length > 0 && a3.globals.seriesZ[e3].length > 0 && (n3 = c3(a3.globals.seriesZ[e3][i3], a3)), o3 = "function" == typeof a3.config.xaxis.tooltip.formatter ? a3.globals.xaxisTooltipFormatter(d3, h3) : r3, { val: Array.isArray(l3) ? l3.join(" ") : l3, xVal: Array.isArray(r3) ? r3.join(" ") : r3, xAxisTTVal: Array.isArray(o3) ? o3.join(" ") : o3, zVal: n3 };
        } }, { key: "handleCustomTooltip", value: function(t4) {
          var e3 = t4.i, i3 = t4.j, a3 = t4.y1, s3 = t4.y2, r3 = t4.w, o3 = this.ttCtx.getElTooltip(), n3 = r3.config.tooltip.custom;
          Array.isArray(n3) && n3[e3] && (n3 = n3[e3]), o3.innerHTML = n3({ ctx: this.ctx, series: r3.globals.series, seriesIndex: e3, dataPointIndex: i3, y1: a3, y2: s3, w: r3 });
        } }]), t3;
      }();
      var ut2 = function() {
        function t3(e3) {
          a2(this, t3), this.ttCtx = e3, this.ctx = e3.ctx, this.w = e3.w;
        }
        return r2(t3, [{ key: "moveXCrosshairs", value: function(t4) {
          var e3 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : null, i3 = this.ttCtx, a3 = this.w, s3 = i3.getElXCrosshairs(), r3 = t4 - i3.xcrosshairsWidth / 2, o3 = a3.globals.labels.slice().length;
          if (null !== e3 && (r3 = a3.globals.gridWidth / o3 * e3), null === s3 || a3.globals.isBarHorizontal || (s3.setAttribute("x", r3), s3.setAttribute("x1", r3), s3.setAttribute("x2", r3), s3.setAttribute("y2", a3.globals.gridHeight), s3.classList.add("apexcharts-active")), r3 < 0 && (r3 = 0), r3 > a3.globals.gridWidth && (r3 = a3.globals.gridWidth), i3.isXAxisTooltipEnabled) {
            var n3 = r3;
            "tickWidth" !== a3.config.xaxis.crosshairs.width && "barWidth" !== a3.config.xaxis.crosshairs.width || (n3 = r3 + i3.xcrosshairsWidth / 2), this.moveXAxisTooltip(n3);
          }
        } }, { key: "moveYCrosshairs", value: function(t4) {
          var e3 = this.ttCtx;
          null !== e3.ycrosshairs && m2.setAttrs(e3.ycrosshairs, { y1: t4, y2: t4 }), null !== e3.ycrosshairsHidden && m2.setAttrs(e3.ycrosshairsHidden, { y1: t4, y2: t4 });
        } }, { key: "moveXAxisTooltip", value: function(t4) {
          var e3 = this.w, i3 = this.ttCtx;
          if (null !== i3.xaxisTooltip && 0 !== i3.xcrosshairsWidth) {
            i3.xaxisTooltip.classList.add("apexcharts-active");
            var a3 = i3.xaxisOffY + e3.config.xaxis.tooltip.offsetY + e3.globals.translateY + 1 + e3.config.xaxis.offsetY;
            if (t4 -= i3.xaxisTooltip.getBoundingClientRect().width / 2, !isNaN(t4)) {
              t4 += e3.globals.translateX;
              var s3;
              s3 = new m2(this.ctx).getTextRects(i3.xaxisTooltipText.innerHTML), i3.xaxisTooltipText.style.minWidth = s3.width + "px", i3.xaxisTooltip.style.left = t4 + "px", i3.xaxisTooltip.style.top = a3 + "px";
            }
          }
        } }, { key: "moveYAxisTooltip", value: function(t4) {
          var e3 = this.w, i3 = this.ttCtx;
          null === i3.yaxisTTEls && (i3.yaxisTTEls = e3.globals.dom.baseEl.querySelectorAll(".apexcharts-yaxistooltip"));
          var a3 = parseInt(i3.ycrosshairsHidden.getAttribute("y1"), 10), s3 = e3.globals.translateY + a3, r3 = i3.yaxisTTEls[t4].getBoundingClientRect().height, o3 = e3.globals.translateYAxisX[t4] - 2;
          e3.config.yaxis[t4].opposite && (o3 -= 26), s3 -= r3 / 2, -1 === e3.globals.ignoreYAxisIndexes.indexOf(t4) ? (i3.yaxisTTEls[t4].classList.add("apexcharts-active"), i3.yaxisTTEls[t4].style.top = s3 + "px", i3.yaxisTTEls[t4].style.left = o3 + e3.config.yaxis[t4].tooltip.offsetX + "px") : i3.yaxisTTEls[t4].classList.remove("apexcharts-active");
        } }, { key: "moveTooltip", value: function(t4, e3) {
          var i3 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : null, a3 = this.w, s3 = this.ttCtx, r3 = s3.getElTooltip(), o3 = s3.tooltipRect, n3 = null !== i3 ? parseFloat(i3) : 1, l3 = parseFloat(t4) + n3 + 5, h3 = parseFloat(e3) + n3 / 2;
          if (l3 > a3.globals.gridWidth / 2 && (l3 = l3 - o3.ttWidth - n3 - 10), l3 > a3.globals.gridWidth - o3.ttWidth - 10 && (l3 = a3.globals.gridWidth - o3.ttWidth), l3 < -20 && (l3 = -20), a3.config.tooltip.followCursor) {
            var c3 = s3.getElGrid().getBoundingClientRect();
            (l3 = s3.e.clientX - c3.left) > a3.globals.gridWidth / 2 && (l3 -= s3.tooltipRect.ttWidth), (h3 = s3.e.clientY + a3.globals.translateY - c3.top) > a3.globals.gridHeight / 2 && (h3 -= s3.tooltipRect.ttHeight);
          } else
            a3.globals.isBarHorizontal || o3.ttHeight / 2 + h3 > a3.globals.gridHeight && (h3 = a3.globals.gridHeight - o3.ttHeight + a3.globals.translateY);
          isNaN(l3) || (l3 += a3.globals.translateX, r3.style.left = l3 + "px", r3.style.top = h3 + "px");
        } }, { key: "moveMarkers", value: function(t4, e3) {
          var i3 = this.w, a3 = this.ttCtx;
          if (i3.globals.markers.size[t4] > 0)
            for (var s3 = i3.globals.dom.baseEl.querySelectorAll(" .apexcharts-series[data\\:realIndex='".concat(t4, "'] .apexcharts-marker")), r3 = 0; r3 < s3.length; r3++)
              parseInt(s3[r3].getAttribute("rel"), 10) === e3 && (a3.marker.resetPointsSize(), a3.marker.enlargeCurrentPoint(e3, s3[r3]));
          else
            a3.marker.resetPointsSize(), this.moveDynamicPointOnHover(e3, t4);
        } }, { key: "moveDynamicPointOnHover", value: function(t4, e3) {
          var i3, a3, s3 = this.w, r3 = this.ttCtx, o3 = s3.globals.pointsArray, n3 = r3.tooltipUtil.getHoverMarkerSize(e3), l3 = s3.config.series[e3].type;
          if (!l3 || "column" !== l3 && "candlestick" !== l3 && "boxPlot" !== l3) {
            i3 = o3[e3][t4][0], a3 = o3[e3][t4][1] ? o3[e3][t4][1] : 0;
            var h3 = s3.globals.dom.baseEl.querySelector(".apexcharts-series[data\\:realIndex='".concat(e3, "'] .apexcharts-series-markers circle"));
            h3 && a3 < s3.globals.gridHeight && a3 > 0 && (h3.setAttribute("r", n3), h3.setAttribute("cx", i3), h3.setAttribute("cy", a3)), this.moveXCrosshairs(i3), r3.fixedTooltip || this.moveTooltip(i3, a3, n3);
          }
        } }, { key: "moveDynamicPointsOnHover", value: function(t4) {
          var e3, i3 = this.ttCtx, a3 = i3.w, s3 = 0, r3 = 0, o3 = a3.globals.pointsArray;
          e3 = new N2(this.ctx).getActiveConfigSeriesIndex("asc", ["line", "area", "scatter", "bubble"]);
          var n3 = i3.tooltipUtil.getHoverMarkerSize(e3);
          o3[e3] && (s3 = o3[e3][t4][0], r3 = o3[e3][t4][1]);
          var l3 = i3.tooltipUtil.getAllMarkers();
          if (null !== l3)
            for (var h3 = 0; h3 < a3.globals.series.length; h3++) {
              var c3 = o3[h3];
              if (a3.globals.comboCharts && void 0 === c3 && l3.splice(h3, 0, null), c3 && c3.length) {
                var d3 = o3[h3][t4][1], g3 = void 0;
                if (l3[h3].setAttribute("cx", s3), "rangeArea" === a3.config.chart.type && !a3.globals.comboCharts) {
                  var u3 = t4 + a3.globals.series[h3].length;
                  g3 = o3[h3][u3][1], d3 -= Math.abs(d3 - g3) / 2;
                }
                null !== d3 && !isNaN(d3) && d3 < a3.globals.gridHeight + n3 && d3 + n3 > 0 ? (l3[h3] && l3[h3].setAttribute("r", n3), l3[h3] && l3[h3].setAttribute("cy", d3)) : l3[h3] && l3[h3].setAttribute("r", 0);
              }
            }
          this.moveXCrosshairs(s3), i3.fixedTooltip || this.moveTooltip(s3, r3 || a3.globals.gridHeight, n3);
        } }, { key: "moveStickyTooltipOverBars", value: function(t4, e3) {
          var i3 = this.w, a3 = this.ttCtx, s3 = i3.globals.columnSeries ? i3.globals.columnSeries.length : i3.globals.series.length, r3 = s3 >= 2 && s3 % 2 == 0 ? Math.floor(s3 / 2) : Math.floor(s3 / 2) + 1;
          i3.globals.isBarHorizontal && (r3 = new N2(this.ctx).getActiveConfigSeriesIndex("desc") + 1);
          var o3 = i3.globals.dom.baseEl.querySelector(".apexcharts-bar-series .apexcharts-series[rel='".concat(r3, "'] path[j='").concat(t4, "'], .apexcharts-candlestick-series .apexcharts-series[rel='").concat(r3, "'] path[j='").concat(t4, "'], .apexcharts-boxPlot-series .apexcharts-series[rel='").concat(r3, "'] path[j='").concat(t4, "'], .apexcharts-rangebar-series .apexcharts-series[rel='").concat(r3, "'] path[j='").concat(t4, "']"));
          o3 || "number" != typeof e3 || (o3 = i3.globals.dom.baseEl.querySelector(".apexcharts-bar-series .apexcharts-series[data\\:realIndex='".concat(e3, "'] path[j='").concat(t4, "'],\n        .apexcharts-candlestick-series .apexcharts-series[data\\:realIndex='").concat(e3, "'] path[j='").concat(t4, "'],\n        .apexcharts-boxPlot-series .apexcharts-series[data\\:realIndex='").concat(e3, "'] path[j='").concat(t4, "'],\n        .apexcharts-rangebar-series .apexcharts-series[data\\:realIndex='").concat(e3, "'] path[j='").concat(t4, "']")));
          var n3 = o3 ? parseFloat(o3.getAttribute("cx")) : 0, l3 = o3 ? parseFloat(o3.getAttribute("cy")) : 0, h3 = o3 ? parseFloat(o3.getAttribute("barWidth")) : 0, c3 = a3.getElGrid().getBoundingClientRect(), d3 = o3 && (o3.classList.contains("apexcharts-candlestick-area") || o3.classList.contains("apexcharts-boxPlot-area"));
          i3.globals.isXNumeric ? (o3 && !d3 && (n3 -= s3 % 2 != 0 ? h3 / 2 : 0), o3 && d3 && i3.globals.comboCharts && (n3 -= h3 / 2)) : i3.globals.isBarHorizontal || (n3 = a3.xAxisTicksPositions[t4 - 1] + a3.dataPointsDividedWidth / 2, isNaN(n3) && (n3 = a3.xAxisTicksPositions[t4] - a3.dataPointsDividedWidth / 2)), i3.globals.isBarHorizontal ? l3 -= a3.tooltipRect.ttHeight : i3.config.tooltip.followCursor ? l3 = a3.e.clientY - c3.top - a3.tooltipRect.ttHeight / 2 : l3 + a3.tooltipRect.ttHeight + 15 > i3.globals.gridHeight && (l3 = i3.globals.gridHeight), i3.globals.isBarHorizontal || this.moveXCrosshairs(n3), a3.fixedTooltip || this.moveTooltip(n3, l3 || i3.globals.gridHeight);
        } }]), t3;
      }();
      var pt2 = function() {
        function t3(e3) {
          a2(this, t3), this.w = e3.w, this.ttCtx = e3, this.ctx = e3.ctx, this.tooltipPosition = new ut2(e3);
        }
        return r2(t3, [{ key: "drawDynamicPoints", value: function() {
          var t4 = this.w, e3 = new m2(this.ctx), i3 = new H2(this.ctx), a3 = t4.globals.dom.baseEl.querySelectorAll(".apexcharts-series");
          a3 = u2(a3), t4.config.chart.stacked && a3.sort(function(t5, e4) {
            return parseFloat(t5.getAttribute("data:realIndex")) - parseFloat(e4.getAttribute("data:realIndex"));
          });
          for (var s3 = 0; s3 < a3.length; s3++) {
            var r3 = a3[s3].querySelector(".apexcharts-series-markers-wrap");
            if (null !== r3) {
              var o3 = void 0, n3 = "apexcharts-marker w".concat((Math.random() + 1).toString(36).substring(4));
              "line" !== t4.config.chart.type && "area" !== t4.config.chart.type || t4.globals.comboCharts || t4.config.tooltip.intersect || (n3 += " no-pointer-events");
              var l3 = i3.getMarkerConfig({ cssClass: n3, seriesIndex: Number(r3.getAttribute("data:realIndex")) });
              (o3 = e3.drawMarker(0, 0, l3)).node.setAttribute("default-marker-size", 0);
              var h3 = document.createElementNS(t4.globals.SVGNS, "g");
              h3.classList.add("apexcharts-series-markers"), h3.appendChild(o3.node), r3.appendChild(h3);
            }
          }
        } }, { key: "enlargeCurrentPoint", value: function(t4, e3) {
          var i3 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : null, a3 = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : null, s3 = this.w;
          "bubble" !== s3.config.chart.type && this.newPointSize(t4, e3);
          var r3 = e3.getAttribute("cx"), o3 = e3.getAttribute("cy");
          if (null !== i3 && null !== a3 && (r3 = i3, o3 = a3), this.tooltipPosition.moveXCrosshairs(r3), !this.fixedTooltip) {
            if ("radar" === s3.config.chart.type) {
              var n3 = this.ttCtx.getElGrid().getBoundingClientRect();
              r3 = this.ttCtx.e.clientX - n3.left;
            }
            this.tooltipPosition.moveTooltip(r3, o3, s3.config.markers.hover.size);
          }
        } }, { key: "enlargePoints", value: function(t4) {
          for (var e3 = this.w, i3 = this, a3 = this.ttCtx, s3 = t4, r3 = e3.globals.dom.baseEl.querySelectorAll(".apexcharts-series:not(.apexcharts-series-collapsed) .apexcharts-marker"), o3 = e3.config.markers.hover.size, n3 = 0; n3 < r3.length; n3++) {
            var l3 = r3[n3].getAttribute("rel"), h3 = r3[n3].getAttribute("index");
            if (void 0 === o3 && (o3 = e3.globals.markers.size[h3] + e3.config.markers.hover.sizeOffset), s3 === parseInt(l3, 10)) {
              i3.newPointSize(s3, r3[n3]);
              var c3 = r3[n3].getAttribute("cx"), d3 = r3[n3].getAttribute("cy");
              i3.tooltipPosition.moveXCrosshairs(c3), a3.fixedTooltip || i3.tooltipPosition.moveTooltip(c3, d3, o3);
            } else
              i3.oldPointSize(r3[n3]);
          }
        } }, { key: "newPointSize", value: function(t4, e3) {
          var i3 = this.w, a3 = i3.config.markers.hover.size, s3 = 0 === t4 ? e3.parentNode.firstChild : e3.parentNode.lastChild;
          if ("0" !== s3.getAttribute("default-marker-size")) {
            var r3 = parseInt(s3.getAttribute("index"), 10);
            void 0 === a3 && (a3 = i3.globals.markers.size[r3] + i3.config.markers.hover.sizeOffset), a3 < 0 && (a3 = 0), s3.setAttribute("r", a3);
          }
        } }, { key: "oldPointSize", value: function(t4) {
          var e3 = parseFloat(t4.getAttribute("default-marker-size"));
          t4.setAttribute("r", e3);
        } }, { key: "resetPointsSize", value: function() {
          for (var t4 = this.w.globals.dom.baseEl.querySelectorAll(".apexcharts-series:not(.apexcharts-series-collapsed) .apexcharts-marker"), e3 = 0; e3 < t4.length; e3++) {
            var i3 = parseFloat(t4[e3].getAttribute("default-marker-size"));
            x2.isNumber(i3) && i3 >= 0 ? t4[e3].setAttribute("r", i3) : t4[e3].setAttribute("r", 0);
          }
        } }]), t3;
      }();
      var ft2 = function() {
        function t3(e3) {
          a2(this, t3), this.w = e3.w;
          var i3 = this.w;
          this.ttCtx = e3, this.isVerticalGroupedRangeBar = !i3.globals.isBarHorizontal && "rangeBar" === i3.config.chart.type && i3.config.plotOptions.bar.rangeBarGroupRows;
        }
        return r2(t3, [{ key: "getAttr", value: function(t4, e3) {
          return parseFloat(t4.target.getAttribute(e3));
        } }, { key: "handleHeatTreeTooltip", value: function(t4) {
          var e3 = t4.e, i3 = t4.opt, a3 = t4.x, s3 = t4.y, r3 = t4.type, o3 = this.ttCtx, n3 = this.w;
          if (e3.target.classList.contains("apexcharts-".concat(r3, "-rect"))) {
            var l3 = this.getAttr(e3, "i"), h3 = this.getAttr(e3, "j"), c3 = this.getAttr(e3, "cx"), d3 = this.getAttr(e3, "cy"), g3 = this.getAttr(e3, "width"), u3 = this.getAttr(e3, "height");
            if (o3.tooltipLabels.drawSeriesTexts({ ttItems: i3.ttItems, i: l3, j: h3, shared: false, e: e3 }), n3.globals.capturedSeriesIndex = l3, n3.globals.capturedDataPointIndex = h3, a3 = c3 + o3.tooltipRect.ttWidth / 2 + g3, s3 = d3 + o3.tooltipRect.ttHeight / 2 - u3 / 2, o3.tooltipPosition.moveXCrosshairs(c3 + g3 / 2), a3 > n3.globals.gridWidth / 2 && (a3 = c3 - o3.tooltipRect.ttWidth / 2 + g3), o3.w.config.tooltip.followCursor) {
              var p3 = n3.globals.dom.elWrap.getBoundingClientRect();
              a3 = n3.globals.clientX - p3.left - (a3 > n3.globals.gridWidth / 2 ? o3.tooltipRect.ttWidth : 0), s3 = n3.globals.clientY - p3.top - (s3 > n3.globals.gridHeight / 2 ? o3.tooltipRect.ttHeight : 0);
            }
          }
          return { x: a3, y: s3 };
        } }, { key: "handleMarkerTooltip", value: function(t4) {
          var e3, i3, a3 = t4.e, s3 = t4.opt, r3 = t4.x, o3 = t4.y, n3 = this.w, l3 = this.ttCtx;
          if (a3.target.classList.contains("apexcharts-marker")) {
            var h3 = parseInt(s3.paths.getAttribute("cx"), 10), c3 = parseInt(s3.paths.getAttribute("cy"), 10), d3 = parseFloat(s3.paths.getAttribute("val"));
            if (i3 = parseInt(s3.paths.getAttribute("rel"), 10), e3 = parseInt(s3.paths.parentNode.parentNode.parentNode.getAttribute("rel"), 10) - 1, l3.intersect) {
              var g3 = x2.findAncestor(s3.paths, "apexcharts-series");
              g3 && (e3 = parseInt(g3.getAttribute("data:realIndex"), 10));
            }
            if (l3.tooltipLabels.drawSeriesTexts({ ttItems: s3.ttItems, i: e3, j: i3, shared: !l3.showOnIntersect && n3.config.tooltip.shared, e: a3 }), "mouseup" === a3.type && l3.markerClick(a3, e3, i3), n3.globals.capturedSeriesIndex = e3, n3.globals.capturedDataPointIndex = i3, r3 = h3, o3 = c3 + n3.globals.translateY - 1.4 * l3.tooltipRect.ttHeight, l3.w.config.tooltip.followCursor) {
              var u3 = l3.getElGrid().getBoundingClientRect();
              o3 = l3.e.clientY + n3.globals.translateY - u3.top;
            }
            d3 < 0 && (o3 = c3), l3.marker.enlargeCurrentPoint(i3, s3.paths, r3, o3);
          }
          return { x: r3, y: o3 };
        } }, { key: "handleBarTooltip", value: function(t4) {
          var e3, i3, a3 = t4.e, s3 = t4.opt, r3 = this.w, o3 = this.ttCtx, n3 = o3.getElTooltip(), l3 = 0, h3 = 0, c3 = 0, d3 = this.getBarTooltipXY({ e: a3, opt: s3 });
          e3 = d3.i;
          var g3 = d3.barHeight, u3 = d3.j;
          r3.globals.capturedSeriesIndex = e3, r3.globals.capturedDataPointIndex = u3, r3.globals.isBarHorizontal && o3.tooltipUtil.hasBars() || !r3.config.tooltip.shared ? (h3 = d3.x, c3 = d3.y, i3 = Array.isArray(r3.config.stroke.width) ? r3.config.stroke.width[e3] : r3.config.stroke.width, l3 = h3) : r3.globals.comboCharts || r3.config.tooltip.shared || (l3 /= 2), isNaN(c3) && (c3 = r3.globals.svgHeight - o3.tooltipRect.ttHeight);
          var p3 = parseInt(s3.paths.parentNode.getAttribute("data:realIndex"), 10), f3 = r3.globals.isMultipleYAxis ? r3.config.yaxis[p3] && r3.config.yaxis[p3].reversed : r3.config.yaxis[0].reversed;
          if (h3 + o3.tooltipRect.ttWidth > r3.globals.gridWidth && !f3 ? h3 -= o3.tooltipRect.ttWidth : h3 < 0 && (h3 = 0), o3.w.config.tooltip.followCursor) {
            var x3 = o3.getElGrid().getBoundingClientRect();
            c3 = o3.e.clientY - x3.top;
          }
          null === o3.tooltip && (o3.tooltip = r3.globals.dom.baseEl.querySelector(".apexcharts-tooltip")), r3.config.tooltip.shared || (r3.globals.comboBarCount > 0 ? o3.tooltipPosition.moveXCrosshairs(l3 + i3 / 2) : o3.tooltipPosition.moveXCrosshairs(l3)), !o3.fixedTooltip && (!r3.config.tooltip.shared || r3.globals.isBarHorizontal && o3.tooltipUtil.hasBars()) && (f3 && (h3 -= o3.tooltipRect.ttWidth) < 0 && (h3 = 0), !f3 || r3.globals.isBarHorizontal && o3.tooltipUtil.hasBars() || (c3 = c3 + g3 - 2 * (r3.globals.series[e3][u3] < 0 ? g3 : 0)), c3 = c3 + r3.globals.translateY - o3.tooltipRect.ttHeight / 2, n3.style.left = h3 + r3.globals.translateX + "px", n3.style.top = c3 + "px");
        } }, { key: "getBarTooltipXY", value: function(t4) {
          var e3 = this, i3 = t4.e, a3 = t4.opt, s3 = this.w, r3 = null, o3 = this.ttCtx, n3 = 0, l3 = 0, h3 = 0, c3 = 0, d3 = 0, g3 = i3.target.classList;
          if (g3.contains("apexcharts-bar-area") || g3.contains("apexcharts-candlestick-area") || g3.contains("apexcharts-boxPlot-area") || g3.contains("apexcharts-rangebar-area")) {
            var u3 = i3.target, p3 = u3.getBoundingClientRect(), f3 = a3.elGrid.getBoundingClientRect(), x3 = p3.height;
            d3 = p3.height;
            var b3 = p3.width, v3 = parseInt(u3.getAttribute("cx"), 10), m3 = parseInt(u3.getAttribute("cy"), 10);
            c3 = parseFloat(u3.getAttribute("barWidth"));
            var y3 = "touchmove" === i3.type ? i3.touches[0].clientX : i3.clientX;
            r3 = parseInt(u3.getAttribute("j"), 10), n3 = parseInt(u3.parentNode.getAttribute("rel"), 10) - 1;
            var w3 = u3.getAttribute("data-range-y1"), k3 = u3.getAttribute("data-range-y2");
            s3.globals.comboCharts && (n3 = parseInt(u3.parentNode.getAttribute("data:realIndex"), 10));
            var A3 = function(t5) {
              return s3.globals.isXNumeric ? v3 - b3 / 2 : e3.isVerticalGroupedRangeBar ? v3 + b3 / 2 : v3 - o3.dataPointsDividedWidth + b3 / 2;
            }, S3 = function() {
              return m3 - o3.dataPointsDividedHeight + x3 / 2 - o3.tooltipRect.ttHeight / 2;
            };
            o3.tooltipLabels.drawSeriesTexts({ ttItems: a3.ttItems, i: n3, j: r3, y1: w3 ? parseInt(w3, 10) : null, y2: k3 ? parseInt(k3, 10) : null, shared: !o3.showOnIntersect && s3.config.tooltip.shared, e: i3 }), s3.config.tooltip.followCursor ? s3.globals.isBarHorizontal ? (l3 = y3 - f3.left + 15, h3 = S3()) : (l3 = A3(), h3 = i3.clientY - f3.top - o3.tooltipRect.ttHeight / 2 - 15) : s3.globals.isBarHorizontal ? ((l3 = v3) < o3.xyRatios.baseLineInvertedY && (l3 = v3 - o3.tooltipRect.ttWidth), h3 = S3()) : (l3 = A3(), h3 = m3);
          }
          return { x: l3, y: h3, barHeight: d3, barWidth: c3, i: n3, j: r3 };
        } }]), t3;
      }();
      var xt2 = function() {
        function t3(e3) {
          a2(this, t3), this.w = e3.w, this.ttCtx = e3;
        }
        return r2(t3, [{ key: "drawXaxisTooltip", value: function() {
          var t4 = this.w, e3 = this.ttCtx, i3 = "bottom" === t4.config.xaxis.position;
          e3.xaxisOffY = i3 ? t4.globals.gridHeight + 1 : -t4.globals.xAxisHeight - t4.config.xaxis.axisTicks.height + 3;
          var a3 = i3 ? "apexcharts-xaxistooltip apexcharts-xaxistooltip-bottom" : "apexcharts-xaxistooltip apexcharts-xaxistooltip-top", s3 = t4.globals.dom.elWrap;
          e3.isXAxisTooltipEnabled && (null === t4.globals.dom.baseEl.querySelector(".apexcharts-xaxistooltip") && (e3.xaxisTooltip = document.createElement("div"), e3.xaxisTooltip.setAttribute("class", a3 + " apexcharts-theme-" + t4.config.tooltip.theme), s3.appendChild(e3.xaxisTooltip), e3.xaxisTooltipText = document.createElement("div"), e3.xaxisTooltipText.classList.add("apexcharts-xaxistooltip-text"), e3.xaxisTooltipText.style.fontFamily = t4.config.xaxis.tooltip.style.fontFamily || t4.config.chart.fontFamily, e3.xaxisTooltipText.style.fontSize = t4.config.xaxis.tooltip.style.fontSize, e3.xaxisTooltip.appendChild(e3.xaxisTooltipText)));
        } }, { key: "drawYaxisTooltip", value: function() {
          for (var t4 = this.w, e3 = this.ttCtx, i3 = function(i4) {
            var a4 = t4.config.yaxis[i4].opposite || t4.config.yaxis[i4].crosshairs.opposite;
            e3.yaxisOffX = a4 ? t4.globals.gridWidth + 1 : 1;
            var s3 = "apexcharts-yaxistooltip apexcharts-yaxistooltip-".concat(i4, a4 ? " apexcharts-yaxistooltip-right" : " apexcharts-yaxistooltip-left");
            t4.globals.yAxisSameScaleIndices.map(function(e4, a5) {
              e4.map(function(e5, a6) {
                a6 === i4 && (s3 += t4.config.yaxis[a6].show ? " " : " apexcharts-yaxistooltip-hidden");
              });
            });
            var r3 = t4.globals.dom.elWrap;
            null === t4.globals.dom.baseEl.querySelector(".apexcharts-yaxistooltip apexcharts-yaxistooltip-".concat(i4)) && (e3.yaxisTooltip = document.createElement("div"), e3.yaxisTooltip.setAttribute("class", s3 + " apexcharts-theme-" + t4.config.tooltip.theme), r3.appendChild(e3.yaxisTooltip), 0 === i4 && (e3.yaxisTooltipText = []), e3.yaxisTooltipText[i4] = document.createElement("div"), e3.yaxisTooltipText[i4].classList.add("apexcharts-yaxistooltip-text"), e3.yaxisTooltip.appendChild(e3.yaxisTooltipText[i4]));
          }, a3 = 0; a3 < t4.config.yaxis.length; a3++)
            i3(a3);
        } }, { key: "setXCrosshairWidth", value: function() {
          var t4 = this.w, e3 = this.ttCtx, i3 = e3.getElXCrosshairs();
          if (e3.xcrosshairsWidth = parseInt(t4.config.xaxis.crosshairs.width, 10), t4.globals.comboCharts) {
            var a3 = t4.globals.dom.baseEl.querySelector(".apexcharts-bar-area");
            if (null !== a3 && "barWidth" === t4.config.xaxis.crosshairs.width) {
              var s3 = parseFloat(a3.getAttribute("barWidth"));
              e3.xcrosshairsWidth = s3;
            } else if ("tickWidth" === t4.config.xaxis.crosshairs.width) {
              var r3 = t4.globals.labels.length;
              e3.xcrosshairsWidth = t4.globals.gridWidth / r3;
            }
          } else if ("tickWidth" === t4.config.xaxis.crosshairs.width) {
            var o3 = t4.globals.labels.length;
            e3.xcrosshairsWidth = t4.globals.gridWidth / o3;
          } else if ("barWidth" === t4.config.xaxis.crosshairs.width) {
            var n3 = t4.globals.dom.baseEl.querySelector(".apexcharts-bar-area");
            if (null !== n3) {
              var l3 = parseFloat(n3.getAttribute("barWidth"));
              e3.xcrosshairsWidth = l3;
            } else
              e3.xcrosshairsWidth = 1;
          }
          t4.globals.isBarHorizontal && (e3.xcrosshairsWidth = 0), null !== i3 && e3.xcrosshairsWidth > 0 && i3.setAttribute("width", e3.xcrosshairsWidth);
        } }, { key: "handleYCrosshair", value: function() {
          var t4 = this.w, e3 = this.ttCtx;
          e3.ycrosshairs = t4.globals.dom.baseEl.querySelector(".apexcharts-ycrosshairs"), e3.ycrosshairsHidden = t4.globals.dom.baseEl.querySelector(".apexcharts-ycrosshairs-hidden");
        } }, { key: "drawYaxisTooltipText", value: function(t4, e3, i3) {
          var a3 = this.ttCtx, s3 = this.w, r3 = s3.globals.yLabelFormatters[t4];
          if (a3.yaxisTooltips[t4]) {
            var o3 = a3.getElGrid().getBoundingClientRect(), n3 = (e3 - o3.top) * i3.yRatio[t4], l3 = s3.globals.maxYArr[t4] - s3.globals.minYArr[t4], h3 = s3.globals.minYArr[t4] + (l3 - n3);
            a3.tooltipPosition.moveYCrosshairs(e3 - o3.top), a3.yaxisTooltipText[t4].innerHTML = r3(h3), a3.tooltipPosition.moveYAxisTooltip(t4);
          }
        } }]), t3;
      }();
      var bt2 = function() {
        function t3(e3) {
          a2(this, t3), this.ctx = e3, this.w = e3.w;
          var i3 = this.w;
          this.tConfig = i3.config.tooltip, this.tooltipUtil = new dt2(this), this.tooltipLabels = new gt2(this), this.tooltipPosition = new ut2(this), this.marker = new pt2(this), this.intersect = new ft2(this), this.axesTooltip = new xt2(this), this.showOnIntersect = this.tConfig.intersect, this.showTooltipTitle = this.tConfig.x.show, this.fixedTooltip = this.tConfig.fixed.enabled, this.xaxisTooltip = null, this.yaxisTTEls = null, this.isBarShared = !i3.globals.isBarHorizontal && this.tConfig.shared, this.lastHoverTime = Date.now();
        }
        return r2(t3, [{ key: "getElTooltip", value: function(t4) {
          return t4 || (t4 = this), t4.w.globals.dom.baseEl ? t4.w.globals.dom.baseEl.querySelector(".apexcharts-tooltip") : null;
        } }, { key: "getElXCrosshairs", value: function() {
          return this.w.globals.dom.baseEl.querySelector(".apexcharts-xcrosshairs");
        } }, { key: "getElGrid", value: function() {
          return this.w.globals.dom.baseEl.querySelector(".apexcharts-grid");
        } }, { key: "drawTooltip", value: function(t4) {
          var e3 = this.w;
          this.xyRatios = t4, this.isXAxisTooltipEnabled = e3.config.xaxis.tooltip.enabled && e3.globals.axisCharts, this.yaxisTooltips = e3.config.yaxis.map(function(t5, i4) {
            return !!(t5.show && t5.tooltip.enabled && e3.globals.axisCharts);
          }), this.allTooltipSeriesGroups = [], e3.globals.axisCharts || (this.showTooltipTitle = false);
          var i3 = document.createElement("div");
          if (i3.classList.add("apexcharts-tooltip"), e3.config.tooltip.cssClass && i3.classList.add(e3.config.tooltip.cssClass), i3.classList.add("apexcharts-theme-".concat(this.tConfig.theme)), e3.globals.dom.elWrap.appendChild(i3), e3.globals.axisCharts) {
            this.axesTooltip.drawXaxisTooltip(), this.axesTooltip.drawYaxisTooltip(), this.axesTooltip.setXCrosshairWidth(), this.axesTooltip.handleYCrosshair();
            var a3 = new V2(this.ctx);
            this.xAxisTicksPositions = a3.getXAxisTicksPositions();
          }
          if (!e3.globals.comboCharts && !this.tConfig.intersect && "rangeBar" !== e3.config.chart.type || this.tConfig.shared || (this.showOnIntersect = true), 0 !== e3.config.markers.size && 0 !== e3.globals.markers.largestSize || this.marker.drawDynamicPoints(this), e3.globals.collapsedSeries.length !== e3.globals.series.length) {
            this.dataPointsDividedHeight = e3.globals.gridHeight / e3.globals.dataPoints, this.dataPointsDividedWidth = e3.globals.gridWidth / e3.globals.dataPoints, this.showTooltipTitle && (this.tooltipTitle = document.createElement("div"), this.tooltipTitle.classList.add("apexcharts-tooltip-title"), this.tooltipTitle.style.fontFamily = this.tConfig.style.fontFamily || e3.config.chart.fontFamily, this.tooltipTitle.style.fontSize = this.tConfig.style.fontSize, i3.appendChild(this.tooltipTitle));
            var s3 = e3.globals.series.length;
            (e3.globals.xyCharts || e3.globals.comboCharts) && this.tConfig.shared && (s3 = this.showOnIntersect ? 1 : e3.globals.series.length), this.legendLabels = e3.globals.dom.baseEl.querySelectorAll(".apexcharts-legend-text"), this.ttItems = this.createTTElements(s3), this.addSVGEvents();
          }
        } }, { key: "createTTElements", value: function(t4) {
          for (var e3 = this, i3 = this.w, a3 = [], s3 = this.getElTooltip(), r3 = function(r4) {
            var o4 = document.createElement("div");
            o4.classList.add("apexcharts-tooltip-series-group"), o4.style.order = i3.config.tooltip.inverseOrder ? t4 - r4 : r4 + 1, e3.tConfig.shared && e3.tConfig.enabledOnSeries && Array.isArray(e3.tConfig.enabledOnSeries) && e3.tConfig.enabledOnSeries.indexOf(r4) < 0 && o4.classList.add("apexcharts-tooltip-series-group-hidden");
            var n3 = document.createElement("span");
            n3.classList.add("apexcharts-tooltip-marker"), n3.style.backgroundColor = i3.globals.colors[r4], o4.appendChild(n3);
            var l3 = document.createElement("div");
            l3.classList.add("apexcharts-tooltip-text"), l3.style.fontFamily = e3.tConfig.style.fontFamily || i3.config.chart.fontFamily, l3.style.fontSize = e3.tConfig.style.fontSize, ["y", "goals", "z"].forEach(function(t5) {
              var e4 = document.createElement("div");
              e4.classList.add("apexcharts-tooltip-".concat(t5, "-group"));
              var i4 = document.createElement("span");
              i4.classList.add("apexcharts-tooltip-text-".concat(t5, "-label")), e4.appendChild(i4);
              var a4 = document.createElement("span");
              a4.classList.add("apexcharts-tooltip-text-".concat(t5, "-value")), e4.appendChild(a4), l3.appendChild(e4);
            }), o4.appendChild(l3), s3.appendChild(o4), a3.push(o4);
          }, o3 = 0; o3 < t4; o3++)
            r3(o3);
          return a3;
        } }, { key: "addSVGEvents", value: function() {
          var t4 = this.w, e3 = t4.config.chart.type, i3 = this.getElTooltip(), a3 = !("bar" !== e3 && "candlestick" !== e3 && "boxPlot" !== e3 && "rangeBar" !== e3), s3 = "area" === e3 || "line" === e3 || "scatter" === e3 || "bubble" === e3 || "radar" === e3, r3 = t4.globals.dom.Paper.node, o3 = this.getElGrid();
          o3 && (this.seriesBound = o3.getBoundingClientRect());
          var n3, l3 = [], h3 = [], c3 = { hoverArea: r3, elGrid: o3, tooltipEl: i3, tooltipY: l3, tooltipX: h3, ttItems: this.ttItems };
          if (t4.globals.axisCharts && (s3 ? n3 = t4.globals.dom.baseEl.querySelectorAll(".apexcharts-series[data\\:longestSeries='true'] .apexcharts-marker") : a3 ? n3 = t4.globals.dom.baseEl.querySelectorAll(".apexcharts-series .apexcharts-bar-area, .apexcharts-series .apexcharts-candlestick-area, .apexcharts-series .apexcharts-boxPlot-area, .apexcharts-series .apexcharts-rangebar-area") : "heatmap" !== e3 && "treemap" !== e3 || (n3 = t4.globals.dom.baseEl.querySelectorAll(".apexcharts-series .apexcharts-heatmap, .apexcharts-series .apexcharts-treemap")), n3 && n3.length))
            for (var d3 = 0; d3 < n3.length; d3++)
              l3.push(n3[d3].getAttribute("cy")), h3.push(n3[d3].getAttribute("cx"));
          if (t4.globals.xyCharts && !this.showOnIntersect || t4.globals.comboCharts && !this.showOnIntersect || a3 && this.tooltipUtil.hasBars() && this.tConfig.shared)
            this.addPathsEventListeners([r3], c3);
          else if (a3 && !t4.globals.comboCharts || s3 && this.showOnIntersect)
            this.addDatapointEventsListeners(c3);
          else if (!t4.globals.axisCharts || "heatmap" === e3 || "treemap" === e3) {
            var g3 = t4.globals.dom.baseEl.querySelectorAll(".apexcharts-series");
            this.addPathsEventListeners(g3, c3);
          }
          if (this.showOnIntersect) {
            var u3 = t4.globals.dom.baseEl.querySelectorAll(".apexcharts-line-series .apexcharts-marker, .apexcharts-area-series .apexcharts-marker");
            u3.length > 0 && this.addPathsEventListeners(u3, c3), this.tooltipUtil.hasBars() && !this.tConfig.shared && this.addDatapointEventsListeners(c3);
          }
        } }, { key: "drawFixedTooltipRect", value: function() {
          var t4 = this.w, e3 = this.getElTooltip(), i3 = e3.getBoundingClientRect(), a3 = i3.width + 10, s3 = i3.height + 10, r3 = this.tConfig.fixed.offsetX, o3 = this.tConfig.fixed.offsetY, n3 = this.tConfig.fixed.position.toLowerCase();
          return n3.indexOf("right") > -1 && (r3 = r3 + t4.globals.svgWidth - a3 + 10), n3.indexOf("bottom") > -1 && (o3 = o3 + t4.globals.svgHeight - s3 - 10), e3.style.left = r3 + "px", e3.style.top = o3 + "px", { x: r3, y: o3, ttWidth: a3, ttHeight: s3 };
        } }, { key: "addDatapointEventsListeners", value: function(t4) {
          var e3 = this.w.globals.dom.baseEl.querySelectorAll(".apexcharts-series-markers .apexcharts-marker, .apexcharts-bar-area, .apexcharts-candlestick-area, .apexcharts-boxPlot-area, .apexcharts-rangebar-area");
          this.addPathsEventListeners(e3, t4);
        } }, { key: "addPathsEventListeners", value: function(t4, e3) {
          for (var i3 = this, a3 = function(a4) {
            var s4 = { paths: t4[a4], tooltipEl: e3.tooltipEl, tooltipY: e3.tooltipY, tooltipX: e3.tooltipX, elGrid: e3.elGrid, hoverArea: e3.hoverArea, ttItems: e3.ttItems };
            ["mousemove", "mouseup", "touchmove", "mouseout", "touchend"].map(function(e4) {
              return t4[a4].addEventListener(e4, i3.onSeriesHover.bind(i3, s4), { capture: false, passive: true });
            });
          }, s3 = 0; s3 < t4.length; s3++)
            a3(s3);
        } }, { key: "onSeriesHover", value: function(t4, e3) {
          var i3 = this, a3 = Date.now() - this.lastHoverTime;
          a3 >= 100 ? this.seriesHover(t4, e3) : (clearTimeout(this.seriesHoverTimeout), this.seriesHoverTimeout = setTimeout(function() {
            i3.seriesHover(t4, e3);
          }, 100 - a3));
        } }, { key: "seriesHover", value: function(t4, e3) {
          var i3 = this;
          this.lastHoverTime = Date.now();
          var a3 = [], s3 = this.w;
          s3.config.chart.group && (a3 = this.ctx.getGroupedCharts()), s3.globals.axisCharts && (s3.globals.minX === -1 / 0 && s3.globals.maxX === 1 / 0 || 0 === s3.globals.dataPoints) || (a3.length ? a3.forEach(function(a4) {
            var s4 = i3.getElTooltip(a4), r3 = { paths: t4.paths, tooltipEl: s4, tooltipY: t4.tooltipY, tooltipX: t4.tooltipX, elGrid: t4.elGrid, hoverArea: t4.hoverArea, ttItems: a4.w.globals.tooltip.ttItems };
            a4.w.globals.minX === i3.w.globals.minX && a4.w.globals.maxX === i3.w.globals.maxX && a4.w.globals.tooltip.seriesHoverByContext({ chartCtx: a4, ttCtx: a4.w.globals.tooltip, opt: r3, e: e3 });
          }) : this.seriesHoverByContext({ chartCtx: this.ctx, ttCtx: this.w.globals.tooltip, opt: t4, e: e3 }));
        } }, { key: "seriesHoverByContext", value: function(t4) {
          var e3 = t4.chartCtx, i3 = t4.ttCtx, a3 = t4.opt, s3 = t4.e, r3 = e3.w, o3 = this.getElTooltip();
          if (o3) {
            if (i3.tooltipRect = { x: 0, y: 0, ttWidth: o3.getBoundingClientRect().width, ttHeight: o3.getBoundingClientRect().height }, i3.e = s3, i3.tooltipUtil.hasBars() && !r3.globals.comboCharts && !i3.isBarShared) {
              if (this.tConfig.onDatasetHover.highlightDataSeries)
                new N2(e3).toggleSeriesOnHover(s3, s3.target.parentNode);
            }
            i3.fixedTooltip && i3.drawFixedTooltipRect(), r3.globals.axisCharts ? i3.axisChartsTooltips({ e: s3, opt: a3, tooltipRect: i3.tooltipRect }) : i3.nonAxisChartsTooltips({ e: s3, opt: a3, tooltipRect: i3.tooltipRect });
          }
        } }, { key: "axisChartsTooltips", value: function(t4) {
          var e3, i3, a3 = t4.e, s3 = t4.opt, r3 = this.w, o3 = s3.elGrid.getBoundingClientRect(), n3 = "touchmove" === a3.type ? a3.touches[0].clientX : a3.clientX, l3 = "touchmove" === a3.type ? a3.touches[0].clientY : a3.clientY;
          if (this.clientY = l3, this.clientX = n3, r3.globals.capturedSeriesIndex = -1, r3.globals.capturedDataPointIndex = -1, l3 < o3.top || l3 > o3.top + o3.height)
            this.handleMouseOut(s3);
          else {
            if (Array.isArray(this.tConfig.enabledOnSeries) && !r3.config.tooltip.shared) {
              var h3 = parseInt(s3.paths.getAttribute("index"), 10);
              if (this.tConfig.enabledOnSeries.indexOf(h3) < 0)
                return void this.handleMouseOut(s3);
            }
            var c3 = this.getElTooltip(), d3 = this.getElXCrosshairs(), g3 = r3.globals.xyCharts || "bar" === r3.config.chart.type && !r3.globals.isBarHorizontal && this.tooltipUtil.hasBars() && this.tConfig.shared || r3.globals.comboCharts && this.tooltipUtil.hasBars();
            if ("mousemove" === a3.type || "touchmove" === a3.type || "mouseup" === a3.type) {
              if (r3.globals.collapsedSeries.length + r3.globals.ancillaryCollapsedSeries.length === r3.globals.series.length)
                return;
              null !== d3 && d3.classList.add("apexcharts-active");
              var u3 = this.yaxisTooltips.filter(function(t5) {
                return true === t5;
              });
              if (null !== this.ycrosshairs && u3.length && this.ycrosshairs.classList.add("apexcharts-active"), g3 && !this.showOnIntersect)
                this.handleStickyTooltip(a3, n3, l3, s3);
              else if ("heatmap" === r3.config.chart.type || "treemap" === r3.config.chart.type) {
                var p3 = this.intersect.handleHeatTreeTooltip({ e: a3, opt: s3, x: e3, y: i3, type: r3.config.chart.type });
                e3 = p3.x, i3 = p3.y, c3.style.left = e3 + "px", c3.style.top = i3 + "px";
              } else
                this.tooltipUtil.hasBars() && this.intersect.handleBarTooltip({ e: a3, opt: s3 }), this.tooltipUtil.hasMarkers() && this.intersect.handleMarkerTooltip({ e: a3, opt: s3, x: e3, y: i3 });
              if (this.yaxisTooltips.length)
                for (var f3 = 0; f3 < r3.config.yaxis.length; f3++)
                  this.axesTooltip.drawYaxisTooltipText(f3, l3, this.xyRatios);
              s3.tooltipEl.classList.add("apexcharts-active");
            } else
              "mouseout" !== a3.type && "touchend" !== a3.type || this.handleMouseOut(s3);
          }
        } }, { key: "nonAxisChartsTooltips", value: function(t4) {
          var e3 = t4.e, i3 = t4.opt, a3 = t4.tooltipRect, s3 = this.w, r3 = i3.paths.getAttribute("rel"), o3 = this.getElTooltip(), n3 = s3.globals.dom.elWrap.getBoundingClientRect();
          if ("mousemove" === e3.type || "touchmove" === e3.type) {
            o3.classList.add("apexcharts-active"), this.tooltipLabels.drawSeriesTexts({ ttItems: i3.ttItems, i: parseInt(r3, 10) - 1, shared: false });
            var l3 = s3.globals.clientX - n3.left - a3.ttWidth / 2, h3 = s3.globals.clientY - n3.top - a3.ttHeight - 10;
            if (o3.style.left = l3 + "px", o3.style.top = h3 + "px", s3.config.legend.tooltipHoverFormatter) {
              var c3 = r3 - 1, d3 = (0, s3.config.legend.tooltipHoverFormatter)(this.legendLabels[c3].getAttribute("data:default-text"), { seriesIndex: c3, dataPointIndex: c3, w: s3 });
              this.legendLabels[c3].innerHTML = d3;
            }
          } else
            "mouseout" !== e3.type && "touchend" !== e3.type || (o3.classList.remove("apexcharts-active"), s3.config.legend.tooltipHoverFormatter && this.legendLabels.forEach(function(t5) {
              var e4 = t5.getAttribute("data:default-text");
              t5.innerHTML = decodeURIComponent(e4);
            }));
        } }, { key: "handleStickyTooltip", value: function(t4, e3, i3, a3) {
          var s3 = this.w, r3 = this.tooltipUtil.getNearestValues({ context: this, hoverArea: a3.hoverArea, elGrid: a3.elGrid, clientX: e3, clientY: i3 }), o3 = r3.j, n3 = r3.capturedSeries;
          s3.globals.collapsedSeriesIndices.includes(n3) && (n3 = null);
          var l3 = a3.elGrid.getBoundingClientRect();
          if (r3.hoverX < 0 || r3.hoverX > l3.width)
            this.handleMouseOut(a3);
          else if (null !== n3)
            this.handleStickyCapturedSeries(t4, n3, a3, o3);
          else if (this.tooltipUtil.isXoverlap(o3) || s3.globals.isBarHorizontal) {
            var h3 = s3.globals.series.findIndex(function(t5, e4) {
              return !s3.globals.collapsedSeriesIndices.includes(e4);
            });
            this.create(t4, this, h3, o3, a3.ttItems);
          }
        } }, { key: "handleStickyCapturedSeries", value: function(t4, e3, i3, a3) {
          var s3 = this.w;
          if (!this.tConfig.shared && null === s3.globals.series[e3][a3])
            return void this.handleMouseOut(i3);
          if (void 0 !== s3.globals.series[e3][a3])
            this.tConfig.shared && this.tooltipUtil.isXoverlap(a3) && this.tooltipUtil.isInitialSeriesSameLen() ? this.create(t4, this, e3, a3, i3.ttItems) : this.create(t4, this, e3, a3, i3.ttItems, false);
          else if (this.tooltipUtil.isXoverlap(a3)) {
            var r3 = s3.globals.series.findIndex(function(t5, e4) {
              return !s3.globals.collapsedSeriesIndices.includes(e4);
            });
            this.create(t4, this, r3, a3, i3.ttItems);
          }
        } }, { key: "deactivateHoverFilter", value: function() {
          for (var t4 = this.w, e3 = new m2(this.ctx), i3 = t4.globals.dom.Paper.select(".apexcharts-bar-area"), a3 = 0; a3 < i3.length; a3++)
            e3.pathMouseLeave(i3[a3]);
        } }, { key: "handleMouseOut", value: function(t4) {
          var e3 = this.w, i3 = this.getElXCrosshairs();
          if (t4.tooltipEl.classList.remove("apexcharts-active"), this.deactivateHoverFilter(), "bubble" !== e3.config.chart.type && this.marker.resetPointsSize(), null !== i3 && i3.classList.remove("apexcharts-active"), null !== this.ycrosshairs && this.ycrosshairs.classList.remove("apexcharts-active"), this.isXAxisTooltipEnabled && this.xaxisTooltip.classList.remove("apexcharts-active"), this.yaxisTooltips.length) {
            null === this.yaxisTTEls && (this.yaxisTTEls = e3.globals.dom.baseEl.querySelectorAll(".apexcharts-yaxistooltip"));
            for (var a3 = 0; a3 < this.yaxisTTEls.length; a3++)
              this.yaxisTTEls[a3].classList.remove("apexcharts-active");
          }
          e3.config.legend.tooltipHoverFormatter && this.legendLabels.forEach(function(t5) {
            var e4 = t5.getAttribute("data:default-text");
            t5.innerHTML = decodeURIComponent(e4);
          });
        } }, { key: "markerClick", value: function(t4, e3, i3) {
          var a3 = this.w;
          "function" == typeof a3.config.chart.events.markerClick && a3.config.chart.events.markerClick(t4, this.ctx, { seriesIndex: e3, dataPointIndex: i3, w: a3 }), this.ctx.events.fireEvent("markerClick", [t4, this.ctx, { seriesIndex: e3, dataPointIndex: i3, w: a3 }]);
        } }, { key: "create", value: function(t4, i3, a3, s3, r3) {
          var o3, n3, l3, h3, c3, d3, g3, u3, p3, f3, x3, b3, v3, y3, w3, k3, A3 = arguments.length > 5 && void 0 !== arguments[5] ? arguments[5] : null, S3 = this.w, C3 = i3;
          "mouseup" === t4.type && this.markerClick(t4, a3, s3), null === A3 && (A3 = this.tConfig.shared);
          var L3 = this.tooltipUtil.hasMarkers(a3), P3 = this.tooltipUtil.getElBars();
          if (S3.config.legend.tooltipHoverFormatter) {
            var I3 = S3.config.legend.tooltipHoverFormatter, T3 = Array.from(this.legendLabels);
            T3.forEach(function(t5) {
              var e3 = t5.getAttribute("data:default-text");
              t5.innerHTML = decodeURIComponent(e3);
            });
            for (var M3 = 0; M3 < T3.length; M3++) {
              var z3 = T3[M3], X3 = parseInt(z3.getAttribute("i"), 10), E3 = decodeURIComponent(z3.getAttribute("data:default-text")), Y3 = I3(E3, { seriesIndex: A3 ? X3 : a3, dataPointIndex: s3, w: S3 });
              if (A3)
                z3.innerHTML = S3.globals.collapsedSeriesIndices.indexOf(X3) < 0 ? Y3 : E3;
              else if (z3.innerHTML = X3 === a3 ? Y3 : E3, a3 === X3)
                break;
            }
          }
          var F3 = e2(e2({ ttItems: r3, i: a3, j: s3 }, void 0 !== (null === (o3 = S3.globals.seriesRange) || void 0 === o3 || null === (n3 = o3[a3]) || void 0 === n3 || null === (l3 = n3[s3]) || void 0 === l3 || null === (h3 = l3.y[0]) || void 0 === h3 ? void 0 : h3.y1) && { y1: null === (c3 = S3.globals.seriesRange) || void 0 === c3 || null === (d3 = c3[a3]) || void 0 === d3 || null === (g3 = d3[s3]) || void 0 === g3 || null === (u3 = g3.y[0]) || void 0 === u3 ? void 0 : u3.y1 }), void 0 !== (null === (p3 = S3.globals.seriesRange) || void 0 === p3 || null === (f3 = p3[a3]) || void 0 === f3 || null === (x3 = f3[s3]) || void 0 === x3 || null === (b3 = x3.y[0]) || void 0 === b3 ? void 0 : b3.y2) && { y2: null === (v3 = S3.globals.seriesRange) || void 0 === v3 || null === (y3 = v3[a3]) || void 0 === y3 || null === (w3 = y3[s3]) || void 0 === w3 || null === (k3 = w3.y[0]) || void 0 === k3 ? void 0 : k3.y2 });
          if (A3) {
            if (C3.tooltipLabels.drawSeriesTexts(e2(e2({}, F3), {}, { shared: !this.showOnIntersect && this.tConfig.shared })), L3)
              S3.globals.markers.largestSize > 0 ? C3.marker.enlargePoints(s3) : C3.tooltipPosition.moveDynamicPointsOnHover(s3);
            else if (this.tooltipUtil.hasBars() && (this.barSeriesHeight = this.tooltipUtil.getBarsHeight(P3), this.barSeriesHeight > 0)) {
              var R3 = new m2(this.ctx), H3 = S3.globals.dom.Paper.select(".apexcharts-bar-area[j='".concat(s3, "']"));
              this.deactivateHoverFilter(), this.tooltipPosition.moveStickyTooltipOverBars(s3, a3);
              for (var D3 = 0; D3 < H3.length; D3++)
                R3.pathMouseEnter(H3[D3]);
            }
          } else
            C3.tooltipLabels.drawSeriesTexts(e2({ shared: false }, F3)), this.tooltipUtil.hasBars() && C3.tooltipPosition.moveStickyTooltipOverBars(s3, a3), L3 && C3.tooltipPosition.moveMarkers(a3, s3);
        } }]), t3;
      }();
      var vt2 = function() {
        function t3(e3) {
          a2(this, t3), this.w = e3.w, this.barCtx = e3, this.totalFormatter = this.w.config.plotOptions.bar.dataLabels.total.formatter, this.totalFormatter || (this.totalFormatter = this.w.config.dataLabels.formatter);
        }
        return r2(t3, [{ key: "handleBarDataLabels", value: function(t4) {
          var e3 = t4.x, i3 = t4.y, a3 = t4.y1, s3 = t4.y2, r3 = t4.i, o3 = t4.j, n3 = t4.realIndex, l3 = t4.groupIndex, h3 = t4.series, c3 = t4.barHeight, d3 = t4.barWidth, g3 = t4.barXPosition, u3 = t4.barYPosition, p3 = t4.visibleSeries, f3 = t4.renderedPath, x3 = this.w, b3 = new m2(this.barCtx.ctx), v3 = Array.isArray(this.barCtx.strokeWidth) ? this.barCtx.strokeWidth[n3] : this.barCtx.strokeWidth, y3 = e3 + parseFloat(d3 * p3), w3 = i3 + parseFloat(c3 * p3);
          x3.globals.isXNumeric && !x3.globals.isBarHorizontal && (y3 = e3 + parseFloat(d3 * (p3 + 1)), w3 = i3 + parseFloat(c3 * (p3 + 1)) - v3);
          var k3, A3 = null, S3 = e3, C3 = i3, L3 = {}, P3 = x3.config.dataLabels, I3 = this.barCtx.barOptions.dataLabels, T3 = this.barCtx.barOptions.dataLabels.total;
          void 0 !== u3 && this.barCtx.isRangeBar && (w3 = u3, C3 = u3), void 0 !== g3 && this.barCtx.isVerticalGroupedRangeBar && (y3 = g3, S3 = g3);
          var M3 = P3.offsetX, z3 = P3.offsetY, X3 = { width: 0, height: 0 };
          if (x3.config.dataLabels.enabled) {
            var E3 = this.barCtx.series[r3][o3];
            X3 = b3.getTextRects(x3.globals.yLabelFormatters[0](E3), parseFloat(P3.style.fontSize));
          }
          var Y3 = { x: e3, y: i3, i: r3, j: o3, realIndex: n3, groupIndex: l3 || -1, renderedPath: f3, bcx: y3, bcy: w3, barHeight: c3, barWidth: d3, textRects: X3, strokeWidth: v3, dataLabelsX: S3, dataLabelsY: C3, dataLabelsConfig: P3, barDataLabelsConfig: I3, barTotalDataLabelsConfig: T3, offX: M3, offY: z3 };
          return L3 = this.barCtx.isHorizontal ? this.calculateBarsDataLabelsPosition(Y3) : this.calculateColumnsDataLabelsPosition(Y3), f3.attr({ cy: L3.bcy, cx: L3.bcx, j: o3, val: h3[r3][o3], barHeight: c3, barWidth: d3 }), k3 = this.drawCalculatedDataLabels({ x: L3.dataLabelsX, y: L3.dataLabelsY, val: this.barCtx.isRangeBar ? [a3, s3] : h3[r3][o3], i: n3, j: o3, barWidth: d3, barHeight: c3, textRects: X3, dataLabelsConfig: P3 }), x3.config.chart.stacked && T3.enabled && (A3 = this.drawTotalDataLabels({ x: L3.totalDataLabelsX, y: L3.totalDataLabelsY, barWidth: d3, barHeight: c3, realIndex: n3, textAnchor: L3.totalDataLabelsAnchor, val: this.getStackedTotalDataLabel({ realIndex: n3, j: o3 }), dataLabelsConfig: P3, barTotalDataLabelsConfig: T3 })), { dataLabels: k3, totalDataLabels: A3 };
        } }, { key: "getStackedTotalDataLabel", value: function(t4) {
          var i3 = t4.realIndex, a3 = t4.j, s3 = this.w, r3 = this.barCtx.stackedSeriesTotals[a3];
          return this.totalFormatter && (r3 = this.totalFormatter(r3, e2(e2({}, s3), {}, { seriesIndex: i3, dataPointIndex: a3, w: s3 }))), r3;
        } }, { key: "calculateColumnsDataLabelsPosition", value: function(t4) {
          var e3, i3, a3 = this.w, s3 = t4.i, r3 = t4.j, o3 = t4.realIndex, n3 = t4.groupIndex, l3 = t4.y, h3 = t4.bcx, c3 = t4.barWidth, d3 = t4.barHeight, g3 = t4.textRects, u3 = t4.dataLabelsX, p3 = t4.dataLabelsY, f3 = t4.dataLabelsConfig, x3 = t4.barDataLabelsConfig, b3 = t4.barTotalDataLabelsConfig, v3 = t4.strokeWidth, y3 = t4.offX, w3 = t4.offY;
          d3 = Math.abs(d3);
          var k3 = "vertical" === a3.config.plotOptions.bar.dataLabels.orientation, A3 = this.barCtx.barHelpers.getZeroValueEncounters({ i: s3, j: r3 }).zeroEncounters;
          h3 = h3 - v3 / 2 + (-1 !== n3 ? n3 * c3 : 0);
          var S3 = a3.globals.gridWidth / a3.globals.dataPoints;
          if (this.barCtx.isVerticalGroupedRangeBar ? u3 += c3 / 2 : (u3 = a3.globals.isXNumeric ? h3 - c3 / 2 + y3 : h3 - S3 + c3 / 2 + y3, A3 > 0 && a3.config.plotOptions.bar.hideZeroBarsWhenGrouped && (u3 -= c3 * A3)), k3) {
            u3 = u3 + g3.height / 2 - v3 / 2 - 2;
          }
          var C3 = this.barCtx.series[s3][r3] < 0, L3 = l3;
          switch (this.barCtx.isReversed && (L3 = l3 - d3 + (C3 ? 2 * d3 : 0), l3 -= d3), x3.position) {
            case "center":
              p3 = k3 ? C3 ? L3 - d3 / 2 + w3 : L3 + d3 / 2 - w3 : C3 ? L3 - d3 / 2 + g3.height / 2 + w3 : L3 + d3 / 2 + g3.height / 2 - w3;
              break;
            case "bottom":
              p3 = k3 ? C3 ? L3 - d3 + w3 : L3 + d3 - w3 : C3 ? L3 - d3 + g3.height + v3 + w3 : L3 + d3 - g3.height / 2 + v3 - w3;
              break;
            case "top":
              p3 = k3 ? C3 ? L3 + w3 : L3 - w3 : C3 ? L3 - g3.height / 2 - w3 : L3 + g3.height + w3;
          }
          if (this.barCtx.lastActiveBarSerieIndex === o3 && b3.enabled) {
            var P3 = new m2(this.barCtx.ctx).getTextRects(this.getStackedTotalDataLabel({ realIndex: o3, j: r3 }), f3.fontSize);
            e3 = C3 ? L3 - P3.height / 2 - w3 - b3.offsetY + 18 : L3 + P3.height + w3 + b3.offsetY - 18, i3 = u3 + b3.offsetX;
          }
          return a3.config.chart.stacked || (p3 < 0 ? p3 = 0 + v3 : p3 + g3.height / 3 > a3.globals.gridHeight && (p3 = a3.globals.gridHeight - v3)), { bcx: h3, bcy: l3, dataLabelsX: u3, dataLabelsY: p3, totalDataLabelsX: i3, totalDataLabelsY: e3, totalDataLabelsAnchor: "middle" };
        } }, { key: "calculateBarsDataLabelsPosition", value: function(t4) {
          var e3 = this.w, i3 = t4.x, a3 = t4.i, s3 = t4.j, r3 = t4.realIndex, o3 = t4.groupIndex, n3 = t4.bcy, l3 = t4.barHeight, h3 = t4.barWidth, c3 = t4.textRects, d3 = t4.dataLabelsX, g3 = t4.strokeWidth, u3 = t4.dataLabelsConfig, p3 = t4.barDataLabelsConfig, f3 = t4.barTotalDataLabelsConfig, x3 = t4.offX, b3 = t4.offY, v3 = e3.globals.gridHeight / e3.globals.dataPoints;
          h3 = Math.abs(h3);
          var y3, w3, k3 = (n3 += -1 !== o3 ? o3 * l3 : 0) - (this.barCtx.isRangeBar ? 0 : v3) + l3 / 2 + c3.height / 2 + b3 - 3, A3 = "start", S3 = this.barCtx.series[a3][s3] < 0, C3 = i3;
          switch (this.barCtx.isReversed && (C3 = i3 + h3 - (S3 ? 2 * h3 : 0), i3 = e3.globals.gridWidth - h3), p3.position) {
            case "center":
              d3 = S3 ? C3 + h3 / 2 - x3 : Math.max(c3.width / 2, C3 - h3 / 2) + x3;
              break;
            case "bottom":
              d3 = S3 ? C3 + h3 - g3 - Math.round(c3.width / 2) - x3 : C3 - h3 + g3 + Math.round(c3.width / 2) + x3;
              break;
            case "top":
              d3 = S3 ? C3 - g3 + Math.round(c3.width / 2) - x3 : C3 - g3 - Math.round(c3.width / 2) + x3;
          }
          if (this.barCtx.lastActiveBarSerieIndex === r3 && f3.enabled) {
            var L3 = new m2(this.barCtx.ctx).getTextRects(this.getStackedTotalDataLabel({ realIndex: r3, j: s3 }), u3.fontSize);
            S3 ? (y3 = C3 - g3 + Math.round(L3.width / 2) - x3 - f3.offsetX - 15, A3 = "end") : y3 = C3 - g3 - Math.round(L3.width / 2) + x3 + f3.offsetX + 15, w3 = k3 + f3.offsetY;
          }
          return e3.config.chart.stacked || (d3 < 0 ? d3 = d3 + c3.width + g3 : d3 + c3.width / 2 > e3.globals.gridWidth && (d3 = e3.globals.gridWidth - c3.width - g3)), { bcx: i3, bcy: n3, dataLabelsX: d3, dataLabelsY: k3, totalDataLabelsX: y3, totalDataLabelsY: w3, totalDataLabelsAnchor: A3 };
        } }, { key: "drawCalculatedDataLabels", value: function(t4) {
          var i3 = t4.x, a3 = t4.y, s3 = t4.val, r3 = t4.i, o3 = t4.j, n3 = t4.textRects, l3 = t4.barHeight, h3 = t4.barWidth, c3 = t4.dataLabelsConfig, d3 = this.w, g3 = "rotate(0)";
          "vertical" === d3.config.plotOptions.bar.dataLabels.orientation && (g3 = "rotate(-90, ".concat(i3, ", ").concat(a3, ")"));
          var u3 = new O2(this.barCtx.ctx), p3 = new m2(this.barCtx.ctx), f3 = c3.formatter, x3 = null, b3 = d3.globals.collapsedSeriesIndices.indexOf(r3) > -1;
          if (c3.enabled && !b3) {
            x3 = p3.group({ class: "apexcharts-data-labels", transform: g3 });
            var v3 = "";
            void 0 !== s3 && (v3 = f3(s3, e2(e2({}, d3), {}, { seriesIndex: r3, dataPointIndex: o3, w: d3 }))), !s3 && d3.config.plotOptions.bar.hideZeroBarsWhenGrouped && (v3 = "");
            var y3 = d3.globals.series[r3][o3] < 0, w3 = d3.config.plotOptions.bar.dataLabels.position;
            if ("vertical" === d3.config.plotOptions.bar.dataLabels.orientation && ("top" === w3 && (c3.textAnchor = y3 ? "end" : "start"), "center" === w3 && (c3.textAnchor = "middle"), "bottom" === w3 && (c3.textAnchor = y3 ? "end" : "start")), this.barCtx.isRangeBar && this.barCtx.barOptions.dataLabels.hideOverflowingLabels)
              h3 < p3.getTextRects(v3, parseFloat(c3.style.fontSize)).width && (v3 = "");
            d3.config.chart.stacked && this.barCtx.barOptions.dataLabels.hideOverflowingLabels && (this.barCtx.isHorizontal ? n3.width / 1.6 > Math.abs(h3) && (v3 = "") : n3.height / 1.6 > Math.abs(l3) && (v3 = ""));
            var k3 = e2({}, c3);
            this.barCtx.isHorizontal && s3 < 0 && ("start" === c3.textAnchor ? k3.textAnchor = "end" : "end" === c3.textAnchor && (k3.textAnchor = "start")), u3.plotDataLabelsText({ x: i3, y: a3, text: v3, i: r3, j: o3, parent: x3, dataLabelsConfig: k3, alwaysDrawDataLabel: true, offsetCorrection: true });
          }
          return x3;
        } }, { key: "drawTotalDataLabels", value: function(t4) {
          var e3, i3 = t4.x, a3 = t4.y, s3 = t4.val, r3 = t4.barWidth, o3 = t4.barHeight, n3 = t4.realIndex, l3 = t4.textAnchor, h3 = t4.barTotalDataLabelsConfig, c3 = this.w, d3 = new m2(this.barCtx.ctx);
          return h3.enabled && void 0 !== i3 && void 0 !== a3 && this.barCtx.lastActiveBarSerieIndex === n3 && (e3 = d3.drawText({ x: i3 - (!c3.globals.isBarHorizontal && c3.globals.seriesGroups.length ? r3 / c3.globals.seriesGroups.length : 0), y: a3 - (c3.globals.isBarHorizontal && c3.globals.seriesGroups.length ? o3 / c3.globals.seriesGroups.length : 0), foreColor: h3.style.color, text: s3, textAnchor: l3, fontFamily: h3.style.fontFamily, fontSize: h3.style.fontSize, fontWeight: h3.style.fontWeight })), e3;
        } }]), t3;
      }();
      var mt2 = function() {
        function t3(e3) {
          a2(this, t3), this.w = e3.w, this.barCtx = e3;
        }
        return r2(t3, [{ key: "initVariables", value: function(t4) {
          var e3 = this.w;
          this.barCtx.series = t4, this.barCtx.totalItems = 0, this.barCtx.seriesLen = 0, this.barCtx.visibleI = -1, this.barCtx.visibleItems = 1;
          for (var i3 = 0; i3 < t4.length; i3++)
            if (t4[i3].length > 0 && (this.barCtx.seriesLen = this.barCtx.seriesLen + 1, this.barCtx.totalItems += t4[i3].length), e3.globals.isXNumeric)
              for (var a3 = 0; a3 < t4[i3].length; a3++)
                e3.globals.seriesX[i3][a3] > e3.globals.minX && e3.globals.seriesX[i3][a3] < e3.globals.maxX && this.barCtx.visibleItems++;
            else
              this.barCtx.visibleItems = e3.globals.dataPoints;
          0 === this.barCtx.seriesLen && (this.barCtx.seriesLen = 1), this.barCtx.zeroSerieses = [], e3.globals.comboCharts || this.checkZeroSeries({ series: t4 });
        } }, { key: "initialPositions", value: function() {
          var t4, e3, i3, a3, s3, r3, o3, n3, l3 = this.w, h3 = l3.globals.dataPoints;
          this.barCtx.isRangeBar && (h3 = l3.globals.labels.length);
          var c3 = this.barCtx.seriesLen;
          if (l3.config.plotOptions.bar.rangeBarGroupRows && (c3 = 1), this.barCtx.isHorizontal)
            s3 = (i3 = l3.globals.gridHeight / h3) / c3, l3.globals.isXNumeric && (s3 = (i3 = l3.globals.gridHeight / this.barCtx.totalItems) / this.barCtx.seriesLen), s3 = s3 * parseInt(this.barCtx.barOptions.barHeight, 10) / 100, -1 === String(this.barCtx.barOptions.barHeight).indexOf("%") && (s3 = parseInt(this.barCtx.barOptions.barHeight, 10)), n3 = this.barCtx.baseLineInvertedY + l3.globals.padHorizontal + (this.barCtx.isReversed ? l3.globals.gridWidth : 0) - (this.barCtx.isReversed ? 2 * this.barCtx.baseLineInvertedY : 0), this.barCtx.isFunnel && (n3 = l3.globals.gridWidth / 2), e3 = (i3 - s3 * this.barCtx.seriesLen) / 2;
          else {
            if (a3 = l3.globals.gridWidth / this.barCtx.visibleItems, l3.config.xaxis.convertedCatToNumeric && (a3 = l3.globals.gridWidth / l3.globals.dataPoints), r3 = a3 / c3 * parseInt(this.barCtx.barOptions.columnWidth, 10) / 100, l3.globals.isXNumeric) {
              var d3 = this.barCtx.xRatio;
              l3.globals.minXDiff && 0.5 !== l3.globals.minXDiff && l3.globals.minXDiff / d3 > 0 && (a3 = l3.globals.minXDiff / d3), (r3 = a3 / c3 * parseInt(this.barCtx.barOptions.columnWidth, 10) / 100) < 1 && (r3 = 1);
            }
            -1 === String(this.barCtx.barOptions.columnWidth).indexOf("%") && (r3 = parseInt(this.barCtx.barOptions.columnWidth, 10)), o3 = l3.globals.gridHeight - this.barCtx.baseLineY[this.barCtx.yaxisIndex] - (this.barCtx.isReversed ? l3.globals.gridHeight : 0) + (this.barCtx.isReversed ? 2 * this.barCtx.baseLineY[this.barCtx.yaxisIndex] : 0), t4 = l3.globals.padHorizontal + (a3 - r3 * this.barCtx.seriesLen) / 2;
          }
          return l3.globals.barHeight = s3, l3.globals.barWidth = r3, { x: t4, y: e3, yDivision: i3, xDivision: a3, barHeight: s3, barWidth: r3, zeroH: o3, zeroW: n3 };
        } }, { key: "initializeStackedPrevVars", value: function(t4) {
          var e3 = t4.w;
          e3.globals.hasSeriesGroups ? e3.globals.seriesGroups.forEach(function(e4) {
            t4[e4] || (t4[e4] = {}), t4[e4].prevY = [], t4[e4].prevX = [], t4[e4].prevYF = [], t4[e4].prevXF = [], t4[e4].prevYVal = [], t4[e4].prevXVal = [];
          }) : (t4.prevY = [], t4.prevX = [], t4.prevYF = [], t4.prevXF = [], t4.prevYVal = [], t4.prevXVal = []);
        } }, { key: "initializeStackedXYVars", value: function(t4) {
          var e3 = t4.w;
          e3.globals.hasSeriesGroups ? e3.globals.seriesGroups.forEach(function(e4) {
            t4[e4] || (t4[e4] = {}), t4[e4].xArrj = [], t4[e4].xArrjF = [], t4[e4].xArrjVal = [], t4[e4].yArrj = [], t4[e4].yArrjF = [], t4[e4].yArrjVal = [];
          }) : (t4.xArrj = [], t4.xArrjF = [], t4.xArrjVal = [], t4.yArrj = [], t4.yArrjF = [], t4.yArrjVal = []);
        } }, { key: "getPathFillColor", value: function(t4, e3, i3, a3) {
          var s3, r3, o3, n3, l3 = this.w, h3 = new R2(this.barCtx.ctx), c3 = null, d3 = this.barCtx.barOptions.distributed ? i3 : e3;
          this.barCtx.barOptions.colors.ranges.length > 0 && this.barCtx.barOptions.colors.ranges.map(function(a4) {
            t4[e3][i3] >= a4.from && t4[e3][i3] <= a4.to && (c3 = a4.color);
          });
          return l3.config.series[e3].data[i3] && l3.config.series[e3].data[i3].fillColor && (c3 = l3.config.series[e3].data[i3].fillColor), h3.fillPath({ seriesNumber: this.barCtx.barOptions.distributed ? d3 : a3, dataPointIndex: i3, color: c3, value: t4[e3][i3], fillConfig: null === (s3 = l3.config.series[e3].data[i3]) || void 0 === s3 ? void 0 : s3.fill, fillType: null !== (r3 = l3.config.series[e3].data[i3]) && void 0 !== r3 && null !== (o3 = r3.fill) && void 0 !== o3 && o3.type ? null === (n3 = l3.config.series[e3].data[i3]) || void 0 === n3 ? void 0 : n3.fill.type : Array.isArray(l3.config.fill.type) ? l3.config.fill.type[e3] : l3.config.fill.type });
        } }, { key: "getStrokeWidth", value: function(t4, e3, i3) {
          var a3 = 0, s3 = this.w;
          return void 0 === this.barCtx.series[t4][e3] || null === this.barCtx.series[t4][e3] ? this.barCtx.isNullValue = true : this.barCtx.isNullValue = false, s3.config.stroke.show && (this.barCtx.isNullValue || (a3 = Array.isArray(this.barCtx.strokeWidth) ? this.barCtx.strokeWidth[i3] : this.barCtx.strokeWidth)), a3;
        } }, { key: "shouldApplyRadius", value: function(t4) {
          var e3 = this.w, i3 = false;
          return e3.config.plotOptions.bar.borderRadius > 0 && (e3.config.chart.stacked && "last" === e3.config.plotOptions.bar.borderRadiusWhenStacked ? this.barCtx.lastActiveBarSerieIndex === t4 && (i3 = true) : i3 = true), i3;
        } }, { key: "barBackground", value: function(t4) {
          var e3 = t4.j, i3 = t4.i, a3 = t4.x1, s3 = t4.x2, r3 = t4.y1, o3 = t4.y2, n3 = t4.elSeries, l3 = this.w, h3 = new m2(this.barCtx.ctx), c3 = new N2(this.barCtx.ctx).getActiveConfigSeriesIndex();
          if (this.barCtx.barOptions.colors.backgroundBarColors.length > 0 && c3 === i3) {
            e3 >= this.barCtx.barOptions.colors.backgroundBarColors.length && (e3 %= this.barCtx.barOptions.colors.backgroundBarColors.length);
            var d3 = this.barCtx.barOptions.colors.backgroundBarColors[e3], g3 = h3.drawRect(void 0 !== a3 ? a3 : 0, void 0 !== r3 ? r3 : 0, void 0 !== s3 ? s3 : l3.globals.gridWidth, void 0 !== o3 ? o3 : l3.globals.gridHeight, this.barCtx.barOptions.colors.backgroundBarRadius, d3, this.barCtx.barOptions.colors.backgroundBarOpacity);
            n3.add(g3), g3.node.classList.add("apexcharts-backgroundBar");
          }
        } }, { key: "getColumnPaths", value: function(t4) {
          var e3, i3 = t4.barWidth, a3 = t4.barXPosition, s3 = t4.y1, r3 = t4.y2, o3 = t4.strokeWidth, n3 = t4.seriesGroup, l3 = t4.realIndex, h3 = t4.i, c3 = t4.j, d3 = t4.w, g3 = new m2(this.barCtx.ctx);
          (o3 = Array.isArray(o3) ? o3[l3] : o3) || (o3 = 0);
          var u3 = i3, p3 = a3;
          null !== (e3 = d3.config.series[l3].data[c3]) && void 0 !== e3 && e3.columnWidthOffset && (p3 = a3 - d3.config.series[l3].data[c3].columnWidthOffset / 2, u3 = i3 + d3.config.series[l3].data[c3].columnWidthOffset);
          var f3 = p3, x3 = p3 + u3;
          s3 += 1e-3, r3 += 1e-3;
          var b3 = g3.move(f3, s3), v3 = g3.move(f3, s3), y3 = g3.line(x3 - o3, s3);
          if (d3.globals.previousPaths.length > 0 && (v3 = this.barCtx.getPreviousPath(l3, c3, false)), b3 = b3 + g3.line(f3, r3) + g3.line(x3 - o3, r3) + g3.line(x3 - o3, s3) + ("around" === d3.config.plotOptions.bar.borderRadiusApplication ? " Z" : " z"), v3 = v3 + g3.line(f3, s3) + y3 + y3 + y3 + y3 + y3 + g3.line(f3, s3) + ("around" === d3.config.plotOptions.bar.borderRadiusApplication ? " Z" : " z"), this.shouldApplyRadius(l3) && (b3 = g3.roundPathCorners(b3, d3.config.plotOptions.bar.borderRadius)), d3.config.chart.stacked) {
            var w3 = this.barCtx;
            d3.globals.hasSeriesGroups && n3 && (w3 = this.barCtx[n3]), w3.yArrj.push(r3), w3.yArrjF.push(Math.abs(s3 - r3)), w3.yArrjVal.push(this.barCtx.series[h3][c3]);
          }
          return { pathTo: b3, pathFrom: v3 };
        } }, { key: "getBarpaths", value: function(t4) {
          var e3, i3 = t4.barYPosition, a3 = t4.barHeight, s3 = t4.x1, r3 = t4.x2, o3 = t4.strokeWidth, n3 = t4.seriesGroup, l3 = t4.realIndex, h3 = t4.i, c3 = t4.j, d3 = t4.w, g3 = new m2(this.barCtx.ctx);
          (o3 = Array.isArray(o3) ? o3[l3] : o3) || (o3 = 0);
          var u3 = i3, p3 = a3;
          null !== (e3 = d3.config.series[l3].data[c3]) && void 0 !== e3 && e3.barHeightOffset && (u3 = i3 - d3.config.series[l3].data[c3].barHeightOffset / 2, p3 = a3 + d3.config.series[l3].data[c3].barHeightOffset);
          var f3 = u3, x3 = u3 + p3;
          s3 += 1e-3, r3 += 1e-3;
          var b3 = g3.move(s3, f3), v3 = g3.move(s3, f3);
          d3.globals.previousPaths.length > 0 && (v3 = this.barCtx.getPreviousPath(l3, c3, false));
          var y3 = g3.line(s3, x3 - o3);
          if (b3 = b3 + g3.line(r3, f3) + g3.line(r3, x3 - o3) + y3 + ("around" === d3.config.plotOptions.bar.borderRadiusApplication ? " Z" : " z"), v3 = v3 + g3.line(s3, f3) + y3 + y3 + y3 + y3 + y3 + g3.line(s3, f3) + ("around" === d3.config.plotOptions.bar.borderRadiusApplication ? " Z" : " z"), this.shouldApplyRadius(l3) && (b3 = g3.roundPathCorners(b3, d3.config.plotOptions.bar.borderRadius)), d3.config.chart.stacked) {
            var w3 = this.barCtx;
            d3.globals.hasSeriesGroups && n3 && (w3 = this.barCtx[n3]), w3.xArrj.push(r3), w3.xArrjF.push(Math.abs(s3 - r3)), w3.xArrjVal.push(this.barCtx.series[h3][c3]);
          }
          return { pathTo: b3, pathFrom: v3 };
        } }, { key: "checkZeroSeries", value: function(t4) {
          for (var e3 = t4.series, i3 = this.w, a3 = 0; a3 < e3.length; a3++) {
            for (var s3 = 0, r3 = 0; r3 < e3[i3.globals.maxValsInArrayIndex].length; r3++)
              s3 += e3[a3][r3];
            0 === s3 && this.barCtx.zeroSerieses.push(a3);
          }
        } }, { key: "getXForValue", value: function(t4, e3) {
          var i3 = !(arguments.length > 2 && void 0 !== arguments[2]) || arguments[2] ? e3 : null;
          return null != t4 && (i3 = e3 + t4 / this.barCtx.invertedYRatio - 2 * (this.barCtx.isReversed ? t4 / this.barCtx.invertedYRatio : 0)), i3;
        } }, { key: "getYForValue", value: function(t4, e3) {
          var i3 = !(arguments.length > 2 && void 0 !== arguments[2]) || arguments[2] ? e3 : null;
          return null != t4 && (i3 = e3 - t4 / this.barCtx.yRatio[this.barCtx.yaxisIndex] + 2 * (this.barCtx.isReversed ? t4 / this.barCtx.yRatio[this.barCtx.yaxisIndex] : 0)), i3;
        } }, { key: "getGoalValues", value: function(t4, i3, a3, s3, r3) {
          var n3 = this, l3 = this.w, h3 = [], c3 = function(e3, s4) {
            var r4;
            h3.push((o2(r4 = {}, t4, "x" === t4 ? n3.getXForValue(e3, i3, false) : n3.getYForValue(e3, a3, false)), o2(r4, "attrs", s4), r4));
          };
          if (l3.globals.seriesGoals[s3] && l3.globals.seriesGoals[s3][r3] && Array.isArray(l3.globals.seriesGoals[s3][r3]) && l3.globals.seriesGoals[s3][r3].forEach(function(t5) {
            c3(t5.value, t5);
          }), this.barCtx.barOptions.isDumbbell && l3.globals.seriesRange.length) {
            var d3 = this.barCtx.barOptions.dumbbellColors ? this.barCtx.barOptions.dumbbellColors : l3.globals.colors, g3 = { strokeHeight: "x" === t4 ? 0 : l3.globals.markers.size[s3], strokeWidth: "x" === t4 ? l3.globals.markers.size[s3] : 0, strokeDashArray: 0, strokeLineCap: "round", strokeColor: Array.isArray(d3[s3]) ? d3[s3][0] : d3[s3] };
            c3(l3.globals.seriesRangeStart[s3][r3], g3), c3(l3.globals.seriesRangeEnd[s3][r3], e2(e2({}, g3), {}, { strokeColor: Array.isArray(d3[s3]) ? d3[s3][1] : d3[s3] }));
          }
          return h3;
        } }, { key: "drawGoalLine", value: function(t4) {
          var e3 = t4.barXPosition, i3 = t4.barYPosition, a3 = t4.goalX, s3 = t4.goalY, r3 = t4.barWidth, o3 = t4.barHeight, n3 = new m2(this.barCtx.ctx), l3 = n3.group({ className: "apexcharts-bar-goals-groups" });
          l3.node.classList.add("apexcharts-element-hidden"), this.barCtx.w.globals.delayedElements.push({ el: l3.node }), l3.attr("clip-path", "url(#gridRectMarkerMask".concat(this.barCtx.w.globals.cuid, ")"));
          var h3 = null;
          return this.barCtx.isHorizontal ? Array.isArray(a3) && a3.forEach(function(t5) {
            var e4 = void 0 !== t5.attrs.strokeHeight ? t5.attrs.strokeHeight : o3 / 2, a4 = i3 + e4 + o3 / 2;
            h3 = n3.drawLine(t5.x, a4 - 2 * e4, t5.x, a4, t5.attrs.strokeColor ? t5.attrs.strokeColor : void 0, t5.attrs.strokeDashArray, t5.attrs.strokeWidth ? t5.attrs.strokeWidth : 2, t5.attrs.strokeLineCap), l3.add(h3);
          }) : Array.isArray(s3) && s3.forEach(function(t5) {
            var i4 = void 0 !== t5.attrs.strokeWidth ? t5.attrs.strokeWidth : r3 / 2, a4 = e3 + i4 + r3 / 2;
            h3 = n3.drawLine(a4 - 2 * i4, t5.y, a4, t5.y, t5.attrs.strokeColor ? t5.attrs.strokeColor : void 0, t5.attrs.strokeDashArray, t5.attrs.strokeHeight ? t5.attrs.strokeHeight : 2, t5.attrs.strokeLineCap), l3.add(h3);
          }), l3;
        } }, { key: "drawBarShadow", value: function(t4) {
          var e3 = t4.prevPaths, i3 = t4.currPaths, a3 = t4.color, s3 = this.w, r3 = e3.x, o3 = e3.x1, n3 = e3.barYPosition, l3 = i3.x, h3 = i3.x1, c3 = i3.barYPosition, d3 = n3 + i3.barHeight, g3 = new m2(this.barCtx.ctx), u3 = new x2(), p3 = g3.move(o3, d3) + g3.line(r3, d3) + g3.line(l3, c3) + g3.line(h3, c3) + g3.line(o3, d3) + ("around" === s3.config.plotOptions.bar.borderRadiusApplication ? " Z" : " z");
          return g3.drawPath({ d: p3, fill: u3.shadeColor(0.5, x2.rgb2hex(a3)), stroke: "none", strokeWidth: 0, fillOpacity: 1, classes: "apexcharts-bar-shadows" });
        } }, { key: "getZeroValueEncounters", value: function(t4) {
          var e3 = t4.i, i3 = t4.j, a3 = this.w, s3 = 0, r3 = 0;
          return a3.globals.seriesPercent.forEach(function(t5, a4) {
            t5[i3] && s3++, a4 < e3 && 0 === t5[i3] && r3++;
          }), { nonZeroColumns: s3, zeroEncounters: r3 };
        } }]), t3;
      }();
      var yt2 = function() {
        function t3(e3, i3) {
          a2(this, t3), this.ctx = e3, this.w = e3.w;
          var s3 = this.w;
          this.barOptions = s3.config.plotOptions.bar, this.isHorizontal = this.barOptions.horizontal, this.strokeWidth = s3.config.stroke.width, this.isNullValue = false, this.isRangeBar = s3.globals.seriesRange.length && this.isHorizontal, this.isVerticalGroupedRangeBar = !s3.globals.isBarHorizontal && s3.globals.seriesRange.length && s3.config.plotOptions.bar.rangeBarGroupRows, this.isFunnel = this.barOptions.isFunnel, this.xyRatios = i3, null !== this.xyRatios && (this.xRatio = i3.xRatio, this.yRatio = i3.yRatio, this.invertedXRatio = i3.invertedXRatio, this.invertedYRatio = i3.invertedYRatio, this.baseLineY = i3.baseLineY, this.baseLineInvertedY = i3.baseLineInvertedY), this.yaxisIndex = 0, this.seriesLen = 0, this.pathArr = [];
          var r3 = new N2(this.ctx);
          this.lastActiveBarSerieIndex = r3.getActiveConfigSeriesIndex("desc", ["bar", "column"]);
          var o3 = r3.getBarSeriesIndices(), n3 = new y2(this.ctx);
          this.stackedSeriesTotals = n3.getStackedSeriesTotals(this.w.config.series.map(function(t4, e4) {
            return -1 === o3.indexOf(e4) ? e4 : -1;
          }).filter(function(t4) {
            return -1 !== t4;
          })), this.barHelpers = new mt2(this);
        }
        return r2(t3, [{ key: "draw", value: function(t4, i3) {
          var a3 = this.w, s3 = new m2(this.ctx), r3 = new y2(this.ctx, a3);
          t4 = r3.getLogSeries(t4), this.series = t4, this.yRatio = r3.getLogYRatios(this.yRatio), this.barHelpers.initVariables(t4);
          var o3 = s3.group({ class: "apexcharts-bar-series apexcharts-plot-series" });
          a3.config.dataLabels.enabled && this.totalItems > this.barOptions.dataLabels.maxItems && console.warn("WARNING: DataLabels are enabled but there are too many to display. This may cause performance issue when rendering - ApexCharts");
          for (var n3 = 0, l3 = 0; n3 < t4.length; n3++, l3++) {
            var h3, c3, d3, g3, u3 = void 0, p3 = void 0, f3 = [], b3 = [], v3 = a3.globals.comboCharts ? i3[n3] : n3, w3 = s3.group({ class: "apexcharts-series", rel: n3 + 1, seriesName: x2.escapeString(a3.globals.seriesNames[v3]), "data:realIndex": v3 });
            this.ctx.series.addCollapsedClassToSeries(w3, v3), t4[n3].length > 0 && (this.visibleI = this.visibleI + 1);
            var k3 = 0, A3 = 0;
            this.yRatio.length > 1 && (this.yaxisIndex = v3), this.isReversed = a3.config.yaxis[this.yaxisIndex] && a3.config.yaxis[this.yaxisIndex].reversed;
            var S3 = this.barHelpers.initialPositions();
            p3 = S3.y, k3 = S3.barHeight, c3 = S3.yDivision, g3 = S3.zeroW, u3 = S3.x, A3 = S3.barWidth, h3 = S3.xDivision, d3 = S3.zeroH, this.horizontal || b3.push(u3 + A3 / 2);
            var C3 = s3.group({ class: "apexcharts-datalabels", "data:realIndex": v3 });
            a3.globals.delayedElements.push({ el: C3.node }), C3.node.classList.add("apexcharts-element-hidden");
            var L3 = s3.group({ class: "apexcharts-bar-goals-markers" }), P3 = s3.group({ class: "apexcharts-bar-shadows" });
            a3.globals.delayedElements.push({ el: P3.node }), P3.node.classList.add("apexcharts-element-hidden");
            for (var I3 = 0; I3 < a3.globals.dataPoints; I3++) {
              var T3 = this.barHelpers.getStrokeWidth(n3, I3, v3), M3 = null, z3 = { indexes: { i: n3, j: I3, realIndex: v3, bc: l3 }, x: u3, y: p3, strokeWidth: T3, elSeries: w3 };
              this.isHorizontal ? (M3 = this.drawBarPaths(e2(e2({}, z3), {}, { barHeight: k3, zeroW: g3, yDivision: c3 })), A3 = this.series[n3][I3] / this.invertedYRatio) : (M3 = this.drawColumnPaths(e2(e2({}, z3), {}, { xDivision: h3, barWidth: A3, zeroH: d3 })), k3 = this.series[n3][I3] / this.yRatio[this.yaxisIndex]);
              var X3 = this.barHelpers.getPathFillColor(t4, n3, I3, v3);
              if (this.isFunnel && this.barOptions.isFunnel3d && this.pathArr.length && I3 > 0) {
                var E3 = this.barHelpers.drawBarShadow({ color: "string" == typeof X3 && -1 === (null == X3 ? void 0 : X3.indexOf("url")) ? X3 : x2.hexToRgba(a3.globals.colors[n3]), prevPaths: this.pathArr[this.pathArr.length - 1], currPaths: M3 });
                E3 && P3.add(E3);
              }
              this.pathArr.push(M3);
              var Y3 = this.barHelpers.drawGoalLine({ barXPosition: M3.barXPosition, barYPosition: M3.barYPosition, goalX: M3.goalX, goalY: M3.goalY, barHeight: k3, barWidth: A3 });
              Y3 && L3.add(Y3), p3 = M3.y, u3 = M3.x, I3 > 0 && b3.push(u3 + A3 / 2), f3.push(p3), this.renderSeries({ realIndex: v3, pathFill: X3, j: I3, i: n3, pathFrom: M3.pathFrom, pathTo: M3.pathTo, strokeWidth: T3, elSeries: w3, x: u3, y: p3, series: t4, barHeight: M3.barHeight ? M3.barHeight : k3, barWidth: M3.barWidth ? M3.barWidth : A3, elDataLabelsWrap: C3, elGoalsMarkers: L3, elBarShadows: P3, visibleSeries: this.visibleI, type: "bar" });
            }
            a3.globals.seriesXvalues[v3] = b3, a3.globals.seriesYvalues[v3] = f3, o3.add(w3);
          }
          return o3;
        } }, { key: "renderSeries", value: function(t4) {
          var e3 = t4.realIndex, i3 = t4.pathFill, a3 = t4.lineFill, s3 = t4.j, r3 = t4.i, o3 = t4.groupIndex, n3 = t4.pathFrom, l3 = t4.pathTo, h3 = t4.strokeWidth, c3 = t4.elSeries, d3 = t4.x, g3 = t4.y, u3 = t4.y1, p3 = t4.y2, f3 = t4.series, x3 = t4.barHeight, b3 = t4.barWidth, y3 = t4.barXPosition, w3 = t4.barYPosition, k3 = t4.elDataLabelsWrap, A3 = t4.elGoalsMarkers, S3 = t4.elBarShadows, C3 = t4.visibleSeries, L3 = t4.type, P3 = this.w, I3 = new m2(this.ctx);
          a3 || (a3 = this.barOptions.distributed ? P3.globals.stroke.colors[s3] : P3.globals.stroke.colors[e3]), P3.config.series[r3].data[s3] && P3.config.series[r3].data[s3].strokeColor && (a3 = P3.config.series[r3].data[s3].strokeColor), this.isNullValue && (i3 = "none");
          var T3 = s3 / P3.config.chart.animations.animateGradually.delay * (P3.config.chart.animations.speed / P3.globals.dataPoints) / 2.4, M3 = I3.renderPaths({ i: r3, j: s3, realIndex: e3, pathFrom: n3, pathTo: l3, stroke: a3, strokeWidth: h3, strokeLineCap: P3.config.stroke.lineCap, fill: i3, animationDelay: T3, initialSpeed: P3.config.chart.animations.speed, dataChangeSpeed: P3.config.chart.animations.dynamicAnimation.speed, className: "apexcharts-".concat(L3, "-area") });
          M3.attr("clip-path", "url(#gridRectMask".concat(P3.globals.cuid, ")"));
          var z3 = P3.config.forecastDataPoints;
          z3.count > 0 && s3 >= P3.globals.dataPoints - z3.count && (M3.node.setAttribute("stroke-dasharray", z3.dashArray), M3.node.setAttribute("stroke-width", z3.strokeWidth), M3.node.setAttribute("fill-opacity", z3.fillOpacity)), void 0 !== u3 && void 0 !== p3 && (M3.attr("data-range-y1", u3), M3.attr("data-range-y2", p3)), new v2(this.ctx).setSelectionFilter(M3, e3, s3), c3.add(M3);
          var X3 = new vt2(this).handleBarDataLabels({ x: d3, y: g3, y1: u3, y2: p3, i: r3, j: s3, series: f3, realIndex: e3, groupIndex: o3, barHeight: x3, barWidth: b3, barXPosition: y3, barYPosition: w3, renderedPath: M3, visibleSeries: C3 });
          return null !== X3.dataLabels && k3.add(X3.dataLabels), X3.totalDataLabels && k3.add(X3.totalDataLabels), c3.add(k3), A3 && c3.add(A3), S3 && c3.add(S3), c3;
        } }, { key: "drawBarPaths", value: function(t4) {
          var e3, i3 = t4.indexes, a3 = t4.barHeight, s3 = t4.strokeWidth, r3 = t4.zeroW, o3 = t4.x, n3 = t4.y, l3 = t4.yDivision, h3 = t4.elSeries, c3 = this.w, d3 = i3.i, g3 = i3.j;
          if (c3.globals.isXNumeric)
            e3 = (n3 = (c3.globals.seriesX[d3][g3] - c3.globals.minX) / this.invertedXRatio - a3) + a3 * this.visibleI;
          else if (c3.config.plotOptions.bar.hideZeroBarsWhenGrouped) {
            var u3 = 0, p3 = 0;
            c3.globals.seriesPercent.forEach(function(t5, e4) {
              t5[g3] && u3++, e4 < d3 && 0 === t5[g3] && p3++;
            }), u3 > 0 && (a3 = this.seriesLen * a3 / u3), e3 = n3 + a3 * this.visibleI, e3 -= a3 * p3;
          } else
            e3 = n3 + a3 * this.visibleI;
          this.isFunnel && (r3 -= (this.barHelpers.getXForValue(this.series[d3][g3], r3) - r3) / 2), o3 = this.barHelpers.getXForValue(this.series[d3][g3], r3);
          var f3 = this.barHelpers.getBarpaths({ barYPosition: e3, barHeight: a3, x1: r3, x2: o3, strokeWidth: s3, series: this.series, realIndex: i3.realIndex, i: d3, j: g3, w: c3 });
          return c3.globals.isXNumeric || (n3 += l3), this.barHelpers.barBackground({ j: g3, i: d3, y1: e3 - a3 * this.visibleI, y2: a3 * this.seriesLen, elSeries: h3 }), { pathTo: f3.pathTo, pathFrom: f3.pathFrom, x1: r3, x: o3, y: n3, goalX: this.barHelpers.getGoalValues("x", r3, null, d3, g3), barYPosition: e3, barHeight: a3 };
        } }, { key: "drawColumnPaths", value: function(t4) {
          var e3, i3 = t4.indexes, a3 = t4.x, s3 = t4.y, r3 = t4.xDivision, o3 = t4.barWidth, n3 = t4.zeroH, l3 = t4.strokeWidth, h3 = t4.elSeries, c3 = this.w, d3 = i3.realIndex, g3 = i3.i, u3 = i3.j, p3 = i3.bc;
          if (c3.globals.isXNumeric) {
            var f3 = this.getBarXForNumericXAxis({ x: a3, j: u3, realIndex: d3, barWidth: o3 });
            a3 = f3.x, e3 = f3.barXPosition;
          } else if (c3.config.plotOptions.bar.hideZeroBarsWhenGrouped) {
            var x3 = this.barHelpers.getZeroValueEncounters({ i: g3, j: u3 }), b3 = x3.nonZeroColumns, v3 = x3.zeroEncounters;
            b3 > 0 && (o3 = this.seriesLen * o3 / b3), e3 = a3 + o3 * this.visibleI, e3 -= o3 * v3;
          } else
            e3 = a3 + o3 * this.visibleI;
          s3 = this.barHelpers.getYForValue(this.series[g3][u3], n3);
          var m3 = this.barHelpers.getColumnPaths({ barXPosition: e3, barWidth: o3, y1: n3, y2: s3, strokeWidth: l3, series: this.series, realIndex: i3.realIndex, i: g3, j: u3, w: c3 });
          return c3.globals.isXNumeric || (a3 += r3), this.barHelpers.barBackground({ bc: p3, j: u3, i: g3, x1: e3 - l3 / 2 - o3 * this.visibleI, x2: o3 * this.seriesLen + l3 / 2, elSeries: h3 }), { pathTo: m3.pathTo, pathFrom: m3.pathFrom, x: a3, y: s3, goalY: this.barHelpers.getGoalValues("y", null, n3, g3, u3), barXPosition: e3, barWidth: o3 };
        } }, { key: "getBarXForNumericXAxis", value: function(t4) {
          var e3 = t4.x, i3 = t4.barWidth, a3 = t4.realIndex, s3 = t4.j, r3 = this.w, o3 = a3;
          return r3.globals.seriesX[a3].length || (o3 = r3.globals.maxValsInArrayIndex), r3.globals.seriesX[o3][s3] && (e3 = (r3.globals.seriesX[o3][s3] - r3.globals.minX) / this.xRatio - i3 * this.seriesLen / 2), { barXPosition: e3 + i3 * this.visibleI, x: e3 };
        } }, { key: "getPreviousPath", value: function(t4, e3) {
          for (var i3, a3 = this.w, s3 = 0; s3 < a3.globals.previousPaths.length; s3++) {
            var r3 = a3.globals.previousPaths[s3];
            r3.paths && r3.paths.length > 0 && parseInt(r3.realIndex, 10) === parseInt(t4, 10) && void 0 !== a3.globals.previousPaths[s3].paths[e3] && (i3 = a3.globals.previousPaths[s3].paths[e3].d);
          }
          return i3;
        } }]), t3;
      }();
      var wt2 = function(t3) {
        n2(s3, yt2);
        var i3 = d2(s3);
        function s3() {
          return a2(this, s3), i3.apply(this, arguments);
        }
        return r2(s3, [{ key: "draw", value: function(t4, i4) {
          var a3 = this, s4 = this.w;
          this.graphics = new m2(this.ctx), this.bar = new yt2(this.ctx, this.xyRatios);
          var r3 = new y2(this.ctx, s4);
          t4 = r3.getLogSeries(t4), this.yRatio = r3.getLogYRatios(this.yRatio), this.barHelpers.initVariables(t4), "100%" === s4.config.chart.stackType && (t4 = s4.globals.seriesPercent.slice()), this.series = t4, this.barHelpers.initializeStackedPrevVars(this);
          for (var o3 = this.graphics.group({ class: "apexcharts-bar-series apexcharts-plot-series" }), n3 = 0, l3 = 0, h3 = function(r4, h4) {
            var c4 = void 0, d4 = void 0, g3 = void 0, u3 = void 0, p3 = -1;
            a3.groupCtx = a3, s4.globals.seriesGroups.forEach(function(t5, e3) {
              t5.indexOf(s4.config.series[r4].name) > -1 && (p3 = e3);
            }), -1 !== p3 && (a3.groupCtx = a3[s4.globals.seriesGroups[p3]]);
            var f3 = [], b3 = [], v3 = s4.globals.comboCharts ? i4[r4] : r4;
            a3.yRatio.length > 1 && (a3.yaxisIndex = v3), a3.isReversed = s4.config.yaxis[a3.yaxisIndex] && s4.config.yaxis[a3.yaxisIndex].reversed;
            var m3 = a3.graphics.group({ class: "apexcharts-series", seriesName: x2.escapeString(s4.globals.seriesNames[v3]), rel: r4 + 1, "data:realIndex": v3 });
            a3.ctx.series.addCollapsedClassToSeries(m3, v3);
            var y3 = a3.graphics.group({ class: "apexcharts-datalabels", "data:realIndex": v3 }), w3 = a3.graphics.group({ class: "apexcharts-bar-goals-markers" }), k3 = 0, A3 = 0, S3 = a3.initialPositions(n3, l3, c4, d4, g3, u3);
            l3 = S3.y, k3 = S3.barHeight, d4 = S3.yDivision, u3 = S3.zeroW, n3 = S3.x, A3 = S3.barWidth, c4 = S3.xDivision, g3 = S3.zeroH, s4.globals.barHeight = k3, s4.globals.barWidth = A3, a3.barHelpers.initializeStackedXYVars(a3), 1 === a3.groupCtx.prevY.length && a3.groupCtx.prevY[0].every(function(t5) {
              return isNaN(t5);
            }) && (a3.groupCtx.prevY[0] = a3.groupCtx.prevY[0].map(function(t5) {
              return g3;
            }), a3.groupCtx.prevYF[0] = a3.groupCtx.prevYF[0].map(function(t5) {
              return 0;
            }));
            for (var C3 = 0; C3 < s4.globals.dataPoints; C3++) {
              var L3 = a3.barHelpers.getStrokeWidth(r4, C3, v3), P3 = { indexes: { i: r4, j: C3, realIndex: v3, bc: h4 }, strokeWidth: L3, x: n3, y: l3, elSeries: m3, groupIndex: p3, seriesGroup: s4.globals.seriesGroups[p3] }, I3 = null;
              a3.isHorizontal ? (I3 = a3.drawStackedBarPaths(e2(e2({}, P3), {}, { zeroW: u3, barHeight: k3, yDivision: d4 })), A3 = a3.series[r4][C3] / a3.invertedYRatio) : (I3 = a3.drawStackedColumnPaths(e2(e2({}, P3), {}, { xDivision: c4, barWidth: A3, zeroH: g3 })), k3 = a3.series[r4][C3] / a3.yRatio[a3.yaxisIndex]);
              var T3 = a3.barHelpers.drawGoalLine({ barXPosition: I3.barXPosition, barYPosition: I3.barYPosition, goalX: I3.goalX, goalY: I3.goalY, barHeight: k3, barWidth: A3 });
              T3 && w3.add(T3), l3 = I3.y, n3 = I3.x, f3.push(n3), b3.push(l3);
              var M3 = a3.barHelpers.getPathFillColor(t4, r4, C3, v3);
              m3 = a3.renderSeries({ realIndex: v3, pathFill: M3, j: C3, i: r4, groupIndex: p3, pathFrom: I3.pathFrom, pathTo: I3.pathTo, strokeWidth: L3, elSeries: m3, x: n3, y: l3, series: t4, barHeight: k3, barWidth: A3, elDataLabelsWrap: y3, elGoalsMarkers: w3, type: "bar", visibleSeries: 0 });
            }
            s4.globals.seriesXvalues[v3] = f3, s4.globals.seriesYvalues[v3] = b3, a3.groupCtx.prevY.push(a3.groupCtx.yArrj), a3.groupCtx.prevYF.push(a3.groupCtx.yArrjF), a3.groupCtx.prevYVal.push(a3.groupCtx.yArrjVal), a3.groupCtx.prevX.push(a3.groupCtx.xArrj), a3.groupCtx.prevXF.push(a3.groupCtx.xArrjF), a3.groupCtx.prevXVal.push(a3.groupCtx.xArrjVal), o3.add(m3);
          }, c3 = 0, d3 = 0; c3 < t4.length; c3++, d3++)
            h3(c3, d3);
          return o3;
        } }, { key: "initialPositions", value: function(t4, e3, i4, a3, s4, r3) {
          var o3, n3, l3, h3, c3 = this.w;
          return this.isHorizontal ? (l3 = (l3 = a3 = c3.globals.gridHeight / c3.globals.dataPoints) * parseInt(c3.config.plotOptions.bar.barHeight, 10) / 100, -1 === String(c3.config.plotOptions.bar.barHeight).indexOf("%") && (l3 = parseInt(c3.config.plotOptions.bar.barHeight, 10)), r3 = this.baseLineInvertedY + c3.globals.padHorizontal + (this.isReversed ? c3.globals.gridWidth : 0) - (this.isReversed ? 2 * this.baseLineInvertedY : 0), e3 = (a3 - l3) / 2) : (h3 = i4 = c3.globals.gridWidth / c3.globals.dataPoints, h3 = c3.globals.isXNumeric && c3.globals.dataPoints > 1 ? (i4 = c3.globals.minXDiff / this.xRatio) * parseInt(this.barOptions.columnWidth, 10) / 100 : h3 * parseInt(c3.config.plotOptions.bar.columnWidth, 10) / 100, -1 === String(c3.config.plotOptions.bar.columnWidth).indexOf("%") && (h3 = parseInt(c3.config.plotOptions.bar.columnWidth, 10)), s4 = c3.globals.gridHeight - this.baseLineY[this.yaxisIndex] - (this.isReversed ? c3.globals.gridHeight : 0) + (this.isReversed ? 2 * this.baseLineY[this.yaxisIndex] : 0), t4 = c3.globals.padHorizontal + (i4 - h3) / 2), { x: t4, y: e3, yDivision: a3, xDivision: i4, barHeight: null !== (o3 = c3.globals.seriesGroups) && void 0 !== o3 && o3.length ? l3 / c3.globals.seriesGroups.length : l3, barWidth: null !== (n3 = c3.globals.seriesGroups) && void 0 !== n3 && n3.length ? h3 / c3.globals.seriesGroups.length : h3, zeroH: s4, zeroW: r3 };
        } }, { key: "drawStackedBarPaths", value: function(t4) {
          for (var e3, i4 = t4.indexes, a3 = t4.barHeight, s4 = t4.strokeWidth, r3 = t4.zeroW, o3 = t4.x, n3 = t4.y, l3 = t4.groupIndex, h3 = t4.seriesGroup, c3 = t4.yDivision, d3 = t4.elSeries, g3 = this.w, u3 = n3 + (-1 !== l3 ? l3 * a3 : 0), p3 = i4.i, f3 = i4.j, x3 = 0, b3 = 0; b3 < this.groupCtx.prevXF.length; b3++)
            x3 += this.groupCtx.prevXF[b3][f3];
          var v3 = p3;
          if (h3 && (v3 = h3.indexOf(g3.config.series[p3].name)), v3 > 0) {
            var m3 = r3;
            this.groupCtx.prevXVal[v3 - 1][f3] < 0 ? m3 = this.series[p3][f3] >= 0 ? this.groupCtx.prevX[v3 - 1][f3] + x3 - 2 * (this.isReversed ? x3 : 0) : this.groupCtx.prevX[v3 - 1][f3] : this.groupCtx.prevXVal[v3 - 1][f3] >= 0 && (m3 = this.series[p3][f3] >= 0 ? this.groupCtx.prevX[v3 - 1][f3] : this.groupCtx.prevX[v3 - 1][f3] - x3 + 2 * (this.isReversed ? x3 : 0)), e3 = m3;
          } else
            e3 = r3;
          o3 = null === this.series[p3][f3] ? e3 : e3 + this.series[p3][f3] / this.invertedYRatio - 2 * (this.isReversed ? this.series[p3][f3] / this.invertedYRatio : 0);
          var y3 = this.barHelpers.getBarpaths({ barYPosition: u3, barHeight: a3, x1: e3, x2: o3, strokeWidth: s4, series: this.series, realIndex: i4.realIndex, seriesGroup: h3, i: p3, j: f3, w: g3 });
          return this.barHelpers.barBackground({ j: f3, i: p3, y1: u3, y2: a3, elSeries: d3 }), n3 += c3, { pathTo: y3.pathTo, pathFrom: y3.pathFrom, goalX: this.barHelpers.getGoalValues("x", r3, null, p3, f3), barYPosition: u3, x: o3, y: n3 };
        } }, { key: "drawStackedColumnPaths", value: function(t4) {
          var e3 = t4.indexes, i4 = t4.x, a3 = t4.y, s4 = t4.xDivision, r3 = t4.barWidth, o3 = t4.zeroH, n3 = t4.groupIndex, l3 = t4.seriesGroup, h3 = t4.elSeries, c3 = this.w, d3 = e3.i, g3 = e3.j, u3 = e3.bc;
          if (c3.globals.isXNumeric) {
            var p3 = c3.globals.seriesX[d3][g3];
            p3 || (p3 = 0), i4 = (p3 - c3.globals.minX) / this.xRatio - r3 / 2, c3.globals.seriesGroups.length && (i4 = (p3 - c3.globals.minX) / this.xRatio - r3 / 2 * c3.globals.seriesGroups.length);
          }
          for (var f3, x3 = i4 + (-1 !== n3 ? n3 * r3 : 0), b3 = 0, v3 = 0; v3 < this.groupCtx.prevYF.length; v3++)
            b3 += isNaN(this.groupCtx.prevYF[v3][g3]) ? 0 : this.groupCtx.prevYF[v3][g3];
          var m3 = d3;
          if (l3 && (m3 = l3.indexOf(c3.config.series[d3].name)), m3 > 0 && !c3.globals.isXNumeric || m3 > 0 && c3.globals.isXNumeric && c3.globals.seriesX[d3 - 1][g3] === c3.globals.seriesX[d3][g3]) {
            var y3, w3, k3, A3 = Math.min(this.yRatio.length + 1, d3 + 1);
            if (void 0 !== this.groupCtx.prevY[m3 - 1] && this.groupCtx.prevY[m3 - 1].length)
              for (var S3 = 1; S3 < A3; S3++) {
                var C3;
                if (!isNaN(null === (C3 = this.groupCtx.prevY[m3 - S3]) || void 0 === C3 ? void 0 : C3[g3])) {
                  k3 = this.groupCtx.prevY[m3 - S3][g3];
                  break;
                }
              }
            for (var L3 = 1; L3 < A3; L3++) {
              var P3, I3;
              if ((null === (P3 = this.groupCtx.prevYVal[m3 - L3]) || void 0 === P3 ? void 0 : P3[g3]) < 0) {
                w3 = this.series[d3][g3] >= 0 ? k3 - b3 + 2 * (this.isReversed ? b3 : 0) : k3;
                break;
              }
              if ((null === (I3 = this.groupCtx.prevYVal[m3 - L3]) || void 0 === I3 ? void 0 : I3[g3]) >= 0) {
                w3 = this.series[d3][g3] >= 0 ? k3 : k3 + b3 - 2 * (this.isReversed ? b3 : 0);
                break;
              }
            }
            void 0 === w3 && (w3 = c3.globals.gridHeight), f3 = null !== (y3 = this.groupCtx.prevYF[0]) && void 0 !== y3 && y3.every(function(t5) {
              return 0 === t5;
            }) && this.groupCtx.prevYF.slice(1, m3).every(function(t5) {
              return t5.every(function(t6) {
                return isNaN(t6);
              });
            }) ? o3 : w3;
          } else
            f3 = o3;
          a3 = this.series[d3][g3] ? f3 - this.series[d3][g3] / this.yRatio[this.yaxisIndex] + 2 * (this.isReversed ? this.series[d3][g3] / this.yRatio[this.yaxisIndex] : 0) : f3;
          var T3 = this.barHelpers.getColumnPaths({ barXPosition: x3, barWidth: r3, y1: f3, y2: a3, yRatio: this.yRatio[this.yaxisIndex], strokeWidth: this.strokeWidth, series: this.series, seriesGroup: l3, realIndex: e3.realIndex, i: d3, j: g3, w: c3 });
          return this.barHelpers.barBackground({ bc: u3, j: g3, i: d3, x1: x3, x2: r3, elSeries: h3 }), i4 += s4, { pathTo: T3.pathTo, pathFrom: T3.pathFrom, goalY: this.barHelpers.getGoalValues("y", null, o3, d3, g3), barXPosition: x3, x: c3.globals.isXNumeric ? i4 - s4 : i4, y: a3 };
        } }]), s3;
      }();
      var kt2 = function(t3) {
        n2(s3, yt2);
        var i3 = d2(s3);
        function s3() {
          return a2(this, s3), i3.apply(this, arguments);
        }
        return r2(s3, [{ key: "draw", value: function(t4, i4, a3) {
          var s4 = this, r3 = this.w, o3 = new m2(this.ctx), n3 = r3.globals.comboCharts ? i4 : r3.config.chart.type, l3 = new R2(this.ctx);
          this.candlestickOptions = this.w.config.plotOptions.candlestick, this.boxOptions = this.w.config.plotOptions.boxPlot, this.isHorizontal = r3.config.plotOptions.bar.horizontal;
          var h3 = new y2(this.ctx, r3);
          t4 = h3.getLogSeries(t4), this.series = t4, this.yRatio = h3.getLogYRatios(this.yRatio), this.barHelpers.initVariables(t4);
          for (var c3 = o3.group({ class: "apexcharts-".concat(n3, "-series apexcharts-plot-series") }), d3 = function(i5) {
            s4.isBoxPlot = "boxPlot" === r3.config.chart.type || "boxPlot" === r3.config.series[i5].type;
            var n4, h4, d4, g4, u3 = void 0, p3 = void 0, f3 = [], b3 = [], v3 = r3.globals.comboCharts ? a3[i5] : i5, m3 = o3.group({ class: "apexcharts-series", seriesName: x2.escapeString(r3.globals.seriesNames[v3]), rel: i5 + 1, "data:realIndex": v3 });
            s4.ctx.series.addCollapsedClassToSeries(m3, v3), t4[i5].length > 0 && (s4.visibleI = s4.visibleI + 1);
            var y3, w3;
            s4.yRatio.length > 1 && (s4.yaxisIndex = v3);
            var k3 = s4.barHelpers.initialPositions();
            p3 = k3.y, y3 = k3.barHeight, h4 = k3.yDivision, g4 = k3.zeroW, u3 = k3.x, w3 = k3.barWidth, n4 = k3.xDivision, d4 = k3.zeroH, b3.push(u3 + w3 / 2);
            for (var A3 = o3.group({ class: "apexcharts-datalabels", "data:realIndex": v3 }), S3 = function(a4) {
              var o4 = s4.barHelpers.getStrokeWidth(i5, a4, v3), c4 = null, x3 = { indexes: { i: i5, j: a4, realIndex: v3 }, x: u3, y: p3, strokeWidth: o4, elSeries: m3 };
              c4 = s4.isHorizontal ? s4.drawHorizontalBoxPaths(e2(e2({}, x3), {}, { yDivision: h4, barHeight: y3, zeroW: g4 })) : s4.drawVerticalBoxPaths(e2(e2({}, x3), {}, { xDivision: n4, barWidth: w3, zeroH: d4 })), p3 = c4.y, u3 = c4.x, a4 > 0 && b3.push(u3 + w3 / 2), f3.push(p3), c4.pathTo.forEach(function(e3, n5) {
                var h5 = !s4.isBoxPlot && s4.candlestickOptions.wick.useFillColor ? c4.color[n5] : r3.globals.stroke.colors[i5], d5 = l3.fillPath({ seriesNumber: v3, dataPointIndex: a4, color: c4.color[n5], value: t4[i5][a4] });
                s4.renderSeries({ realIndex: v3, pathFill: d5, lineFill: h5, j: a4, i: i5, pathFrom: c4.pathFrom, pathTo: e3, strokeWidth: o4, elSeries: m3, x: u3, y: p3, series: t4, barHeight: y3, barWidth: w3, elDataLabelsWrap: A3, visibleSeries: s4.visibleI, type: r3.config.chart.type });
              });
            }, C3 = 0; C3 < r3.globals.dataPoints; C3++)
              S3(C3);
            r3.globals.seriesXvalues[v3] = b3, r3.globals.seriesYvalues[v3] = f3, c3.add(m3);
          }, g3 = 0; g3 < t4.length; g3++)
            d3(g3);
          return c3;
        } }, { key: "drawVerticalBoxPaths", value: function(t4) {
          var e3 = t4.indexes, i4 = t4.x;
          t4.y;
          var a3 = t4.xDivision, s4 = t4.barWidth, r3 = t4.zeroH, o3 = t4.strokeWidth, n3 = this.w, l3 = new m2(this.ctx), h3 = e3.i, c3 = e3.j, d3 = true, g3 = n3.config.plotOptions.candlestick.colors.upward, u3 = n3.config.plotOptions.candlestick.colors.downward, p3 = "";
          this.isBoxPlot && (p3 = [this.boxOptions.colors.lower, this.boxOptions.colors.upper]);
          var f3 = this.yRatio[this.yaxisIndex], x3 = e3.realIndex, b3 = this.getOHLCValue(x3, c3), v3 = r3, y3 = r3;
          b3.o > b3.c && (d3 = false);
          var w3 = Math.min(b3.o, b3.c), k3 = Math.max(b3.o, b3.c), A3 = b3.m;
          n3.globals.isXNumeric && (i4 = (n3.globals.seriesX[x3][c3] - n3.globals.minX) / this.xRatio - s4 / 2);
          var S3 = i4 + s4 * this.visibleI;
          void 0 === this.series[h3][c3] || null === this.series[h3][c3] ? (w3 = r3, k3 = r3) : (w3 = r3 - w3 / f3, k3 = r3 - k3 / f3, v3 = r3 - b3.h / f3, y3 = r3 - b3.l / f3, A3 = r3 - b3.m / f3);
          var C3 = l3.move(S3, r3), L3 = l3.move(S3 + s4 / 2, w3);
          return n3.globals.previousPaths.length > 0 && (L3 = this.getPreviousPath(x3, c3, true)), C3 = this.isBoxPlot ? [l3.move(S3, w3) + l3.line(S3 + s4 / 2, w3) + l3.line(S3 + s4 / 2, v3) + l3.line(S3 + s4 / 4, v3) + l3.line(S3 + s4 - s4 / 4, v3) + l3.line(S3 + s4 / 2, v3) + l3.line(S3 + s4 / 2, w3) + l3.line(S3 + s4, w3) + l3.line(S3 + s4, A3) + l3.line(S3, A3) + l3.line(S3, w3 + o3 / 2), l3.move(S3, A3) + l3.line(S3 + s4, A3) + l3.line(S3 + s4, k3) + l3.line(S3 + s4 / 2, k3) + l3.line(S3 + s4 / 2, y3) + l3.line(S3 + s4 - s4 / 4, y3) + l3.line(S3 + s4 / 4, y3) + l3.line(S3 + s4 / 2, y3) + l3.line(S3 + s4 / 2, k3) + l3.line(S3, k3) + l3.line(S3, A3) + "z"] : [l3.move(S3, k3) + l3.line(S3 + s4 / 2, k3) + l3.line(S3 + s4 / 2, v3) + l3.line(S3 + s4 / 2, k3) + l3.line(S3 + s4, k3) + l3.line(S3 + s4, w3) + l3.line(S3 + s4 / 2, w3) + l3.line(S3 + s4 / 2, y3) + l3.line(S3 + s4 / 2, w3) + l3.line(S3, w3) + l3.line(S3, k3 - o3 / 2)], L3 += l3.move(S3, w3), n3.globals.isXNumeric || (i4 += a3), { pathTo: C3, pathFrom: L3, x: i4, y: k3, barXPosition: S3, color: this.isBoxPlot ? p3 : d3 ? [g3] : [u3] };
        } }, { key: "drawHorizontalBoxPaths", value: function(t4) {
          var e3 = t4.indexes;
          t4.x;
          var i4 = t4.y, a3 = t4.yDivision, s4 = t4.barHeight, r3 = t4.zeroW, o3 = t4.strokeWidth, n3 = this.w, l3 = new m2(this.ctx), h3 = e3.i, c3 = e3.j, d3 = this.boxOptions.colors.lower;
          this.isBoxPlot && (d3 = [this.boxOptions.colors.lower, this.boxOptions.colors.upper]);
          var g3 = this.invertedYRatio, u3 = e3.realIndex, p3 = this.getOHLCValue(u3, c3), f3 = r3, x3 = r3, b3 = Math.min(p3.o, p3.c), v3 = Math.max(p3.o, p3.c), y3 = p3.m;
          n3.globals.isXNumeric && (i4 = (n3.globals.seriesX[u3][c3] - n3.globals.minX) / this.invertedXRatio - s4 / 2);
          var w3 = i4 + s4 * this.visibleI;
          void 0 === this.series[h3][c3] || null === this.series[h3][c3] ? (b3 = r3, v3 = r3) : (b3 = r3 + b3 / g3, v3 = r3 + v3 / g3, f3 = r3 + p3.h / g3, x3 = r3 + p3.l / g3, y3 = r3 + p3.m / g3);
          var k3 = l3.move(r3, w3), A3 = l3.move(b3, w3 + s4 / 2);
          return n3.globals.previousPaths.length > 0 && (A3 = this.getPreviousPath(u3, c3, true)), k3 = [l3.move(b3, w3) + l3.line(b3, w3 + s4 / 2) + l3.line(f3, w3 + s4 / 2) + l3.line(f3, w3 + s4 / 2 - s4 / 4) + l3.line(f3, w3 + s4 / 2 + s4 / 4) + l3.line(f3, w3 + s4 / 2) + l3.line(b3, w3 + s4 / 2) + l3.line(b3, w3 + s4) + l3.line(y3, w3 + s4) + l3.line(y3, w3) + l3.line(b3 + o3 / 2, w3), l3.move(y3, w3) + l3.line(y3, w3 + s4) + l3.line(v3, w3 + s4) + l3.line(v3, w3 + s4 / 2) + l3.line(x3, w3 + s4 / 2) + l3.line(x3, w3 + s4 - s4 / 4) + l3.line(x3, w3 + s4 / 4) + l3.line(x3, w3 + s4 / 2) + l3.line(v3, w3 + s4 / 2) + l3.line(v3, w3) + l3.line(y3, w3) + "z"], A3 += l3.move(b3, w3), n3.globals.isXNumeric || (i4 += a3), { pathTo: k3, pathFrom: A3, x: v3, y: i4, barYPosition: w3, color: d3 };
        } }, { key: "getOHLCValue", value: function(t4, e3) {
          var i4 = this.w;
          return { o: this.isBoxPlot ? i4.globals.seriesCandleH[t4][e3] : i4.globals.seriesCandleO[t4][e3], h: this.isBoxPlot ? i4.globals.seriesCandleO[t4][e3] : i4.globals.seriesCandleH[t4][e3], m: i4.globals.seriesCandleM[t4][e3], l: this.isBoxPlot ? i4.globals.seriesCandleC[t4][e3] : i4.globals.seriesCandleL[t4][e3], c: this.isBoxPlot ? i4.globals.seriesCandleL[t4][e3] : i4.globals.seriesCandleC[t4][e3] };
        } }]), s3;
      }();
      var At2 = function() {
        function t3(e3) {
          a2(this, t3), this.ctx = e3, this.w = e3.w;
        }
        return r2(t3, [{ key: "checkColorRange", value: function() {
          var t4 = this.w, e3 = false, i3 = t4.config.plotOptions[t4.config.chart.type];
          return i3.colorScale.ranges.length > 0 && i3.colorScale.ranges.map(function(t5, i4) {
            t5.from <= 0 && (e3 = true);
          }), e3;
        } }, { key: "getShadeColor", value: function(t4, e3, i3, a3) {
          var s3 = this.w, r3 = 1, o3 = s3.config.plotOptions[t4].shadeIntensity, n3 = this.determineColor(t4, e3, i3);
          s3.globals.hasNegs || a3 ? r3 = s3.config.plotOptions[t4].reverseNegativeShade ? n3.percent < 0 ? n3.percent / 100 * (1.25 * o3) : (1 - n3.percent / 100) * (1.25 * o3) : n3.percent <= 0 ? 1 - (1 + n3.percent / 100) * o3 : (1 - n3.percent / 100) * o3 : (r3 = 1 - n3.percent / 100, "treemap" === t4 && (r3 = (1 - n3.percent / 100) * (1.25 * o3)));
          var l3 = n3.color, h3 = new x2();
          return s3.config.plotOptions[t4].enableShades && (l3 = "dark" === this.w.config.theme.mode ? x2.hexToRgba(h3.shadeColor(-1 * r3, n3.color), s3.config.fill.opacity) : x2.hexToRgba(h3.shadeColor(r3, n3.color), s3.config.fill.opacity)), { color: l3, colorProps: n3 };
        } }, { key: "determineColor", value: function(t4, e3, i3) {
          var a3 = this.w, s3 = a3.globals.series[e3][i3], r3 = a3.config.plotOptions[t4], o3 = r3.colorScale.inverse ? i3 : e3;
          r3.distributed && "treemap" === a3.config.chart.type && (o3 = i3);
          var n3 = a3.globals.colors[o3], l3 = null, h3 = Math.min.apply(Math, u2(a3.globals.series[e3])), c3 = Math.max.apply(Math, u2(a3.globals.series[e3]));
          r3.distributed || "heatmap" !== t4 || (h3 = a3.globals.minY, c3 = a3.globals.maxY), void 0 !== r3.colorScale.min && (h3 = r3.colorScale.min < a3.globals.minY ? r3.colorScale.min : a3.globals.minY, c3 = r3.colorScale.max > a3.globals.maxY ? r3.colorScale.max : a3.globals.maxY);
          var d3 = Math.abs(c3) + Math.abs(h3), g3 = 100 * s3 / (0 === d3 ? d3 - 1e-6 : d3);
          r3.colorScale.ranges.length > 0 && r3.colorScale.ranges.map(function(t5, e4) {
            if (s3 >= t5.from && s3 <= t5.to) {
              n3 = t5.color, l3 = t5.foreColor ? t5.foreColor : null, h3 = t5.from, c3 = t5.to;
              var i4 = Math.abs(c3) + Math.abs(h3);
              g3 = 100 * s3 / (0 === i4 ? i4 - 1e-6 : i4);
            }
          });
          return { color: n3, foreColor: l3, percent: g3 };
        } }, { key: "calculateDataLabels", value: function(t4) {
          var e3 = t4.text, i3 = t4.x, a3 = t4.y, s3 = t4.i, r3 = t4.j, o3 = t4.colorProps, n3 = t4.fontSize, l3 = this.w.config.dataLabels, h3 = new m2(this.ctx), c3 = new O2(this.ctx), d3 = null;
          if (l3.enabled) {
            d3 = h3.group({ class: "apexcharts-data-labels" });
            var g3 = l3.offsetX, u3 = l3.offsetY, p3 = i3 + g3, f3 = a3 + parseFloat(l3.style.fontSize) / 3 + u3;
            c3.plotDataLabelsText({ x: p3, y: f3, text: e3, i: s3, j: r3, color: o3.foreColor, parent: d3, fontSize: n3, dataLabelsConfig: l3 });
          }
          return d3;
        } }, { key: "addListeners", value: function(t4) {
          var e3 = new m2(this.ctx);
          t4.node.addEventListener("mouseenter", e3.pathMouseEnter.bind(this, t4)), t4.node.addEventListener("mouseleave", e3.pathMouseLeave.bind(this, t4)), t4.node.addEventListener("mousedown", e3.pathMouseDown.bind(this, t4));
        } }]), t3;
      }();
      var St2 = function() {
        function t3(e3, i3) {
          a2(this, t3), this.ctx = e3, this.w = e3.w, this.xRatio = i3.xRatio, this.yRatio = i3.yRatio, this.dynamicAnim = this.w.config.chart.animations.dynamicAnimation, this.helpers = new At2(e3), this.rectRadius = this.w.config.plotOptions.heatmap.radius, this.strokeWidth = this.w.config.stroke.show ? this.w.config.stroke.width : 0;
        }
        return r2(t3, [{ key: "draw", value: function(t4) {
          var e3 = this.w, i3 = new m2(this.ctx), a3 = i3.group({ class: "apexcharts-heatmap" });
          a3.attr("clip-path", "url(#gridRectMask".concat(e3.globals.cuid, ")"));
          var s3 = e3.globals.gridWidth / e3.globals.dataPoints, r3 = e3.globals.gridHeight / e3.globals.series.length, o3 = 0, n3 = false;
          this.negRange = this.helpers.checkColorRange();
          var l3 = t4.slice();
          e3.config.yaxis[0].reversed && (n3 = true, l3.reverse());
          for (var h3 = n3 ? 0 : l3.length - 1; n3 ? h3 < l3.length : h3 >= 0; n3 ? h3++ : h3--) {
            var c3 = i3.group({ class: "apexcharts-series apexcharts-heatmap-series", seriesName: x2.escapeString(e3.globals.seriesNames[h3]), rel: h3 + 1, "data:realIndex": h3 });
            if (this.ctx.series.addCollapsedClassToSeries(c3, h3), e3.config.chart.dropShadow.enabled) {
              var d3 = e3.config.chart.dropShadow;
              new v2(this.ctx).dropShadow(c3, d3, h3);
            }
            for (var g3 = 0, u3 = e3.config.plotOptions.heatmap.shadeIntensity, p3 = 0; p3 < l3[h3].length; p3++) {
              var f3 = this.helpers.getShadeColor(e3.config.chart.type, h3, p3, this.negRange), b3 = f3.color, y3 = f3.colorProps;
              if ("image" === e3.config.fill.type)
                b3 = new R2(this.ctx).fillPath({ seriesNumber: h3, dataPointIndex: p3, opacity: e3.globals.hasNegs ? y3.percent < 0 ? 1 - (1 + y3.percent / 100) : u3 + y3.percent / 100 : y3.percent / 100, patternID: x2.randomId(), width: e3.config.fill.image.width ? e3.config.fill.image.width : s3, height: e3.config.fill.image.height ? e3.config.fill.image.height : r3 });
              var w3 = this.rectRadius, k3 = i3.drawRect(g3, o3, s3, r3, w3);
              if (k3.attr({ cx: g3, cy: o3 }), k3.node.classList.add("apexcharts-heatmap-rect"), c3.add(k3), k3.attr({ fill: b3, i: h3, index: h3, j: p3, val: t4[h3][p3], "stroke-width": this.strokeWidth, stroke: e3.config.plotOptions.heatmap.useFillColorAsStroke ? b3 : e3.globals.stroke.colors[0], color: b3 }), this.helpers.addListeners(k3), e3.config.chart.animations.enabled && !e3.globals.dataChanged) {
                var A3 = 1;
                e3.globals.resized || (A3 = e3.config.chart.animations.speed), this.animateHeatMap(k3, g3, o3, s3, r3, A3);
              }
              if (e3.globals.dataChanged) {
                var S3 = 1;
                if (this.dynamicAnim.enabled && e3.globals.shouldAnimate) {
                  S3 = this.dynamicAnim.speed;
                  var C3 = e3.globals.previousPaths[h3] && e3.globals.previousPaths[h3][p3] && e3.globals.previousPaths[h3][p3].color;
                  C3 || (C3 = "rgba(255, 255, 255, 0)"), this.animateHeatColor(k3, x2.isColorHex(C3) ? C3 : x2.rgb2hex(C3), x2.isColorHex(b3) ? b3 : x2.rgb2hex(b3), S3);
                }
              }
              var L3 = (0, e3.config.dataLabels.formatter)(e3.globals.series[h3][p3], { value: e3.globals.series[h3][p3], seriesIndex: h3, dataPointIndex: p3, w: e3 }), P3 = this.helpers.calculateDataLabels({ text: L3, x: g3 + s3 / 2, y: o3 + r3 / 2, i: h3, j: p3, colorProps: y3, series: l3 });
              null !== P3 && c3.add(P3), g3 += s3;
            }
            o3 += r3, a3.add(c3);
          }
          var I3 = e3.globals.yAxisScale[0].result.slice();
          return e3.config.yaxis[0].reversed ? I3.unshift("") : I3.push(""), e3.globals.yAxisScale[0].result = I3, a3;
        } }, { key: "animateHeatMap", value: function(t4, e3, i3, a3, s3, r3) {
          var o3 = new b2(this.ctx);
          o3.animateRect(t4, { x: e3 + a3 / 2, y: i3 + s3 / 2, width: 0, height: 0 }, { x: e3, y: i3, width: a3, height: s3 }, r3, function() {
            o3.animationCompleted(t4);
          });
        } }, { key: "animateHeatColor", value: function(t4, e3, i3, a3) {
          t4.attr({ fill: e3 }).animate(a3).attr({ fill: i3 });
        } }]), t3;
      }();
      var Ct2 = function() {
        function t3(e3) {
          a2(this, t3), this.ctx = e3, this.w = e3.w;
        }
        return r2(t3, [{ key: "drawYAxisTexts", value: function(t4, e3, i3, a3) {
          var s3 = this.w, r3 = s3.config.yaxis[0], o3 = s3.globals.yLabelFormatters[0];
          return new m2(this.ctx).drawText({ x: t4 + r3.labels.offsetX, y: e3 + r3.labels.offsetY, text: o3(a3, i3), textAnchor: "middle", fontSize: r3.labels.style.fontSize, fontFamily: r3.labels.style.fontFamily, foreColor: Array.isArray(r3.labels.style.colors) ? r3.labels.style.colors[i3] : r3.labels.style.colors });
        } }]), t3;
      }();
      var Lt2 = function() {
        function t3(e3) {
          a2(this, t3), this.ctx = e3, this.w = e3.w;
          var i3 = this.w;
          this.chartType = this.w.config.chart.type, this.initialAnim = this.w.config.chart.animations.enabled, this.dynamicAnim = this.initialAnim && this.w.config.chart.animations.dynamicAnimation.enabled, this.animBeginArr = [0], this.animDur = 0, this.donutDataLabels = this.w.config.plotOptions.pie.donut.labels, this.lineColorArr = void 0 !== i3.globals.stroke.colors ? i3.globals.stroke.colors : i3.globals.colors, this.defaultSize = Math.min(i3.globals.gridWidth, i3.globals.gridHeight), this.centerY = this.defaultSize / 2, this.centerX = i3.globals.gridWidth / 2, "radialBar" === i3.config.chart.type ? this.fullAngle = 360 : this.fullAngle = Math.abs(i3.config.plotOptions.pie.endAngle - i3.config.plotOptions.pie.startAngle), this.initialAngle = i3.config.plotOptions.pie.startAngle % this.fullAngle, i3.globals.radialSize = this.defaultSize / 2.05 - i3.config.stroke.width - (i3.config.chart.sparkline.enabled ? 0 : i3.config.chart.dropShadow.blur), this.donutSize = i3.globals.radialSize * parseInt(i3.config.plotOptions.pie.donut.size, 10) / 100, this.maxY = 0, this.sliceLabels = [], this.sliceSizes = [], this.prevSectorAngleArr = [];
        }
        return r2(t3, [{ key: "draw", value: function(t4) {
          var e3 = this, i3 = this.w, a3 = new m2(this.ctx);
          if (this.ret = a3.group({ class: "apexcharts-pie" }), i3.globals.noData)
            return this.ret;
          for (var s3 = 0, r3 = 0; r3 < t4.length; r3++)
            s3 += x2.negToZero(t4[r3]);
          var o3 = [], n3 = a3.group();
          0 === s3 && (s3 = 1e-5), t4.forEach(function(t5) {
            e3.maxY = Math.max(e3.maxY, t5);
          }), i3.config.yaxis[0].max && (this.maxY = i3.config.yaxis[0].max), "back" === i3.config.grid.position && "polarArea" === this.chartType && this.drawPolarElements(this.ret);
          for (var l3 = 0; l3 < t4.length; l3++) {
            var h3 = this.fullAngle * x2.negToZero(t4[l3]) / s3;
            o3.push(h3), "polarArea" === this.chartType ? (o3[l3] = this.fullAngle / t4.length, this.sliceSizes.push(i3.globals.radialSize * t4[l3] / this.maxY)) : this.sliceSizes.push(i3.globals.radialSize);
          }
          if (i3.globals.dataChanged) {
            for (var c3, d3 = 0, g3 = 0; g3 < i3.globals.previousPaths.length; g3++)
              d3 += x2.negToZero(i3.globals.previousPaths[g3]);
            for (var u3 = 0; u3 < i3.globals.previousPaths.length; u3++)
              c3 = this.fullAngle * x2.negToZero(i3.globals.previousPaths[u3]) / d3, this.prevSectorAngleArr.push(c3);
          }
          this.donutSize < 0 && (this.donutSize = 0);
          var p3 = i3.config.plotOptions.pie.customScale, f3 = i3.globals.gridWidth / 2, b3 = i3.globals.gridHeight / 2, v3 = f3 - i3.globals.gridWidth / 2 * p3, y3 = b3 - i3.globals.gridHeight / 2 * p3;
          if ("donut" === this.chartType) {
            var w3 = a3.drawCircle(this.donutSize);
            w3.attr({ cx: this.centerX, cy: this.centerY, fill: i3.config.plotOptions.pie.donut.background ? i3.config.plotOptions.pie.donut.background : "transparent" }), n3.add(w3);
          }
          var k3 = this.drawArcs(o3, t4);
          if (this.sliceLabels.forEach(function(t5) {
            k3.add(t5);
          }), n3.attr({ transform: "translate(".concat(v3, ", ").concat(y3, ") scale(").concat(p3, ")") }), n3.add(k3), this.ret.add(n3), this.donutDataLabels.show) {
            var A3 = this.renderInnerDataLabels(this.donutDataLabels, { hollowSize: this.donutSize, centerX: this.centerX, centerY: this.centerY, opacity: this.donutDataLabels.show, translateX: v3, translateY: y3 });
            this.ret.add(A3);
          }
          return "front" === i3.config.grid.position && "polarArea" === this.chartType && this.drawPolarElements(this.ret), this.ret;
        } }, { key: "drawArcs", value: function(t4, e3) {
          var i3 = this.w, a3 = new v2(this.ctx), s3 = new m2(this.ctx), r3 = new R2(this.ctx), o3 = s3.group({ class: "apexcharts-slices" }), n3 = this.initialAngle, l3 = this.initialAngle, h3 = this.initialAngle, c3 = this.initialAngle;
          this.strokeWidth = i3.config.stroke.show ? i3.config.stroke.width : 0;
          for (var d3 = 0; d3 < t4.length; d3++) {
            var g3 = s3.group({ class: "apexcharts-series apexcharts-pie-series", seriesName: x2.escapeString(i3.globals.seriesNames[d3]), rel: d3 + 1, "data:realIndex": d3 });
            o3.add(g3), l3 = c3, h3 = (n3 = h3) + t4[d3], c3 = l3 + this.prevSectorAngleArr[d3];
            var u3 = h3 < n3 ? this.fullAngle + h3 - n3 : h3 - n3, p3 = r3.fillPath({ seriesNumber: d3, size: this.sliceSizes[d3], value: e3[d3] }), f3 = this.getChangedPath(l3, c3), b3 = s3.drawPath({ d: f3, stroke: Array.isArray(this.lineColorArr) ? this.lineColorArr[d3] : this.lineColorArr, strokeWidth: 0, fill: p3, fillOpacity: i3.config.fill.opacity, classes: "apexcharts-pie-area apexcharts-".concat(this.chartType.toLowerCase(), "-slice-").concat(d3) });
            if (b3.attr({ index: 0, j: d3 }), a3.setSelectionFilter(b3, 0, d3), i3.config.chart.dropShadow.enabled) {
              var y3 = i3.config.chart.dropShadow;
              a3.dropShadow(b3, y3, d3);
            }
            this.addListeners(b3, this.donutDataLabels), m2.setAttrs(b3.node, { "data:angle": u3, "data:startAngle": n3, "data:strokeWidth": this.strokeWidth, "data:value": e3[d3] });
            var w3 = { x: 0, y: 0 };
            "pie" === this.chartType || "polarArea" === this.chartType ? w3 = x2.polarToCartesian(this.centerX, this.centerY, i3.globals.radialSize / 1.25 + i3.config.plotOptions.pie.dataLabels.offset, (n3 + u3 / 2) % this.fullAngle) : "donut" === this.chartType && (w3 = x2.polarToCartesian(this.centerX, this.centerY, (i3.globals.radialSize + this.donutSize) / 2 + i3.config.plotOptions.pie.dataLabels.offset, (n3 + u3 / 2) % this.fullAngle)), g3.add(b3);
            var k3 = 0;
            if (!this.initialAnim || i3.globals.resized || i3.globals.dataChanged ? this.animBeginArr.push(0) : (0 === (k3 = u3 / this.fullAngle * i3.config.chart.animations.speed) && (k3 = 1), this.animDur = k3 + this.animDur, this.animBeginArr.push(this.animDur)), this.dynamicAnim && i3.globals.dataChanged ? this.animatePaths(b3, { size: this.sliceSizes[d3], endAngle: h3, startAngle: n3, prevStartAngle: l3, prevEndAngle: c3, animateStartingPos: true, i: d3, animBeginArr: this.animBeginArr, shouldSetPrevPaths: true, dur: i3.config.chart.animations.dynamicAnimation.speed }) : this.animatePaths(b3, { size: this.sliceSizes[d3], endAngle: h3, startAngle: n3, i: d3, totalItems: t4.length - 1, animBeginArr: this.animBeginArr, dur: k3 }), i3.config.plotOptions.pie.expandOnClick && "polarArea" !== this.chartType && b3.click(this.pieClicked.bind(this, d3)), void 0 !== i3.globals.selectedDataPoints[0] && i3.globals.selectedDataPoints[0].indexOf(d3) > -1 && this.pieClicked(d3), i3.config.dataLabels.enabled) {
              var A3 = w3.x, S3 = w3.y, C3 = 100 * u3 / this.fullAngle + "%";
              if (0 !== u3 && i3.config.plotOptions.pie.dataLabels.minAngleToShowLabel < t4[d3]) {
                var L3 = i3.config.dataLabels.formatter;
                void 0 !== L3 && (C3 = L3(i3.globals.seriesPercent[d3][0], { seriesIndex: d3, w: i3 }));
                var P3 = i3.globals.dataLabels.style.colors[d3], I3 = s3.group({ class: "apexcharts-datalabels" }), T3 = s3.drawText({ x: A3, y: S3, text: C3, textAnchor: "middle", fontSize: i3.config.dataLabels.style.fontSize, fontFamily: i3.config.dataLabels.style.fontFamily, fontWeight: i3.config.dataLabels.style.fontWeight, foreColor: P3 });
                if (I3.add(T3), i3.config.dataLabels.dropShadow.enabled) {
                  var M3 = i3.config.dataLabels.dropShadow;
                  a3.dropShadow(T3, M3);
                }
                T3.node.classList.add("apexcharts-pie-label"), i3.config.chart.animations.animate && false === i3.globals.resized && (T3.node.classList.add("apexcharts-pie-label-delay"), T3.node.style.animationDelay = i3.config.chart.animations.speed / 940 + "s"), this.sliceLabels.push(I3);
              }
            }
          }
          return o3;
        } }, { key: "addListeners", value: function(t4, e3) {
          var i3 = new m2(this.ctx);
          t4.node.addEventListener("mouseenter", i3.pathMouseEnter.bind(this, t4)), t4.node.addEventListener("mouseleave", i3.pathMouseLeave.bind(this, t4)), t4.node.addEventListener("mouseleave", this.revertDataLabelsInner.bind(this, t4.node, e3)), t4.node.addEventListener("mousedown", i3.pathMouseDown.bind(this, t4)), this.donutDataLabels.total.showAlways || (t4.node.addEventListener("mouseenter", this.printDataLabelsInner.bind(this, t4.node, e3)), t4.node.addEventListener("mousedown", this.printDataLabelsInner.bind(this, t4.node, e3)));
        } }, { key: "animatePaths", value: function(t4, e3) {
          var i3 = this.w, a3 = e3.endAngle < e3.startAngle ? this.fullAngle + e3.endAngle - e3.startAngle : e3.endAngle - e3.startAngle, s3 = a3, r3 = e3.startAngle, o3 = e3.startAngle;
          void 0 !== e3.prevStartAngle && void 0 !== e3.prevEndAngle && (r3 = e3.prevEndAngle, s3 = e3.prevEndAngle < e3.prevStartAngle ? this.fullAngle + e3.prevEndAngle - e3.prevStartAngle : e3.prevEndAngle - e3.prevStartAngle), e3.i === i3.config.series.length - 1 && (a3 + o3 > this.fullAngle ? e3.endAngle = e3.endAngle - (a3 + o3) : a3 + o3 < this.fullAngle && (e3.endAngle = e3.endAngle + (this.fullAngle - (a3 + o3)))), a3 === this.fullAngle && (a3 = this.fullAngle - 0.01), this.animateArc(t4, r3, o3, a3, s3, e3);
        } }, { key: "animateArc", value: function(t4, e3, i3, a3, s3, r3) {
          var o3, n3 = this, l3 = this.w, h3 = new b2(this.ctx), c3 = r3.size;
          (isNaN(e3) || isNaN(s3)) && (e3 = i3, s3 = a3, r3.dur = 0);
          var d3 = a3, g3 = i3, u3 = e3 < i3 ? this.fullAngle + e3 - i3 : e3 - i3;
          l3.globals.dataChanged && r3.shouldSetPrevPaths && r3.prevEndAngle && (o3 = n3.getPiePath({ me: n3, startAngle: r3.prevStartAngle, angle: r3.prevEndAngle < r3.prevStartAngle ? this.fullAngle + r3.prevEndAngle - r3.prevStartAngle : r3.prevEndAngle - r3.prevStartAngle, size: c3 }), t4.attr({ d: o3 })), 0 !== r3.dur ? t4.animate(r3.dur, l3.globals.easing, r3.animBeginArr[r3.i]).afterAll(function() {
            "pie" !== n3.chartType && "donut" !== n3.chartType && "polarArea" !== n3.chartType || this.animate(l3.config.chart.animations.dynamicAnimation.speed).attr({ "stroke-width": n3.strokeWidth }), r3.i === l3.config.series.length - 1 && h3.animationCompleted(t4);
          }).during(function(l4) {
            d3 = u3 + (a3 - u3) * l4, r3.animateStartingPos && (d3 = s3 + (a3 - s3) * l4, g3 = e3 - s3 + (i3 - (e3 - s3)) * l4), o3 = n3.getPiePath({ me: n3, startAngle: g3, angle: d3, size: c3 }), t4.node.setAttribute("data:pathOrig", o3), t4.attr({ d: o3 });
          }) : (o3 = n3.getPiePath({ me: n3, startAngle: g3, angle: a3, size: c3 }), r3.isTrack || (l3.globals.animationEnded = true), t4.node.setAttribute("data:pathOrig", o3), t4.attr({ d: o3, "stroke-width": n3.strokeWidth }));
        } }, { key: "pieClicked", value: function(t4) {
          var e3, i3 = this.w, a3 = this, s3 = a3.sliceSizes[t4] + (i3.config.plotOptions.pie.expandOnClick ? 4 : 0), r3 = i3.globals.dom.Paper.select(".apexcharts-".concat(a3.chartType.toLowerCase(), "-slice-").concat(t4)).members[0];
          if ("true" !== r3.attr("data:pieClicked")) {
            var o3 = i3.globals.dom.baseEl.getElementsByClassName("apexcharts-pie-area");
            Array.prototype.forEach.call(o3, function(t5) {
              t5.setAttribute("data:pieClicked", "false");
              var e4 = t5.getAttribute("data:pathOrig");
              e4 && t5.setAttribute("d", e4);
            }), r3.attr("data:pieClicked", "true");
            var n3 = parseInt(r3.attr("data:startAngle"), 10), l3 = parseInt(r3.attr("data:angle"), 10);
            e3 = a3.getPiePath({ me: a3, startAngle: n3, angle: l3, size: s3 }), 360 !== l3 && r3.plot(e3);
          } else {
            r3.attr({ "data:pieClicked": "false" }), this.revertDataLabelsInner(r3.node, this.donutDataLabels);
            var h3 = r3.attr("data:pathOrig");
            r3.attr({ d: h3 });
          }
        } }, { key: "getChangedPath", value: function(t4, e3) {
          var i3 = "";
          return this.dynamicAnim && this.w.globals.dataChanged && (i3 = this.getPiePath({ me: this, startAngle: t4, angle: e3 - t4, size: this.size })), i3;
        } }, { key: "getPiePath", value: function(t4) {
          var e3, i3 = t4.me, a3 = t4.startAngle, s3 = t4.angle, r3 = t4.size, o3 = new m2(this.ctx), n3 = a3, l3 = Math.PI * (n3 - 90) / 180, h3 = s3 + a3;
          Math.ceil(h3) >= this.fullAngle + this.w.config.plotOptions.pie.startAngle % this.fullAngle && (h3 = this.fullAngle + this.w.config.plotOptions.pie.startAngle % this.fullAngle - 0.01), Math.ceil(h3) > this.fullAngle && (h3 -= this.fullAngle);
          var c3 = Math.PI * (h3 - 90) / 180, d3 = i3.centerX + r3 * Math.cos(l3), g3 = i3.centerY + r3 * Math.sin(l3), u3 = i3.centerX + r3 * Math.cos(c3), p3 = i3.centerY + r3 * Math.sin(c3), f3 = x2.polarToCartesian(i3.centerX, i3.centerY, i3.donutSize, h3), b3 = x2.polarToCartesian(i3.centerX, i3.centerY, i3.donutSize, n3), v3 = s3 > 180 ? 1 : 0, y3 = ["M", d3, g3, "A", r3, r3, 0, v3, 1, u3, p3];
          return e3 = "donut" === i3.chartType ? [].concat(y3, ["L", f3.x, f3.y, "A", i3.donutSize, i3.donutSize, 0, v3, 0, b3.x, b3.y, "L", d3, g3, "z"]).join(" ") : "pie" === i3.chartType || "polarArea" === i3.chartType ? [].concat(y3, ["L", i3.centerX, i3.centerY, "L", d3, g3]).join(" ") : [].concat(y3).join(" "), o3.roundPathCorners(e3, 2 * this.strokeWidth);
        } }, { key: "drawPolarElements", value: function(t4) {
          var e3 = this.w, i3 = new _2(this.ctx), a3 = new m2(this.ctx), s3 = new Ct2(this.ctx), r3 = a3.group(), o3 = a3.group(), n3 = i3.niceScale(0, Math.ceil(this.maxY), e3.config.yaxis[0].tickAmount, 0, true), l3 = n3.result.reverse(), h3 = n3.result.length;
          this.maxY = n3.niceMax;
          for (var c3 = e3.globals.radialSize, d3 = c3 / (h3 - 1), g3 = 0; g3 < h3 - 1; g3++) {
            var u3 = a3.drawCircle(c3);
            if (u3.attr({ cx: this.centerX, cy: this.centerY, fill: "none", "stroke-width": e3.config.plotOptions.polarArea.rings.strokeWidth, stroke: e3.config.plotOptions.polarArea.rings.strokeColor }), e3.config.yaxis[0].show) {
              var p3 = s3.drawYAxisTexts(this.centerX, this.centerY - c3 + parseInt(e3.config.yaxis[0].labels.style.fontSize, 10) / 2, g3, l3[g3]);
              o3.add(p3);
            }
            r3.add(u3), c3 -= d3;
          }
          this.drawSpokes(t4), t4.add(r3), t4.add(o3);
        } }, { key: "renderInnerDataLabels", value: function(t4, e3) {
          var i3 = this.w, a3 = new m2(this.ctx), s3 = a3.group({ class: "apexcharts-datalabels-group", transform: "translate(".concat(e3.translateX ? e3.translateX : 0, ", ").concat(e3.translateY ? e3.translateY : 0, ") scale(").concat(i3.config.plotOptions.pie.customScale, ")") }), r3 = t4.total.show;
          s3.node.style.opacity = e3.opacity;
          var o3, n3, l3 = e3.centerX, h3 = e3.centerY;
          o3 = void 0 === t4.name.color ? i3.globals.colors[0] : t4.name.color;
          var c3 = t4.name.fontSize, d3 = t4.name.fontFamily, g3 = t4.name.fontWeight;
          n3 = void 0 === t4.value.color ? i3.config.chart.foreColor : t4.value.color;
          var u3 = t4.value.formatter, p3 = "", f3 = "";
          if (r3 ? (o3 = t4.total.color, c3 = t4.total.fontSize, d3 = t4.total.fontFamily, g3 = t4.total.fontWeight, f3 = t4.total.label, p3 = t4.total.formatter(i3)) : 1 === i3.globals.series.length && (p3 = u3(i3.globals.series[0], i3), f3 = i3.globals.seriesNames[0]), f3 && (f3 = t4.name.formatter(f3, t4.total.show, i3)), t4.name.show) {
            var x3 = a3.drawText({ x: l3, y: h3 + parseFloat(t4.name.offsetY), text: f3, textAnchor: "middle", foreColor: o3, fontSize: c3, fontWeight: g3, fontFamily: d3 });
            x3.node.classList.add("apexcharts-datalabel-label"), s3.add(x3);
          }
          if (t4.value.show) {
            var b3 = t4.name.show ? parseFloat(t4.value.offsetY) + 16 : t4.value.offsetY, v3 = a3.drawText({ x: l3, y: h3 + b3, text: p3, textAnchor: "middle", foreColor: n3, fontWeight: t4.value.fontWeight, fontSize: t4.value.fontSize, fontFamily: t4.value.fontFamily });
            v3.node.classList.add("apexcharts-datalabel-value"), s3.add(v3);
          }
          return s3;
        } }, { key: "printInnerLabels", value: function(t4, e3, i3, a3) {
          var s3, r3 = this.w;
          a3 ? s3 = void 0 === t4.name.color ? r3.globals.colors[parseInt(a3.parentNode.getAttribute("rel"), 10) - 1] : t4.name.color : r3.globals.series.length > 1 && t4.total.show && (s3 = t4.total.color);
          var o3 = r3.globals.dom.baseEl.querySelector(".apexcharts-datalabel-label"), n3 = r3.globals.dom.baseEl.querySelector(".apexcharts-datalabel-value");
          i3 = (0, t4.value.formatter)(i3, r3), a3 || "function" != typeof t4.total.formatter || (i3 = t4.total.formatter(r3));
          var l3 = e3 === t4.total.label;
          e3 = t4.name.formatter(e3, l3, r3), null !== o3 && (o3.textContent = e3), null !== n3 && (n3.textContent = i3), null !== o3 && (o3.style.fill = s3);
        } }, { key: "printDataLabelsInner", value: function(t4, e3) {
          var i3 = this.w, a3 = t4.getAttribute("data:value"), s3 = i3.globals.seriesNames[parseInt(t4.parentNode.getAttribute("rel"), 10) - 1];
          i3.globals.series.length > 1 && this.printInnerLabels(e3, s3, a3, t4);
          var r3 = i3.globals.dom.baseEl.querySelector(".apexcharts-datalabels-group");
          null !== r3 && (r3.style.opacity = 1);
        } }, { key: "drawSpokes", value: function(t4) {
          var e3 = this, i3 = this.w, a3 = new m2(this.ctx), s3 = i3.config.plotOptions.polarArea.spokes;
          if (0 !== s3.strokeWidth) {
            for (var r3 = [], o3 = 360 / i3.globals.series.length, n3 = 0; n3 < i3.globals.series.length; n3++)
              r3.push(x2.polarToCartesian(this.centerX, this.centerY, i3.globals.radialSize, i3.config.plotOptions.pie.startAngle + o3 * n3));
            r3.forEach(function(i4, r4) {
              var o4 = a3.drawLine(i4.x, i4.y, e3.centerX, e3.centerY, Array.isArray(s3.connectorColors) ? s3.connectorColors[r4] : s3.connectorColors);
              t4.add(o4);
            });
          }
        } }, { key: "revertDataLabelsInner", value: function(t4, e3, i3) {
          var a3 = this, s3 = this.w, r3 = s3.globals.dom.baseEl.querySelector(".apexcharts-datalabels-group"), o3 = false, n3 = s3.globals.dom.baseEl.getElementsByClassName("apexcharts-pie-area"), l3 = function(t5) {
            var i4 = t5.makeSliceOut, s4 = t5.printLabel;
            Array.prototype.forEach.call(n3, function(t6) {
              "true" === t6.getAttribute("data:pieClicked") && (i4 && (o3 = true), s4 && a3.printDataLabelsInner(t6, e3));
            });
          };
          if (l3({ makeSliceOut: true, printLabel: false }), e3.total.show && s3.globals.series.length > 1)
            o3 && !e3.total.showAlways ? l3({ makeSliceOut: false, printLabel: true }) : this.printInnerLabels(e3, e3.total.label, e3.total.formatter(s3));
          else if (l3({ makeSliceOut: false, printLabel: true }), !o3)
            if (s3.globals.selectedDataPoints.length && s3.globals.series.length > 1)
              if (s3.globals.selectedDataPoints[0].length > 0) {
                var h3 = s3.globals.selectedDataPoints[0], c3 = s3.globals.dom.baseEl.querySelector(".apexcharts-".concat(this.chartType.toLowerCase(), "-slice-").concat(h3));
                this.printDataLabelsInner(c3, e3);
              } else
                r3 && s3.globals.selectedDataPoints.length && 0 === s3.globals.selectedDataPoints[0].length && (r3.style.opacity = 0);
            else
              r3 && s3.globals.series.length > 1 && (r3.style.opacity = 0);
        } }]), t3;
      }();
      var Pt2 = function() {
        function t3(e3) {
          a2(this, t3), this.ctx = e3, this.w = e3.w, this.chartType = this.w.config.chart.type, this.initialAnim = this.w.config.chart.animations.enabled, this.dynamicAnim = this.initialAnim && this.w.config.chart.animations.dynamicAnimation.enabled, this.animDur = 0;
          var i3 = this.w;
          this.graphics = new m2(this.ctx), this.lineColorArr = void 0 !== i3.globals.stroke.colors ? i3.globals.stroke.colors : i3.globals.colors, this.defaultSize = i3.globals.svgHeight < i3.globals.svgWidth ? i3.globals.gridHeight + 1.5 * i3.globals.goldenPadding : i3.globals.gridWidth, this.isLog = i3.config.yaxis[0].logarithmic, this.coreUtils = new y2(this.ctx), this.maxValue = this.isLog ? this.coreUtils.getLogVal(i3.globals.maxY, 0) : i3.globals.maxY, this.minValue = this.isLog ? this.coreUtils.getLogVal(this.w.globals.minY, 0) : i3.globals.minY, this.polygons = i3.config.plotOptions.radar.polygons, this.strokeWidth = i3.config.stroke.show ? i3.config.stroke.width : 0, this.size = this.defaultSize / 2.1 - this.strokeWidth - i3.config.chart.dropShadow.blur, i3.config.xaxis.labels.show && (this.size = this.size - i3.globals.xAxisLabelsWidth / 1.75), void 0 !== i3.config.plotOptions.radar.size && (this.size = i3.config.plotOptions.radar.size), this.dataRadiusOfPercent = [], this.dataRadius = [], this.angleArr = [], this.yaxisLabelsTextsPos = [];
        }
        return r2(t3, [{ key: "draw", value: function(t4) {
          var i3 = this, a3 = this.w, s3 = new R2(this.ctx), r3 = [], o3 = new O2(this.ctx);
          t4.length && (this.dataPointsLen = t4[a3.globals.maxValsInArrayIndex].length), this.disAngle = 2 * Math.PI / this.dataPointsLen;
          var n3 = a3.globals.gridWidth / 2, l3 = a3.globals.gridHeight / 2, h3 = n3 + a3.config.plotOptions.radar.offsetX, c3 = l3 + a3.config.plotOptions.radar.offsetY, d3 = this.graphics.group({ class: "apexcharts-radar-series apexcharts-plot-series", transform: "translate(".concat(h3 || 0, ", ").concat(c3 || 0, ")") }), g3 = [], u3 = null, p3 = null;
          if (this.yaxisLabels = this.graphics.group({ class: "apexcharts-yaxis" }), t4.forEach(function(t5, n4) {
            var l4 = t5.length === a3.globals.dataPoints, h4 = i3.graphics.group().attr({ class: "apexcharts-series", "data:longestSeries": l4, seriesName: x2.escapeString(a3.globals.seriesNames[n4]), rel: n4 + 1, "data:realIndex": n4 });
            i3.dataRadiusOfPercent[n4] = [], i3.dataRadius[n4] = [], i3.angleArr[n4] = [], t5.forEach(function(t6, e3) {
              var a4 = Math.abs(i3.maxValue - i3.minValue);
              t6 += Math.abs(i3.minValue), i3.isLog && (t6 = i3.coreUtils.getLogVal(t6, 0)), i3.dataRadiusOfPercent[n4][e3] = t6 / a4, i3.dataRadius[n4][e3] = i3.dataRadiusOfPercent[n4][e3] * i3.size, i3.angleArr[n4][e3] = e3 * i3.disAngle;
            }), g3 = i3.getDataPointsPos(i3.dataRadius[n4], i3.angleArr[n4]);
            var c4 = i3.createPaths(g3, { x: 0, y: 0 });
            u3 = i3.graphics.group({ class: "apexcharts-series-markers-wrap apexcharts-element-hidden" }), p3 = i3.graphics.group({ class: "apexcharts-datalabels", "data:realIndex": n4 }), a3.globals.delayedElements.push({ el: u3.node, index: n4 });
            var d4 = { i: n4, realIndex: n4, animationDelay: n4, initialSpeed: a3.config.chart.animations.speed, dataChangeSpeed: a3.config.chart.animations.dynamicAnimation.speed, className: "apexcharts-radar", shouldClipToGrid: false, bindEventsOnPaths: false, stroke: a3.globals.stroke.colors[n4], strokeLineCap: a3.config.stroke.lineCap }, f4 = null;
            a3.globals.previousPaths.length > 0 && (f4 = i3.getPreviousPath(n4));
            for (var b3 = 0; b3 < c4.linePathsTo.length; b3++) {
              var m3 = i3.graphics.renderPaths(e2(e2({}, d4), {}, { pathFrom: null === f4 ? c4.linePathsFrom[b3] : f4, pathTo: c4.linePathsTo[b3], strokeWidth: Array.isArray(i3.strokeWidth) ? i3.strokeWidth[n4] : i3.strokeWidth, fill: "none", drawShadow: false }));
              h4.add(m3);
              var y3 = s3.fillPath({ seriesNumber: n4 }), w3 = i3.graphics.renderPaths(e2(e2({}, d4), {}, { pathFrom: null === f4 ? c4.areaPathsFrom[b3] : f4, pathTo: c4.areaPathsTo[b3], strokeWidth: 0, fill: y3, drawShadow: false }));
              if (a3.config.chart.dropShadow.enabled) {
                var k3 = new v2(i3.ctx), A3 = a3.config.chart.dropShadow;
                k3.dropShadow(w3, Object.assign({}, A3, { noUserSpaceOnUse: true }), n4);
              }
              h4.add(w3);
            }
            t5.forEach(function(t6, s4) {
              var r4 = new H2(i3.ctx).getMarkerConfig({ cssClass: "apexcharts-marker", seriesIndex: n4, dataPointIndex: s4 }), l5 = i3.graphics.drawMarker(g3[s4].x, g3[s4].y, r4);
              l5.attr("rel", s4), l5.attr("j", s4), l5.attr("index", n4), l5.node.setAttribute("default-marker-size", r4.pSize);
              var c5 = i3.graphics.group({ class: "apexcharts-series-markers" });
              c5 && c5.add(l5), u3.add(c5), h4.add(u3);
              var d5 = a3.config.dataLabels;
              if (d5.enabled) {
                var f5 = d5.formatter(a3.globals.series[n4][s4], { seriesIndex: n4, dataPointIndex: s4, w: a3 });
                o3.plotDataLabelsText({ x: g3[s4].x, y: g3[s4].y, text: f5, textAnchor: "middle", i: n4, j: n4, parent: p3, offsetCorrection: false, dataLabelsConfig: e2({}, d5) });
              }
              h4.add(p3);
            }), r3.push(h4);
          }), this.drawPolygons({ parent: d3 }), a3.config.xaxis.labels.show) {
            var f3 = this.drawXAxisTexts();
            d3.add(f3);
          }
          return r3.forEach(function(t5) {
            d3.add(t5);
          }), d3.add(this.yaxisLabels), d3;
        } }, { key: "drawPolygons", value: function(t4) {
          for (var e3 = this, i3 = this.w, a3 = t4.parent, s3 = new Ct2(this.ctx), r3 = i3.globals.yAxisScale[0].result.reverse(), o3 = r3.length, n3 = [], l3 = this.size / (o3 - 1), h3 = 0; h3 < o3; h3++)
            n3[h3] = l3 * h3;
          n3.reverse();
          var c3 = [], d3 = [];
          n3.forEach(function(t5, i4) {
            var a4 = x2.getPolygonPos(t5, e3.dataPointsLen), s4 = "";
            a4.forEach(function(t6, a5) {
              if (0 === i4) {
                var r4 = e3.graphics.drawLine(t6.x, t6.y, 0, 0, Array.isArray(e3.polygons.connectorColors) ? e3.polygons.connectorColors[a5] : e3.polygons.connectorColors);
                d3.push(r4);
              }
              0 === a5 && e3.yaxisLabelsTextsPos.push({ x: t6.x, y: t6.y }), s4 += t6.x + "," + t6.y + " ";
            }), c3.push(s4);
          }), c3.forEach(function(t5, s4) {
            var r4 = e3.polygons.strokeColors, o4 = e3.polygons.strokeWidth, n4 = e3.graphics.drawPolygon(t5, Array.isArray(r4) ? r4[s4] : r4, Array.isArray(o4) ? o4[s4] : o4, i3.globals.radarPolygons.fill.colors[s4]);
            a3.add(n4);
          }), d3.forEach(function(t5) {
            a3.add(t5);
          }), i3.config.yaxis[0].show && this.yaxisLabelsTextsPos.forEach(function(t5, i4) {
            var a4 = s3.drawYAxisTexts(t5.x, t5.y, i4, r3[i4]);
            e3.yaxisLabels.add(a4);
          });
        } }, { key: "drawXAxisTexts", value: function() {
          var t4 = this, i3 = this.w, a3 = i3.config.xaxis.labels, s3 = this.graphics.group({ class: "apexcharts-xaxis" }), r3 = x2.getPolygonPos(this.size, this.dataPointsLen);
          return i3.globals.labels.forEach(function(o3, n3) {
            var l3 = i3.config.xaxis.labels.formatter, h3 = new O2(t4.ctx);
            if (r3[n3]) {
              var c3 = t4.getTextPos(r3[n3], t4.size), d3 = l3(o3, { seriesIndex: -1, dataPointIndex: n3, w: i3 });
              h3.plotDataLabelsText({ x: c3.newX, y: c3.newY, text: d3, textAnchor: c3.textAnchor, i: n3, j: n3, parent: s3, color: Array.isArray(a3.style.colors) && a3.style.colors[n3] ? a3.style.colors[n3] : "#a8a8a8", dataLabelsConfig: e2({ textAnchor: c3.textAnchor, dropShadow: { enabled: false } }, a3), offsetCorrection: false });
            }
          }), s3;
        } }, { key: "createPaths", value: function(t4, e3) {
          var i3 = this, a3 = [], s3 = [], r3 = [], o3 = [];
          if (t4.length) {
            s3 = [this.graphics.move(e3.x, e3.y)], o3 = [this.graphics.move(e3.x, e3.y)];
            var n3 = this.graphics.move(t4[0].x, t4[0].y), l3 = this.graphics.move(t4[0].x, t4[0].y);
            t4.forEach(function(e4, a4) {
              n3 += i3.graphics.line(e4.x, e4.y), l3 += i3.graphics.line(e4.x, e4.y), a4 === t4.length - 1 && (n3 += "Z", l3 += "Z");
            }), a3.push(n3), r3.push(l3);
          }
          return { linePathsFrom: s3, linePathsTo: a3, areaPathsFrom: o3, areaPathsTo: r3 };
        } }, { key: "getTextPos", value: function(t4, e3) {
          var i3 = "middle", a3 = t4.x, s3 = t4.y;
          return Math.abs(t4.x) >= 10 ? t4.x > 0 ? (i3 = "start", a3 += 10) : t4.x < 0 && (i3 = "end", a3 -= 10) : i3 = "middle", Math.abs(t4.y) >= e3 - 10 && (t4.y < 0 ? s3 -= 10 : t4.y > 0 && (s3 += 10)), { textAnchor: i3, newX: a3, newY: s3 };
        } }, { key: "getPreviousPath", value: function(t4) {
          for (var e3 = this.w, i3 = null, a3 = 0; a3 < e3.globals.previousPaths.length; a3++) {
            var s3 = e3.globals.previousPaths[a3];
            s3.paths.length > 0 && parseInt(s3.realIndex, 10) === parseInt(t4, 10) && void 0 !== e3.globals.previousPaths[a3].paths[0] && (i3 = e3.globals.previousPaths[a3].paths[0].d);
          }
          return i3;
        } }, { key: "getDataPointsPos", value: function(t4, e3) {
          var i3 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : this.dataPointsLen;
          t4 = t4 || [], e3 = e3 || [];
          for (var a3 = [], s3 = 0; s3 < i3; s3++) {
            var r3 = {};
            r3.x = t4[s3] * Math.sin(e3[s3]), r3.y = -t4[s3] * Math.cos(e3[s3]), a3.push(r3);
          }
          return a3;
        } }]), t3;
      }();
      var It2 = function(t3) {
        n2(i3, Lt2);
        var e3 = d2(i3);
        function i3(t4) {
          var s3;
          a2(this, i3), (s3 = e3.call(this, t4)).ctx = t4, s3.w = t4.w, s3.animBeginArr = [0], s3.animDur = 0;
          var r3 = s3.w;
          return s3.startAngle = r3.config.plotOptions.radialBar.startAngle, s3.endAngle = r3.config.plotOptions.radialBar.endAngle, s3.totalAngle = Math.abs(r3.config.plotOptions.radialBar.endAngle - r3.config.plotOptions.radialBar.startAngle), s3.trackStartAngle = r3.config.plotOptions.radialBar.track.startAngle, s3.trackEndAngle = r3.config.plotOptions.radialBar.track.endAngle, s3.barLabels = s3.w.config.plotOptions.radialBar.barLabels, s3.donutDataLabels = s3.w.config.plotOptions.radialBar.dataLabels, s3.radialDataLabels = s3.donutDataLabels, s3.trackStartAngle || (s3.trackStartAngle = s3.startAngle), s3.trackEndAngle || (s3.trackEndAngle = s3.endAngle), 360 === s3.endAngle && (s3.endAngle = 359.99), s3.margin = parseInt(r3.config.plotOptions.radialBar.track.margin, 10), s3.onBarLabelClick = s3.onBarLabelClick.bind(c2(s3)), s3;
        }
        return r2(i3, [{ key: "draw", value: function(t4) {
          var e4 = this.w, i4 = new m2(this.ctx), a3 = i4.group({ class: "apexcharts-radialbar" });
          if (e4.globals.noData)
            return a3;
          var s3 = i4.group(), r3 = this.defaultSize / 2, o3 = e4.globals.gridWidth / 2, n3 = this.defaultSize / 2.05;
          e4.config.chart.sparkline.enabled || (n3 = n3 - e4.config.stroke.width - e4.config.chart.dropShadow.blur);
          var l3 = e4.globals.fill.colors;
          if (e4.config.plotOptions.radialBar.track.show) {
            var h3 = this.drawTracks({ size: n3, centerX: o3, centerY: r3, colorArr: l3, series: t4 });
            s3.add(h3);
          }
          var c3 = this.drawArcs({ size: n3, centerX: o3, centerY: r3, colorArr: l3, series: t4 }), d3 = 360;
          e4.config.plotOptions.radialBar.startAngle < 0 && (d3 = this.totalAngle);
          var g3 = (360 - d3) / 360;
          if (e4.globals.radialSize = n3 - n3 * g3, this.radialDataLabels.value.show) {
            var u3 = Math.max(this.radialDataLabels.value.offsetY, this.radialDataLabels.name.offsetY);
            e4.globals.radialSize += u3 * g3;
          }
          return s3.add(c3.g), "front" === e4.config.plotOptions.radialBar.hollow.position && (c3.g.add(c3.elHollow), c3.dataLabels && c3.g.add(c3.dataLabels)), a3.add(s3), a3;
        } }, { key: "drawTracks", value: function(t4) {
          var e4 = this.w, i4 = new m2(this.ctx), a3 = i4.group({ class: "apexcharts-tracks" }), s3 = new v2(this.ctx), r3 = new R2(this.ctx), o3 = this.getStrokeWidth(t4);
          t4.size = t4.size - o3 / 2;
          for (var n3 = 0; n3 < t4.series.length; n3++) {
            var l3 = i4.group({ class: "apexcharts-radialbar-track apexcharts-track" });
            a3.add(l3), l3.attr({ rel: n3 + 1 }), t4.size = t4.size - o3 - this.margin;
            var h3 = e4.config.plotOptions.radialBar.track, c3 = r3.fillPath({ seriesNumber: 0, size: t4.size, fillColors: Array.isArray(h3.background) ? h3.background[n3] : h3.background, solid: true }), d3 = this.trackStartAngle, g3 = this.trackEndAngle;
            Math.abs(g3) + Math.abs(d3) >= 360 && (g3 = 360 - Math.abs(this.startAngle) - 0.1);
            var u3 = i4.drawPath({ d: "", stroke: c3, strokeWidth: o3 * parseInt(h3.strokeWidth, 10) / 100, fill: "none", strokeOpacity: h3.opacity, classes: "apexcharts-radialbar-area" });
            if (h3.dropShadow.enabled) {
              var p3 = h3.dropShadow;
              s3.dropShadow(u3, p3);
            }
            l3.add(u3), u3.attr("id", "apexcharts-radialbarTrack-" + n3), this.animatePaths(u3, { centerX: t4.centerX, centerY: t4.centerY, endAngle: g3, startAngle: d3, size: t4.size, i: n3, totalItems: 2, animBeginArr: 0, dur: 0, isTrack: true, easing: e4.globals.easing });
          }
          return a3;
        } }, { key: "drawArcs", value: function(t4) {
          var e4 = this.w, i4 = new m2(this.ctx), a3 = new R2(this.ctx), s3 = new v2(this.ctx), r3 = i4.group(), o3 = this.getStrokeWidth(t4);
          t4.size = t4.size - o3 / 2;
          var n3 = e4.config.plotOptions.radialBar.hollow.background, l3 = t4.size - o3 * t4.series.length - this.margin * t4.series.length - o3 * parseInt(e4.config.plotOptions.radialBar.track.strokeWidth, 10) / 100 / 2, h3 = l3 - e4.config.plotOptions.radialBar.hollow.margin;
          void 0 !== e4.config.plotOptions.radialBar.hollow.image && (n3 = this.drawHollowImage(t4, r3, l3, n3));
          var c3 = this.drawHollow({ size: h3, centerX: t4.centerX, centerY: t4.centerY, fill: n3 || "transparent" });
          if (e4.config.plotOptions.radialBar.hollow.dropShadow.enabled) {
            var d3 = e4.config.plotOptions.radialBar.hollow.dropShadow;
            s3.dropShadow(c3, d3);
          }
          var g3 = 1;
          !this.radialDataLabels.total.show && e4.globals.series.length > 1 && (g3 = 0);
          var u3 = null;
          this.radialDataLabels.show && (u3 = this.renderInnerDataLabels(this.radialDataLabels, { hollowSize: l3, centerX: t4.centerX, centerY: t4.centerY, opacity: g3 })), "back" === e4.config.plotOptions.radialBar.hollow.position && (r3.add(c3), u3 && r3.add(u3));
          var p3 = false;
          e4.config.plotOptions.radialBar.inverseOrder && (p3 = true);
          for (var f3 = p3 ? t4.series.length - 1 : 0; p3 ? f3 >= 0 : f3 < t4.series.length; p3 ? f3-- : f3++) {
            var b3 = i4.group({ class: "apexcharts-series apexcharts-radial-series", seriesName: x2.escapeString(e4.globals.seriesNames[f3]) });
            r3.add(b3), b3.attr({ rel: f3 + 1, "data:realIndex": f3 }), this.ctx.series.addCollapsedClassToSeries(b3, f3), t4.size = t4.size - o3 - this.margin;
            var y3 = a3.fillPath({ seriesNumber: f3, size: t4.size, value: t4.series[f3] }), w3 = this.startAngle, k3 = void 0, A3 = x2.negToZero(t4.series[f3] > 100 ? 100 : t4.series[f3]) / 100, S3 = Math.round(this.totalAngle * A3) + this.startAngle, C3 = void 0;
            e4.globals.dataChanged && (k3 = this.startAngle, C3 = Math.round(this.totalAngle * x2.negToZero(e4.globals.previousPaths[f3]) / 100) + k3), Math.abs(S3) + Math.abs(w3) >= 360 && (S3 -= 0.01), Math.abs(C3) + Math.abs(k3) >= 360 && (C3 -= 0.01);
            var L3 = S3 - w3, P3 = Array.isArray(e4.config.stroke.dashArray) ? e4.config.stroke.dashArray[f3] : e4.config.stroke.dashArray, I3 = i4.drawPath({ d: "", stroke: y3, strokeWidth: o3, fill: "none", fillOpacity: e4.config.fill.opacity, classes: "apexcharts-radialbar-area apexcharts-radialbar-slice-" + f3, strokeDashArray: P3 });
            if (m2.setAttrs(I3.node, { "data:angle": L3, "data:value": t4.series[f3] }), e4.config.chart.dropShadow.enabled) {
              var T3 = e4.config.chart.dropShadow;
              s3.dropShadow(I3, T3, f3);
            }
            if (s3.setSelectionFilter(I3, 0, f3), this.addListeners(I3, this.radialDataLabels), b3.add(I3), I3.attr({ index: 0, j: f3 }), this.barLabels.enabled) {
              var M3 = x2.polarToCartesian(t4.centerX, t4.centerY, t4.size, w3), z3 = this.barLabels.formatter(e4.globals.seriesNames[f3], { seriesIndex: f3, w: e4 }), X3 = ["apexcharts-radialbar-label"];
              this.barLabels.onClick || X3.push("apexcharts-no-click");
              var E3 = this.barLabels.useSeriesColors ? e4.globals.colors[f3] : e4.config.chart.foreColor;
              E3 || (E3 = e4.config.chart.foreColor);
              var Y3 = M3.x - this.barLabels.margin, F3 = M3.y, H3 = i4.drawText({ x: Y3, y: F3, text: z3, textAnchor: "end", dominantBaseline: "middle", fontFamily: this.barLabels.fontFamily, fontWeight: this.barLabels.fontWeight, fontSize: this.barLabels.fontSize, foreColor: E3, cssClass: X3.join(" ") });
              H3.on("click", this.onBarLabelClick), H3.attr({ rel: f3 + 1 }), 0 !== w3 && H3.attr({ "transform-origin": "".concat(Y3, " ").concat(F3), transform: "rotate(".concat(w3, " 0 0)") }), b3.add(H3);
            }
            var D3 = 0;
            !this.initialAnim || e4.globals.resized || e4.globals.dataChanged || (D3 = e4.config.chart.animations.speed), e4.globals.dataChanged && (D3 = e4.config.chart.animations.dynamicAnimation.speed), this.animDur = D3 / (1.2 * t4.series.length) + this.animDur, this.animBeginArr.push(this.animDur), this.animatePaths(I3, { centerX: t4.centerX, centerY: t4.centerY, endAngle: S3, startAngle: w3, prevEndAngle: C3, prevStartAngle: k3, size: t4.size, i: f3, totalItems: 2, animBeginArr: this.animBeginArr, dur: D3, shouldSetPrevPaths: true, easing: e4.globals.easing });
          }
          return { g: r3, elHollow: c3, dataLabels: u3 };
        } }, { key: "drawHollow", value: function(t4) {
          var e4 = new m2(this.ctx).drawCircle(2 * t4.size);
          return e4.attr({ class: "apexcharts-radialbar-hollow", cx: t4.centerX, cy: t4.centerY, r: t4.size, fill: t4.fill }), e4;
        } }, { key: "drawHollowImage", value: function(t4, e4, i4, a3) {
          var s3 = this.w, r3 = new R2(this.ctx), o3 = x2.randomId(), n3 = s3.config.plotOptions.radialBar.hollow.image;
          if (s3.config.plotOptions.radialBar.hollow.imageClipped)
            r3.clippedImgArea({ width: i4, height: i4, image: n3, patternID: "pattern".concat(s3.globals.cuid).concat(o3) }), a3 = "url(#pattern".concat(s3.globals.cuid).concat(o3, ")");
          else {
            var l3 = s3.config.plotOptions.radialBar.hollow.imageWidth, h3 = s3.config.plotOptions.radialBar.hollow.imageHeight;
            if (void 0 === l3 && void 0 === h3) {
              var c3 = s3.globals.dom.Paper.image(n3).loaded(function(e5) {
                this.move(t4.centerX - e5.width / 2 + s3.config.plotOptions.radialBar.hollow.imageOffsetX, t4.centerY - e5.height / 2 + s3.config.plotOptions.radialBar.hollow.imageOffsetY);
              });
              e4.add(c3);
            } else {
              var d3 = s3.globals.dom.Paper.image(n3).loaded(function(e5) {
                this.move(t4.centerX - l3 / 2 + s3.config.plotOptions.radialBar.hollow.imageOffsetX, t4.centerY - h3 / 2 + s3.config.plotOptions.radialBar.hollow.imageOffsetY), this.size(l3, h3);
              });
              e4.add(d3);
            }
          }
          return a3;
        } }, { key: "getStrokeWidth", value: function(t4) {
          var e4 = this.w;
          return t4.size * (100 - parseInt(e4.config.plotOptions.radialBar.hollow.size, 10)) / 100 / (t4.series.length + 1) - this.margin;
        } }, { key: "onBarLabelClick", value: function(t4) {
          var e4 = parseInt(t4.target.getAttribute("rel"), 10) - 1, i4 = this.barLabels.onClick, a3 = this.w;
          i4 && i4(a3.globals.seriesNames[e4], { w: a3, seriesIndex: e4 });
        } }]), i3;
      }();
      var Tt2 = function(t3) {
        n2(s3, yt2);
        var i3 = d2(s3);
        function s3() {
          return a2(this, s3), i3.apply(this, arguments);
        }
        return r2(s3, [{ key: "draw", value: function(t4, i4) {
          var a3 = this.w, s4 = new m2(this.ctx);
          this.rangeBarOptions = this.w.config.plotOptions.rangeBar, this.series = t4, this.seriesRangeStart = a3.globals.seriesRangeStart, this.seriesRangeEnd = a3.globals.seriesRangeEnd, this.barHelpers.initVariables(t4);
          for (var r3 = s4.group({ class: "apexcharts-rangebar-series apexcharts-plot-series" }), n3 = 0; n3 < t4.length; n3++) {
            var l3, h3, c3, d3, g3 = void 0, u3 = void 0, p3 = a3.globals.comboCharts ? i4[n3] : n3, f3 = s4.group({ class: "apexcharts-series", seriesName: x2.escapeString(a3.globals.seriesNames[p3]), rel: n3 + 1, "data:realIndex": p3 });
            this.ctx.series.addCollapsedClassToSeries(f3, p3), t4[n3].length > 0 && (this.visibleI = this.visibleI + 1);
            var b3 = 0, v3 = 0;
            this.yRatio.length > 1 && (this.yaxisIndex = p3);
            var y3 = this.barHelpers.initialPositions();
            u3 = y3.y, d3 = y3.zeroW, g3 = y3.x, v3 = y3.barWidth, b3 = y3.barHeight, l3 = y3.xDivision, h3 = y3.yDivision, c3 = y3.zeroH;
            for (var w3 = s4.group({ class: "apexcharts-datalabels", "data:realIndex": p3 }), k3 = s4.group({ class: "apexcharts-rangebar-goals-markers" }), A3 = 0; A3 < a3.globals.dataPoints; A3++) {
              var S3, C3 = this.barHelpers.getStrokeWidth(n3, A3, p3), L3 = this.seriesRangeStart[n3][A3], P3 = this.seriesRangeEnd[n3][A3], I3 = null, T3 = null, M3 = null, z3 = { x: g3, y: u3, strokeWidth: C3, elSeries: f3 }, X3 = this.seriesLen;
              if (a3.config.plotOptions.bar.rangeBarGroupRows && (X3 = 1), void 0 === a3.config.series[n3].data[A3])
                break;
              if (this.isHorizontal) {
                M3 = u3 + b3 * this.visibleI;
                var E3 = (h3 - b3 * X3) / 2;
                if (a3.config.series[n3].data[A3].x) {
                  var Y3 = this.detectOverlappingBars({ i: n3, j: A3, barYPosition: M3, srty: E3, barHeight: b3, yDivision: h3, initPositions: y3 });
                  b3 = Y3.barHeight, M3 = Y3.barYPosition;
                }
                v3 = (I3 = this.drawRangeBarPaths(e2({ indexes: { i: n3, j: A3, realIndex: p3 }, barHeight: b3, barYPosition: M3, zeroW: d3, yDivision: h3, y1: L3, y2: P3 }, z3))).barWidth;
              } else {
                a3.globals.isXNumeric && (g3 = (a3.globals.seriesX[n3][A3] - a3.globals.minX) / this.xRatio - v3 / 2), T3 = g3 + v3 * this.visibleI;
                var F3 = (l3 - v3 * X3) / 2;
                if (a3.config.series[n3].data[A3].x) {
                  var R3 = this.detectOverlappingBars({ i: n3, j: A3, barXPosition: T3, srtx: F3, barWidth: v3, xDivision: l3, initPositions: y3 });
                  v3 = R3.barWidth, T3 = R3.barXPosition;
                }
                b3 = (I3 = this.drawRangeColumnPaths(e2({ indexes: { i: n3, j: A3, realIndex: p3 }, barWidth: v3, barXPosition: T3, zeroH: c3, xDivision: l3 }, z3))).barHeight;
              }
              var H3 = this.barHelpers.drawGoalLine({ barXPosition: I3.barXPosition, barYPosition: M3, goalX: I3.goalX, goalY: I3.goalY, barHeight: b3, barWidth: v3 });
              H3 && k3.add(H3), u3 = I3.y, g3 = I3.x;
              var D3 = this.barHelpers.getPathFillColor(t4, n3, A3, p3), O3 = a3.globals.stroke.colors[p3];
              this.renderSeries((o2(S3 = { realIndex: p3, pathFill: D3, lineFill: O3, j: A3, i: n3, x: g3, y: u3, y1: L3, y2: P3, pathFrom: I3.pathFrom, pathTo: I3.pathTo, strokeWidth: C3, elSeries: f3, series: t4, barHeight: b3, barWidth: v3, barXPosition: T3, barYPosition: M3 }, "barWidth", v3), o2(S3, "elDataLabelsWrap", w3), o2(S3, "elGoalsMarkers", k3), o2(S3, "visibleSeries", this.visibleI), o2(S3, "type", "rangebar"), S3));
            }
            r3.add(f3);
          }
          return r3;
        } }, { key: "detectOverlappingBars", value: function(t4) {
          var e3 = t4.i, i4 = t4.j, a3 = t4.barYPosition, s4 = t4.barXPosition, r3 = t4.srty, o3 = t4.srtx, n3 = t4.barHeight, l3 = t4.barWidth, h3 = t4.yDivision, c3 = t4.xDivision, d3 = t4.initPositions, g3 = this.w, u3 = [], p3 = g3.config.series[e3].data[i4].rangeName, f3 = g3.config.series[e3].data[i4].x, x3 = Array.isArray(f3) ? f3.join(" ") : f3, b3 = g3.globals.labels.map(function(t5) {
            return Array.isArray(t5) ? t5.join(" ") : t5;
          }).indexOf(x3), v3 = g3.globals.seriesRange[e3].findIndex(function(t5) {
            return t5.x === x3 && t5.overlaps.length > 0;
          });
          return this.isHorizontal ? (a3 = g3.config.plotOptions.bar.rangeBarGroupRows ? r3 + h3 * b3 : r3 + n3 * this.visibleI + h3 * b3, v3 > -1 && !g3.config.plotOptions.bar.rangeBarOverlap && (u3 = g3.globals.seriesRange[e3][v3].overlaps).indexOf(p3) > -1 && (a3 = (n3 = d3.barHeight / u3.length) * this.visibleI + h3 * (100 - parseInt(this.barOptions.barHeight, 10)) / 100 / 2 + n3 * (this.visibleI + u3.indexOf(p3)) + h3 * b3)) : (b3 > -1 && (s4 = g3.config.plotOptions.bar.rangeBarGroupRows ? o3 + c3 * b3 : o3 + l3 * this.visibleI + c3 * b3), v3 > -1 && !g3.config.plotOptions.bar.rangeBarOverlap && (u3 = g3.globals.seriesRange[e3][v3].overlaps).indexOf(p3) > -1 && (s4 = (l3 = d3.barWidth / u3.length) * this.visibleI + c3 * (100 - parseInt(this.barOptions.barWidth, 10)) / 100 / 2 + l3 * (this.visibleI + u3.indexOf(p3)) + c3 * b3)), { barYPosition: a3, barXPosition: s4, barHeight: n3, barWidth: l3 };
        } }, { key: "drawRangeColumnPaths", value: function(t4) {
          var e3 = t4.indexes, i4 = t4.x, a3 = t4.xDivision, s4 = t4.barWidth, r3 = t4.barXPosition, o3 = t4.zeroH, n3 = this.w, l3 = e3.i, h3 = e3.j, c3 = this.yRatio[this.yaxisIndex], d3 = e3.realIndex, g3 = this.getRangeValue(d3, h3), u3 = Math.min(g3.start, g3.end), p3 = Math.max(g3.start, g3.end);
          void 0 === this.series[l3][h3] || null === this.series[l3][h3] ? u3 = o3 : (u3 = o3 - u3 / c3, p3 = o3 - p3 / c3);
          var f3 = Math.abs(p3 - u3), x3 = this.barHelpers.getColumnPaths({ barXPosition: r3, barWidth: s4, y1: u3, y2: p3, strokeWidth: this.strokeWidth, series: this.seriesRangeEnd, realIndex: e3.realIndex, i: d3, j: h3, w: n3 });
          if (n3.globals.isXNumeric) {
            var b3 = this.getBarXForNumericXAxis({ x: i4, j: h3, realIndex: d3, barWidth: s4 });
            i4 = b3.x, r3 = b3.barXPosition;
          } else
            i4 += a3;
          return { pathTo: x3.pathTo, pathFrom: x3.pathFrom, barHeight: f3, x: i4, y: p3, goalY: this.barHelpers.getGoalValues("y", null, o3, l3, h3), barXPosition: r3 };
        } }, { key: "drawRangeBarPaths", value: function(t4) {
          var e3 = t4.indexes, i4 = t4.y, a3 = t4.y1, s4 = t4.y2, r3 = t4.yDivision, o3 = t4.barHeight, n3 = t4.barYPosition, l3 = t4.zeroW, h3 = this.w, c3 = l3 + a3 / this.invertedYRatio, d3 = l3 + s4 / this.invertedYRatio, g3 = Math.abs(d3 - c3), u3 = this.barHelpers.getBarpaths({ barYPosition: n3, barHeight: o3, x1: c3, x2: d3, strokeWidth: this.strokeWidth, series: this.seriesRangeEnd, i: e3.realIndex, realIndex: e3.realIndex, j: e3.j, w: h3 });
          return h3.globals.isXNumeric || (i4 += r3), { pathTo: u3.pathTo, pathFrom: u3.pathFrom, barWidth: g3, x: d3, goalX: this.barHelpers.getGoalValues("x", l3, null, e3.realIndex, e3.j), y: i4 };
        } }, { key: "getRangeValue", value: function(t4, e3) {
          var i4 = this.w;
          return { start: i4.globals.seriesRangeStart[t4][e3], end: i4.globals.seriesRangeEnd[t4][e3] };
        } }]), s3;
      }();
      var Mt2 = function() {
        function t3(e3) {
          a2(this, t3), this.w = e3.w, this.lineCtx = e3;
        }
        return r2(t3, [{ key: "sameValueSeriesFix", value: function(t4, e3) {
          var i3 = this.w;
          if (("gradient" === i3.config.fill.type || "gradient" === i3.config.fill.type[t4]) && new y2(this.lineCtx.ctx, i3).seriesHaveSameValues(t4)) {
            var a3 = e3[t4].slice();
            a3[a3.length - 1] = a3[a3.length - 1] + 1e-6, e3[t4] = a3;
          }
          return e3;
        } }, { key: "calculatePoints", value: function(t4) {
          var e3 = t4.series, i3 = t4.realIndex, a3 = t4.x, s3 = t4.y, r3 = t4.i, o3 = t4.j, n3 = t4.prevY, l3 = this.w, h3 = [], c3 = [];
          if (0 === o3) {
            var d3 = this.lineCtx.categoryAxisCorrection + l3.config.markers.offsetX;
            l3.globals.isXNumeric && (d3 = (l3.globals.seriesX[i3][0] - l3.globals.minX) / this.lineCtx.xRatio + l3.config.markers.offsetX), h3.push(d3), c3.push(x2.isNumber(e3[r3][0]) ? n3 + l3.config.markers.offsetY : null), h3.push(a3 + l3.config.markers.offsetX), c3.push(x2.isNumber(e3[r3][o3 + 1]) ? s3 + l3.config.markers.offsetY : null);
          } else
            h3.push(a3 + l3.config.markers.offsetX), c3.push(x2.isNumber(e3[r3][o3 + 1]) ? s3 + l3.config.markers.offsetY : null);
          return { x: h3, y: c3 };
        } }, { key: "checkPreviousPaths", value: function(t4) {
          for (var e3 = t4.pathFromLine, i3 = t4.pathFromArea, a3 = t4.realIndex, s3 = this.w, r3 = 0; r3 < s3.globals.previousPaths.length; r3++) {
            var o3 = s3.globals.previousPaths[r3];
            ("line" === o3.type || "area" === o3.type) && o3.paths.length > 0 && parseInt(o3.realIndex, 10) === parseInt(a3, 10) && ("line" === o3.type ? (this.lineCtx.appendPathFrom = false, e3 = s3.globals.previousPaths[r3].paths[0].d) : "area" === o3.type && (this.lineCtx.appendPathFrom = false, i3 = s3.globals.previousPaths[r3].paths[0].d, s3.config.stroke.show && s3.globals.previousPaths[r3].paths[1] && (e3 = s3.globals.previousPaths[r3].paths[1].d)));
          }
          return { pathFromLine: e3, pathFromArea: i3 };
        } }, { key: "determineFirstPrevY", value: function(t4) {
          var e3, i3, a3 = t4.i, s3 = t4.series, r3 = t4.prevY, o3 = t4.lineYPosition, n3 = this.w, l3 = n3.config.chart.stacked && !n3.globals.comboCharts || n3.config.chart.stacked && n3.globals.comboCharts && (!this.w.config.chart.stackOnlyBar || "bar" === (null === (e3 = this.w.config.series[a3]) || void 0 === e3 ? void 0 : e3.type));
          if (void 0 !== (null === (i3 = s3[a3]) || void 0 === i3 ? void 0 : i3[0]))
            r3 = (o3 = l3 && a3 > 0 ? this.lineCtx.prevSeriesY[a3 - 1][0] : this.lineCtx.zeroY) - s3[a3][0] / this.lineCtx.yRatio[this.lineCtx.yaxisIndex] + 2 * (this.lineCtx.isReversed ? s3[a3][0] / this.lineCtx.yRatio[this.lineCtx.yaxisIndex] : 0);
          else if (l3 && a3 > 0 && void 0 === s3[a3][0]) {
            for (var h3 = a3 - 1; h3 >= 0; h3--)
              if (null !== s3[h3][0] && void 0 !== s3[h3][0]) {
                r3 = o3 = this.lineCtx.prevSeriesY[h3][0];
                break;
              }
          }
          return { prevY: r3, lineYPosition: o3 };
        } }]), t3;
      }();
      var zt2 = function(t3) {
        for (var e3, i3, a3, s3, r3 = function(t4) {
          for (var e4 = [], i4 = t4[0], a4 = t4[1], s4 = e4[0] = Yt2(i4, a4), r4 = 1, o4 = t4.length - 1; r4 < o4; r4++)
            i4 = a4, a4 = t4[r4 + 1], e4[r4] = 0.5 * (s4 + (s4 = Yt2(i4, a4)));
          return e4[r4] = s4, e4;
        }(t3), o3 = t3.length - 1, n3 = [], l3 = 0; l3 < o3; l3++)
          a3 = Yt2(t3[l3], t3[l3 + 1]), Math.abs(a3) < 1e-6 ? r3[l3] = r3[l3 + 1] = 0 : (s3 = (e3 = r3[l3] / a3) * e3 + (i3 = r3[l3 + 1] / a3) * i3) > 9 && (s3 = 3 * a3 / Math.sqrt(s3), r3[l3] = s3 * e3, r3[l3 + 1] = s3 * i3);
        for (var h3 = 0; h3 <= o3; h3++)
          s3 = (t3[Math.min(o3, h3 + 1)][0] - t3[Math.max(0, h3 - 1)][0]) / (6 * (1 + r3[h3] * r3[h3])), n3.push([s3 || 0, r3[h3] * s3 || 0]);
        return n3;
      };
      var Xt2 = function(t3) {
        for (var e3 = "", i3 = 0; i3 < t3.length; i3++) {
          var a3 = t3[i3], s3 = a3.length;
          s3 > 4 ? (e3 += "C".concat(a3[0], ", ").concat(a3[1]), e3 += ", ".concat(a3[2], ", ").concat(a3[3]), e3 += ", ".concat(a3[4], ", ").concat(a3[5])) : s3 > 2 && (e3 += "S".concat(a3[0], ", ").concat(a3[1]), e3 += ", ".concat(a3[2], ", ").concat(a3[3]));
        }
        return e3;
      };
      var Et2 = function(t3) {
        var e3 = zt2(t3), i3 = t3[1], a3 = t3[0], s3 = [], r3 = e3[1], o3 = e3[0];
        s3.push(a3, [a3[0] + o3[0], a3[1] + o3[1], i3[0] - r3[0], i3[1] - r3[1], i3[0], i3[1]]);
        for (var n3 = 2, l3 = e3.length; n3 < l3; n3++) {
          var h3 = t3[n3], c3 = e3[n3];
          s3.push([h3[0] - c3[0], h3[1] - c3[1], h3[0], h3[1]]);
        }
        return s3;
      };
      function Yt2(t3, e3) {
        return (e3[1] - t3[1]) / (e3[0] - t3[0]);
      }
      var Ft2 = function() {
        function t3(e3, i3, s3) {
          a2(this, t3), this.ctx = e3, this.w = e3.w, this.xyRatios = i3, this.pointsChart = !("bubble" !== this.w.config.chart.type && "scatter" !== this.w.config.chart.type) || s3, this.scatter = new D2(this.ctx), this.noNegatives = this.w.globals.minX === Number.MAX_VALUE, this.lineHelpers = new Mt2(this), this.markers = new H2(this.ctx), this.prevSeriesY = [], this.categoryAxisCorrection = 0, this.yaxisIndex = 0;
        }
        return r2(t3, [{ key: "draw", value: function(t4, i3, a3, s3) {
          var r3, o3 = this.w, n3 = new m2(this.ctx), l3 = o3.globals.comboCharts ? i3 : o3.config.chart.type, h3 = n3.group({ class: "apexcharts-".concat(l3, "-series apexcharts-plot-series") }), c3 = new y2(this.ctx, o3);
          this.yRatio = this.xyRatios.yRatio, this.zRatio = this.xyRatios.zRatio, this.xRatio = this.xyRatios.xRatio, this.baseLineY = this.xyRatios.baseLineY, t4 = c3.getLogSeries(t4), this.yRatio = c3.getLogYRatios(this.yRatio);
          for (var d3 = [], g3 = 0; g3 < t4.length; g3++) {
            t4 = this.lineHelpers.sameValueSeriesFix(g3, t4);
            var u3 = o3.globals.comboCharts ? a3[g3] : g3;
            this._initSerieVariables(t4, g3, u3);
            var p3 = [], f3 = [], x3 = [], b3 = o3.globals.padHorizontal + this.categoryAxisCorrection;
            this.ctx.series.addCollapsedClassToSeries(this.elSeries, u3), o3.globals.isXNumeric && o3.globals.seriesX.length > 0 && (b3 = (o3.globals.seriesX[u3][0] - o3.globals.minX) / this.xRatio), x3.push(b3);
            var v3, w3 = b3, k3 = void 0, A3 = w3, S3 = this.zeroY, C3 = this.zeroY;
            S3 = this.lineHelpers.determineFirstPrevY({ i: g3, series: t4, prevY: S3, lineYPosition: 0 }).prevY, "monotonCubic" === o3.config.stroke.curve && null === t4[g3][0] ? p3.push(null) : p3.push(S3), v3 = S3;
            "rangeArea" === l3 && (k3 = C3 = this.lineHelpers.determineFirstPrevY({ i: g3, series: s3, prevY: C3, lineYPosition: 0 }).prevY, f3.push(C3));
            var L3 = { type: l3, series: t4, realIndex: u3, i: g3, x: b3, y: 1, pX: w3, pY: v3, pathsFrom: this._calculatePathsFrom({ type: l3, series: t4, i: g3, realIndex: u3, prevX: A3, prevY: S3, prevY2: C3 }), linePaths: [], areaPaths: [], seriesIndex: a3, lineYPosition: 0, xArrj: x3, yArrj: p3, y2Arrj: f3, seriesRangeEnd: s3 }, P3 = this._iterateOverDataPoints(e2(e2({}, L3), {}, { iterations: "rangeArea" === l3 ? t4[g3].length - 1 : void 0, isRangeStart: true }));
            if ("rangeArea" === l3) {
              var I3 = this._calculatePathsFrom({ series: s3, i: g3, realIndex: u3, prevX: A3, prevY: C3 }), T3 = this._iterateOverDataPoints(e2(e2({}, L3), {}, { series: s3, pY: k3, pathsFrom: I3, iterations: s3[g3].length - 1, isRangeStart: false }));
              P3.linePaths[0] = T3.linePath + P3.linePath, P3.pathFromLine = T3.pathFromLine + P3.pathFromLine;
            }
            this._handlePaths({ type: l3, realIndex: u3, i: g3, paths: P3 }), this.elSeries.add(this.elPointsMain), this.elSeries.add(this.elDataLabelsWrap), d3.push(this.elSeries);
          }
          if (void 0 !== (null === (r3 = o3.config.series[0]) || void 0 === r3 ? void 0 : r3.zIndex) && d3.sort(function(t5, e3) {
            return Number(t5.node.getAttribute("zIndex")) - Number(e3.node.getAttribute("zIndex"));
          }), o3.config.chart.stacked)
            for (var M3 = d3.length; M3 > 0; M3--)
              h3.add(d3[M3 - 1]);
          else
            for (var z3 = 0; z3 < d3.length; z3++)
              h3.add(d3[z3]);
          return h3;
        } }, { key: "_initSerieVariables", value: function(t4, e3, i3) {
          var a3 = this.w, s3 = new m2(this.ctx);
          this.xDivision = a3.globals.gridWidth / (a3.globals.dataPoints - ("on" === a3.config.xaxis.tickPlacement ? 1 : 0)), this.strokeWidth = Array.isArray(a3.config.stroke.width) ? a3.config.stroke.width[i3] : a3.config.stroke.width, this.yRatio.length > 1 && (this.yaxisIndex = i3), this.isReversed = a3.config.yaxis[this.yaxisIndex] && a3.config.yaxis[this.yaxisIndex].reversed, this.zeroY = a3.globals.gridHeight - this.baseLineY[this.yaxisIndex] - (this.isReversed ? a3.globals.gridHeight : 0) + (this.isReversed ? 2 * this.baseLineY[this.yaxisIndex] : 0), this.areaBottomY = this.zeroY, (this.zeroY > a3.globals.gridHeight || "end" === a3.config.plotOptions.area.fillTo) && (this.areaBottomY = a3.globals.gridHeight), this.categoryAxisCorrection = this.xDivision / 2, this.elSeries = s3.group({ class: "apexcharts-series", zIndex: void 0 !== a3.config.series[i3].zIndex ? a3.config.series[i3].zIndex : i3, seriesName: x2.escapeString(a3.globals.seriesNames[i3]) }), this.elPointsMain = s3.group({ class: "apexcharts-series-markers-wrap", "data:realIndex": i3 }), this.elDataLabelsWrap = s3.group({ class: "apexcharts-datalabels", "data:realIndex": i3 });
          var r3 = t4[e3].length === a3.globals.dataPoints;
          this.elSeries.attr({ "data:longestSeries": r3, rel: e3 + 1, "data:realIndex": i3 }), this.appendPathFrom = true;
        } }, { key: "_calculatePathsFrom", value: function(t4) {
          var e3, i3, a3, s3, r3 = t4.type, o3 = t4.series, n3 = t4.i, l3 = t4.realIndex, h3 = t4.prevX, c3 = t4.prevY, d3 = t4.prevY2, g3 = this.w, u3 = new m2(this.ctx);
          if (null === o3[n3][0]) {
            for (var p3 = 0; p3 < o3[n3].length; p3++)
              if (null !== o3[n3][p3]) {
                h3 = this.xDivision * p3, c3 = this.zeroY - o3[n3][p3] / this.yRatio[this.yaxisIndex], e3 = u3.move(h3, c3), i3 = u3.move(h3, this.areaBottomY);
                break;
              }
          } else
            e3 = u3.move(h3, c3), "rangeArea" === r3 && (e3 = u3.move(h3, d3) + u3.line(h3, c3)), i3 = u3.move(h3, this.areaBottomY) + u3.line(h3, c3);
          if (a3 = u3.move(-1, this.zeroY) + u3.line(-1, this.zeroY), s3 = u3.move(-1, this.zeroY) + u3.line(-1, this.zeroY), g3.globals.previousPaths.length > 0) {
            var f3 = this.lineHelpers.checkPreviousPaths({ pathFromLine: a3, pathFromArea: s3, realIndex: l3 });
            a3 = f3.pathFromLine, s3 = f3.pathFromArea;
          }
          return { prevX: h3, prevY: c3, linePath: e3, areaPath: i3, pathFromLine: a3, pathFromArea: s3 };
        } }, { key: "_handlePaths", value: function(t4) {
          var i3 = t4.type, a3 = t4.realIndex, s3 = t4.i, r3 = t4.paths, o3 = this.w, n3 = new m2(this.ctx), l3 = new R2(this.ctx);
          this.prevSeriesY.push(r3.yArrj), o3.globals.seriesXvalues[a3] = r3.xArrj, o3.globals.seriesYvalues[a3] = r3.yArrj;
          var h3 = o3.config.forecastDataPoints;
          if (h3.count > 0 && "rangeArea" !== i3) {
            var c3 = o3.globals.seriesXvalues[a3][o3.globals.seriesXvalues[a3].length - h3.count - 1], d3 = n3.drawRect(c3, 0, o3.globals.gridWidth, o3.globals.gridHeight, 0);
            o3.globals.dom.elForecastMask.appendChild(d3.node);
            var g3 = n3.drawRect(0, 0, c3, o3.globals.gridHeight, 0);
            o3.globals.dom.elNonForecastMask.appendChild(g3.node);
          }
          this.pointsChart || o3.globals.delayedElements.push({ el: this.elPointsMain.node, index: a3 });
          var u3 = { i: s3, realIndex: a3, animationDelay: s3, initialSpeed: o3.config.chart.animations.speed, dataChangeSpeed: o3.config.chart.animations.dynamicAnimation.speed, className: "apexcharts-".concat(i3) };
          if ("area" === i3)
            for (var p3 = l3.fillPath({ seriesNumber: a3 }), f3 = 0; f3 < r3.areaPaths.length; f3++) {
              var x3 = n3.renderPaths(e2(e2({}, u3), {}, { pathFrom: r3.pathFromArea, pathTo: r3.areaPaths[f3], stroke: "none", strokeWidth: 0, strokeLineCap: null, fill: p3 }));
              this.elSeries.add(x3);
            }
          if (o3.config.stroke.show && !this.pointsChart) {
            var b3 = null;
            if ("line" === i3)
              b3 = l3.fillPath({ seriesNumber: a3, i: s3 });
            else if ("solid" === o3.config.stroke.fill.type)
              b3 = o3.globals.stroke.colors[a3];
            else {
              var v3 = o3.config.fill;
              o3.config.fill = o3.config.stroke.fill, b3 = l3.fillPath({ seriesNumber: a3, i: s3 }), o3.config.fill = v3;
            }
            for (var y3 = 0; y3 < r3.linePaths.length; y3++) {
              var w3 = b3;
              "rangeArea" === i3 && (w3 = l3.fillPath({ seriesNumber: a3 }));
              var k3 = e2(e2({}, u3), {}, { pathFrom: r3.pathFromLine, pathTo: r3.linePaths[y3], stroke: b3, strokeWidth: this.strokeWidth, strokeLineCap: o3.config.stroke.lineCap, fill: "rangeArea" === i3 ? w3 : "none" }), A3 = n3.renderPaths(k3);
              if (this.elSeries.add(A3), A3.attr("fill-rule", "evenodd"), h3.count > 0 && "rangeArea" !== i3) {
                var S3 = n3.renderPaths(k3);
                S3.node.setAttribute("stroke-dasharray", h3.dashArray), h3.strokeWidth && S3.node.setAttribute("stroke-width", h3.strokeWidth), this.elSeries.add(S3), S3.attr("clip-path", "url(#forecastMask".concat(o3.globals.cuid, ")")), A3.attr("clip-path", "url(#nonForecastMask".concat(o3.globals.cuid, ")"));
              }
            }
          }
        } }, { key: "_iterateOverDataPoints", value: function(t4) {
          var e3, i3 = this, a3 = t4.type, s3 = t4.series, r3 = t4.iterations, o3 = t4.realIndex, n3 = t4.i, l3 = t4.x, h3 = t4.y, c3 = t4.pX, d3 = t4.pY, g3 = t4.pathsFrom, u3 = t4.linePaths, p3 = t4.areaPaths, f3 = t4.seriesIndex, b3 = t4.lineYPosition, v3 = t4.xArrj, y3 = t4.yArrj, w3 = t4.y2Arrj, k3 = t4.isRangeStart, A3 = t4.seriesRangeEnd, S3 = this.w, C3 = new m2(this.ctx), L3 = this.yRatio, P3 = g3.prevY, I3 = g3.linePath, T3 = g3.areaPath, M3 = g3.pathFromLine, z3 = g3.pathFromArea, X3 = x2.isNumber(S3.globals.minYArr[o3]) ? S3.globals.minYArr[o3] : S3.globals.minY;
          r3 || (r3 = S3.globals.dataPoints > 1 ? S3.globals.dataPoints - 1 : S3.globals.dataPoints);
          for (var E3 = function(t5, e4) {
            return e4 - t5 / L3[i3.yaxisIndex] + 2 * (i3.isReversed ? t5 / L3[i3.yaxisIndex] : 0);
          }, Y3 = h3, F3 = S3.config.chart.stacked && !S3.globals.comboCharts || S3.config.chart.stacked && S3.globals.comboCharts && (!this.w.config.chart.stackOnlyBar || "bar" === (null === (e3 = this.w.config.series[o3]) || void 0 === e3 ? void 0 : e3.type)), R3 = 0; R3 < r3; R3++) {
            var H3 = void 0 === s3[n3][R3 + 1] || null === s3[n3][R3 + 1];
            if (S3.globals.isXNumeric) {
              var D3 = S3.globals.seriesX[o3][R3 + 1];
              void 0 === S3.globals.seriesX[o3][R3 + 1] && (D3 = S3.globals.seriesX[o3][r3 - 1]), l3 = (D3 - S3.globals.minX) / this.xRatio;
            } else
              l3 += this.xDivision;
            if (F3)
              if (n3 > 0 && S3.globals.collapsedSeries.length < S3.config.series.length - 1) {
                b3 = this.prevSeriesY[function(t5) {
                  for (var e4 = t5, i4 = 0; i4 < S3.globals.series.length; i4++)
                    if (S3.globals.collapsedSeriesIndices.indexOf(t5) > -1) {
                      e4--;
                      break;
                    }
                  return e4 >= 0 ? e4 : 0;
                }(n3 - 1)][R3 + 1];
              } else
                b3 = this.zeroY;
            else
              b3 = this.zeroY;
            H3 ? h3 = E3(X3, b3) : (h3 = E3(s3[n3][R3 + 1], b3), "rangeArea" === a3 && (Y3 = E3(A3[n3][R3 + 1], b3))), v3.push(l3), H3 && "smooth" === S3.config.stroke.curve ? y3.push(null) : y3.push(h3), w3.push(Y3);
            var O3 = this.lineHelpers.calculatePoints({ series: s3, x: l3, y: h3, realIndex: o3, i: n3, j: R3, prevY: P3 }), N3 = this._createPaths({ type: a3, series: s3, i: n3, realIndex: o3, j: R3, x: l3, y: h3, y2: Y3, xArrj: v3, yArrj: y3, y2Arrj: w3, pX: c3, pY: d3, linePath: I3, areaPath: T3, linePaths: u3, areaPaths: p3, seriesIndex: f3, isRangeStart: k3 });
            p3 = N3.areaPaths, u3 = N3.linePaths, c3 = N3.pX, d3 = N3.pY, T3 = N3.areaPath, I3 = N3.linePath, !this.appendPathFrom || "monotoneCubic" === S3.config.stroke.curve && "rangeArea" === a3 || (M3 += C3.line(l3, this.zeroY), z3 += C3.line(l3, this.zeroY)), this.handleNullDataPoints(s3, O3, n3, R3, o3), this._handleMarkersAndLabels({ type: a3, pointsPos: O3, i: n3, j: R3, realIndex: o3, isRangeStart: k3 });
          }
          return { yArrj: y3, xArrj: v3, pathFromArea: z3, areaPaths: p3, pathFromLine: M3, linePaths: u3, linePath: I3, areaPath: T3 };
        } }, { key: "_handleMarkersAndLabels", value: function(t4) {
          var e3 = t4.type, i3 = t4.pointsPos, a3 = t4.isRangeStart, s3 = t4.i, r3 = t4.j, o3 = t4.realIndex, n3 = this.w, l3 = new O2(this.ctx);
          if (this.pointsChart)
            this.scatter.draw(this.elSeries, r3, { realIndex: o3, pointsPos: i3, zRatio: this.zRatio, elParent: this.elPointsMain });
          else {
            n3.globals.series[s3].length > 1 && this.elPointsMain.node.classList.add("apexcharts-element-hidden");
            var h3 = this.markers.plotChartMarkers(i3, o3, r3 + 1);
            null !== h3 && this.elPointsMain.add(h3);
          }
          var c3 = l3.drawDataLabel({ type: e3, isRangeStart: a3, pos: i3, i: o3, j: r3 + 1 });
          null !== c3 && this.elDataLabelsWrap.add(c3);
        } }, { key: "_createPaths", value: function(t4) {
          var e3 = t4.type, i3 = t4.series, a3 = t4.i, s3 = t4.realIndex, r3 = t4.j, o3 = t4.x, n3 = t4.y, l3 = t4.xArrj, h3 = t4.yArrj, c3 = t4.y2, d3 = t4.y2Arrj, g3 = t4.pX, u3 = t4.pY, p3 = t4.linePath, f3 = t4.areaPath, x3 = t4.linePaths, b3 = t4.areaPaths, v3 = t4.seriesIndex, y3 = t4.isRangeStart, w3 = this.w, k3 = new m2(this.ctx), A3 = w3.config.stroke.curve, S3 = this.areaBottomY;
          if (Array.isArray(w3.config.stroke.curve) && (A3 = Array.isArray(v3) ? w3.config.stroke.curve[v3[a3]] : w3.config.stroke.curve[a3]), "rangeArea" === e3 && (w3.globals.hasNullValues || w3.config.forecastDataPoints.count > 0) && "monotoneCubic" === A3 && (A3 = "straight"), "monotoneCubic" === A3) {
            var C3 = "rangeArea" === e3 ? l3.length === w3.globals.dataPoints : r3 === i3[a3].length - 2, L3 = l3.map(function(t5, e4) {
              return [l3[e4], h3[e4]];
            }).filter(function(t5) {
              return null !== t5[1];
            });
            if (C3 && L3.length > 1) {
              var P3 = Et2(L3);
              if (p3 += Xt2(P3), null === i3[a3][0] ? f3 = p3 : f3 += Xt2(P3), "rangeArea" === e3 && y3) {
                p3 += k3.line(l3[l3.length - 1], d3[d3.length - 1]);
                var I3 = l3.slice().reverse(), T3 = d3.slice().reverse(), M3 = I3.map(function(t5, e4) {
                  return [I3[e4], T3[e4]];
                }), z3 = Et2(M3);
                f3 = p3 += Xt2(z3);
              } else
                f3 += k3.line(L3[L3.length - 1][0], S3) + k3.line(L3[0][0], S3) + k3.move(L3[0][0], L3[0][1]) + "z";
              x3.push(p3), b3.push(f3);
            }
          } else if ("smooth" === A3) {
            var X3 = 0.35 * (o3 - g3);
            w3.globals.hasNullValues ? (null !== i3[a3][r3] && (null !== i3[a3][r3 + 1] ? (p3 = k3.move(g3, u3) + k3.curve(g3 + X3, u3, o3 - X3, n3, o3 + 1, n3), f3 = k3.move(g3 + 1, u3) + k3.curve(g3 + X3, u3, o3 - X3, n3, o3 + 1, n3) + k3.line(o3, S3) + k3.line(g3, S3) + "z") : (p3 = k3.move(g3, u3), f3 = k3.move(g3, u3) + "z")), x3.push(p3), b3.push(f3)) : (p3 += k3.curve(g3 + X3, u3, o3 - X3, n3, o3, n3), f3 += k3.curve(g3 + X3, u3, o3 - X3, n3, o3, n3)), g3 = o3, u3 = n3, r3 === i3[a3].length - 2 && (f3 = f3 + k3.curve(g3, u3, o3, n3, o3, S3) + k3.move(o3, n3) + "z", "rangeArea" === e3 && y3 ? p3 = p3 + k3.curve(g3, u3, o3, n3, o3, c3) + k3.move(o3, c3) + "z" : w3.globals.hasNullValues || (x3.push(p3), b3.push(f3)));
          } else {
            if (null === i3[a3][r3 + 1]) {
              p3 += k3.move(o3, n3);
              var E3 = w3.globals.isXNumeric ? (w3.globals.seriesX[s3][r3] - w3.globals.minX) / this.xRatio : o3 - this.xDivision;
              f3 = f3 + k3.line(E3, S3) + k3.move(o3, n3) + "z";
            }
            null === i3[a3][r3] && (p3 += k3.move(o3, n3), f3 += k3.move(o3, S3)), "stepline" === A3 ? (p3 = p3 + k3.line(o3, null, "H") + k3.line(null, n3, "V"), f3 = f3 + k3.line(o3, null, "H") + k3.line(null, n3, "V")) : "straight" === A3 && (p3 += k3.line(o3, n3), f3 += k3.line(o3, n3)), r3 === i3[a3].length - 2 && (f3 = f3 + k3.line(o3, S3) + k3.move(o3, n3) + "z", "rangeArea" === e3 && y3 ? p3 = p3 + k3.line(o3, c3) + k3.move(o3, c3) + "z" : (x3.push(p3), b3.push(f3)));
          }
          return { linePaths: x3, areaPaths: b3, pX: g3, pY: u3, linePath: p3, areaPath: f3 };
        } }, { key: "handleNullDataPoints", value: function(t4, e3, i3, a3, s3) {
          var r3 = this.w;
          if (null === t4[i3][a3] && r3.config.markers.showNullDataPoints || 1 === t4[i3].length) {
            var o3 = this.markers.plotChartMarkers(e3, s3, a3 + 1, this.strokeWidth - r3.config.markers.strokeWidth / 2, true);
            null !== o3 && this.elPointsMain.add(o3);
          }
        } }]), t3;
      }();
      window.TreemapSquared = {}, window.TreemapSquared.generate = /* @__PURE__ */ function() {
        function t3(e4, i4, a4, s4) {
          this.xoffset = e4, this.yoffset = i4, this.height = s4, this.width = a4, this.shortestEdge = function() {
            return Math.min(this.height, this.width);
          }, this.getCoordinates = function(t4) {
            var e5, i5 = [], a5 = this.xoffset, s5 = this.yoffset, o4 = r3(t4) / this.height, n3 = r3(t4) / this.width;
            if (this.width >= this.height)
              for (e5 = 0; e5 < t4.length; e5++)
                i5.push([a5, s5, a5 + o4, s5 + t4[e5] / o4]), s5 += t4[e5] / o4;
            else
              for (e5 = 0; e5 < t4.length; e5++)
                i5.push([a5, s5, a5 + t4[e5] / n3, s5 + n3]), a5 += t4[e5] / n3;
            return i5;
          }, this.cutArea = function(e5) {
            var i5;
            if (this.width >= this.height) {
              var a5 = e5 / this.height, s5 = this.width - a5;
              i5 = new t3(this.xoffset + a5, this.yoffset, s5, this.height);
            } else {
              var r4 = e5 / this.width, o4 = this.height - r4;
              i5 = new t3(this.xoffset, this.yoffset + r4, this.width, o4);
            }
            return i5;
          };
        }
        function e3(e4, a4, s4, o4, n3) {
          o4 = void 0 === o4 ? 0 : o4, n3 = void 0 === n3 ? 0 : n3;
          var l3 = i3(function(t4, e5) {
            var i4, a5 = [], s5 = e5 / r3(t4);
            for (i4 = 0; i4 < t4.length; i4++)
              a5[i4] = t4[i4] * s5;
            return a5;
          }(e4, a4 * s4), [], new t3(o4, n3, a4, s4), []);
          return function(t4) {
            var e5, i4, a5 = [];
            for (e5 = 0; e5 < t4.length; e5++)
              for (i4 = 0; i4 < t4[e5].length; i4++)
                a5.push(t4[e5][i4]);
            return a5;
          }(l3);
        }
        function i3(t4, e4, s4, o4) {
          var n3, l3, h3;
          if (0 !== t4.length)
            return n3 = s4.shortestEdge(), function(t5, e5, i4) {
              var s5;
              if (0 === t5.length)
                return true;
              (s5 = t5.slice()).push(e5);
              var r4 = a3(t5, i4), o5 = a3(s5, i4);
              return r4 >= o5;
            }(e4, l3 = t4[0], n3) ? (e4.push(l3), i3(t4.slice(1), e4, s4, o4)) : (h3 = s4.cutArea(r3(e4), o4), o4.push(s4.getCoordinates(e4)), i3(t4, [], h3, o4)), o4;
          o4.push(s4.getCoordinates(e4));
        }
        function a3(t4, e4) {
          var i4 = Math.min.apply(Math, t4), a4 = Math.max.apply(Math, t4), s4 = r3(t4);
          return Math.max(Math.pow(e4, 2) * a4 / Math.pow(s4, 2), Math.pow(s4, 2) / (Math.pow(e4, 2) * i4));
        }
        function s3(t4) {
          return t4 && t4.constructor === Array;
        }
        function r3(t4) {
          var e4, i4 = 0;
          for (e4 = 0; e4 < t4.length; e4++)
            i4 += t4[e4];
          return i4;
        }
        function o3(t4) {
          var e4, i4 = 0;
          if (s3(t4[0]))
            for (e4 = 0; e4 < t4.length; e4++)
              i4 += o3(t4[e4]);
          else
            i4 = r3(t4);
          return i4;
        }
        return function t4(i4, a4, r4, n3, l3) {
          n3 = void 0 === n3 ? 0 : n3, l3 = void 0 === l3 ? 0 : l3;
          var h3, c3, d3 = [], g3 = [];
          if (s3(i4[0])) {
            for (c3 = 0; c3 < i4.length; c3++)
              d3[c3] = o3(i4[c3]);
            for (h3 = e3(d3, a4, r4, n3, l3), c3 = 0; c3 < i4.length; c3++)
              g3.push(t4(i4[c3], h3[c3][2] - h3[c3][0], h3[c3][3] - h3[c3][1], h3[c3][0], h3[c3][1]));
          } else
            g3 = e3(i4, a4, r4, n3, l3);
          return g3;
        };
      }();
      var Rt2;
      var Ht2;
      var Dt2 = function() {
        function t3(e3, i3) {
          a2(this, t3), this.ctx = e3, this.w = e3.w, this.strokeWidth = this.w.config.stroke.width, this.helpers = new At2(e3), this.dynamicAnim = this.w.config.chart.animations.dynamicAnimation, this.labels = [];
        }
        return r2(t3, [{ key: "draw", value: function(t4) {
          var e3 = this, i3 = this.w, a3 = new m2(this.ctx), s3 = new R2(this.ctx), r3 = a3.group({ class: "apexcharts-treemap" });
          if (i3.globals.noData)
            return r3;
          var o3 = [];
          return t4.forEach(function(t5) {
            var e4 = t5.map(function(t6) {
              return Math.abs(t6);
            });
            o3.push(e4);
          }), this.negRange = this.helpers.checkColorRange(), i3.config.series.forEach(function(t5, i4) {
            t5.data.forEach(function(t6) {
              Array.isArray(e3.labels[i4]) || (e3.labels[i4] = []), e3.labels[i4].push(t6.x);
            });
          }), window.TreemapSquared.generate(o3, i3.globals.gridWidth, i3.globals.gridHeight).forEach(function(o4, n3) {
            var l3 = a3.group({ class: "apexcharts-series apexcharts-treemap-series", seriesName: x2.escapeString(i3.globals.seriesNames[n3]), rel: n3 + 1, "data:realIndex": n3 });
            if (i3.config.chart.dropShadow.enabled) {
              var h3 = i3.config.chart.dropShadow;
              new v2(e3.ctx).dropShadow(r3, h3, n3);
            }
            var c3 = a3.group({ class: "apexcharts-data-labels" });
            o4.forEach(function(r4, o5) {
              var h4 = r4[0], c4 = r4[1], d3 = r4[2], g3 = r4[3], u3 = a3.drawRect(h4, c4, d3 - h4, g3 - c4, i3.config.plotOptions.treemap.borderRadius, "#fff", 1, e3.strokeWidth, i3.config.plotOptions.treemap.useFillColorAsStroke ? f3 : i3.globals.stroke.colors[n3]);
              u3.attr({ cx: h4, cy: c4, index: n3, i: n3, j: o5, width: d3 - h4, height: g3 - c4 });
              var p3 = e3.helpers.getShadeColor(i3.config.chart.type, n3, o5, e3.negRange), f3 = p3.color;
              void 0 !== i3.config.series[n3].data[o5] && i3.config.series[n3].data[o5].fillColor && (f3 = i3.config.series[n3].data[o5].fillColor);
              var x3 = s3.fillPath({ color: f3, seriesNumber: n3, dataPointIndex: o5 });
              u3.node.classList.add("apexcharts-treemap-rect"), u3.attr({ fill: x3 }), e3.helpers.addListeners(u3);
              var b3 = { x: h4 + (d3 - h4) / 2, y: c4 + (g3 - c4) / 2, width: 0, height: 0 }, v3 = { x: h4, y: c4, width: d3 - h4, height: g3 - c4 };
              if (i3.config.chart.animations.enabled && !i3.globals.dataChanged) {
                var m3 = 1;
                i3.globals.resized || (m3 = i3.config.chart.animations.speed), e3.animateTreemap(u3, b3, v3, m3);
              }
              if (i3.globals.dataChanged) {
                var y3 = 1;
                e3.dynamicAnim.enabled && i3.globals.shouldAnimate && (y3 = e3.dynamicAnim.speed, i3.globals.previousPaths[n3] && i3.globals.previousPaths[n3][o5] && i3.globals.previousPaths[n3][o5].rect && (b3 = i3.globals.previousPaths[n3][o5].rect), e3.animateTreemap(u3, b3, v3, y3));
              }
              var w3 = e3.getFontSize(r4), k3 = i3.config.dataLabels.formatter(e3.labels[n3][o5], { value: i3.globals.series[n3][o5], seriesIndex: n3, dataPointIndex: o5, w: i3 });
              "truncate" === i3.config.plotOptions.treemap.dataLabels.format && (w3 = parseInt(i3.config.dataLabels.style.fontSize, 10), k3 = e3.truncateLabels(k3, w3, h4, c4, d3, g3));
              var A3 = e3.helpers.calculateDataLabels({ text: k3, x: (h4 + d3) / 2, y: (c4 + g3) / 2 + e3.strokeWidth / 2 + w3 / 3, i: n3, j: o5, colorProps: p3, fontSize: w3, series: t4 });
              i3.config.dataLabels.enabled && A3 && e3.rotateToFitLabel(A3, w3, k3, h4, c4, d3, g3), l3.add(u3), null !== A3 && l3.add(A3);
            }), l3.add(c3), r3.add(l3);
          }), r3;
        } }, { key: "getFontSize", value: function(t4) {
          var e3 = this.w;
          var i3, a3, s3, r3, o3 = function t5(e4) {
            var i4, a4 = 0;
            if (Array.isArray(e4[0]))
              for (i4 = 0; i4 < e4.length; i4++)
                a4 += t5(e4[i4]);
            else
              for (i4 = 0; i4 < e4.length; i4++)
                a4 += e4[i4].length;
            return a4;
          }(this.labels) / function t5(e4) {
            var i4, a4 = 0;
            if (Array.isArray(e4[0]))
              for (i4 = 0; i4 < e4.length; i4++)
                a4 += t5(e4[i4]);
            else
              for (i4 = 0; i4 < e4.length; i4++)
                a4 += 1;
            return a4;
          }(this.labels);
          return i3 = t4[2] - t4[0], a3 = t4[3] - t4[1], s3 = i3 * a3, r3 = Math.pow(s3, 0.5), Math.min(r3 / o3, parseInt(e3.config.dataLabels.style.fontSize, 10));
        } }, { key: "rotateToFitLabel", value: function(t4, e3, i3, a3, s3, r3, o3) {
          var n3 = new m2(this.ctx), l3 = n3.getTextRects(i3, e3);
          if (l3.width + this.w.config.stroke.width + 5 > r3 - a3 && l3.width <= o3 - s3) {
            var h3 = n3.rotateAroundCenter(t4.node);
            t4.node.setAttribute("transform", "rotate(-90 ".concat(h3.x, " ").concat(h3.y, ") translate(").concat(l3.height / 3, ")"));
          }
        } }, { key: "truncateLabels", value: function(t4, e3, i3, a3, s3, r3) {
          var o3 = new m2(this.ctx), n3 = o3.getTextRects(t4, e3).width + this.w.config.stroke.width + 5 > s3 - i3 && r3 - a3 > s3 - i3 ? r3 - a3 : s3 - i3, l3 = o3.getTextBasedOnMaxWidth({ text: t4, maxWidth: n3, fontSize: e3 });
          return t4.length !== l3.length && n3 / e3 < 5 ? "" : l3;
        } }, { key: "animateTreemap", value: function(t4, e3, i3, a3) {
          var s3 = new b2(this.ctx);
          s3.animateRect(t4, { x: e3.x, y: e3.y, width: e3.width, height: e3.height }, { x: i3.x, y: i3.y, width: i3.width, height: i3.height }, a3, function() {
            s3.animationCompleted(t4);
          });
        } }]), t3;
      }();
      var Ot2 = 86400;
      var Nt2 = function() {
        function t3(e3) {
          a2(this, t3), this.ctx = e3, this.w = e3.w, this.timeScaleArray = [], this.utc = this.w.config.xaxis.labels.datetimeUTC;
        }
        return r2(t3, [{ key: "calculateTimeScaleTicks", value: function(t4, i3) {
          var a3 = this, s3 = this.w;
          if (s3.globals.allSeriesCollapsed)
            return s3.globals.labels = [], s3.globals.timescaleLabels = [], [];
          var r3 = new I2(this.ctx), o3 = (i3 - t4) / 864e5;
          this.determineInterval(o3), s3.globals.disableZoomIn = false, s3.globals.disableZoomOut = false, o3 < 11574074074074075e-20 ? s3.globals.disableZoomIn = true : o3 > 5e4 && (s3.globals.disableZoomOut = true);
          var n3 = r3.getTimeUnitsfromTimestamp(t4, i3, this.utc), l3 = s3.globals.gridWidth / o3, h3 = l3 / 24, c3 = h3 / 60, d3 = c3 / 60, g3 = Math.floor(24 * o3), u3 = Math.floor(1440 * o3), p3 = Math.floor(o3 * Ot2), f3 = Math.floor(o3), x3 = Math.floor(o3 / 30), b3 = Math.floor(o3 / 365), v3 = { minMillisecond: n3.minMillisecond, minSecond: n3.minSecond, minMinute: n3.minMinute, minHour: n3.minHour, minDate: n3.minDate, minMonth: n3.minMonth, minYear: n3.minYear }, m3 = { firstVal: v3, currentMillisecond: v3.minMillisecond, currentSecond: v3.minSecond, currentMinute: v3.minMinute, currentHour: v3.minHour, currentMonthDate: v3.minDate, currentDate: v3.minDate, currentMonth: v3.minMonth, currentYear: v3.minYear, daysWidthOnXAxis: l3, hoursWidthOnXAxis: h3, minutesWidthOnXAxis: c3, secondsWidthOnXAxis: d3, numberOfSeconds: p3, numberOfMinutes: u3, numberOfHours: g3, numberOfDays: f3, numberOfMonths: x3, numberOfYears: b3 };
          switch (this.tickInterval) {
            case "years":
              this.generateYearScale(m3);
              break;
            case "months":
            case "half_year":
              this.generateMonthScale(m3);
              break;
            case "months_days":
            case "months_fortnight":
            case "days":
            case "week_days":
              this.generateDayScale(m3);
              break;
            case "hours":
              this.generateHourScale(m3);
              break;
            case "minutes_fives":
            case "minutes":
              this.generateMinuteScale(m3);
              break;
            case "seconds_tens":
            case "seconds_fives":
            case "seconds":
              this.generateSecondScale(m3);
          }
          var y3 = this.timeScaleArray.map(function(t5) {
            var i4 = { position: t5.position, unit: t5.unit, year: t5.year, day: t5.day ? t5.day : 1, hour: t5.hour ? t5.hour : 0, month: t5.month + 1 };
            return "month" === t5.unit ? e2(e2({}, i4), {}, { day: 1, value: t5.value + 1 }) : "day" === t5.unit || "hour" === t5.unit ? e2(e2({}, i4), {}, { value: t5.value }) : "minute" === t5.unit ? e2(e2({}, i4), {}, { value: t5.value, minute: t5.value }) : "second" === t5.unit ? e2(e2({}, i4), {}, { value: t5.value, minute: t5.minute, second: t5.second }) : t5;
          });
          return y3.filter(function(t5) {
            var e3 = 1, i4 = Math.ceil(s3.globals.gridWidth / 120), r4 = t5.value;
            void 0 !== s3.config.xaxis.tickAmount && (i4 = s3.config.xaxis.tickAmount), y3.length > i4 && (e3 = Math.floor(y3.length / i4));
            var o4 = false, n4 = false;
            switch (a3.tickInterval) {
              case "years":
                "year" === t5.unit && (o4 = true);
                break;
              case "half_year":
                e3 = 7, "year" === t5.unit && (o4 = true);
                break;
              case "months":
                e3 = 1, "year" === t5.unit && (o4 = true);
                break;
              case "months_fortnight":
                e3 = 15, "year" !== t5.unit && "month" !== t5.unit || (o4 = true), 30 === r4 && (n4 = true);
                break;
              case "months_days":
                e3 = 10, "month" === t5.unit && (o4 = true), 30 === r4 && (n4 = true);
                break;
              case "week_days":
                e3 = 8, "month" === t5.unit && (o4 = true);
                break;
              case "days":
                e3 = 1, "month" === t5.unit && (o4 = true);
                break;
              case "hours":
                "day" === t5.unit && (o4 = true);
                break;
              case "minutes_fives":
              case "seconds_fives":
                r4 % 5 != 0 && (n4 = true);
                break;
              case "seconds_tens":
                r4 % 10 != 0 && (n4 = true);
            }
            if ("hours" === a3.tickInterval || "minutes_fives" === a3.tickInterval || "seconds_tens" === a3.tickInterval || "seconds_fives" === a3.tickInterval) {
              if (!n4)
                return true;
            } else if ((r4 % e3 == 0 || o4) && !n4)
              return true;
          });
        } }, { key: "recalcDimensionsBasedOnFormat", value: function(t4, e3) {
          var i3 = this.w, a3 = this.formatDates(t4), s3 = this.removeOverlappingTS(a3);
          i3.globals.timescaleLabels = s3.slice(), new ot2(this.ctx).plotCoords();
        } }, { key: "determineInterval", value: function(t4) {
          var e3 = 24 * t4, i3 = 60 * e3;
          switch (true) {
            case t4 / 365 > 5:
              this.tickInterval = "years";
              break;
            case t4 > 800:
              this.tickInterval = "half_year";
              break;
            case t4 > 180:
              this.tickInterval = "months";
              break;
            case t4 > 90:
              this.tickInterval = "months_fortnight";
              break;
            case t4 > 60:
              this.tickInterval = "months_days";
              break;
            case t4 > 30:
              this.tickInterval = "week_days";
              break;
            case t4 > 2:
              this.tickInterval = "days";
              break;
            case e3 > 2.4:
              this.tickInterval = "hours";
              break;
            case i3 > 15:
              this.tickInterval = "minutes_fives";
              break;
            case i3 > 5:
              this.tickInterval = "minutes";
              break;
            case i3 > 1:
              this.tickInterval = "seconds_tens";
              break;
            case 60 * i3 > 20:
              this.tickInterval = "seconds_fives";
              break;
            default:
              this.tickInterval = "seconds";
          }
        } }, { key: "generateYearScale", value: function(t4) {
          var e3 = t4.firstVal, i3 = t4.currentMonth, a3 = t4.currentYear, s3 = t4.daysWidthOnXAxis, r3 = t4.numberOfYears, o3 = e3.minYear, n3 = 0, l3 = new I2(this.ctx), h3 = "year";
          if (e3.minDate > 1 || e3.minMonth > 0) {
            var c3 = l3.determineRemainingDaysOfYear(e3.minYear, e3.minMonth, e3.minDate);
            n3 = (l3.determineDaysOfYear(e3.minYear) - c3 + 1) * s3, o3 = e3.minYear + 1, this.timeScaleArray.push({ position: n3, value: o3, unit: h3, year: o3, month: x2.monthMod(i3 + 1) });
          } else
            1 === e3.minDate && 0 === e3.minMonth && this.timeScaleArray.push({ position: n3, value: o3, unit: h3, year: a3, month: x2.monthMod(i3 + 1) });
          for (var d3 = o3, g3 = n3, u3 = 0; u3 < r3; u3++)
            d3++, g3 = l3.determineDaysOfYear(d3 - 1) * s3 + g3, this.timeScaleArray.push({ position: g3, value: d3, unit: h3, year: d3, month: 1 });
        } }, { key: "generateMonthScale", value: function(t4) {
          var e3 = t4.firstVal, i3 = t4.currentMonthDate, a3 = t4.currentMonth, s3 = t4.currentYear, r3 = t4.daysWidthOnXAxis, o3 = t4.numberOfMonths, n3 = a3, l3 = 0, h3 = new I2(this.ctx), c3 = "month", d3 = 0;
          if (e3.minDate > 1) {
            l3 = (h3.determineDaysOfMonths(a3 + 1, e3.minYear) - i3 + 1) * r3, n3 = x2.monthMod(a3 + 1);
            var g3 = s3 + d3, u3 = x2.monthMod(n3), p3 = n3;
            0 === n3 && (c3 = "year", p3 = g3, u3 = 1, g3 += d3 += 1), this.timeScaleArray.push({ position: l3, value: p3, unit: c3, year: g3, month: u3 });
          } else
            this.timeScaleArray.push({ position: l3, value: n3, unit: c3, year: s3, month: x2.monthMod(a3) });
          for (var f3 = n3 + 1, b3 = l3, v3 = 0, m3 = 1; v3 < o3; v3++, m3++) {
            0 === (f3 = x2.monthMod(f3)) ? (c3 = "year", d3 += 1) : c3 = "month";
            var y3 = this._getYear(s3, f3, d3);
            b3 = h3.determineDaysOfMonths(f3, y3) * r3 + b3;
            var w3 = 0 === f3 ? y3 : f3;
            this.timeScaleArray.push({ position: b3, value: w3, unit: c3, year: y3, month: 0 === f3 ? 1 : f3 }), f3++;
          }
        } }, { key: "generateDayScale", value: function(t4) {
          var e3 = t4.firstVal, i3 = t4.currentMonth, a3 = t4.currentYear, s3 = t4.hoursWidthOnXAxis, r3 = t4.numberOfDays, o3 = new I2(this.ctx), n3 = "day", l3 = e3.minDate + 1, h3 = l3, c3 = function(t5, e4, i4) {
            return t5 > o3.determineDaysOfMonths(e4 + 1, i4) ? (h3 = 1, n3 = "month", g3 = e4 += 1, e4) : e4;
          }, d3 = (24 - e3.minHour) * s3, g3 = l3, u3 = c3(h3, i3, a3);
          0 === e3.minHour && 1 === e3.minDate ? (d3 = 0, g3 = x2.monthMod(e3.minMonth), n3 = "month", h3 = e3.minDate) : 1 !== e3.minDate && 0 === e3.minHour && 0 === e3.minMinute && (d3 = 0, l3 = e3.minDate, g3 = l3, u3 = c3(h3 = l3, i3, a3)), this.timeScaleArray.push({ position: d3, value: g3, unit: n3, year: this._getYear(a3, u3, 0), month: x2.monthMod(u3), day: h3 });
          for (var p3 = d3, f3 = 0; f3 < r3; f3++) {
            n3 = "day", u3 = c3(h3 += 1, u3, this._getYear(a3, u3, 0));
            var b3 = this._getYear(a3, u3, 0);
            p3 = 24 * s3 + p3;
            var v3 = 1 === h3 ? x2.monthMod(u3) : h3;
            this.timeScaleArray.push({ position: p3, value: v3, unit: n3, year: b3, month: x2.monthMod(u3), day: v3 });
          }
        } }, { key: "generateHourScale", value: function(t4) {
          var e3 = t4.firstVal, i3 = t4.currentDate, a3 = t4.currentMonth, s3 = t4.currentYear, r3 = t4.minutesWidthOnXAxis, o3 = t4.numberOfHours, n3 = new I2(this.ctx), l3 = "hour", h3 = function(t5, e4) {
            return t5 > n3.determineDaysOfMonths(e4 + 1, s3) && (f3 = 1, e4 += 1), { month: e4, date: f3 };
          }, c3 = function(t5, e4) {
            return t5 > n3.determineDaysOfMonths(e4 + 1, s3) ? e4 += 1 : e4;
          }, d3 = 60 - (e3.minMinute + e3.minSecond / 60), g3 = d3 * r3, u3 = e3.minHour + 1, p3 = u3;
          60 === d3 && (g3 = 0, p3 = u3 = e3.minHour);
          var f3 = i3;
          p3 >= 24 && (p3 = 0, f3 += 1, l3 = "day");
          var b3 = h3(f3, a3).month;
          b3 = c3(f3, b3), this.timeScaleArray.push({ position: g3, value: u3, unit: l3, day: f3, hour: p3, year: s3, month: x2.monthMod(b3) }), p3++;
          for (var v3 = g3, m3 = 0; m3 < o3; m3++) {
            if (l3 = "hour", p3 >= 24)
              p3 = 0, l3 = "day", b3 = h3(f3 += 1, b3).month, b3 = c3(f3, b3);
            var y3 = this._getYear(s3, b3, 0);
            v3 = 60 * r3 + v3;
            var w3 = 0 === p3 ? f3 : p3;
            this.timeScaleArray.push({ position: v3, value: w3, unit: l3, hour: p3, day: f3, year: y3, month: x2.monthMod(b3) }), p3++;
          }
        } }, { key: "generateMinuteScale", value: function(t4) {
          for (var e3 = t4.currentMillisecond, i3 = t4.currentSecond, a3 = t4.currentMinute, s3 = t4.currentHour, r3 = t4.currentDate, o3 = t4.currentMonth, n3 = t4.currentYear, l3 = t4.minutesWidthOnXAxis, h3 = t4.secondsWidthOnXAxis, c3 = t4.numberOfMinutes, d3 = a3 + 1, g3 = r3, u3 = o3, p3 = n3, f3 = s3, b3 = (60 - i3 - e3 / 1e3) * h3, v3 = 0; v3 < c3; v3++)
            d3 >= 60 && (d3 = 0, 24 === (f3 += 1) && (f3 = 0)), this.timeScaleArray.push({ position: b3, value: d3, unit: "minute", hour: f3, minute: d3, day: g3, year: this._getYear(p3, u3, 0), month: x2.monthMod(u3) }), b3 += l3, d3++;
        } }, { key: "generateSecondScale", value: function(t4) {
          for (var e3 = t4.currentMillisecond, i3 = t4.currentSecond, a3 = t4.currentMinute, s3 = t4.currentHour, r3 = t4.currentDate, o3 = t4.currentMonth, n3 = t4.currentYear, l3 = t4.secondsWidthOnXAxis, h3 = t4.numberOfSeconds, c3 = i3 + 1, d3 = a3, g3 = r3, u3 = o3, p3 = n3, f3 = s3, b3 = (1e3 - e3) / 1e3 * l3, v3 = 0; v3 < h3; v3++)
            c3 >= 60 && (c3 = 0, ++d3 >= 60 && (d3 = 0, 24 === ++f3 && (f3 = 0))), this.timeScaleArray.push({ position: b3, value: c3, unit: "second", hour: f3, minute: d3, second: c3, day: g3, year: this._getYear(p3, u3, 0), month: x2.monthMod(u3) }), b3 += l3, c3++;
        } }, { key: "createRawDateString", value: function(t4, e3) {
          var i3 = t4.year;
          return 0 === t4.month && (t4.month = 1), i3 += "-" + ("0" + t4.month.toString()).slice(-2), "day" === t4.unit ? i3 += "day" === t4.unit ? "-" + ("0" + e3).slice(-2) : "-01" : i3 += "-" + ("0" + (t4.day ? t4.day : "1")).slice(-2), "hour" === t4.unit ? i3 += "hour" === t4.unit ? "T" + ("0" + e3).slice(-2) : "T00" : i3 += "T" + ("0" + (t4.hour ? t4.hour : "0")).slice(-2), "minute" === t4.unit ? i3 += ":" + ("0" + e3).slice(-2) : i3 += ":" + (t4.minute ? ("0" + t4.minute).slice(-2) : "00"), "second" === t4.unit ? i3 += ":" + ("0" + e3).slice(-2) : i3 += ":00", this.utc && (i3 += ".000Z"), i3;
        } }, { key: "formatDates", value: function(t4) {
          var e3 = this, i3 = this.w;
          return t4.map(function(t5) {
            var a3 = t5.value.toString(), s3 = new I2(e3.ctx), r3 = e3.createRawDateString(t5, a3), o3 = s3.getDate(s3.parseDate(r3));
            if (e3.utc || (o3 = s3.getDate(s3.parseDateWithTimezone(r3))), void 0 === i3.config.xaxis.labels.format) {
              var n3 = "dd MMM", l3 = i3.config.xaxis.labels.datetimeFormatter;
              "year" === t5.unit && (n3 = l3.year), "month" === t5.unit && (n3 = l3.month), "day" === t5.unit && (n3 = l3.day), "hour" === t5.unit && (n3 = l3.hour), "minute" === t5.unit && (n3 = l3.minute), "second" === t5.unit && (n3 = l3.second), a3 = s3.formatDate(o3, n3);
            } else
              a3 = s3.formatDate(o3, i3.config.xaxis.labels.format);
            return { dateString: r3, position: t5.position, value: a3, unit: t5.unit, year: t5.year, month: t5.month };
          });
        } }, { key: "removeOverlappingTS", value: function(t4) {
          var e3, i3 = this, a3 = new m2(this.ctx), s3 = false;
          t4.length > 0 && t4[0].value && t4.every(function(e4) {
            return e4.value.length === t4[0].value.length;
          }) && (s3 = true, e3 = a3.getTextRects(t4[0].value).width);
          var r3 = 0, o3 = t4.map(function(o4, n3) {
            if (n3 > 0 && i3.w.config.xaxis.labels.hideOverlappingLabels) {
              var l3 = s3 ? e3 : a3.getTextRects(t4[r3].value).width, h3 = t4[r3].position;
              return o4.position > h3 + l3 + 10 ? (r3 = n3, o4) : null;
            }
            return o4;
          });
          return o3 = o3.filter(function(t5) {
            return null !== t5;
          });
        } }, { key: "_getYear", value: function(t4, e3, i3) {
          return t4 + Math.floor(e3 / 12) + i3;
        } }]), t3;
      }();
      var Wt2 = function() {
        function t3(e3, i3) {
          a2(this, t3), this.ctx = i3, this.w = i3.w, this.el = e3;
        }
        return r2(t3, [{ key: "setupElements", value: function() {
          var t4 = this.w.globals, e3 = this.w.config, i3 = e3.chart.type;
          t4.axisCharts = ["line", "area", "bar", "rangeBar", "rangeArea", "candlestick", "boxPlot", "scatter", "bubble", "radar", "heatmap", "treemap"].indexOf(i3) > -1, t4.xyCharts = ["line", "area", "bar", "rangeBar", "rangeArea", "candlestick", "boxPlot", "scatter", "bubble"].indexOf(i3) > -1, t4.isBarHorizontal = ("bar" === e3.chart.type || "rangeBar" === e3.chart.type || "boxPlot" === e3.chart.type) && e3.plotOptions.bar.horizontal, t4.chartClass = ".apexcharts" + t4.chartID, t4.dom.baseEl = this.el, t4.dom.elWrap = document.createElement("div"), m2.setAttrs(t4.dom.elWrap, { id: t4.chartClass.substring(1), class: "apexcharts-canvas " + t4.chartClass.substring(1) }), this.el.appendChild(t4.dom.elWrap), t4.dom.Paper = new window.SVG.Doc(t4.dom.elWrap), t4.dom.Paper.attr({ class: "apexcharts-svg", "xmlns:data": "ApexChartsNS", transform: "translate(".concat(e3.chart.offsetX, ", ").concat(e3.chart.offsetY, ")") }), t4.dom.Paper.node.style.background = "dark" !== e3.theme.mode || e3.chart.background ? e3.chart.background : "rgba(0, 0, 0, 0.8)", this.setSVGDimensions(), t4.dom.elLegendForeign = document.createElementNS(t4.SVGNS, "foreignObject"), m2.setAttrs(t4.dom.elLegendForeign, { x: 0, y: 0, width: t4.svgWidth, height: t4.svgHeight }), t4.dom.elLegendWrap = document.createElement("div"), t4.dom.elLegendWrap.classList.add("apexcharts-legend"), t4.dom.elLegendWrap.setAttribute("xmlns", "http://www.w3.org/1999/xhtml"), t4.dom.elLegendForeign.appendChild(t4.dom.elLegendWrap), t4.dom.Paper.node.appendChild(t4.dom.elLegendForeign), t4.dom.elGraphical = t4.dom.Paper.group().attr({ class: "apexcharts-inner apexcharts-graphical" }), t4.dom.elDefs = t4.dom.Paper.defs(), t4.dom.Paper.add(t4.dom.elGraphical), t4.dom.elGraphical.add(t4.dom.elDefs);
        } }, { key: "plotChartType", value: function(t4, e3) {
          var i3 = this.w, a3 = i3.config, s3 = i3.globals, r3 = { series: [], i: [] }, o3 = { series: [], i: [] }, n3 = { series: [], i: [] }, l3 = { series: [], i: [] }, h3 = { series: [], i: [] }, c3 = { series: [], i: [] }, d3 = { series: [], i: [] }, g3 = { series: [], i: [] }, u3 = { series: [], seriesRangeEnd: [], i: [] };
          s3.series.map(function(e4, p4) {
            var f4 = 0;
            void 0 !== t4[p4].type ? ("column" === t4[p4].type || "bar" === t4[p4].type ? (s3.series.length > 1 && a3.plotOptions.bar.horizontal && console.warn("Horizontal bars are not supported in a mixed/combo chart. Please turn off `plotOptions.bar.horizontal`"), h3.series.push(e4), h3.i.push(p4), f4++, i3.globals.columnSeries = h3.series) : "area" === t4[p4].type ? (o3.series.push(e4), o3.i.push(p4), f4++) : "line" === t4[p4].type ? (r3.series.push(e4), r3.i.push(p4), f4++) : "scatter" === t4[p4].type ? (n3.series.push(e4), n3.i.push(p4)) : "bubble" === t4[p4].type ? (l3.series.push(e4), l3.i.push(p4), f4++) : "candlestick" === t4[p4].type ? (c3.series.push(e4), c3.i.push(p4), f4++) : "boxPlot" === t4[p4].type ? (d3.series.push(e4), d3.i.push(p4), f4++) : "rangeBar" === t4[p4].type ? (g3.series.push(e4), g3.i.push(p4), f4++) : "rangeArea" === t4[p4].type ? (u3.series.push(s3.seriesRangeStart[p4]), u3.seriesRangeEnd.push(s3.seriesRangeEnd[p4]), u3.i.push(p4), f4++) : console.warn("You have specified an unrecognized chart type. Available types for this property are line/area/column/bar/scatter/bubble/candlestick/boxPlot/rangeBar/rangeArea"), f4 > 1 && (s3.comboCharts = true)) : (r3.series.push(e4), r3.i.push(p4));
          });
          var p3 = new Ft2(this.ctx, e3), f3 = new kt2(this.ctx, e3);
          this.ctx.pie = new Lt2(this.ctx);
          var x3 = new It2(this.ctx);
          this.ctx.rangeBar = new Tt2(this.ctx, e3);
          var b3 = new Pt2(this.ctx), v3 = [];
          if (s3.comboCharts) {
            if (o3.series.length > 0 && v3.push(p3.draw(o3.series, "area", o3.i)), h3.series.length > 0)
              if (i3.config.chart.stacked) {
                var m3 = new wt2(this.ctx, e3);
                v3.push(m3.draw(h3.series, h3.i));
              } else
                this.ctx.bar = new yt2(this.ctx, e3), v3.push(this.ctx.bar.draw(h3.series, h3.i));
            if (u3.series.length > 0 && v3.push(p3.draw(u3.series, "rangeArea", u3.i, u3.seriesRangeEnd)), r3.series.length > 0 && v3.push(p3.draw(r3.series, "line", r3.i)), c3.series.length > 0 && v3.push(f3.draw(c3.series, "candlestick", c3.i)), d3.series.length > 0 && v3.push(f3.draw(d3.series, "boxPlot", d3.i)), g3.series.length > 0 && v3.push(this.ctx.rangeBar.draw(g3.series, g3.i)), n3.series.length > 0) {
              var y3 = new Ft2(this.ctx, e3, true);
              v3.push(y3.draw(n3.series, "scatter", n3.i));
            }
            if (l3.series.length > 0) {
              var w3 = new Ft2(this.ctx, e3, true);
              v3.push(w3.draw(l3.series, "bubble", l3.i));
            }
          } else
            switch (a3.chart.type) {
              case "line":
                v3 = p3.draw(s3.series, "line");
                break;
              case "area":
                v3 = p3.draw(s3.series, "area");
                break;
              case "bar":
                if (a3.chart.stacked)
                  v3 = new wt2(this.ctx, e3).draw(s3.series);
                else
                  this.ctx.bar = new yt2(this.ctx, e3), v3 = this.ctx.bar.draw(s3.series);
                break;
              case "candlestick":
                v3 = new kt2(this.ctx, e3).draw(s3.series, "candlestick");
                break;
              case "boxPlot":
                v3 = new kt2(this.ctx, e3).draw(s3.series, a3.chart.type);
                break;
              case "rangeBar":
                v3 = this.ctx.rangeBar.draw(s3.series);
                break;
              case "rangeArea":
                v3 = p3.draw(s3.seriesRangeStart, "rangeArea", void 0, s3.seriesRangeEnd);
                break;
              case "heatmap":
                v3 = new St2(this.ctx, e3).draw(s3.series);
                break;
              case "treemap":
                v3 = new Dt2(this.ctx, e3).draw(s3.series);
                break;
              case "pie":
              case "donut":
              case "polarArea":
                v3 = this.ctx.pie.draw(s3.series);
                break;
              case "radialBar":
                v3 = x3.draw(s3.series);
                break;
              case "radar":
                v3 = b3.draw(s3.series);
                break;
              default:
                v3 = p3.draw(s3.series);
            }
          return v3;
        } }, { key: "setSVGDimensions", value: function() {
          var t4 = this.w.globals, e3 = this.w.config;
          t4.svgWidth = e3.chart.width, t4.svgHeight = e3.chart.height;
          var i3 = x2.getDimensions(this.el), a3 = e3.chart.width.toString().split(/[0-9]+/g).pop();
          "%" === a3 ? x2.isNumber(i3[0]) && (0 === i3[0].width && (i3 = x2.getDimensions(this.el.parentNode)), t4.svgWidth = i3[0] * parseInt(e3.chart.width, 10) / 100) : "px" !== a3 && "" !== a3 || (t4.svgWidth = parseInt(e3.chart.width, 10));
          var s3 = e3.chart.height.toString().split(/[0-9]+/g).pop();
          if ("auto" !== t4.svgHeight && "" !== t4.svgHeight)
            if ("%" === s3) {
              var r3 = x2.getDimensions(this.el.parentNode);
              t4.svgHeight = r3[1] * parseInt(e3.chart.height, 10) / 100;
            } else
              t4.svgHeight = parseInt(e3.chart.height, 10);
          else
            t4.axisCharts ? t4.svgHeight = t4.svgWidth / 1.61 : t4.svgHeight = t4.svgWidth / 1.2;
          if (t4.svgWidth < 0 && (t4.svgWidth = 0), t4.svgHeight < 0 && (t4.svgHeight = 0), m2.setAttrs(t4.dom.Paper.node, { width: t4.svgWidth, height: t4.svgHeight }), "%" !== s3) {
            var o3 = e3.chart.sparkline.enabled ? 0 : t4.axisCharts ? e3.chart.parentHeightOffset : 0;
            t4.dom.Paper.node.parentNode.parentNode.style.minHeight = t4.svgHeight + o3 + "px";
          }
          t4.dom.elWrap.style.width = t4.svgWidth + "px", t4.dom.elWrap.style.height = t4.svgHeight + "px";
        } }, { key: "shiftGraphPosition", value: function() {
          var t4 = this.w.globals, e3 = t4.translateY, i3 = { transform: "translate(" + t4.translateX + ", " + e3 + ")" };
          m2.setAttrs(t4.dom.elGraphical.node, i3);
        } }, { key: "resizeNonAxisCharts", value: function() {
          var t4 = this.w, e3 = t4.globals, i3 = 0, a3 = t4.config.chart.sparkline.enabled ? 1 : 15;
          a3 += t4.config.grid.padding.bottom, "top" !== t4.config.legend.position && "bottom" !== t4.config.legend.position || !t4.config.legend.show || t4.config.legend.floating || (i3 = new lt2(this.ctx).legendHelpers.getLegendBBox().clwh + 10);
          var s3 = t4.globals.dom.baseEl.querySelector(".apexcharts-radialbar, .apexcharts-pie"), r3 = 2.05 * t4.globals.radialSize;
          if (s3 && !t4.config.chart.sparkline.enabled && 0 !== t4.config.plotOptions.radialBar.startAngle) {
            var o3 = x2.getBoundingClientRect(s3);
            r3 = o3.bottom;
            var n3 = o3.bottom - o3.top;
            r3 = Math.max(2.05 * t4.globals.radialSize, n3);
          }
          var l3 = r3 + e3.translateY + i3 + a3;
          e3.dom.elLegendForeign && e3.dom.elLegendForeign.setAttribute("height", l3), t4.config.chart.height && String(t4.config.chart.height).indexOf("%") > 0 || (e3.dom.elWrap.style.height = l3 + "px", m2.setAttrs(e3.dom.Paper.node, { height: l3 }), e3.dom.Paper.node.parentNode.parentNode.style.minHeight = l3 + "px");
        } }, { key: "coreCalculations", value: function() {
          new U2(this.ctx).init();
        } }, { key: "resetGlobals", value: function() {
          var t4 = this, e3 = function() {
            return t4.w.config.series.map(function(t5) {
              return [];
            });
          }, i3 = new Y2(), a3 = this.w.globals;
          i3.initGlobalVars(a3), a3.seriesXvalues = e3(), a3.seriesYvalues = e3();
        } }, { key: "isMultipleY", value: function() {
          if (this.w.config.yaxis.constructor === Array && this.w.config.yaxis.length > 1)
            return this.w.globals.isMultipleYAxis = true, true;
        } }, { key: "xySettings", value: function() {
          var t4 = null, e3 = this.w;
          if (e3.globals.axisCharts) {
            if ("back" === e3.config.xaxis.crosshairs.position)
              new Q2(this.ctx).drawXCrosshairs();
            if ("back" === e3.config.yaxis[0].crosshairs.position)
              new Q2(this.ctx).drawYCrosshairs();
            if ("datetime" === e3.config.xaxis.type && void 0 === e3.config.xaxis.labels.formatter) {
              this.ctx.timeScale = new Nt2(this.ctx);
              var i3 = [];
              isFinite(e3.globals.minX) && isFinite(e3.globals.maxX) && !e3.globals.isBarHorizontal ? i3 = this.ctx.timeScale.calculateTimeScaleTicks(e3.globals.minX, e3.globals.maxX) : e3.globals.isBarHorizontal && (i3 = this.ctx.timeScale.calculateTimeScaleTicks(e3.globals.minY, e3.globals.maxY)), this.ctx.timeScale.recalcDimensionsBasedOnFormat(i3);
            }
            t4 = new y2(this.ctx).getCalculatedRatios();
          }
          return t4;
        } }, { key: "updateSourceChart", value: function(t4) {
          this.ctx.w.globals.selection = void 0, this.ctx.updateHelpers._updateOptions({ chart: { selection: { xaxis: { min: t4.w.globals.minX, max: t4.w.globals.maxX } } } }, false, false);
        } }, { key: "setupBrushHandler", value: function() {
          var t4 = this, i3 = this.w;
          if (i3.config.chart.brush.enabled && "function" != typeof i3.config.chart.events.selection) {
            var a3 = Array.isArray(i3.config.chart.brush.targets) ? i3.config.chart.brush.targets : [i3.config.chart.brush.target];
            a3.forEach(function(e3) {
              var i4 = ApexCharts.getChartByID(e3);
              i4.w.globals.brushSource = t4.ctx, "function" != typeof i4.w.config.chart.events.zoomed && (i4.w.config.chart.events.zoomed = function() {
                t4.updateSourceChart(i4);
              }), "function" != typeof i4.w.config.chart.events.scrolled && (i4.w.config.chart.events.scrolled = function() {
                t4.updateSourceChart(i4);
              });
            }), i3.config.chart.events.selection = function(t5, s3) {
              a3.forEach(function(t6) {
                var a4 = ApexCharts.getChartByID(t6), r3 = x2.clone(i3.config.yaxis);
                if (i3.config.chart.brush.autoScaleYaxis && 1 === a4.w.globals.series.length) {
                  var o3 = new _2(a4);
                  r3 = o3.autoScaleY(a4, r3, s3);
                }
                var n3 = a4.w.config.yaxis.reduce(function(t7, i4, s4) {
                  return [].concat(u2(t7), [e2(e2({}, a4.w.config.yaxis[s4]), {}, { min: r3[0].min, max: r3[0].max })]);
                }, []);
                a4.ctx.updateHelpers._updateOptions({ xaxis: { min: s3.xaxis.min, max: s3.xaxis.max }, yaxis: n3 }, false, false, false, false);
              });
            };
          }
        } }]), t3;
      }();
      var Bt2 = function() {
        function t3(e3) {
          a2(this, t3), this.ctx = e3, this.w = e3.w;
        }
        return r2(t3, [{ key: "_updateOptions", value: function(t4) {
          var e3 = this, a3 = arguments.length > 1 && void 0 !== arguments[1] && arguments[1], s3 = !(arguments.length > 2 && void 0 !== arguments[2]) || arguments[2], r3 = !(arguments.length > 3 && void 0 !== arguments[3]) || arguments[3], o3 = arguments.length > 4 && void 0 !== arguments[4] && arguments[4];
          return new Promise(function(n3) {
            var l3 = [e3.ctx];
            r3 && (l3 = e3.ctx.getSyncedCharts()), e3.ctx.w.globals.isExecCalled && (l3 = [e3.ctx], e3.ctx.w.globals.isExecCalled = false), l3.forEach(function(r4, h3) {
              var c3 = r4.w;
              if (c3.globals.shouldAnimate = s3, a3 || (c3.globals.resized = true, c3.globals.dataChanged = true, s3 && r4.series.getPreviousPaths()), t4 && "object" === i2(t4) && (r4.config = new E2(t4), t4 = y2.extendArrayProps(r4.config, t4, c3), r4.w.globals.chartID !== e3.ctx.w.globals.chartID && delete t4.series, c3.config = x2.extend(c3.config, t4), o3 && (c3.globals.lastXAxis = t4.xaxis ? x2.clone(t4.xaxis) : [], c3.globals.lastYAxis = t4.yaxis ? x2.clone(t4.yaxis) : [], c3.globals.initialConfig = x2.extend({}, c3.config), c3.globals.initialSeries = x2.clone(c3.config.series), t4.series))) {
                for (var d3 = 0; d3 < c3.globals.collapsedSeriesIndices.length; d3++) {
                  var g3 = c3.config.series[c3.globals.collapsedSeriesIndices[d3]];
                  c3.globals.collapsedSeries[d3].data = c3.globals.axisCharts ? g3.data.slice() : g3;
                }
                for (var u3 = 0; u3 < c3.globals.ancillaryCollapsedSeriesIndices.length; u3++) {
                  var p3 = c3.config.series[c3.globals.ancillaryCollapsedSeriesIndices[u3]];
                  c3.globals.ancillaryCollapsedSeries[u3].data = c3.globals.axisCharts ? p3.data.slice() : p3;
                }
                r4.series.emptyCollapsedSeries(c3.config.series);
              }
              return r4.update(t4).then(function() {
                h3 === l3.length - 1 && n3(r4);
              });
            });
          });
        } }, { key: "_updateSeries", value: function(t4, e3) {
          var i3 = this, a3 = arguments.length > 2 && void 0 !== arguments[2] && arguments[2];
          return new Promise(function(s3) {
            var r3, o3 = i3.w;
            return o3.globals.shouldAnimate = e3, o3.globals.dataChanged = true, e3 && i3.ctx.series.getPreviousPaths(), o3.globals.axisCharts ? (0 === (r3 = t4.map(function(t5, e4) {
              return i3._extendSeries(t5, e4);
            })).length && (r3 = [{ data: [] }]), o3.config.series = r3) : o3.config.series = t4.slice(), a3 && (o3.globals.initialConfig.series = x2.clone(o3.config.series), o3.globals.initialSeries = x2.clone(o3.config.series)), i3.ctx.update().then(function() {
              s3(i3.ctx);
            });
          });
        } }, { key: "_extendSeries", value: function(t4, i3) {
          var a3 = this.w, s3 = a3.config.series[i3];
          return e2(e2({}, a3.config.series[i3]), {}, { name: t4.name ? t4.name : null == s3 ? void 0 : s3.name, color: t4.color ? t4.color : null == s3 ? void 0 : s3.color, type: t4.type ? t4.type : null == s3 ? void 0 : s3.type, group: t4.group ? t4.group : null == s3 ? void 0 : s3.group, data: t4.data ? t4.data : null == s3 ? void 0 : s3.data, zIndex: void 0 !== t4.zIndex ? t4.zIndex : i3 });
        } }, { key: "toggleDataPointSelection", value: function(t4, e3) {
          var i3 = this.w, a3 = null, s3 = ".apexcharts-series[data\\:realIndex='".concat(t4, "']");
          return i3.globals.axisCharts ? a3 = i3.globals.dom.Paper.select("".concat(s3, " path[j='").concat(e3, "'], ").concat(s3, " circle[j='").concat(e3, "'], ").concat(s3, " rect[j='").concat(e3, "']")).members[0] : void 0 === e3 && (a3 = i3.globals.dom.Paper.select("".concat(s3, " path[j='").concat(t4, "']")).members[0], "pie" !== i3.config.chart.type && "polarArea" !== i3.config.chart.type && "donut" !== i3.config.chart.type || this.ctx.pie.pieClicked(t4)), a3 ? (new m2(this.ctx).pathMouseDown(a3, null), a3.node ? a3.node : null) : (console.warn("toggleDataPointSelection: Element not found"), null);
        } }, { key: "forceXAxisUpdate", value: function(t4) {
          var e3 = this.w;
          if (["min", "max"].forEach(function(i4) {
            void 0 !== t4.xaxis[i4] && (e3.config.xaxis[i4] = t4.xaxis[i4], e3.globals.lastXAxis[i4] = t4.xaxis[i4]);
          }), t4.xaxis.categories && t4.xaxis.categories.length && (e3.config.xaxis.categories = t4.xaxis.categories), e3.config.xaxis.convertedCatToNumeric) {
            var i3 = new X2(t4);
            t4 = i3.convertCatToNumericXaxis(t4, this.ctx);
          }
          return t4;
        } }, { key: "forceYAxisUpdate", value: function(t4) {
          return t4.chart && t4.chart.stacked && "100%" === t4.chart.stackType && (Array.isArray(t4.yaxis) ? t4.yaxis.forEach(function(e3, i3) {
            t4.yaxis[i3].min = 0, t4.yaxis[i3].max = 100;
          }) : (t4.yaxis.min = 0, t4.yaxis.max = 100)), t4;
        } }, { key: "revertDefaultAxisMinMax", value: function(t4) {
          var e3 = this, i3 = this.w, a3 = i3.globals.lastXAxis, s3 = i3.globals.lastYAxis;
          t4 && t4.xaxis && (a3 = t4.xaxis), t4 && t4.yaxis && (s3 = t4.yaxis), i3.config.xaxis.min = a3.min, i3.config.xaxis.max = a3.max;
          var r3 = function(t5) {
            void 0 !== s3[t5] && (i3.config.yaxis[t5].min = s3[t5].min, i3.config.yaxis[t5].max = s3[t5].max);
          };
          i3.config.yaxis.map(function(t5, a4) {
            i3.globals.zoomed || void 0 !== s3[a4] ? r3(a4) : void 0 !== e3.ctx.opts.yaxis[a4] && (t5.min = e3.ctx.opts.yaxis[a4].min, t5.max = e3.ctx.opts.yaxis[a4].max);
          });
        } }]), t3;
      }();
      Rt2 = "undefined" != typeof window ? window : void 0, Ht2 = function(t3, e3) {
        var a3 = (void 0 !== this ? this : t3).SVG = function(t4) {
          if (a3.supported)
            return t4 = new a3.Doc(t4), a3.parser.draw || a3.prepare(), t4;
        };
        if (a3.ns = "http://www.w3.org/2000/svg", a3.xmlns = "http://www.w3.org/2000/xmlns/", a3.xlink = "http://www.w3.org/1999/xlink", a3.svgjs = "http://svgjs.dev", a3.supported = true, !a3.supported)
          return false;
        a3.did = 1e3, a3.eid = function(t4) {
          return "Svgjs" + d3(t4) + a3.did++;
        }, a3.create = function(t4) {
          var i3 = e3.createElementNS(this.ns, t4);
          return i3.setAttribute("id", this.eid(t4)), i3;
        }, a3.extend = function() {
          var t4, e4;
          e4 = (t4 = [].slice.call(arguments)).pop();
          for (var i3 = t4.length - 1; i3 >= 0; i3--)
            if (t4[i3])
              for (var s4 in e4)
                t4[i3].prototype[s4] = e4[s4];
          a3.Set && a3.Set.inherit && a3.Set.inherit();
        }, a3.invent = function(t4) {
          var e4 = "function" == typeof t4.create ? t4.create : function() {
            this.constructor.call(this, a3.create(t4.create));
          };
          return t4.inherit && (e4.prototype = new t4.inherit()), t4.extend && a3.extend(e4, t4.extend), t4.construct && a3.extend(t4.parent || a3.Container, t4.construct), e4;
        }, a3.adopt = function(e4) {
          return e4 ? e4.instance ? e4.instance : ((i3 = "svg" == e4.nodeName ? e4.parentNode instanceof t3.SVGElement ? new a3.Nested() : new a3.Doc() : "linearGradient" == e4.nodeName ? new a3.Gradient("linear") : "radialGradient" == e4.nodeName ? new a3.Gradient("radial") : a3[d3(e4.nodeName)] ? new a3[d3(e4.nodeName)]() : new a3.Element(e4)).type = e4.nodeName, i3.node = e4, e4.instance = i3, i3 instanceof a3.Doc && i3.namespace().defs(), i3.setData(JSON.parse(e4.getAttribute("svgjs:data")) || {}), i3) : null;
          var i3;
        }, a3.prepare = function() {
          var t4 = e3.getElementsByTagName("body")[0], i3 = (t4 ? new a3.Doc(t4) : a3.adopt(e3.documentElement).nested()).size(2, 0);
          a3.parser = { body: t4 || e3.documentElement, draw: i3.style("opacity:0;position:absolute;left:-100%;top:-100%;overflow:hidden").node, poly: i3.polyline().node, path: i3.path().node, native: a3.create("svg") };
        }, a3.parser = { native: a3.create("svg") }, e3.addEventListener("DOMContentLoaded", function() {
          a3.parser.draw || a3.prepare();
        }, false), a3.regex = { numberAndUnit: /^([+-]?(\d+(\.\d*)?|\.\d+)(e[+-]?\d+)?)([a-z%]*)$/i, hex: /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i, rgb: /rgb\((\d+),(\d+),(\d+)\)/, reference: /#([a-z0-9\-_]+)/i, transforms: /\)\s*,?\s*/, whitespace: /\s/g, isHex: /^#[a-f0-9]{3,6}$/i, isRgb: /^rgb\(/, isCss: /[^:]+:[^;]+;?/, isBlank: /^(\s+)?$/, isNumber: /^[+-]?(\d+(\.\d*)?|\.\d+)(e[+-]?\d+)?$/i, isPercent: /^-?[\d\.]+%$/, isImage: /\.(jpg|jpeg|png|gif|svg)(\?[^=]+.*)?/i, delimiter: /[\s,]+/, hyphen: /([^e])\-/gi, pathLetters: /[MLHVCSQTAZ]/gi, isPathLetter: /[MLHVCSQTAZ]/i, numbersWithDots: /((\d?\.\d+(?:e[+-]?\d+)?)((?:\.\d+(?:e[+-]?\d+)?)+))+/gi, dots: /\./g }, a3.utils = { map: function(t4, e4) {
          for (var i3 = t4.length, a4 = [], s4 = 0; s4 < i3; s4++)
            a4.push(e4(t4[s4]));
          return a4;
        }, filter: function(t4, e4) {
          for (var i3 = t4.length, a4 = [], s4 = 0; s4 < i3; s4++)
            e4(t4[s4]) && a4.push(t4[s4]);
          return a4;
        }, filterSVGElements: function(e4) {
          return this.filter(e4, function(e5) {
            return e5 instanceof t3.SVGElement;
          });
        } }, a3.defaults = { attrs: { "fill-opacity": 1, "stroke-opacity": 1, "stroke-width": 0, "stroke-linejoin": "miter", "stroke-linecap": "butt", fill: "#000000", stroke: "#000000", opacity: 1, x: 0, y: 0, cx: 0, cy: 0, width: 0, height: 0, r: 0, rx: 0, ry: 0, offset: 0, "stop-opacity": 1, "stop-color": "#000000", "font-size": 16, "font-family": "Helvetica, Arial, sans-serif", "text-anchor": "start" } }, a3.Color = function(t4) {
          var e4, s4;
          this.r = 0, this.g = 0, this.b = 0, t4 && ("string" == typeof t4 ? a3.regex.isRgb.test(t4) ? (e4 = a3.regex.rgb.exec(t4.replace(a3.regex.whitespace, "")), this.r = parseInt(e4[1]), this.g = parseInt(e4[2]), this.b = parseInt(e4[3])) : a3.regex.isHex.test(t4) && (e4 = a3.regex.hex.exec(4 == (s4 = t4).length ? ["#", s4.substring(1, 2), s4.substring(1, 2), s4.substring(2, 3), s4.substring(2, 3), s4.substring(3, 4), s4.substring(3, 4)].join("") : s4), this.r = parseInt(e4[1], 16), this.g = parseInt(e4[2], 16), this.b = parseInt(e4[3], 16)) : "object" === i2(t4) && (this.r = t4.r, this.g = t4.g, this.b = t4.b));
        }, a3.extend(a3.Color, { toString: function() {
          return this.toHex();
        }, toHex: function() {
          return "#" + g3(this.r) + g3(this.g) + g3(this.b);
        }, toRgb: function() {
          return "rgb(" + [this.r, this.g, this.b].join() + ")";
        }, brightness: function() {
          return this.r / 255 * 0.3 + this.g / 255 * 0.59 + this.b / 255 * 0.11;
        }, morph: function(t4) {
          return this.destination = new a3.Color(t4), this;
        }, at: function(t4) {
          return this.destination ? (t4 = t4 < 0 ? 0 : t4 > 1 ? 1 : t4, new a3.Color({ r: ~~(this.r + (this.destination.r - this.r) * t4), g: ~~(this.g + (this.destination.g - this.g) * t4), b: ~~(this.b + (this.destination.b - this.b) * t4) })) : this;
        } }), a3.Color.test = function(t4) {
          return t4 += "", a3.regex.isHex.test(t4) || a3.regex.isRgb.test(t4);
        }, a3.Color.isRgb = function(t4) {
          return t4 && "number" == typeof t4.r && "number" == typeof t4.g && "number" == typeof t4.b;
        }, a3.Color.isColor = function(t4) {
          return a3.Color.isRgb(t4) || a3.Color.test(t4);
        }, a3.Array = function(t4, e4) {
          0 == (t4 = (t4 || []).valueOf()).length && e4 && (t4 = e4.valueOf()), this.value = this.parse(t4);
        }, a3.extend(a3.Array, { toString: function() {
          return this.value.join(" ");
        }, valueOf: function() {
          return this.value;
        }, parse: function(t4) {
          return t4 = t4.valueOf(), Array.isArray(t4) ? t4 : this.split(t4);
        } }), a3.PointArray = function(t4, e4) {
          a3.Array.call(this, t4, e4 || [[0, 0]]);
        }, a3.PointArray.prototype = new a3.Array(), a3.PointArray.prototype.constructor = a3.PointArray;
        for (var s3 = { M: function(t4, e4, i3) {
          return e4.x = i3.x = t4[0], e4.y = i3.y = t4[1], ["M", e4.x, e4.y];
        }, L: function(t4, e4) {
          return e4.x = t4[0], e4.y = t4[1], ["L", t4[0], t4[1]];
        }, H: function(t4, e4) {
          return e4.x = t4[0], ["H", t4[0]];
        }, V: function(t4, e4) {
          return e4.y = t4[0], ["V", t4[0]];
        }, C: function(t4, e4) {
          return e4.x = t4[4], e4.y = t4[5], ["C", t4[0], t4[1], t4[2], t4[3], t4[4], t4[5]];
        }, Q: function(t4, e4) {
          return e4.x = t4[2], e4.y = t4[3], ["Q", t4[0], t4[1], t4[2], t4[3]];
        }, S: function(t4, e4) {
          return e4.x = t4[2], e4.y = t4[3], ["S", t4[0], t4[1], t4[2], t4[3]];
        }, Z: function(t4, e4, i3) {
          return e4.x = i3.x, e4.y = i3.y, ["Z"];
        } }, r3 = "mlhvqtcsaz".split(""), o3 = 0, n3 = r3.length; o3 < n3; ++o3)
          s3[r3[o3]] = /* @__PURE__ */ function(t4) {
            return function(e4, i3, a4) {
              if ("H" == t4)
                e4[0] = e4[0] + i3.x;
              else if ("V" == t4)
                e4[0] = e4[0] + i3.y;
              else if ("A" == t4)
                e4[5] = e4[5] + i3.x, e4[6] = e4[6] + i3.y;
              else
                for (var r4 = 0, o4 = e4.length; r4 < o4; ++r4)
                  e4[r4] = e4[r4] + (r4 % 2 ? i3.y : i3.x);
              if (s3 && "function" == typeof s3[t4])
                return s3[t4](e4, i3, a4);
            };
          }(r3[o3].toUpperCase());
        a3.PathArray = function(t4, e4) {
          a3.Array.call(this, t4, e4 || [["M", 0, 0]]);
        }, a3.PathArray.prototype = new a3.Array(), a3.PathArray.prototype.constructor = a3.PathArray, a3.extend(a3.PathArray, { toString: function() {
          return function(t4) {
            for (var e4 = 0, i3 = t4.length, a4 = ""; e4 < i3; e4++)
              a4 += t4[e4][0], null != t4[e4][1] && (a4 += t4[e4][1], null != t4[e4][2] && (a4 += " ", a4 += t4[e4][2], null != t4[e4][3] && (a4 += " ", a4 += t4[e4][3], a4 += " ", a4 += t4[e4][4], null != t4[e4][5] && (a4 += " ", a4 += t4[e4][5], a4 += " ", a4 += t4[e4][6], null != t4[e4][7] && (a4 += " ", a4 += t4[e4][7])))));
            return a4 + " ";
          }(this.value);
        }, move: function(t4, e4) {
          var i3 = this.bbox();
          return i3.x, i3.y, this;
        }, at: function(t4) {
          if (!this.destination)
            return this;
          for (var e4 = this.value, i3 = this.destination.value, s4 = [], r4 = new a3.PathArray(), o4 = 0, n4 = e4.length; o4 < n4; o4++) {
            s4[o4] = [e4[o4][0]];
            for (var l4 = 1, h4 = e4[o4].length; l4 < h4; l4++)
              s4[o4][l4] = e4[o4][l4] + (i3[o4][l4] - e4[o4][l4]) * t4;
            "A" === s4[o4][0] && (s4[o4][4] = +(0 != s4[o4][4]), s4[o4][5] = +(0 != s4[o4][5]));
          }
          return r4.value = s4, r4;
        }, parse: function(t4) {
          if (t4 instanceof a3.PathArray)
            return t4.valueOf();
          var e4, i3 = { M: 2, L: 2, H: 1, V: 1, C: 6, S: 4, Q: 4, T: 2, A: 7, Z: 0 };
          t4 = "string" == typeof t4 ? t4.replace(a3.regex.numbersWithDots, h3).replace(a3.regex.pathLetters, " $& ").replace(a3.regex.hyphen, "$1 -").trim().split(a3.regex.delimiter) : t4.reduce(function(t5, e5) {
            return [].concat.call(t5, e5);
          }, []);
          var r4 = [], o4 = new a3.Point(), n4 = new a3.Point(), l4 = 0, c4 = t4.length;
          do {
            a3.regex.isPathLetter.test(t4[l4]) ? (e4 = t4[l4], ++l4) : "M" == e4 ? e4 = "L" : "m" == e4 && (e4 = "l"), r4.push(s3[e4].call(null, t4.slice(l4, l4 += i3[e4.toUpperCase()]).map(parseFloat), o4, n4));
          } while (c4 > l4);
          return r4;
        }, bbox: function() {
          return a3.parser.draw || a3.prepare(), a3.parser.path.setAttribute("d", this.toString()), a3.parser.path.getBBox();
        } }), a3.Number = a3.invent({ create: function(t4, e4) {
          this.value = 0, this.unit = e4 || "", "number" == typeof t4 ? this.value = isNaN(t4) ? 0 : isFinite(t4) ? t4 : t4 < 0 ? -34e37 : 34e37 : "string" == typeof t4 ? (e4 = t4.match(a3.regex.numberAndUnit)) && (this.value = parseFloat(e4[1]), "%" == e4[5] ? this.value /= 100 : "s" == e4[5] && (this.value *= 1e3), this.unit = e4[5]) : t4 instanceof a3.Number && (this.value = t4.valueOf(), this.unit = t4.unit);
        }, extend: { toString: function() {
          return ("%" == this.unit ? ~~(1e8 * this.value) / 1e6 : "s" == this.unit ? this.value / 1e3 : this.value) + this.unit;
        }, toJSON: function() {
          return this.toString();
        }, valueOf: function() {
          return this.value;
        }, plus: function(t4) {
          return t4 = new a3.Number(t4), new a3.Number(this + t4, this.unit || t4.unit);
        }, minus: function(t4) {
          return t4 = new a3.Number(t4), new a3.Number(this - t4, this.unit || t4.unit);
        }, times: function(t4) {
          return t4 = new a3.Number(t4), new a3.Number(this * t4, this.unit || t4.unit);
        }, divide: function(t4) {
          return t4 = new a3.Number(t4), new a3.Number(this / t4, this.unit || t4.unit);
        }, to: function(t4) {
          var e4 = new a3.Number(this);
          return "string" == typeof t4 && (e4.unit = t4), e4;
        }, morph: function(t4) {
          return this.destination = new a3.Number(t4), t4.relative && (this.destination.value += this.value), this;
        }, at: function(t4) {
          return this.destination ? new a3.Number(this.destination).minus(this).times(t4).plus(this) : this;
        } } }), a3.Element = a3.invent({ create: function(t4) {
          this._stroke = a3.defaults.attrs.stroke, this._event = null, this.dom = {}, (this.node = t4) && (this.type = t4.nodeName, this.node.instance = this, this._stroke = t4.getAttribute("stroke") || this._stroke);
        }, extend: { x: function(t4) {
          return this.attr("x", t4);
        }, y: function(t4) {
          return this.attr("y", t4);
        }, cx: function(t4) {
          return null == t4 ? this.x() + this.width() / 2 : this.x(t4 - this.width() / 2);
        }, cy: function(t4) {
          return null == t4 ? this.y() + this.height() / 2 : this.y(t4 - this.height() / 2);
        }, move: function(t4, e4) {
          return this.x(t4).y(e4);
        }, center: function(t4, e4) {
          return this.cx(t4).cy(e4);
        }, width: function(t4) {
          return this.attr("width", t4);
        }, height: function(t4) {
          return this.attr("height", t4);
        }, size: function(t4, e4) {
          var i3 = u3(this, t4, e4);
          return this.width(new a3.Number(i3.width)).height(new a3.Number(i3.height));
        }, clone: function(t4) {
          this.writeDataToDom();
          var e4 = x3(this.node.cloneNode(true));
          return t4 ? t4.add(e4) : this.after(e4), e4;
        }, remove: function() {
          return this.parent() && this.parent().removeElement(this), this;
        }, replace: function(t4) {
          return this.after(t4).remove(), t4;
        }, addTo: function(t4) {
          return t4.put(this);
        }, putIn: function(t4) {
          return t4.add(this);
        }, id: function(t4) {
          return this.attr("id", t4);
        }, show: function() {
          return this.style("display", "");
        }, hide: function() {
          return this.style("display", "none");
        }, visible: function() {
          return "none" != this.style("display");
        }, toString: function() {
          return this.attr("id");
        }, classes: function() {
          var t4 = this.attr("class");
          return null == t4 ? [] : t4.trim().split(a3.regex.delimiter);
        }, hasClass: function(t4) {
          return -1 != this.classes().indexOf(t4);
        }, addClass: function(t4) {
          if (!this.hasClass(t4)) {
            var e4 = this.classes();
            e4.push(t4), this.attr("class", e4.join(" "));
          }
          return this;
        }, removeClass: function(t4) {
          return this.hasClass(t4) && this.attr("class", this.classes().filter(function(e4) {
            return e4 != t4;
          }).join(" ")), this;
        }, toggleClass: function(t4) {
          return this.hasClass(t4) ? this.removeClass(t4) : this.addClass(t4);
        }, reference: function(t4) {
          return a3.get(this.attr(t4));
        }, parent: function(e4) {
          var i3 = this;
          if (!i3.node.parentNode)
            return null;
          if (i3 = a3.adopt(i3.node.parentNode), !e4)
            return i3;
          for (; i3 && i3.node instanceof t3.SVGElement; ) {
            if ("string" == typeof e4 ? i3.matches(e4) : i3 instanceof e4)
              return i3;
            if (!i3.node.parentNode || "#document" == i3.node.parentNode.nodeName)
              return null;
            i3 = a3.adopt(i3.node.parentNode);
          }
        }, doc: function() {
          return this instanceof a3.Doc ? this : this.parent(a3.Doc);
        }, parents: function(t4) {
          var e4 = [], i3 = this;
          do {
            if (!(i3 = i3.parent(t4)) || !i3.node)
              break;
            e4.push(i3);
          } while (i3.parent);
          return e4;
        }, matches: function(t4) {
          return function(t5, e4) {
            return (t5.matches || t5.matchesSelector || t5.msMatchesSelector || t5.mozMatchesSelector || t5.webkitMatchesSelector || t5.oMatchesSelector).call(t5, e4);
          }(this.node, t4);
        }, native: function() {
          return this.node;
        }, svg: function(t4) {
          var i3 = e3.createElement("svg");
          if (!(t4 && this instanceof a3.Parent))
            return i3.appendChild(t4 = e3.createElement("svg")), this.writeDataToDom(), t4.appendChild(this.node.cloneNode(true)), i3.innerHTML.replace(/^<svg>/, "").replace(/<\/svg>$/, "");
          i3.innerHTML = "<svg>" + t4.replace(/\n/, "").replace(/<([\w:-]+)([^<]+?)\/>/g, "<$1$2></$1>") + "</svg>";
          for (var s4 = 0, r4 = i3.firstChild.childNodes.length; s4 < r4; s4++)
            this.node.appendChild(i3.firstChild.firstChild);
          return this;
        }, writeDataToDom: function() {
          return (this.each || this.lines) && (this.each ? this : this.lines()).each(function() {
            this.writeDataToDom();
          }), this.node.removeAttribute("svgjs:data"), Object.keys(this.dom).length && this.node.setAttribute("svgjs:data", JSON.stringify(this.dom)), this;
        }, setData: function(t4) {
          return this.dom = t4, this;
        }, is: function(t4) {
          return function(t5, e4) {
            return t5 instanceof e4;
          }(this, t4);
        } } }), a3.easing = { "-": function(t4) {
          return t4;
        }, "<>": function(t4) {
          return -Math.cos(t4 * Math.PI) / 2 + 0.5;
        }, ">": function(t4) {
          return Math.sin(t4 * Math.PI / 2);
        }, "<": function(t4) {
          return 1 - Math.cos(t4 * Math.PI / 2);
        } }, a3.morph = function(t4) {
          return function(e4, i3) {
            return new a3.MorphObj(e4, i3).at(t4);
          };
        }, a3.Situation = a3.invent({ create: function(t4) {
          this.init = false, this.reversed = false, this.reversing = false, this.duration = new a3.Number(t4.duration).valueOf(), this.delay = new a3.Number(t4.delay).valueOf(), this.start = +/* @__PURE__ */ new Date() + this.delay, this.finish = this.start + this.duration, this.ease = t4.ease, this.loop = 0, this.loops = false, this.animations = {}, this.attrs = {}, this.styles = {}, this.transforms = [], this.once = {};
        } }), a3.FX = a3.invent({ create: function(t4) {
          this._target = t4, this.situations = [], this.active = false, this.situation = null, this.paused = false, this.lastPos = 0, this.pos = 0, this.absPos = 0, this._speed = 1;
        }, extend: { animate: function(t4, e4, s4) {
          "object" === i2(t4) && (e4 = t4.ease, s4 = t4.delay, t4 = t4.duration);
          var r4 = new a3.Situation({ duration: t4 || 1e3, delay: s4 || 0, ease: a3.easing[e4 || "-"] || e4 });
          return this.queue(r4), this;
        }, target: function(t4) {
          return t4 && t4 instanceof a3.Element ? (this._target = t4, this) : this._target;
        }, timeToAbsPos: function(t4) {
          return (t4 - this.situation.start) / (this.situation.duration / this._speed);
        }, absPosToTime: function(t4) {
          return this.situation.duration / this._speed * t4 + this.situation.start;
        }, startAnimFrame: function() {
          this.stopAnimFrame(), this.animationFrame = t3.requestAnimationFrame(function() {
            this.step();
          }.bind(this));
        }, stopAnimFrame: function() {
          t3.cancelAnimationFrame(this.animationFrame);
        }, start: function() {
          return !this.active && this.situation && (this.active = true, this.startCurrent()), this;
        }, startCurrent: function() {
          return this.situation.start = +/* @__PURE__ */ new Date() + this.situation.delay / this._speed, this.situation.finish = this.situation.start + this.situation.duration / this._speed, this.initAnimations().step();
        }, queue: function(t4) {
          return ("function" == typeof t4 || t4 instanceof a3.Situation) && this.situations.push(t4), this.situation || (this.situation = this.situations.shift()), this;
        }, dequeue: function() {
          return this.stop(), this.situation = this.situations.shift(), this.situation && (this.situation instanceof a3.Situation ? this.start() : this.situation.call(this)), this;
        }, initAnimations: function() {
          var t4, e4 = this.situation;
          if (e4.init)
            return this;
          for (var i3 in e4.animations) {
            t4 = this.target()[i3](), Array.isArray(t4) || (t4 = [t4]), Array.isArray(e4.animations[i3]) || (e4.animations[i3] = [e4.animations[i3]]);
            for (var s4 = t4.length; s4--; )
              e4.animations[i3][s4] instanceof a3.Number && (t4[s4] = new a3.Number(t4[s4])), e4.animations[i3][s4] = t4[s4].morph(e4.animations[i3][s4]);
          }
          for (var i3 in e4.attrs)
            e4.attrs[i3] = new a3.MorphObj(this.target().attr(i3), e4.attrs[i3]);
          for (var i3 in e4.styles)
            e4.styles[i3] = new a3.MorphObj(this.target().style(i3), e4.styles[i3]);
          return e4.initialTransformation = this.target().matrixify(), e4.init = true, this;
        }, clearQueue: function() {
          return this.situations = [], this;
        }, clearCurrent: function() {
          return this.situation = null, this;
        }, stop: function(t4, e4) {
          var i3 = this.active;
          return this.active = false, e4 && this.clearQueue(), t4 && this.situation && (!i3 && this.startCurrent(), this.atEnd()), this.stopAnimFrame(), this.clearCurrent();
        }, after: function(t4) {
          var e4 = this.last();
          return this.target().on("finished.fx", function i3(a4) {
            a4.detail.situation == e4 && (t4.call(this, e4), this.off("finished.fx", i3));
          }), this._callStart();
        }, during: function(t4) {
          var e4 = this.last(), i3 = function(i4) {
            i4.detail.situation == e4 && t4.call(this, i4.detail.pos, a3.morph(i4.detail.pos), i4.detail.eased, e4);
          };
          return this.target().off("during.fx", i3).on("during.fx", i3), this.after(function() {
            this.off("during.fx", i3);
          }), this._callStart();
        }, afterAll: function(t4) {
          var e4 = function e5(i3) {
            t4.call(this), this.off("allfinished.fx", e5);
          };
          return this.target().off("allfinished.fx", e4).on("allfinished.fx", e4), this._callStart();
        }, last: function() {
          return this.situations.length ? this.situations[this.situations.length - 1] : this.situation;
        }, add: function(t4, e4, i3) {
          return this.last()[i3 || "animations"][t4] = e4, this._callStart();
        }, step: function(t4) {
          var e4, i3, a4;
          t4 || (this.absPos = this.timeToAbsPos(+/* @__PURE__ */ new Date())), false !== this.situation.loops ? (e4 = Math.max(this.absPos, 0), i3 = Math.floor(e4), true === this.situation.loops || i3 < this.situation.loops ? (this.pos = e4 - i3, a4 = this.situation.loop, this.situation.loop = i3) : (this.absPos = this.situation.loops, this.pos = 1, a4 = this.situation.loop - 1, this.situation.loop = this.situation.loops), this.situation.reversing && (this.situation.reversed = this.situation.reversed != Boolean((this.situation.loop - a4) % 2))) : (this.absPos = Math.min(this.absPos, 1), this.pos = this.absPos), this.pos < 0 && (this.pos = 0), this.situation.reversed && (this.pos = 1 - this.pos);
          var s4 = this.situation.ease(this.pos);
          for (var r4 in this.situation.once)
            r4 > this.lastPos && r4 <= s4 && (this.situation.once[r4].call(this.target(), this.pos, s4), delete this.situation.once[r4]);
          return this.active && this.target().fire("during", { pos: this.pos, eased: s4, fx: this, situation: this.situation }), this.situation ? (this.eachAt(), 1 == this.pos && !this.situation.reversed || this.situation.reversed && 0 == this.pos ? (this.stopAnimFrame(), this.target().fire("finished", { fx: this, situation: this.situation }), this.situations.length || (this.target().fire("allfinished"), this.situations.length || (this.target().off(".fx"), this.active = false)), this.active ? this.dequeue() : this.clearCurrent()) : !this.paused && this.active && this.startAnimFrame(), this.lastPos = s4, this) : this;
        }, eachAt: function() {
          var t4, e4 = this, i3 = this.target(), s4 = this.situation;
          for (var r4 in s4.animations)
            t4 = [].concat(s4.animations[r4]).map(function(t5) {
              return "string" != typeof t5 && t5.at ? t5.at(s4.ease(e4.pos), e4.pos) : t5;
            }), i3[r4].apply(i3, t4);
          for (var r4 in s4.attrs)
            t4 = [r4].concat(s4.attrs[r4]).map(function(t5) {
              return "string" != typeof t5 && t5.at ? t5.at(s4.ease(e4.pos), e4.pos) : t5;
            }), i3.attr.apply(i3, t4);
          for (var r4 in s4.styles)
            t4 = [r4].concat(s4.styles[r4]).map(function(t5) {
              return "string" != typeof t5 && t5.at ? t5.at(s4.ease(e4.pos), e4.pos) : t5;
            }), i3.style.apply(i3, t4);
          if (s4.transforms.length) {
            t4 = s4.initialTransformation, r4 = 0;
            for (var o4 = s4.transforms.length; r4 < o4; r4++) {
              var n4 = s4.transforms[r4];
              n4 instanceof a3.Matrix ? t4 = n4.relative ? t4.multiply(new a3.Matrix().morph(n4).at(s4.ease(this.pos))) : t4.morph(n4).at(s4.ease(this.pos)) : (n4.relative || n4.undo(t4.extract()), t4 = t4.multiply(n4.at(s4.ease(this.pos))));
            }
            i3.matrix(t4);
          }
          return this;
        }, once: function(t4, e4, i3) {
          var a4 = this.last();
          return i3 || (t4 = a4.ease(t4)), a4.once[t4] = e4, this;
        }, _callStart: function() {
          return setTimeout(function() {
            this.start();
          }.bind(this), 0), this;
        } }, parent: a3.Element, construct: { animate: function(t4, e4, i3) {
          return (this.fx || (this.fx = new a3.FX(this))).animate(t4, e4, i3);
        }, delay: function(t4) {
          return (this.fx || (this.fx = new a3.FX(this))).delay(t4);
        }, stop: function(t4, e4) {
          return this.fx && this.fx.stop(t4, e4), this;
        }, finish: function() {
          return this.fx && this.fx.finish(), this;
        } } }), a3.MorphObj = a3.invent({ create: function(t4, e4) {
          return a3.Color.isColor(e4) ? new a3.Color(t4).morph(e4) : a3.regex.delimiter.test(t4) ? a3.regex.pathLetters.test(t4) ? new a3.PathArray(t4).morph(e4) : new a3.Array(t4).morph(e4) : a3.regex.numberAndUnit.test(e4) ? new a3.Number(t4).morph(e4) : (this.value = t4, void (this.destination = e4));
        }, extend: { at: function(t4, e4) {
          return e4 < 1 ? this.value : this.destination;
        }, valueOf: function() {
          return this.value;
        } } }), a3.extend(a3.FX, { attr: function(t4, e4, a4) {
          if ("object" === i2(t4))
            for (var s4 in t4)
              this.attr(s4, t4[s4]);
          else
            this.add(t4, e4, "attrs");
          return this;
        }, plot: function(t4, e4, i3, a4) {
          return 4 == arguments.length ? this.plot([t4, e4, i3, a4]) : this.add("plot", new (this.target()).morphArray(t4));
        } }), a3.Box = a3.invent({ create: function(t4, e4, s4, r4) {
          if (!("object" !== i2(t4) || t4 instanceof a3.Element))
            return a3.Box.call(this, null != t4.left ? t4.left : t4.x, null != t4.top ? t4.top : t4.y, t4.width, t4.height);
          var o4;
          4 == arguments.length && (this.x = t4, this.y = e4, this.width = s4, this.height = r4), null == (o4 = this).x && (o4.x = 0, o4.y = 0, o4.width = 0, o4.height = 0), o4.w = o4.width, o4.h = o4.height, o4.x2 = o4.x + o4.width, o4.y2 = o4.y + o4.height, o4.cx = o4.x + o4.width / 2, o4.cy = o4.y + o4.height / 2;
        } }), a3.BBox = a3.invent({ create: function(t4) {
          if (a3.Box.apply(this, [].slice.call(arguments)), t4 instanceof a3.Element) {
            var i3;
            try {
              if (!e3.documentElement.contains) {
                for (var s4 = t4.node; s4.parentNode; )
                  s4 = s4.parentNode;
                if (s4 != e3)
                  throw new Error("Element not in the dom");
              }
              i3 = t4.node.getBBox();
            } catch (e4) {
              if (t4 instanceof a3.Shape) {
                a3.parser.draw || a3.prepare();
                var r4 = t4.clone(a3.parser.draw.instance).show();
                r4 && r4.node && "function" == typeof r4.node.getBBox && (i3 = r4.node.getBBox()), r4 && "function" == typeof r4.remove && r4.remove();
              } else
                i3 = { x: t4.node.clientLeft, y: t4.node.clientTop, width: t4.node.clientWidth, height: t4.node.clientHeight };
            }
            a3.Box.call(this, i3);
          }
        }, inherit: a3.Box, parent: a3.Element, construct: { bbox: function() {
          return new a3.BBox(this);
        } } }), a3.BBox.prototype.constructor = a3.BBox, a3.Matrix = a3.invent({ create: function(t4) {
          var e4 = f3([1, 0, 0, 1, 0, 0]);
          t4 = null === t4 ? e4 : t4 instanceof a3.Element ? t4.matrixify() : "string" == typeof t4 ? f3(t4.split(a3.regex.delimiter).map(parseFloat)) : 6 == arguments.length ? f3([].slice.call(arguments)) : Array.isArray(t4) ? f3(t4) : t4 && "object" === i2(t4) ? t4 : e4;
          for (var s4 = v3.length - 1; s4 >= 0; --s4)
            this[v3[s4]] = null != t4[v3[s4]] ? t4[v3[s4]] : e4[v3[s4]];
        }, extend: { extract: function() {
          var t4 = p3(this, 0, 1);
          p3(this, 1, 0);
          var e4 = 180 / Math.PI * Math.atan2(t4.y, t4.x) - 90;
          return { x: this.e, y: this.f, transformedX: (this.e * Math.cos(e4 * Math.PI / 180) + this.f * Math.sin(e4 * Math.PI / 180)) / Math.sqrt(this.a * this.a + this.b * this.b), transformedY: (this.f * Math.cos(e4 * Math.PI / 180) + this.e * Math.sin(-e4 * Math.PI / 180)) / Math.sqrt(this.c * this.c + this.d * this.d), rotation: e4, a: this.a, b: this.b, c: this.c, d: this.d, e: this.e, f: this.f, matrix: new a3.Matrix(this) };
        }, clone: function() {
          return new a3.Matrix(this);
        }, morph: function(t4) {
          return this.destination = new a3.Matrix(t4), this;
        }, multiply: function(t4) {
          return new a3.Matrix(this.native().multiply(function(t5) {
            return t5 instanceof a3.Matrix || (t5 = new a3.Matrix(t5)), t5;
          }(t4).native()));
        }, inverse: function() {
          return new a3.Matrix(this.native().inverse());
        }, translate: function(t4, e4) {
          return new a3.Matrix(this.native().translate(t4 || 0, e4 || 0));
        }, native: function() {
          for (var t4 = a3.parser.native.createSVGMatrix(), e4 = v3.length - 1; e4 >= 0; e4--)
            t4[v3[e4]] = this[v3[e4]];
          return t4;
        }, toString: function() {
          return "matrix(" + b3(this.a) + "," + b3(this.b) + "," + b3(this.c) + "," + b3(this.d) + "," + b3(this.e) + "," + b3(this.f) + ")";
        } }, parent: a3.Element, construct: { ctm: function() {
          return new a3.Matrix(this.node.getCTM());
        }, screenCTM: function() {
          if (this instanceof a3.Nested) {
            var t4 = this.rect(1, 1), e4 = t4.node.getScreenCTM();
            return t4.remove(), new a3.Matrix(e4);
          }
          return new a3.Matrix(this.node.getScreenCTM());
        } } }), a3.Point = a3.invent({ create: function(t4, e4) {
          var a4;
          a4 = Array.isArray(t4) ? { x: t4[0], y: t4[1] } : "object" === i2(t4) ? { x: t4.x, y: t4.y } : null != t4 ? { x: t4, y: null != e4 ? e4 : t4 } : { x: 0, y: 0 }, this.x = a4.x, this.y = a4.y;
        }, extend: { clone: function() {
          return new a3.Point(this);
        }, morph: function(t4, e4) {
          return this.destination = new a3.Point(t4, e4), this;
        } } }), a3.extend(a3.Element, { point: function(t4, e4) {
          return new a3.Point(t4, e4).transform(this.screenCTM().inverse());
        } }), a3.extend(a3.Element, { attr: function(t4, e4, s4) {
          if (null == t4) {
            for (t4 = {}, s4 = (e4 = this.node.attributes).length - 1; s4 >= 0; s4--)
              t4[e4[s4].nodeName] = a3.regex.isNumber.test(e4[s4].nodeValue) ? parseFloat(e4[s4].nodeValue) : e4[s4].nodeValue;
            return t4;
          }
          if ("object" === i2(t4))
            for (var r4 in t4)
              this.attr(r4, t4[r4]);
          else if (null === e4)
            this.node.removeAttribute(t4);
          else {
            if (null == e4)
              return null == (e4 = this.node.getAttribute(t4)) ? a3.defaults.attrs[t4] : a3.regex.isNumber.test(e4) ? parseFloat(e4) : e4;
            "stroke-width" == t4 ? this.attr("stroke", parseFloat(e4) > 0 ? this._stroke : null) : "stroke" == t4 && (this._stroke = e4), "fill" != t4 && "stroke" != t4 || (a3.regex.isImage.test(e4) && (e4 = this.doc().defs().image(e4, 0, 0)), e4 instanceof a3.Image && (e4 = this.doc().defs().pattern(0, 0, function() {
              this.add(e4);
            }))), "number" == typeof e4 ? e4 = new a3.Number(e4) : a3.Color.isColor(e4) ? e4 = new a3.Color(e4) : Array.isArray(e4) && (e4 = new a3.Array(e4)), "leading" == t4 ? this.leading && this.leading(e4) : "string" == typeof s4 ? this.node.setAttributeNS(s4, t4, e4.toString()) : this.node.setAttribute(t4, e4.toString()), !this.rebuild || "font-size" != t4 && "x" != t4 || this.rebuild(t4, e4);
          }
          return this;
        } }), a3.extend(a3.Element, { transform: function(t4, e4) {
          var s4;
          return "object" !== i2(t4) ? (s4 = new a3.Matrix(this).extract(), "string" == typeof t4 ? s4[t4] : s4) : (s4 = new a3.Matrix(this), e4 = !!e4 || !!t4.relative, null != t4.a && (s4 = e4 ? s4.multiply(new a3.Matrix(t4)) : new a3.Matrix(t4)), this.attr("transform", s4));
        } }), a3.extend(a3.Element, { untransform: function() {
          return this.attr("transform", null);
        }, matrixify: function() {
          return (this.attr("transform") || "").split(a3.regex.transforms).slice(0, -1).map(function(t4) {
            var e4 = t4.trim().split("(");
            return [e4[0], e4[1].split(a3.regex.delimiter).map(function(t5) {
              return parseFloat(t5);
            })];
          }).reduce(function(t4, e4) {
            return "matrix" == e4[0] ? t4.multiply(f3(e4[1])) : t4[e4[0]].apply(t4, e4[1]);
          }, new a3.Matrix());
        }, toParent: function(t4) {
          if (this == t4)
            return this;
          var e4 = this.screenCTM(), i3 = t4.screenCTM().inverse();
          return this.addTo(t4).untransform().transform(i3.multiply(e4)), this;
        }, toDoc: function() {
          return this.toParent(this.doc());
        } }), a3.Transformation = a3.invent({ create: function(t4, e4) {
          if (arguments.length > 1 && "boolean" != typeof e4)
            return this.constructor.call(this, [].slice.call(arguments));
          if (Array.isArray(t4))
            for (var a4 = 0, s4 = this.arguments.length; a4 < s4; ++a4)
              this[this.arguments[a4]] = t4[a4];
          else if (t4 && "object" === i2(t4))
            for (a4 = 0, s4 = this.arguments.length; a4 < s4; ++a4)
              this[this.arguments[a4]] = t4[this.arguments[a4]];
          this.inversed = false, true === e4 && (this.inversed = true);
        } }), a3.Translate = a3.invent({ parent: a3.Matrix, inherit: a3.Transformation, create: function(t4, e4) {
          this.constructor.apply(this, [].slice.call(arguments));
        }, extend: { arguments: ["transformedX", "transformedY"], method: "translate" } }), a3.extend(a3.Element, { style: function(t4, e4) {
          if (0 == arguments.length)
            return this.node.style.cssText || "";
          if (arguments.length < 2)
            if ("object" === i2(t4))
              for (var s4 in t4)
                this.style(s4, t4[s4]);
            else {
              if (!a3.regex.isCss.test(t4))
                return this.node.style[c3(t4)];
              for (t4 = t4.split(/\s*;\s*/).filter(function(t5) {
                return !!t5;
              }).map(function(t5) {
                return t5.split(/\s*:\s*/);
              }); e4 = t4.pop(); )
                this.style(e4[0], e4[1]);
            }
          else
            this.node.style[c3(t4)] = null === e4 || a3.regex.isBlank.test(e4) ? "" : e4;
          return this;
        } }), a3.Parent = a3.invent({ create: function(t4) {
          this.constructor.call(this, t4);
        }, inherit: a3.Element, extend: { children: function() {
          return a3.utils.map(a3.utils.filterSVGElements(this.node.childNodes), function(t4) {
            return a3.adopt(t4);
          });
        }, add: function(t4, e4) {
          return null == e4 ? this.node.appendChild(t4.node) : t4.node != this.node.childNodes[e4] && this.node.insertBefore(t4.node, this.node.childNodes[e4]), this;
        }, put: function(t4, e4) {
          return this.add(t4, e4), t4;
        }, has: function(t4) {
          return this.index(t4) >= 0;
        }, index: function(t4) {
          return [].slice.call(this.node.childNodes).indexOf(t4.node);
        }, get: function(t4) {
          return a3.adopt(this.node.childNodes[t4]);
        }, first: function() {
          return this.get(0);
        }, last: function() {
          return this.get(this.node.childNodes.length - 1);
        }, each: function(t4, e4) {
          for (var i3 = this.children(), s4 = 0, r4 = i3.length; s4 < r4; s4++)
            i3[s4] instanceof a3.Element && t4.apply(i3[s4], [s4, i3]), e4 && i3[s4] instanceof a3.Container && i3[s4].each(t4, e4);
          return this;
        }, removeElement: function(t4) {
          return this.node.removeChild(t4.node), this;
        }, clear: function() {
          for (; this.node.hasChildNodes(); )
            this.node.removeChild(this.node.lastChild);
          return delete this._defs, this;
        }, defs: function() {
          return this.doc().defs();
        } } }), a3.extend(a3.Parent, { ungroup: function(t4, e4) {
          return 0 === e4 || this instanceof a3.Defs || this.node == a3.parser.draw || (t4 = t4 || (this instanceof a3.Doc ? this : this.parent(a3.Parent)), e4 = e4 || 1 / 0, this.each(function() {
            return this instanceof a3.Defs ? this : this instanceof a3.Parent ? this.ungroup(t4, e4 - 1) : this.toParent(t4);
          }), this.node.firstChild || this.remove()), this;
        }, flatten: function(t4, e4) {
          return this.ungroup(t4, e4);
        } }), a3.Container = a3.invent({ create: function(t4) {
          this.constructor.call(this, t4);
        }, inherit: a3.Parent }), a3.ViewBox = a3.invent({ parent: a3.Container, construct: {} }), ["click", "dblclick", "mousedown", "mouseup", "mouseover", "mouseout", "mousemove", "touchstart", "touchmove", "touchleave", "touchend", "touchcancel"].forEach(function(t4) {
          a3.Element.prototype[t4] = function(e4) {
            return a3.on(this.node, t4, e4), this;
          };
        }), a3.listeners = [], a3.handlerMap = [], a3.listenerId = 0, a3.on = function(t4, e4, i3, s4, r4) {
          var o4 = i3.bind(s4 || t4.instance || t4), n4 = (a3.handlerMap.indexOf(t4) + 1 || a3.handlerMap.push(t4)) - 1, l4 = e4.split(".")[0], h4 = e4.split(".")[1] || "*";
          a3.listeners[n4] = a3.listeners[n4] || {}, a3.listeners[n4][l4] = a3.listeners[n4][l4] || {}, a3.listeners[n4][l4][h4] = a3.listeners[n4][l4][h4] || {}, i3._svgjsListenerId || (i3._svgjsListenerId = ++a3.listenerId), a3.listeners[n4][l4][h4][i3._svgjsListenerId] = o4, t4.addEventListener(l4, o4, r4 || { passive: true });
        }, a3.off = function(t4, e4, i3) {
          var s4 = a3.handlerMap.indexOf(t4), r4 = e4 && e4.split(".")[0], o4 = e4 && e4.split(".")[1], n4 = "";
          if (-1 != s4)
            if (i3) {
              if ("function" == typeof i3 && (i3 = i3._svgjsListenerId), !i3)
                return;
              a3.listeners[s4][r4] && a3.listeners[s4][r4][o4 || "*"] && (t4.removeEventListener(r4, a3.listeners[s4][r4][o4 || "*"][i3], false), delete a3.listeners[s4][r4][o4 || "*"][i3]);
            } else if (o4 && r4) {
              if (a3.listeners[s4][r4] && a3.listeners[s4][r4][o4]) {
                for (var l4 in a3.listeners[s4][r4][o4])
                  a3.off(t4, [r4, o4].join("."), l4);
                delete a3.listeners[s4][r4][o4];
              }
            } else if (o4)
              for (var h4 in a3.listeners[s4])
                for (var n4 in a3.listeners[s4][h4])
                  o4 === n4 && a3.off(t4, [h4, o4].join("."));
            else if (r4) {
              if (a3.listeners[s4][r4]) {
                for (var n4 in a3.listeners[s4][r4])
                  a3.off(t4, [r4, n4].join("."));
                delete a3.listeners[s4][r4];
              }
            } else {
              for (var h4 in a3.listeners[s4])
                a3.off(t4, h4);
              delete a3.listeners[s4], delete a3.handlerMap[s4];
            }
        }, a3.extend(a3.Element, { on: function(t4, e4, i3, s4) {
          return a3.on(this.node, t4, e4, i3, s4), this;
        }, off: function(t4, e4) {
          return a3.off(this.node, t4, e4), this;
        }, fire: function(e4, i3) {
          return e4 instanceof t3.Event ? this.node.dispatchEvent(e4) : this.node.dispatchEvent(e4 = new a3.CustomEvent(e4, { detail: i3, cancelable: true })), this._event = e4, this;
        }, event: function() {
          return this._event;
        } }), a3.Defs = a3.invent({ create: "defs", inherit: a3.Container }), a3.G = a3.invent({ create: "g", inherit: a3.Container, extend: { x: function(t4) {
          return null == t4 ? this.transform("x") : this.transform({ x: t4 - this.x() }, true);
        } }, construct: { group: function() {
          return this.put(new a3.G());
        } } }), a3.Doc = a3.invent({ create: function(t4) {
          t4 && ("svg" == (t4 = "string" == typeof t4 ? e3.getElementById(t4) : t4).nodeName ? this.constructor.call(this, t4) : (this.constructor.call(this, a3.create("svg")), t4.appendChild(this.node), this.size("100%", "100%")), this.namespace().defs());
        }, inherit: a3.Container, extend: { namespace: function() {
          return this.attr({ xmlns: a3.ns, version: "1.1" }).attr("xmlns:xlink", a3.xlink, a3.xmlns).attr("xmlns:svgjs", a3.svgjs, a3.xmlns);
        }, defs: function() {
          var t4;
          return this._defs || ((t4 = this.node.getElementsByTagName("defs")[0]) ? this._defs = a3.adopt(t4) : this._defs = new a3.Defs(), this.node.appendChild(this._defs.node)), this._defs;
        }, parent: function() {
          return this.node.parentNode && "#document" != this.node.parentNode.nodeName ? this.node.parentNode : null;
        }, remove: function() {
          return this.parent() && this.parent().removeChild(this.node), this;
        }, clear: function() {
          for (; this.node.hasChildNodes(); )
            this.node.removeChild(this.node.lastChild);
          return delete this._defs, a3.parser.draw && !a3.parser.draw.parentNode && this.node.appendChild(a3.parser.draw), this;
        }, clone: function(t4) {
          this.writeDataToDom();
          var e4 = this.node, i3 = x3(e4.cloneNode(true));
          return t4 ? (t4.node || t4).appendChild(i3.node) : e4.parentNode.insertBefore(i3.node, e4.nextSibling), i3;
        } } }), a3.extend(a3.Element, {}), a3.Gradient = a3.invent({ create: function(t4) {
          this.constructor.call(this, a3.create(t4 + "Gradient")), this.type = t4;
        }, inherit: a3.Container, extend: { at: function(t4, e4, i3) {
          return this.put(new a3.Stop()).update(t4, e4, i3);
        }, update: function(t4) {
          return this.clear(), "function" == typeof t4 && t4.call(this, this), this;
        }, fill: function() {
          return "url(#" + this.id() + ")";
        }, toString: function() {
          return this.fill();
        }, attr: function(t4, e4, i3) {
          return "transform" == t4 && (t4 = "gradientTransform"), a3.Container.prototype.attr.call(this, t4, e4, i3);
        } }, construct: { gradient: function(t4, e4) {
          return this.defs().gradient(t4, e4);
        } } }), a3.extend(a3.Gradient, a3.FX, { from: function(t4, e4) {
          return "radial" == (this._target || this).type ? this.attr({ fx: new a3.Number(t4), fy: new a3.Number(e4) }) : this.attr({ x1: new a3.Number(t4), y1: new a3.Number(e4) });
        }, to: function(t4, e4) {
          return "radial" == (this._target || this).type ? this.attr({ cx: new a3.Number(t4), cy: new a3.Number(e4) }) : this.attr({ x2: new a3.Number(t4), y2: new a3.Number(e4) });
        } }), a3.extend(a3.Defs, { gradient: function(t4, e4) {
          return this.put(new a3.Gradient(t4)).update(e4);
        } }), a3.Stop = a3.invent({ create: "stop", inherit: a3.Element, extend: { update: function(t4) {
          return ("number" == typeof t4 || t4 instanceof a3.Number) && (t4 = { offset: arguments[0], color: arguments[1], opacity: arguments[2] }), null != t4.opacity && this.attr("stop-opacity", t4.opacity), null != t4.color && this.attr("stop-color", t4.color), null != t4.offset && this.attr("offset", new a3.Number(t4.offset)), this;
        } } }), a3.Pattern = a3.invent({ create: "pattern", inherit: a3.Container, extend: { fill: function() {
          return "url(#" + this.id() + ")";
        }, update: function(t4) {
          return this.clear(), "function" == typeof t4 && t4.call(this, this), this;
        }, toString: function() {
          return this.fill();
        }, attr: function(t4, e4, i3) {
          return "transform" == t4 && (t4 = "patternTransform"), a3.Container.prototype.attr.call(this, t4, e4, i3);
        } }, construct: { pattern: function(t4, e4, i3) {
          return this.defs().pattern(t4, e4, i3);
        } } }), a3.extend(a3.Defs, { pattern: function(t4, e4, i3) {
          return this.put(new a3.Pattern()).update(i3).attr({ x: 0, y: 0, width: t4, height: e4, patternUnits: "userSpaceOnUse" });
        } }), a3.Shape = a3.invent({ create: function(t4) {
          this.constructor.call(this, t4);
        }, inherit: a3.Element }), a3.Symbol = a3.invent({ create: "symbol", inherit: a3.Container, construct: { symbol: function() {
          return this.put(new a3.Symbol());
        } } }), a3.Use = a3.invent({ create: "use", inherit: a3.Shape, extend: { element: function(t4, e4) {
          return this.attr("href", (e4 || "") + "#" + t4, a3.xlink);
        } }, construct: { use: function(t4, e4) {
          return this.put(new a3.Use()).element(t4, e4);
        } } }), a3.Rect = a3.invent({ create: "rect", inherit: a3.Shape, construct: { rect: function(t4, e4) {
          return this.put(new a3.Rect()).size(t4, e4);
        } } }), a3.Circle = a3.invent({ create: "circle", inherit: a3.Shape, construct: { circle: function(t4) {
          return this.put(new a3.Circle()).rx(new a3.Number(t4).divide(2)).move(0, 0);
        } } }), a3.extend(a3.Circle, a3.FX, { rx: function(t4) {
          return this.attr("r", t4);
        }, ry: function(t4) {
          return this.rx(t4);
        } }), a3.Ellipse = a3.invent({ create: "ellipse", inherit: a3.Shape, construct: { ellipse: function(t4, e4) {
          return this.put(new a3.Ellipse()).size(t4, e4).move(0, 0);
        } } }), a3.extend(a3.Ellipse, a3.Rect, a3.FX, { rx: function(t4) {
          return this.attr("rx", t4);
        }, ry: function(t4) {
          return this.attr("ry", t4);
        } }), a3.extend(a3.Circle, a3.Ellipse, { x: function(t4) {
          return null == t4 ? this.cx() - this.rx() : this.cx(t4 + this.rx());
        }, y: function(t4) {
          return null == t4 ? this.cy() - this.ry() : this.cy(t4 + this.ry());
        }, cx: function(t4) {
          return null == t4 ? this.attr("cx") : this.attr("cx", t4);
        }, cy: function(t4) {
          return null == t4 ? this.attr("cy") : this.attr("cy", t4);
        }, width: function(t4) {
          return null == t4 ? 2 * this.rx() : this.rx(new a3.Number(t4).divide(2));
        }, height: function(t4) {
          return null == t4 ? 2 * this.ry() : this.ry(new a3.Number(t4).divide(2));
        }, size: function(t4, e4) {
          var i3 = u3(this, t4, e4);
          return this.rx(new a3.Number(i3.width).divide(2)).ry(new a3.Number(i3.height).divide(2));
        } }), a3.Line = a3.invent({ create: "line", inherit: a3.Shape, extend: { array: function() {
          return new a3.PointArray([[this.attr("x1"), this.attr("y1")], [this.attr("x2"), this.attr("y2")]]);
        }, plot: function(t4, e4, i3, s4) {
          return null == t4 ? this.array() : (t4 = void 0 !== e4 ? { x1: t4, y1: e4, x2: i3, y2: s4 } : new a3.PointArray(t4).toLine(), this.attr(t4));
        }, move: function(t4, e4) {
          return this.attr(this.array().move(t4, e4).toLine());
        }, size: function(t4, e4) {
          var i3 = u3(this, t4, e4);
          return this.attr(this.array().size(i3.width, i3.height).toLine());
        } }, construct: { line: function(t4, e4, i3, s4) {
          return a3.Line.prototype.plot.apply(this.put(new a3.Line()), null != t4 ? [t4, e4, i3, s4] : [0, 0, 0, 0]);
        } } }), a3.Polyline = a3.invent({ create: "polyline", inherit: a3.Shape, construct: { polyline: function(t4) {
          return this.put(new a3.Polyline()).plot(t4 || new a3.PointArray());
        } } }), a3.Polygon = a3.invent({ create: "polygon", inherit: a3.Shape, construct: { polygon: function(t4) {
          return this.put(new a3.Polygon()).plot(t4 || new a3.PointArray());
        } } }), a3.extend(a3.Polyline, a3.Polygon, { array: function() {
          return this._array || (this._array = new a3.PointArray(this.attr("points")));
        }, plot: function(t4) {
          return null == t4 ? this.array() : this.clear().attr("points", "string" == typeof t4 ? t4 : this._array = new a3.PointArray(t4));
        }, clear: function() {
          return delete this._array, this;
        }, move: function(t4, e4) {
          return this.attr("points", this.array().move(t4, e4));
        }, size: function(t4, e4) {
          var i3 = u3(this, t4, e4);
          return this.attr("points", this.array().size(i3.width, i3.height));
        } }), a3.extend(a3.Line, a3.Polyline, a3.Polygon, { morphArray: a3.PointArray, x: function(t4) {
          return null == t4 ? this.bbox().x : this.move(t4, this.bbox().y);
        }, y: function(t4) {
          return null == t4 ? this.bbox().y : this.move(this.bbox().x, t4);
        }, width: function(t4) {
          var e4 = this.bbox();
          return null == t4 ? e4.width : this.size(t4, e4.height);
        }, height: function(t4) {
          var e4 = this.bbox();
          return null == t4 ? e4.height : this.size(e4.width, t4);
        } }), a3.Path = a3.invent({ create: "path", inherit: a3.Shape, extend: { morphArray: a3.PathArray, array: function() {
          return this._array || (this._array = new a3.PathArray(this.attr("d")));
        }, plot: function(t4) {
          return null == t4 ? this.array() : this.clear().attr("d", "string" == typeof t4 ? t4 : this._array = new a3.PathArray(t4));
        }, clear: function() {
          return delete this._array, this;
        } }, construct: { path: function(t4) {
          return this.put(new a3.Path()).plot(t4 || new a3.PathArray());
        } } }), a3.Image = a3.invent({ create: "image", inherit: a3.Shape, extend: { load: function(e4) {
          if (!e4)
            return this;
          var i3 = this, s4 = new t3.Image();
          return a3.on(s4, "load", function() {
            a3.off(s4);
            var t4 = i3.parent(a3.Pattern);
            null !== t4 && (0 == i3.width() && 0 == i3.height() && i3.size(s4.width, s4.height), t4 && 0 == t4.width() && 0 == t4.height() && t4.size(i3.width(), i3.height()), "function" == typeof i3._loaded && i3._loaded.call(i3, { width: s4.width, height: s4.height, ratio: s4.width / s4.height, url: e4 }));
          }), a3.on(s4, "error", function(t4) {
            a3.off(s4), "function" == typeof i3._error && i3._error.call(i3, t4);
          }), this.attr("href", s4.src = this.src = e4, a3.xlink);
        }, loaded: function(t4) {
          return this._loaded = t4, this;
        }, error: function(t4) {
          return this._error = t4, this;
        } }, construct: { image: function(t4, e4, i3) {
          return this.put(new a3.Image()).load(t4).size(e4 || 0, i3 || e4 || 0);
        } } }), a3.Text = a3.invent({ create: function() {
          this.constructor.call(this, a3.create("text")), this.dom.leading = new a3.Number(1.3), this._rebuild = true, this._build = false, this.attr("font-family", a3.defaults.attrs["font-family"]);
        }, inherit: a3.Shape, extend: { x: function(t4) {
          return null == t4 ? this.attr("x") : this.attr("x", t4);
        }, text: function(t4) {
          if (void 0 === t4) {
            t4 = "";
            for (var e4 = this.node.childNodes, i3 = 0, s4 = e4.length; i3 < s4; ++i3)
              0 != i3 && 3 != e4[i3].nodeType && 1 == a3.adopt(e4[i3]).dom.newLined && (t4 += "\n"), t4 += e4[i3].textContent;
            return t4;
          }
          if (this.clear().build(true), "function" == typeof t4)
            t4.call(this, this);
          else {
            i3 = 0;
            for (var r4 = (t4 = t4.split("\n")).length; i3 < r4; i3++)
              this.tspan(t4[i3]).newLine();
          }
          return this.build(false).rebuild();
        }, size: function(t4) {
          return this.attr("font-size", t4).rebuild();
        }, leading: function(t4) {
          return null == t4 ? this.dom.leading : (this.dom.leading = new a3.Number(t4), this.rebuild());
        }, lines: function() {
          var t4 = (this.textPath && this.textPath() || this).node, e4 = a3.utils.map(a3.utils.filterSVGElements(t4.childNodes), function(t5) {
            return a3.adopt(t5);
          });
          return new a3.Set(e4);
        }, rebuild: function(t4) {
          if ("boolean" == typeof t4 && (this._rebuild = t4), this._rebuild) {
            var e4 = this, i3 = 0, s4 = this.dom.leading * new a3.Number(this.attr("font-size"));
            this.lines().each(function() {
              this.dom.newLined && (e4.textPath() || this.attr("x", e4.attr("x")), "\n" == this.text() ? i3 += s4 : (this.attr("dy", s4 + i3), i3 = 0));
            }), this.fire("rebuild");
          }
          return this;
        }, build: function(t4) {
          return this._build = !!t4, this;
        }, setData: function(t4) {
          return this.dom = t4, this.dom.leading = new a3.Number(t4.leading || 1.3), this;
        } }, construct: { text: function(t4) {
          return this.put(new a3.Text()).text(t4);
        }, plain: function(t4) {
          return this.put(new a3.Text()).plain(t4);
        } } }), a3.Tspan = a3.invent({ create: "tspan", inherit: a3.Shape, extend: { text: function(t4) {
          return null == t4 ? this.node.textContent + (this.dom.newLined ? "\n" : "") : ("function" == typeof t4 ? t4.call(this, this) : this.plain(t4), this);
        }, dx: function(t4) {
          return this.attr("dx", t4);
        }, dy: function(t4) {
          return this.attr("dy", t4);
        }, newLine: function() {
          var t4 = this.parent(a3.Text);
          return this.dom.newLined = true, this.dy(t4.dom.leading * t4.attr("font-size")).attr("x", t4.x());
        } } }), a3.extend(a3.Text, a3.Tspan, { plain: function(t4) {
          return false === this._build && this.clear(), this.node.appendChild(e3.createTextNode(t4)), this;
        }, tspan: function(t4) {
          var e4 = (this.textPath && this.textPath() || this).node, i3 = new a3.Tspan();
          return false === this._build && this.clear(), e4.appendChild(i3.node), i3.text(t4);
        }, clear: function() {
          for (var t4 = (this.textPath && this.textPath() || this).node; t4.hasChildNodes(); )
            t4.removeChild(t4.lastChild);
          return this;
        }, length: function() {
          return this.node.getComputedTextLength();
        } }), a3.TextPath = a3.invent({ create: "textPath", inherit: a3.Parent, parent: a3.Text, construct: { morphArray: a3.PathArray, array: function() {
          var t4 = this.track();
          return t4 ? t4.array() : null;
        }, plot: function(t4) {
          var e4 = this.track(), i3 = null;
          return e4 && (i3 = e4.plot(t4)), null == t4 ? i3 : this;
        }, track: function() {
          var t4 = this.textPath();
          if (t4)
            return t4.reference("href");
        }, textPath: function() {
          if (this.node.firstChild && "textPath" == this.node.firstChild.nodeName)
            return a3.adopt(this.node.firstChild);
        } } }), a3.Nested = a3.invent({ create: function() {
          this.constructor.call(this, a3.create("svg")), this.style("overflow", "visible");
        }, inherit: a3.Container, construct: { nested: function() {
          return this.put(new a3.Nested());
        } } });
        var l3 = { stroke: ["color", "width", "opacity", "linecap", "linejoin", "miterlimit", "dasharray", "dashoffset"], fill: ["color", "opacity", "rule"], prefix: function(t4, e4) {
          return "color" == e4 ? t4 : t4 + "-" + e4;
        } };
        function h3(t4, e4, i3, s4) {
          return i3 + s4.replace(a3.regex.dots, " .");
        }
        function c3(t4) {
          return t4.toLowerCase().replace(/-(.)/g, function(t5, e4) {
            return e4.toUpperCase();
          });
        }
        function d3(t4) {
          return t4.charAt(0).toUpperCase() + t4.slice(1);
        }
        function g3(t4) {
          var e4 = t4.toString(16);
          return 1 == e4.length ? "0" + e4 : e4;
        }
        function u3(t4, e4, i3) {
          if (null == e4 || null == i3) {
            var a4 = t4.bbox();
            null == e4 ? e4 = a4.width / a4.height * i3 : null == i3 && (i3 = a4.height / a4.width * e4);
          }
          return { width: e4, height: i3 };
        }
        function p3(t4, e4, i3) {
          return { x: e4 * t4.a + i3 * t4.c + 0, y: e4 * t4.b + i3 * t4.d + 0 };
        }
        function f3(t4) {
          return { a: t4[0], b: t4[1], c: t4[2], d: t4[3], e: t4[4], f: t4[5] };
        }
        function x3(e4) {
          for (var i3 = e4.childNodes.length - 1; i3 >= 0; i3--)
            e4.childNodes[i3] instanceof t3.SVGElement && x3(e4.childNodes[i3]);
          return a3.adopt(e4).id(a3.eid(e4.nodeName));
        }
        function b3(t4) {
          return Math.abs(t4) > 1e-37 ? t4 : 0;
        }
        ["fill", "stroke"].forEach(function(t4) {
          var e4 = {};
          e4[t4] = function(e5) {
            if (void 0 === e5)
              return this;
            if ("string" == typeof e5 || a3.Color.isRgb(e5) || e5 && "function" == typeof e5.fill)
              this.attr(t4, e5);
            else
              for (var i3 = l3[t4].length - 1; i3 >= 0; i3--)
                null != e5[l3[t4][i3]] && this.attr(l3.prefix(t4, l3[t4][i3]), e5[l3[t4][i3]]);
            return this;
          }, a3.extend(a3.Element, a3.FX, e4);
        }), a3.extend(a3.Element, a3.FX, { translate: function(t4, e4) {
          return this.transform({ x: t4, y: e4 });
        }, matrix: function(t4) {
          return this.attr("transform", new a3.Matrix(6 == arguments.length ? [].slice.call(arguments) : t4));
        }, opacity: function(t4) {
          return this.attr("opacity", t4);
        }, dx: function(t4) {
          return this.x(new a3.Number(t4).plus(this instanceof a3.FX ? 0 : this.x()), true);
        }, dy: function(t4) {
          return this.y(new a3.Number(t4).plus(this instanceof a3.FX ? 0 : this.y()), true);
        } }), a3.extend(a3.Path, { length: function() {
          return this.node.getTotalLength();
        }, pointAt: function(t4) {
          return this.node.getPointAtLength(t4);
        } }), a3.Set = a3.invent({ create: function(t4) {
          Array.isArray(t4) ? this.members = t4 : this.clear();
        }, extend: { add: function() {
          for (var t4 = [].slice.call(arguments), e4 = 0, i3 = t4.length; e4 < i3; e4++)
            this.members.push(t4[e4]);
          return this;
        }, remove: function(t4) {
          var e4 = this.index(t4);
          return e4 > -1 && this.members.splice(e4, 1), this;
        }, each: function(t4) {
          for (var e4 = 0, i3 = this.members.length; e4 < i3; e4++)
            t4.apply(this.members[e4], [e4, this.members]);
          return this;
        }, clear: function() {
          return this.members = [], this;
        }, length: function() {
          return this.members.length;
        }, has: function(t4) {
          return this.index(t4) >= 0;
        }, index: function(t4) {
          return this.members.indexOf(t4);
        }, get: function(t4) {
          return this.members[t4];
        }, first: function() {
          return this.get(0);
        }, last: function() {
          return this.get(this.members.length - 1);
        }, valueOf: function() {
          return this.members;
        } }, construct: { set: function(t4) {
          return new a3.Set(t4);
        } } }), a3.FX.Set = a3.invent({ create: function(t4) {
          this.set = t4;
        } }), a3.Set.inherit = function() {
          var t4 = [];
          for (var e4 in a3.Shape.prototype)
            "function" == typeof a3.Shape.prototype[e4] && "function" != typeof a3.Set.prototype[e4] && t4.push(e4);
          for (var e4 in t4.forEach(function(t5) {
            a3.Set.prototype[t5] = function() {
              for (var e5 = 0, i3 = this.members.length; e5 < i3; e5++)
                this.members[e5] && "function" == typeof this.members[e5][t5] && this.members[e5][t5].apply(this.members[e5], arguments);
              return "animate" == t5 ? this.fx || (this.fx = new a3.FX.Set(this)) : this;
            };
          }), t4 = [], a3.FX.prototype)
            "function" == typeof a3.FX.prototype[e4] && "function" != typeof a3.FX.Set.prototype[e4] && t4.push(e4);
          t4.forEach(function(t5) {
            a3.FX.Set.prototype[t5] = function() {
              for (var e5 = 0, i3 = this.set.members.length; e5 < i3; e5++)
                this.set.members[e5].fx[t5].apply(this.set.members[e5].fx, arguments);
              return this;
            };
          });
        }, a3.extend(a3.Element, {}), a3.extend(a3.Element, { remember: function(t4, e4) {
          if ("object" === i2(arguments[0]))
            for (var a4 in t4)
              this.remember(a4, t4[a4]);
          else {
            if (1 == arguments.length)
              return this.memory()[t4];
            this.memory()[t4] = e4;
          }
          return this;
        }, forget: function() {
          if (0 == arguments.length)
            this._memory = {};
          else
            for (var t4 = arguments.length - 1; t4 >= 0; t4--)
              delete this.memory()[arguments[t4]];
          return this;
        }, memory: function() {
          return this._memory || (this._memory = {});
        } }), a3.get = function(t4) {
          var i3 = e3.getElementById(function(t5) {
            var e4 = (t5 || "").toString().match(a3.regex.reference);
            if (e4)
              return e4[1];
          }(t4) || t4);
          return a3.adopt(i3);
        }, a3.select = function(t4, i3) {
          return new a3.Set(a3.utils.map((i3 || e3).querySelectorAll(t4), function(t5) {
            return a3.adopt(t5);
          }));
        }, a3.extend(a3.Parent, { select: function(t4) {
          return a3.select(t4, this.node);
        } });
        var v3 = "abcdef".split("");
        if ("function" != typeof t3.CustomEvent) {
          var m3 = function(t4, i3) {
            i3 = i3 || { bubbles: false, cancelable: false, detail: void 0 };
            var a4 = e3.createEvent("CustomEvent");
            return a4.initCustomEvent(t4, i3.bubbles, i3.cancelable, i3.detail), a4;
          };
          m3.prototype = t3.Event.prototype, a3.CustomEvent = m3;
        } else
          a3.CustomEvent = t3.CustomEvent;
        return a3;
      }, "function" == typeof define && define.amd ? define(function() {
        return Ht2(Rt2, Rt2.document);
      }) : "object" === ("undefined" == typeof exports ? "undefined" : i2(exports)) && "undefined" != typeof module ? module.exports = Rt2.document ? Ht2(Rt2, Rt2.document) : function(t3) {
        return Ht2(t3, t3.document);
      } : Rt2.SVG = Ht2(Rt2, Rt2.document), /*! svg.filter.js - v2.0.2 - 2016-02-24
      * https://github.com/wout/svg.filter.js
      * Copyright (c) 2016 Wout Fierens; Licensed MIT */
      function() {
        SVG.Filter = SVG.invent({ create: "filter", inherit: SVG.Parent, extend: { source: "SourceGraphic", sourceAlpha: "SourceAlpha", background: "BackgroundImage", backgroundAlpha: "BackgroundAlpha", fill: "FillPaint", stroke: "StrokePaint", autoSetIn: true, put: function(t4, e4) {
          return this.add(t4, e4), !t4.attr("in") && this.autoSetIn && t4.attr("in", this.source), t4.attr("result") || t4.attr("result", t4), t4;
        }, blend: function(t4, e4, i4) {
          return this.put(new SVG.BlendEffect(t4, e4, i4));
        }, colorMatrix: function(t4, e4) {
          return this.put(new SVG.ColorMatrixEffect(t4, e4));
        }, convolveMatrix: function(t4) {
          return this.put(new SVG.ConvolveMatrixEffect(t4));
        }, componentTransfer: function(t4) {
          return this.put(new SVG.ComponentTransferEffect(t4));
        }, composite: function(t4, e4, i4) {
          return this.put(new SVG.CompositeEffect(t4, e4, i4));
        }, flood: function(t4, e4) {
          return this.put(new SVG.FloodEffect(t4, e4));
        }, offset: function(t4, e4) {
          return this.put(new SVG.OffsetEffect(t4, e4));
        }, image: function(t4) {
          return this.put(new SVG.ImageEffect(t4));
        }, merge: function() {
          var t4 = [void 0];
          for (var e4 in arguments)
            t4.push(arguments[e4]);
          return this.put(new (SVG.MergeEffect.bind.apply(SVG.MergeEffect, t4))());
        }, gaussianBlur: function(t4, e4) {
          return this.put(new SVG.GaussianBlurEffect(t4, e4));
        }, morphology: function(t4, e4) {
          return this.put(new SVG.MorphologyEffect(t4, e4));
        }, diffuseLighting: function(t4, e4, i4) {
          return this.put(new SVG.DiffuseLightingEffect(t4, e4, i4));
        }, displacementMap: function(t4, e4, i4, a4, s4) {
          return this.put(new SVG.DisplacementMapEffect(t4, e4, i4, a4, s4));
        }, specularLighting: function(t4, e4, i4, a4) {
          return this.put(new SVG.SpecularLightingEffect(t4, e4, i4, a4));
        }, tile: function() {
          return this.put(new SVG.TileEffect());
        }, turbulence: function(t4, e4, i4, a4, s4) {
          return this.put(new SVG.TurbulenceEffect(t4, e4, i4, a4, s4));
        }, toString: function() {
          return "url(#" + this.attr("id") + ")";
        } } }), SVG.extend(SVG.Defs, { filter: function(t4) {
          var e4 = this.put(new SVG.Filter());
          return "function" == typeof t4 && t4.call(e4, e4), e4;
        } }), SVG.extend(SVG.Container, { filter: function(t4) {
          return this.defs().filter(t4);
        } }), SVG.extend(SVG.Element, SVG.G, SVG.Nested, { filter: function(t4) {
          return this.filterer = t4 instanceof SVG.Element ? t4 : this.doc().filter(t4), this.doc() && this.filterer.doc() !== this.doc() && this.doc().defs().add(this.filterer), this.attr("filter", this.filterer), this.filterer;
        }, unfilter: function(t4) {
          return this.filterer && true === t4 && this.filterer.remove(), delete this.filterer, this.attr("filter", null);
        } }), SVG.Effect = SVG.invent({ create: function() {
          this.constructor.call(this);
        }, inherit: SVG.Element, extend: { in: function(t4) {
          return null == t4 ? this.parent() && this.parent().select('[result="' + this.attr("in") + '"]').get(0) || this.attr("in") : this.attr("in", t4);
        }, result: function(t4) {
          return null == t4 ? this.attr("result") : this.attr("result", t4);
        }, toString: function() {
          return this.result();
        } } }), SVG.ParentEffect = SVG.invent({ create: function() {
          this.constructor.call(this);
        }, inherit: SVG.Parent, extend: { in: function(t4) {
          return null == t4 ? this.parent() && this.parent().select('[result="' + this.attr("in") + '"]').get(0) || this.attr("in") : this.attr("in", t4);
        }, result: function(t4) {
          return null == t4 ? this.attr("result") : this.attr("result", t4);
        }, toString: function() {
          return this.result();
        } } });
        var t3 = { blend: function(t4, e4) {
          return this.parent() && this.parent().blend(this, t4, e4);
        }, colorMatrix: function(t4, e4) {
          return this.parent() && this.parent().colorMatrix(t4, e4).in(this);
        }, convolveMatrix: function(t4) {
          return this.parent() && this.parent().convolveMatrix(t4).in(this);
        }, componentTransfer: function(t4) {
          return this.parent() && this.parent().componentTransfer(t4).in(this);
        }, composite: function(t4, e4) {
          return this.parent() && this.parent().composite(this, t4, e4);
        }, flood: function(t4, e4) {
          return this.parent() && this.parent().flood(t4, e4);
        }, offset: function(t4, e4) {
          return this.parent() && this.parent().offset(t4, e4).in(this);
        }, image: function(t4) {
          return this.parent() && this.parent().image(t4);
        }, merge: function() {
          return this.parent() && this.parent().merge.apply(this.parent(), [this].concat(arguments));
        }, gaussianBlur: function(t4, e4) {
          return this.parent() && this.parent().gaussianBlur(t4, e4).in(this);
        }, morphology: function(t4, e4) {
          return this.parent() && this.parent().morphology(t4, e4).in(this);
        }, diffuseLighting: function(t4, e4, i4) {
          return this.parent() && this.parent().diffuseLighting(t4, e4, i4).in(this);
        }, displacementMap: function(t4, e4, i4, a4) {
          return this.parent() && this.parent().displacementMap(this, t4, e4, i4, a4);
        }, specularLighting: function(t4, e4, i4, a4) {
          return this.parent() && this.parent().specularLighting(t4, e4, i4, a4).in(this);
        }, tile: function() {
          return this.parent() && this.parent().tile().in(this);
        }, turbulence: function(t4, e4, i4, a4, s4) {
          return this.parent() && this.parent().turbulence(t4, e4, i4, a4, s4).in(this);
        } };
        SVG.extend(SVG.Effect, t3), SVG.extend(SVG.ParentEffect, t3), SVG.ChildEffect = SVG.invent({ create: function() {
          this.constructor.call(this);
        }, inherit: SVG.Element, extend: { in: function(t4) {
          this.attr("in", t4);
        } } });
        var e3 = { blend: function(t4, e4, i4) {
          this.attr({ in: t4, in2: e4, mode: i4 || "normal" });
        }, colorMatrix: function(t4, e4) {
          "matrix" == t4 && (e4 = s3(e4)), this.attr({ type: t4, values: void 0 === e4 ? null : e4 });
        }, convolveMatrix: function(t4) {
          t4 = s3(t4), this.attr({ order: Math.sqrt(t4.split(" ").length), kernelMatrix: t4 });
        }, composite: function(t4, e4, i4) {
          this.attr({ in: t4, in2: e4, operator: i4 });
        }, flood: function(t4, e4) {
          this.attr("flood-color", t4), null != e4 && this.attr("flood-opacity", e4);
        }, offset: function(t4, e4) {
          this.attr({ dx: t4, dy: e4 });
        }, image: function(t4) {
          this.attr("href", t4, SVG.xlink);
        }, displacementMap: function(t4, e4, i4, a4, s4) {
          this.attr({ in: t4, in2: e4, scale: i4, xChannelSelector: a4, yChannelSelector: s4 });
        }, gaussianBlur: function(t4, e4) {
          null != t4 || null != e4 ? this.attr("stdDeviation", function(t5) {
            if (!Array.isArray(t5))
              return t5;
            for (var e5 = 0, i4 = t5.length, a4 = []; e5 < i4; e5++)
              a4.push(t5[e5]);
            return a4.join(" ");
          }(Array.prototype.slice.call(arguments))) : this.attr("stdDeviation", "0 0");
        }, morphology: function(t4, e4) {
          this.attr({ operator: t4, radius: e4 });
        }, tile: function() {
        }, turbulence: function(t4, e4, i4, a4, s4) {
          this.attr({ numOctaves: e4, seed: i4, stitchTiles: a4, baseFrequency: t4, type: s4 });
        } }, i3 = { merge: function() {
          var t4;
          if (arguments[0] instanceof SVG.Set) {
            var e4 = this;
            arguments[0].each(function(t5) {
              this instanceof SVG.MergeNode ? e4.put(this) : (this instanceof SVG.Effect || this instanceof SVG.ParentEffect) && e4.put(new SVG.MergeNode(this));
            });
          } else {
            t4 = Array.isArray(arguments[0]) ? arguments[0] : arguments;
            for (var i4 = 0; i4 < t4.length; i4++)
              t4[i4] instanceof SVG.MergeNode ? this.put(t4[i4]) : this.put(new SVG.MergeNode(t4[i4]));
          }
        }, componentTransfer: function(t4) {
          if (this.rgb = new SVG.Set(), ["r", "g", "b", "a"].forEach(function(t5) {
            this[t5] = new SVG["Func" + t5.toUpperCase()]("identity"), this.rgb.add(this[t5]), this.node.appendChild(this[t5].node);
          }.bind(this)), t4)
            for (var e4 in t4.rgb && (["r", "g", "b"].forEach(function(e5) {
              this[e5].attr(t4.rgb);
            }.bind(this)), delete t4.rgb), t4)
              this[e4].attr(t4[e4]);
        }, diffuseLighting: function(t4, e4, i4) {
          this.attr({ surfaceScale: t4, diffuseConstant: e4, kernelUnitLength: i4 });
        }, specularLighting: function(t4, e4, i4, a4) {
          this.attr({ surfaceScale: t4, diffuseConstant: e4, specularExponent: i4, kernelUnitLength: a4 });
        } }, a3 = { distantLight: function(t4, e4) {
          this.attr({ azimuth: t4, elevation: e4 });
        }, pointLight: function(t4, e4, i4) {
          this.attr({ x: t4, y: e4, z: i4 });
        }, spotLight: function(t4, e4, i4, a4, s4, r4) {
          this.attr({ x: t4, y: e4, z: i4, pointsAtX: a4, pointsAtY: s4, pointsAtZ: r4 });
        }, mergeNode: function(t4) {
          this.attr("in", t4);
        } };
        function s3(t4) {
          return Array.isArray(t4) && (t4 = new SVG.Array(t4)), t4.toString().replace(/^\s+/, "").replace(/\s+$/, "").replace(/\s+/g, " ");
        }
        function r3() {
          var t4 = function() {
          };
          for (var e4 in "function" == typeof arguments[arguments.length - 1] && (t4 = arguments[arguments.length - 1], Array.prototype.splice.call(arguments, arguments.length - 1, 1)), arguments)
            for (var i4 in arguments[e4])
              t4(arguments[e4][i4], i4, arguments[e4]);
        }
        ["r", "g", "b", "a"].forEach(function(t4) {
          a3["Func" + t4.toUpperCase()] = function(t5) {
            switch (this.attr("type", t5), t5) {
              case "table":
                this.attr("tableValues", arguments[1]);
                break;
              case "linear":
                this.attr("slope", arguments[1]), this.attr("intercept", arguments[2]);
                break;
              case "gamma":
                this.attr("amplitude", arguments[1]), this.attr("exponent", arguments[2]), this.attr("offset", arguments[2]);
            }
          };
        }), r3(e3, function(t4, e4) {
          var i4 = e4.charAt(0).toUpperCase() + e4.slice(1);
          SVG[i4 + "Effect"] = SVG.invent({ create: function() {
            this.constructor.call(this, SVG.create("fe" + i4)), t4.apply(this, arguments), this.result(this.attr("id") + "Out");
          }, inherit: SVG.Effect, extend: {} });
        }), r3(i3, function(t4, e4) {
          var i4 = e4.charAt(0).toUpperCase() + e4.slice(1);
          SVG[i4 + "Effect"] = SVG.invent({ create: function() {
            this.constructor.call(this, SVG.create("fe" + i4)), t4.apply(this, arguments), this.result(this.attr("id") + "Out");
          }, inherit: SVG.ParentEffect, extend: {} });
        }), r3(a3, function(t4, e4) {
          var i4 = e4.charAt(0).toUpperCase() + e4.slice(1);
          SVG[i4] = SVG.invent({ create: function() {
            this.constructor.call(this, SVG.create("fe" + i4)), t4.apply(this, arguments);
          }, inherit: SVG.ChildEffect, extend: {} });
        }), SVG.extend(SVG.MergeEffect, { in: function(t4) {
          return t4 instanceof SVG.MergeNode ? this.add(t4, 0) : this.add(new SVG.MergeNode(t4), 0), this;
        } }), SVG.extend(SVG.CompositeEffect, SVG.BlendEffect, SVG.DisplacementMapEffect, { in2: function(t4) {
          return null == t4 ? this.parent() && this.parent().select('[result="' + this.attr("in2") + '"]').get(0) || this.attr("in2") : this.attr("in2", t4);
        } }), SVG.filter = { sepiatone: [0.343, 0.669, 0.119, 0, 0, 0.249, 0.626, 0.13, 0, 0, 0.172, 0.334, 0.111, 0, 0, 0, 0, 0, 1, 0] };
      }.call(void 0), function() {
        function t3(t4, s4, r3, o3, n3, l3, h3) {
          for (var c3 = t4.slice(s4, r3 || h3), d3 = o3.slice(n3, l3 || h3), g3 = 0, u3 = { pos: [0, 0], start: [0, 0] }, p3 = { pos: [0, 0], start: [0, 0] }; ; ) {
            if (c3[g3] = e3.call(u3, c3[g3]), d3[g3] = e3.call(p3, d3[g3]), c3[g3][0] != d3[g3][0] || "M" == c3[g3][0] || "A" == c3[g3][0] && (c3[g3][4] != d3[g3][4] || c3[g3][5] != d3[g3][5]) ? (Array.prototype.splice.apply(c3, [g3, 1].concat(a3.call(u3, c3[g3]))), Array.prototype.splice.apply(d3, [g3, 1].concat(a3.call(p3, d3[g3])))) : (c3[g3] = i3.call(u3, c3[g3]), d3[g3] = i3.call(p3, d3[g3])), ++g3 == c3.length && g3 == d3.length)
              break;
            g3 == c3.length && c3.push(["C", u3.pos[0], u3.pos[1], u3.pos[0], u3.pos[1], u3.pos[0], u3.pos[1]]), g3 == d3.length && d3.push(["C", p3.pos[0], p3.pos[1], p3.pos[0], p3.pos[1], p3.pos[0], p3.pos[1]]);
          }
          return { start: c3, dest: d3 };
        }
        function e3(t4) {
          switch (t4[0]) {
            case "z":
            case "Z":
              t4[0] = "L", t4[1] = this.start[0], t4[2] = this.start[1];
              break;
            case "H":
              t4[0] = "L", t4[2] = this.pos[1];
              break;
            case "V":
              t4[0] = "L", t4[2] = t4[1], t4[1] = this.pos[0];
              break;
            case "T":
              t4[0] = "Q", t4[3] = t4[1], t4[4] = t4[2], t4[1] = this.reflection[1], t4[2] = this.reflection[0];
              break;
            case "S":
              t4[0] = "C", t4[6] = t4[4], t4[5] = t4[3], t4[4] = t4[2], t4[3] = t4[1], t4[2] = this.reflection[1], t4[1] = this.reflection[0];
          }
          return t4;
        }
        function i3(t4) {
          var e4 = t4.length;
          return this.pos = [t4[e4 - 2], t4[e4 - 1]], -1 != "SCQT".indexOf(t4[0]) && (this.reflection = [2 * this.pos[0] - t4[e4 - 4], 2 * this.pos[1] - t4[e4 - 3]]), t4;
        }
        function a3(t4) {
          var e4 = [t4];
          switch (t4[0]) {
            case "M":
              return this.pos = this.start = [t4[1], t4[2]], e4;
            case "L":
              t4[5] = t4[3] = t4[1], t4[6] = t4[4] = t4[2], t4[1] = this.pos[0], t4[2] = this.pos[1];
              break;
            case "Q":
              t4[6] = t4[4], t4[5] = t4[3], t4[4] = 1 * t4[4] / 3 + 2 * t4[2] / 3, t4[3] = 1 * t4[3] / 3 + 2 * t4[1] / 3, t4[2] = 1 * this.pos[1] / 3 + 2 * t4[2] / 3, t4[1] = 1 * this.pos[0] / 3 + 2 * t4[1] / 3;
              break;
            case "A":
              e4 = function(t5, e5) {
                var i4, a4, s4, r3, o3, n3, l3, h3, c3, d3, g3, u3, p3, f3, x3, b3, v3, m3, y3, w3, k3, A3, S3, C3, L3, P3, I3 = Math.abs(e5[1]), T3 = Math.abs(e5[2]), M3 = e5[3] % 360, z3 = e5[4], X3 = e5[5], E3 = e5[6], Y3 = e5[7], F3 = new SVG.Point(t5), R3 = new SVG.Point(E3, Y3), H3 = [];
                if (0 === I3 || 0 === T3 || F3.x === R3.x && F3.y === R3.y)
                  return [["C", F3.x, F3.y, R3.x, R3.y, R3.x, R3.y]];
                i4 = new SVG.Point((F3.x - R3.x) / 2, (F3.y - R3.y) / 2).transform(new SVG.Matrix().rotate(M3)), (a4 = i4.x * i4.x / (I3 * I3) + i4.y * i4.y / (T3 * T3)) > 1 && (I3 *= a4 = Math.sqrt(a4), T3 *= a4);
                s4 = new SVG.Matrix().rotate(M3).scale(1 / I3, 1 / T3).rotate(-M3), F3 = F3.transform(s4), R3 = R3.transform(s4), r3 = [R3.x - F3.x, R3.y - F3.y], n3 = r3[0] * r3[0] + r3[1] * r3[1], o3 = Math.sqrt(n3), r3[0] /= o3, r3[1] /= o3, l3 = n3 < 4 ? Math.sqrt(1 - n3 / 4) : 0, z3 === X3 && (l3 *= -1);
                h3 = new SVG.Point((R3.x + F3.x) / 2 + l3 * -r3[1], (R3.y + F3.y) / 2 + l3 * r3[0]), c3 = new SVG.Point(F3.x - h3.x, F3.y - h3.y), d3 = new SVG.Point(R3.x - h3.x, R3.y - h3.y), g3 = Math.acos(c3.x / Math.sqrt(c3.x * c3.x + c3.y * c3.y)), c3.y < 0 && (g3 *= -1);
                u3 = Math.acos(d3.x / Math.sqrt(d3.x * d3.x + d3.y * d3.y)), d3.y < 0 && (u3 *= -1);
                X3 && g3 > u3 && (u3 += 2 * Math.PI);
                !X3 && g3 < u3 && (u3 -= 2 * Math.PI);
                for (f3 = Math.ceil(2 * Math.abs(g3 - u3) / Math.PI), b3 = [], v3 = g3, p3 = (u3 - g3) / f3, x3 = 4 * Math.tan(p3 / 4) / 3, k3 = 0; k3 <= f3; k3++)
                  y3 = Math.cos(v3), m3 = Math.sin(v3), w3 = new SVG.Point(h3.x + y3, h3.y + m3), b3[k3] = [new SVG.Point(w3.x + x3 * m3, w3.y - x3 * y3), w3, new SVG.Point(w3.x - x3 * m3, w3.y + x3 * y3)], v3 += p3;
                for (b3[0][0] = b3[0][1].clone(), b3[b3.length - 1][2] = b3[b3.length - 1][1].clone(), s4 = new SVG.Matrix().rotate(M3).scale(I3, T3).rotate(-M3), k3 = 0, A3 = b3.length; k3 < A3; k3++)
                  b3[k3][0] = b3[k3][0].transform(s4), b3[k3][1] = b3[k3][1].transform(s4), b3[k3][2] = b3[k3][2].transform(s4);
                for (k3 = 1, A3 = b3.length; k3 < A3; k3++)
                  S3 = (w3 = b3[k3 - 1][2]).x, C3 = w3.y, L3 = (w3 = b3[k3][0]).x, P3 = w3.y, E3 = (w3 = b3[k3][1]).x, Y3 = w3.y, H3.push(["C", S3, C3, L3, P3, E3, Y3]);
                return H3;
              }(this.pos, t4), t4 = e4[0];
          }
          return t4[0] = "C", this.pos = [t4[5], t4[6]], this.reflection = [2 * t4[5] - t4[3], 2 * t4[6] - t4[4]], e4;
        }
        function s3(t4, e4) {
          if (false === e4)
            return false;
          for (var i4 = e4, a4 = t4.length; i4 < a4; ++i4)
            if ("M" == t4[i4][0])
              return i4;
          return false;
        }
        SVG.extend(SVG.PathArray, { morph: function(e4) {
          for (var i4 = this.value, a4 = this.parse(e4), r3 = 0, o3 = 0, n3 = false, l3 = false; false !== r3 || false !== o3; ) {
            var h3;
            n3 = s3(i4, false !== r3 && r3 + 1), l3 = s3(a4, false !== o3 && o3 + 1), false === r3 && (r3 = 0 == (h3 = new SVG.PathArray(c3.start).bbox()).height || 0 == h3.width ? i4.push(i4[0]) - 1 : i4.push(["M", h3.x + h3.width / 2, h3.y + h3.height / 2]) - 1), false === o3 && (o3 = 0 == (h3 = new SVG.PathArray(c3.dest).bbox()).height || 0 == h3.width ? a4.push(a4[0]) - 1 : a4.push(["M", h3.x + h3.width / 2, h3.y + h3.height / 2]) - 1);
            var c3 = t3(i4, r3, n3, a4, o3, l3);
            i4 = i4.slice(0, r3).concat(c3.start, false === n3 ? [] : i4.slice(n3)), a4 = a4.slice(0, o3).concat(c3.dest, false === l3 ? [] : a4.slice(l3)), r3 = false !== n3 && r3 + c3.start.length, o3 = false !== l3 && o3 + c3.dest.length;
          }
          return this.value = i4, this.destination = new SVG.PathArray(), this.destination.value = a4, this;
        } });
      }(), /*! svg.draggable.js - v2.2.2 - 2019-01-08
      * https://github.com/svgdotjs/svg.draggable.js
      * Copyright (c) 2019 Wout Fierens; Licensed MIT */
      function() {
        function t3(t4) {
          t4.remember("_draggable", this), this.el = t4;
        }
        t3.prototype.init = function(t4, e3) {
          var i3 = this;
          this.constraint = t4, this.value = e3, this.el.on("mousedown.drag", function(t5) {
            i3.start(t5);
          }), this.el.on("touchstart.drag", function(t5) {
            i3.start(t5);
          });
        }, t3.prototype.transformPoint = function(t4, e3) {
          var i3 = (t4 = t4 || window.event).changedTouches && t4.changedTouches[0] || t4;
          return this.p.x = i3.clientX - (e3 || 0), this.p.y = i3.clientY, this.p.matrixTransform(this.m);
        }, t3.prototype.getBBox = function() {
          var t4 = this.el.bbox();
          return this.el instanceof SVG.Nested && (t4 = this.el.rbox()), (this.el instanceof SVG.G || this.el instanceof SVG.Use || this.el instanceof SVG.Nested) && (t4.x = this.el.x(), t4.y = this.el.y()), t4;
        }, t3.prototype.start = function(t4) {
          if ("click" != t4.type && "mousedown" != t4.type && "mousemove" != t4.type || 1 == (t4.which || t4.buttons)) {
            var e3 = this;
            if (this.el.fire("beforedrag", { event: t4, handler: this }), !this.el.event().defaultPrevented) {
              t4.preventDefault(), t4.stopPropagation(), this.parent = this.parent || this.el.parent(SVG.Nested) || this.el.parent(SVG.Doc), this.p = this.parent.node.createSVGPoint(), this.m = this.el.node.getScreenCTM().inverse();
              var i3, a3 = this.getBBox();
              if (this.el instanceof SVG.Text)
                switch (i3 = this.el.node.getComputedTextLength(), this.el.attr("text-anchor")) {
                  case "middle":
                    i3 /= 2;
                    break;
                  case "start":
                    i3 = 0;
                }
              this.startPoints = { point: this.transformPoint(t4, i3), box: a3, transform: this.el.transform() }, SVG.on(window, "mousemove.drag", function(t5) {
                e3.drag(t5);
              }), SVG.on(window, "touchmove.drag", function(t5) {
                e3.drag(t5);
              }), SVG.on(window, "mouseup.drag", function(t5) {
                e3.end(t5);
              }), SVG.on(window, "touchend.drag", function(t5) {
                e3.end(t5);
              }), this.el.fire("dragstart", { event: t4, p: this.startPoints.point, m: this.m, handler: this });
            }
          }
        }, t3.prototype.drag = function(t4) {
          var e3 = this.getBBox(), i3 = this.transformPoint(t4), a3 = this.startPoints.box.x + i3.x - this.startPoints.point.x, s3 = this.startPoints.box.y + i3.y - this.startPoints.point.y, r3 = this.constraint, o3 = i3.x - this.startPoints.point.x, n3 = i3.y - this.startPoints.point.y;
          if (this.el.fire("dragmove", { event: t4, p: i3, m: this.m, handler: this }), this.el.event().defaultPrevented)
            return i3;
          if ("function" == typeof r3) {
            var l3 = r3.call(this.el, a3, s3, this.m);
            "boolean" == typeof l3 && (l3 = { x: l3, y: l3 }), true === l3.x ? this.el.x(a3) : false !== l3.x && this.el.x(l3.x), true === l3.y ? this.el.y(s3) : false !== l3.y && this.el.y(l3.y);
          } else
            "object" == typeof r3 && (null != r3.minX && a3 < r3.minX ? o3 = (a3 = r3.minX) - this.startPoints.box.x : null != r3.maxX && a3 > r3.maxX - e3.width && (o3 = (a3 = r3.maxX - e3.width) - this.startPoints.box.x), null != r3.minY && s3 < r3.minY ? n3 = (s3 = r3.minY) - this.startPoints.box.y : null != r3.maxY && s3 > r3.maxY - e3.height && (n3 = (s3 = r3.maxY - e3.height) - this.startPoints.box.y), null != r3.snapToGrid && (a3 -= a3 % r3.snapToGrid, s3 -= s3 % r3.snapToGrid, o3 -= o3 % r3.snapToGrid, n3 -= n3 % r3.snapToGrid), this.el instanceof SVG.G ? this.el.matrix(this.startPoints.transform).transform({ x: o3, y: n3 }, true) : this.el.move(a3, s3));
          return i3;
        }, t3.prototype.end = function(t4) {
          var e3 = this.drag(t4);
          this.el.fire("dragend", { event: t4, p: e3, m: this.m, handler: this }), SVG.off(window, "mousemove.drag"), SVG.off(window, "touchmove.drag"), SVG.off(window, "mouseup.drag"), SVG.off(window, "touchend.drag");
        }, SVG.extend(SVG.Element, { draggable: function(e3, i3) {
          "function" != typeof e3 && "object" != typeof e3 || (i3 = e3, e3 = true);
          var a3 = this.remember("_draggable") || new t3(this);
          return (e3 = void 0 === e3 || e3) ? a3.init(i3 || {}, e3) : (this.off("mousedown.drag"), this.off("touchstart.drag")), this;
        } });
      }.call(void 0), function() {
        function t3(t4) {
          this.el = t4, t4.remember("_selectHandler", this), this.pointSelection = { isSelected: false }, this.rectSelection = { isSelected: false }, this.pointsList = { lt: [0, 0], rt: ["width", 0], rb: ["width", "height"], lb: [0, "height"], t: ["width", 0], r: ["width", "height"], b: ["width", "height"], l: [0, "height"] }, this.pointCoord = function(t5, e3, i3) {
            var a3 = "string" != typeof t5 ? t5 : e3[t5];
            return i3 ? a3 / 2 : a3;
          }, this.pointCoords = function(t5, e3) {
            var i3 = this.pointsList[t5];
            return { x: this.pointCoord(i3[0], e3, "t" === t5 || "b" === t5), y: this.pointCoord(i3[1], e3, "r" === t5 || "l" === t5) };
          };
        }
        t3.prototype.init = function(t4, e3) {
          var i3 = this.el.bbox();
          this.options = {};
          var a3 = this.el.selectize.defaults.points;
          for (var s3 in this.el.selectize.defaults)
            this.options[s3] = this.el.selectize.defaults[s3], void 0 !== e3[s3] && (this.options[s3] = e3[s3]);
          var r3 = ["points", "pointsExclude"];
          for (var s3 in r3) {
            var o3 = this.options[r3[s3]];
            "string" == typeof o3 ? o3 = o3.length > 0 ? o3.split(/\s*,\s*/i) : [] : "boolean" == typeof o3 && "points" === r3[s3] && (o3 = o3 ? a3 : []), this.options[r3[s3]] = o3;
          }
          this.options.points = [a3, this.options.points].reduce(function(t5, e4) {
            return t5.filter(function(t6) {
              return e4.indexOf(t6) > -1;
            });
          }), this.options.points = [this.options.points, this.options.pointsExclude].reduce(function(t5, e4) {
            return t5.filter(function(t6) {
              return e4.indexOf(t6) < 0;
            });
          }), this.parent = this.el.parent(), this.nested = this.nested || this.parent.group(), this.nested.matrix(new SVG.Matrix(this.el).translate(i3.x, i3.y)), this.options.deepSelect && -1 !== ["line", "polyline", "polygon"].indexOf(this.el.type) ? this.selectPoints(t4) : this.selectRect(t4), this.observe(), this.cleanup();
        }, t3.prototype.selectPoints = function(t4) {
          return this.pointSelection.isSelected = t4, this.pointSelection.set || (this.pointSelection.set = this.parent.set(), this.drawPoints()), this;
        }, t3.prototype.getPointArray = function() {
          var t4 = this.el.bbox();
          return this.el.array().valueOf().map(function(e3) {
            return [e3[0] - t4.x, e3[1] - t4.y];
          });
        }, t3.prototype.drawPoints = function() {
          for (var t4 = this, e3 = this.getPointArray(), i3 = 0, a3 = e3.length; i3 < a3; ++i3) {
            var s3 = /* @__PURE__ */ function(e4) {
              return function(i4) {
                (i4 = i4 || window.event).preventDefault ? i4.preventDefault() : i4.returnValue = false, i4.stopPropagation();
                var a4 = i4.pageX || i4.touches[0].pageX, s4 = i4.pageY || i4.touches[0].pageY;
                t4.el.fire("point", { x: a4, y: s4, i: e4, event: i4 });
              };
            }(i3), r3 = this.drawPoint(e3[i3][0], e3[i3][1]).addClass(this.options.classPoints).addClass(this.options.classPoints + "_point").on("touchstart", s3).on("mousedown", s3);
            this.pointSelection.set.add(r3);
          }
        }, t3.prototype.drawPoint = function(t4, e3) {
          var i3 = this.options.pointType;
          switch (i3) {
            case "circle":
              return this.drawCircle(t4, e3);
            case "rect":
              return this.drawRect(t4, e3);
            default:
              if ("function" == typeof i3)
                return i3.call(this, t4, e3);
              throw new Error("Unknown " + i3 + " point type!");
          }
        }, t3.prototype.drawCircle = function(t4, e3) {
          return this.nested.circle(this.options.pointSize).center(t4, e3);
        }, t3.prototype.drawRect = function(t4, e3) {
          return this.nested.rect(this.options.pointSize, this.options.pointSize).center(t4, e3);
        }, t3.prototype.updatePointSelection = function() {
          var t4 = this.getPointArray();
          this.pointSelection.set.each(function(e3) {
            this.cx() === t4[e3][0] && this.cy() === t4[e3][1] || this.center(t4[e3][0], t4[e3][1]);
          });
        }, t3.prototype.updateRectSelection = function() {
          var t4 = this, e3 = this.el.bbox();
          if (this.rectSelection.set.get(0).attr({ width: e3.width, height: e3.height }), this.options.points.length && this.options.points.map(function(i4, a3) {
            var s3 = t4.pointCoords(i4, e3);
            t4.rectSelection.set.get(a3 + 1).center(s3.x, s3.y);
          }), this.options.rotationPoint) {
            var i3 = this.rectSelection.set.length();
            this.rectSelection.set.get(i3 - 1).center(e3.width / 2, 20);
          }
        }, t3.prototype.selectRect = function(t4) {
          var e3 = this, i3 = this.el.bbox();
          function a3(t5) {
            return function(i4) {
              (i4 = i4 || window.event).preventDefault ? i4.preventDefault() : i4.returnValue = false, i4.stopPropagation();
              var a4 = i4.pageX || i4.touches[0].pageX, s4 = i4.pageY || i4.touches[0].pageY;
              e3.el.fire(t5, { x: a4, y: s4, event: i4 });
            };
          }
          if (this.rectSelection.isSelected = t4, this.rectSelection.set = this.rectSelection.set || this.parent.set(), this.rectSelection.set.get(0) || this.rectSelection.set.add(this.nested.rect(i3.width, i3.height).addClass(this.options.classRect)), this.options.points.length && this.rectSelection.set.length() < 2) {
            this.options.points.map(function(t5, s4) {
              var r4 = e3.pointCoords(t5, i3), o3 = e3.drawPoint(r4.x, r4.y).attr("class", e3.options.classPoints + "_" + t5).on("mousedown", a3(t5)).on("touchstart", a3(t5));
              e3.rectSelection.set.add(o3);
            }), this.rectSelection.set.each(function() {
              this.addClass(e3.options.classPoints);
            });
          }
          if (this.options.rotationPoint && (this.options.points && !this.rectSelection.set.get(9) || !this.options.points && !this.rectSelection.set.get(1))) {
            var s3 = function(t5) {
              (t5 = t5 || window.event).preventDefault ? t5.preventDefault() : t5.returnValue = false, t5.stopPropagation();
              var i4 = t5.pageX || t5.touches[0].pageX, a4 = t5.pageY || t5.touches[0].pageY;
              e3.el.fire("rot", { x: i4, y: a4, event: t5 });
            }, r3 = this.drawPoint(i3.width / 2, 20).attr("class", this.options.classPoints + "_rot").on("touchstart", s3).on("mousedown", s3);
            this.rectSelection.set.add(r3);
          }
        }, t3.prototype.handler = function() {
          var t4 = this.el.bbox();
          this.nested.matrix(new SVG.Matrix(this.el).translate(t4.x, t4.y)), this.rectSelection.isSelected && this.updateRectSelection(), this.pointSelection.isSelected && this.updatePointSelection();
        }, t3.prototype.observe = function() {
          var t4 = this;
          if (MutationObserver)
            if (this.rectSelection.isSelected || this.pointSelection.isSelected)
              this.observerInst = this.observerInst || new MutationObserver(function() {
                t4.handler();
              }), this.observerInst.observe(this.el.node, { attributes: true });
            else
              try {
                this.observerInst.disconnect(), delete this.observerInst;
              } catch (t5) {
              }
          else
            this.el.off("DOMAttrModified.select"), (this.rectSelection.isSelected || this.pointSelection.isSelected) && this.el.on("DOMAttrModified.select", function() {
              t4.handler();
            });
        }, t3.prototype.cleanup = function() {
          !this.rectSelection.isSelected && this.rectSelection.set && (this.rectSelection.set.each(function() {
            this.remove();
          }), this.rectSelection.set.clear(), delete this.rectSelection.set), !this.pointSelection.isSelected && this.pointSelection.set && (this.pointSelection.set.each(function() {
            this.remove();
          }), this.pointSelection.set.clear(), delete this.pointSelection.set), this.pointSelection.isSelected || this.rectSelection.isSelected || (this.nested.remove(), delete this.nested);
        }, SVG.extend(SVG.Element, { selectize: function(e3, i3) {
          return "object" == typeof e3 && (i3 = e3, e3 = true), (this.remember("_selectHandler") || new t3(this)).init(void 0 === e3 || e3, i3 || {}), this;
        } }), SVG.Element.prototype.selectize.defaults = { points: ["lt", "rt", "rb", "lb", "t", "r", "b", "l"], pointsExclude: [], classRect: "svg_select_boundingRect", classPoints: "svg_select_points", pointSize: 7, rotationPoint: true, deepSelect: false, pointType: "circle" };
      }(), function() {
        (function() {
          function t3(t4) {
            t4.remember("_resizeHandler", this), this.el = t4, this.parameters = {}, this.lastUpdateCall = null, this.p = t4.doc().node.createSVGPoint();
          }
          t3.prototype.transformPoint = function(t4, e3, i3) {
            return this.p.x = t4 - (this.offset.x - window.pageXOffset), this.p.y = e3 - (this.offset.y - window.pageYOffset), this.p.matrixTransform(i3 || this.m);
          }, t3.prototype._extractPosition = function(t4) {
            return { x: null != t4.clientX ? t4.clientX : t4.touches[0].clientX, y: null != t4.clientY ? t4.clientY : t4.touches[0].clientY };
          }, t3.prototype.init = function(t4) {
            var e3 = this;
            if (this.stop(), "stop" !== t4) {
              for (var i3 in this.options = {}, this.el.resize.defaults)
                this.options[i3] = this.el.resize.defaults[i3], void 0 !== t4[i3] && (this.options[i3] = t4[i3]);
              this.el.on("lt.resize", function(t5) {
                e3.resize(t5 || window.event);
              }), this.el.on("rt.resize", function(t5) {
                e3.resize(t5 || window.event);
              }), this.el.on("rb.resize", function(t5) {
                e3.resize(t5 || window.event);
              }), this.el.on("lb.resize", function(t5) {
                e3.resize(t5 || window.event);
              }), this.el.on("t.resize", function(t5) {
                e3.resize(t5 || window.event);
              }), this.el.on("r.resize", function(t5) {
                e3.resize(t5 || window.event);
              }), this.el.on("b.resize", function(t5) {
                e3.resize(t5 || window.event);
              }), this.el.on("l.resize", function(t5) {
                e3.resize(t5 || window.event);
              }), this.el.on("rot.resize", function(t5) {
                e3.resize(t5 || window.event);
              }), this.el.on("point.resize", function(t5) {
                e3.resize(t5 || window.event);
              }), this.update();
            }
          }, t3.prototype.stop = function() {
            return this.el.off("lt.resize"), this.el.off("rt.resize"), this.el.off("rb.resize"), this.el.off("lb.resize"), this.el.off("t.resize"), this.el.off("r.resize"), this.el.off("b.resize"), this.el.off("l.resize"), this.el.off("rot.resize"), this.el.off("point.resize"), this;
          }, t3.prototype.resize = function(t4) {
            var e3 = this;
            this.m = this.el.node.getScreenCTM().inverse(), this.offset = { x: window.pageXOffset, y: window.pageYOffset };
            var i3 = this._extractPosition(t4.detail.event);
            if (this.parameters = { type: this.el.type, p: this.transformPoint(i3.x, i3.y), x: t4.detail.x, y: t4.detail.y, box: this.el.bbox(), rotation: this.el.transform().rotation }, "text" === this.el.type && (this.parameters.fontSize = this.el.attr()["font-size"]), void 0 !== t4.detail.i) {
              var a3 = this.el.array().valueOf();
              this.parameters.i = t4.detail.i, this.parameters.pointCoords = [a3[t4.detail.i][0], a3[t4.detail.i][1]];
            }
            switch (t4.type) {
              case "lt":
                this.calc = function(t5, e4) {
                  var i4 = this.snapToGrid(t5, e4);
                  if (this.parameters.box.width - i4[0] > 0 && this.parameters.box.height - i4[1] > 0) {
                    if ("text" === this.parameters.type)
                      return this.el.move(this.parameters.box.x + i4[0], this.parameters.box.y), void this.el.attr("font-size", this.parameters.fontSize - i4[0]);
                    i4 = this.checkAspectRatio(i4), this.el.move(this.parameters.box.x + i4[0], this.parameters.box.y + i4[1]).size(this.parameters.box.width - i4[0], this.parameters.box.height - i4[1]);
                  }
                };
                break;
              case "rt":
                this.calc = function(t5, e4) {
                  var i4 = this.snapToGrid(t5, e4, 2);
                  if (this.parameters.box.width + i4[0] > 0 && this.parameters.box.height - i4[1] > 0) {
                    if ("text" === this.parameters.type)
                      return this.el.move(this.parameters.box.x - i4[0], this.parameters.box.y), void this.el.attr("font-size", this.parameters.fontSize + i4[0]);
                    i4 = this.checkAspectRatio(i4, true), this.el.move(this.parameters.box.x, this.parameters.box.y + i4[1]).size(this.parameters.box.width + i4[0], this.parameters.box.height - i4[1]);
                  }
                };
                break;
              case "rb":
                this.calc = function(t5, e4) {
                  var i4 = this.snapToGrid(t5, e4, 0);
                  if (this.parameters.box.width + i4[0] > 0 && this.parameters.box.height + i4[1] > 0) {
                    if ("text" === this.parameters.type)
                      return this.el.move(this.parameters.box.x - i4[0], this.parameters.box.y), void this.el.attr("font-size", this.parameters.fontSize + i4[0]);
                    i4 = this.checkAspectRatio(i4), this.el.move(this.parameters.box.x, this.parameters.box.y).size(this.parameters.box.width + i4[0], this.parameters.box.height + i4[1]);
                  }
                };
                break;
              case "lb":
                this.calc = function(t5, e4) {
                  var i4 = this.snapToGrid(t5, e4, 1);
                  if (this.parameters.box.width - i4[0] > 0 && this.parameters.box.height + i4[1] > 0) {
                    if ("text" === this.parameters.type)
                      return this.el.move(this.parameters.box.x + i4[0], this.parameters.box.y), void this.el.attr("font-size", this.parameters.fontSize - i4[0]);
                    i4 = this.checkAspectRatio(i4, true), this.el.move(this.parameters.box.x + i4[0], this.parameters.box.y).size(this.parameters.box.width - i4[0], this.parameters.box.height + i4[1]);
                  }
                };
                break;
              case "t":
                this.calc = function(t5, e4) {
                  var i4 = this.snapToGrid(t5, e4, 2);
                  if (this.parameters.box.height - i4[1] > 0) {
                    if ("text" === this.parameters.type)
                      return;
                    this.el.move(this.parameters.box.x, this.parameters.box.y + i4[1]).height(this.parameters.box.height - i4[1]);
                  }
                };
                break;
              case "r":
                this.calc = function(t5, e4) {
                  var i4 = this.snapToGrid(t5, e4, 0);
                  if (this.parameters.box.width + i4[0] > 0) {
                    if ("text" === this.parameters.type)
                      return;
                    this.el.move(this.parameters.box.x, this.parameters.box.y).width(this.parameters.box.width + i4[0]);
                  }
                };
                break;
              case "b":
                this.calc = function(t5, e4) {
                  var i4 = this.snapToGrid(t5, e4, 0);
                  if (this.parameters.box.height + i4[1] > 0) {
                    if ("text" === this.parameters.type)
                      return;
                    this.el.move(this.parameters.box.x, this.parameters.box.y).height(this.parameters.box.height + i4[1]);
                  }
                };
                break;
              case "l":
                this.calc = function(t5, e4) {
                  var i4 = this.snapToGrid(t5, e4, 1);
                  if (this.parameters.box.width - i4[0] > 0) {
                    if ("text" === this.parameters.type)
                      return;
                    this.el.move(this.parameters.box.x + i4[0], this.parameters.box.y).width(this.parameters.box.width - i4[0]);
                  }
                };
                break;
              case "rot":
                this.calc = function(t5, e4) {
                  var i4 = t5 + this.parameters.p.x, a4 = e4 + this.parameters.p.y, s3 = Math.atan2(this.parameters.p.y - this.parameters.box.y - this.parameters.box.height / 2, this.parameters.p.x - this.parameters.box.x - this.parameters.box.width / 2), r3 = Math.atan2(a4 - this.parameters.box.y - this.parameters.box.height / 2, i4 - this.parameters.box.x - this.parameters.box.width / 2), o3 = this.parameters.rotation + 180 * (r3 - s3) / Math.PI + this.options.snapToAngle / 2;
                  this.el.center(this.parameters.box.cx, this.parameters.box.cy).rotate(o3 - o3 % this.options.snapToAngle, this.parameters.box.cx, this.parameters.box.cy);
                };
                break;
              case "point":
                this.calc = function(t5, e4) {
                  var i4 = this.snapToGrid(t5, e4, this.parameters.pointCoords[0], this.parameters.pointCoords[1]), a4 = this.el.array().valueOf();
                  a4[this.parameters.i][0] = this.parameters.pointCoords[0] + i4[0], a4[this.parameters.i][1] = this.parameters.pointCoords[1] + i4[1], this.el.plot(a4);
                };
            }
            this.el.fire("resizestart", { dx: this.parameters.x, dy: this.parameters.y, event: t4 }), SVG.on(window, "touchmove.resize", function(t5) {
              e3.update(t5 || window.event);
            }), SVG.on(window, "touchend.resize", function() {
              e3.done();
            }), SVG.on(window, "mousemove.resize", function(t5) {
              e3.update(t5 || window.event);
            }), SVG.on(window, "mouseup.resize", function() {
              e3.done();
            });
          }, t3.prototype.update = function(t4) {
            if (t4) {
              var e3 = this._extractPosition(t4), i3 = this.transformPoint(e3.x, e3.y), a3 = i3.x - this.parameters.p.x, s3 = i3.y - this.parameters.p.y;
              this.lastUpdateCall = [a3, s3], this.calc(a3, s3), this.el.fire("resizing", { dx: a3, dy: s3, event: t4 });
            } else
              this.lastUpdateCall && this.calc(this.lastUpdateCall[0], this.lastUpdateCall[1]);
          }, t3.prototype.done = function() {
            this.lastUpdateCall = null, SVG.off(window, "mousemove.resize"), SVG.off(window, "mouseup.resize"), SVG.off(window, "touchmove.resize"), SVG.off(window, "touchend.resize"), this.el.fire("resizedone");
          }, t3.prototype.snapToGrid = function(t4, e3, i3, a3) {
            var s3;
            return void 0 !== a3 ? s3 = [(i3 + t4) % this.options.snapToGrid, (a3 + e3) % this.options.snapToGrid] : (i3 = null == i3 ? 3 : i3, s3 = [(this.parameters.box.x + t4 + (1 & i3 ? 0 : this.parameters.box.width)) % this.options.snapToGrid, (this.parameters.box.y + e3 + (2 & i3 ? 0 : this.parameters.box.height)) % this.options.snapToGrid]), t4 < 0 && (s3[0] -= this.options.snapToGrid), e3 < 0 && (s3[1] -= this.options.snapToGrid), t4 -= Math.abs(s3[0]) < this.options.snapToGrid / 2 ? s3[0] : s3[0] - (t4 < 0 ? -this.options.snapToGrid : this.options.snapToGrid), e3 -= Math.abs(s3[1]) < this.options.snapToGrid / 2 ? s3[1] : s3[1] - (e3 < 0 ? -this.options.snapToGrid : this.options.snapToGrid), this.constraintToBox(t4, e3, i3, a3);
          }, t3.prototype.constraintToBox = function(t4, e3, i3, a3) {
            var s3, r3, o3 = this.options.constraint || {};
            return void 0 !== a3 ? (s3 = i3, r3 = a3) : (s3 = this.parameters.box.x + (1 & i3 ? 0 : this.parameters.box.width), r3 = this.parameters.box.y + (2 & i3 ? 0 : this.parameters.box.height)), void 0 !== o3.minX && s3 + t4 < o3.minX && (t4 = o3.minX - s3), void 0 !== o3.maxX && s3 + t4 > o3.maxX && (t4 = o3.maxX - s3), void 0 !== o3.minY && r3 + e3 < o3.minY && (e3 = o3.minY - r3), void 0 !== o3.maxY && r3 + e3 > o3.maxY && (e3 = o3.maxY - r3), [t4, e3];
          }, t3.prototype.checkAspectRatio = function(t4, e3) {
            if (!this.options.saveAspectRatio)
              return t4;
            var i3 = t4.slice(), a3 = this.parameters.box.width / this.parameters.box.height, s3 = this.parameters.box.width + t4[0], r3 = this.parameters.box.height - t4[1], o3 = s3 / r3;
            return o3 < a3 ? (i3[1] = s3 / a3 - this.parameters.box.height, e3 && (i3[1] = -i3[1])) : o3 > a3 && (i3[0] = this.parameters.box.width - r3 * a3, e3 && (i3[0] = -i3[0])), i3;
          }, SVG.extend(SVG.Element, { resize: function(e3) {
            return (this.remember("_resizeHandler") || new t3(this)).init(e3 || {}), this;
          } }), SVG.Element.prototype.resize.defaults = { snapToAngle: 0.1, snapToGrid: 1, constraint: {}, saveAspectRatio: false };
        }).call(this);
      }(), void 0 === window.Apex && (window.Apex = {});
      var Gt2 = function() {
        function t3(e3) {
          a2(this, t3), this.ctx = e3, this.w = e3.w;
        }
        return r2(t3, [{ key: "initModules", value: function() {
          this.ctx.publicMethods = ["updateOptions", "updateSeries", "appendData", "appendSeries", "isSeriesHidden", "toggleSeries", "showSeries", "hideSeries", "setLocale", "resetSeries", "zoomX", "toggleDataPointSelection", "dataURI", "exportToCSV", "addXaxisAnnotation", "addYaxisAnnotation", "addPointAnnotation", "clearAnnotations", "removeAnnotation", "paper", "destroy"], this.ctx.eventList = ["click", "mousedown", "mousemove", "mouseleave", "touchstart", "touchmove", "touchleave", "mouseup", "touchend"], this.ctx.animations = new b2(this.ctx), this.ctx.axes = new J2(this.ctx), this.ctx.core = new Wt2(this.ctx.el, this.ctx), this.ctx.config = new E2({}), this.ctx.data = new W2(this.ctx), this.ctx.grid = new j2(this.ctx), this.ctx.graphics = new m2(this.ctx), this.ctx.coreUtils = new y2(this.ctx), this.ctx.crosshairs = new Q2(this.ctx), this.ctx.events = new Z2(this.ctx), this.ctx.exports = new G2(this.ctx), this.ctx.localization = new $2(this.ctx), this.ctx.options = new L2(), this.ctx.responsive = new K2(this.ctx), this.ctx.series = new N2(this.ctx), this.ctx.theme = new tt2(this.ctx), this.ctx.formatters = new T2(this.ctx), this.ctx.titleSubtitle = new et2(this.ctx), this.ctx.legend = new lt2(this.ctx), this.ctx.toolbar = new ht2(this.ctx), this.ctx.tooltip = new bt2(this.ctx), this.ctx.dimensions = new ot2(this.ctx), this.ctx.updateHelpers = new Bt2(this.ctx), this.ctx.zoomPanSelection = new ct2(this.ctx), this.ctx.w.globals.tooltip = new bt2(this.ctx);
        } }]), t3;
      }();
      var Vt2 = function() {
        function t3(e3) {
          a2(this, t3), this.ctx = e3, this.w = e3.w;
        }
        return r2(t3, [{ key: "clear", value: function(t4) {
          var e3 = t4.isUpdating;
          this.ctx.zoomPanSelection && this.ctx.zoomPanSelection.destroy(), this.ctx.toolbar && this.ctx.toolbar.destroy(), this.ctx.animations = null, this.ctx.axes = null, this.ctx.annotations = null, this.ctx.core = null, this.ctx.data = null, this.ctx.grid = null, this.ctx.series = null, this.ctx.responsive = null, this.ctx.theme = null, this.ctx.formatters = null, this.ctx.titleSubtitle = null, this.ctx.legend = null, this.ctx.dimensions = null, this.ctx.options = null, this.ctx.crosshairs = null, this.ctx.zoomPanSelection = null, this.ctx.updateHelpers = null, this.ctx.toolbar = null, this.ctx.localization = null, this.ctx.w.globals.tooltip = null, this.clearDomElements({ isUpdating: e3 });
        } }, { key: "killSVG", value: function(t4) {
          t4.each(function(t5, e3) {
            this.removeClass("*"), this.off(), this.stop();
          }, true), t4.ungroup(), t4.clear();
        } }, { key: "clearDomElements", value: function(t4) {
          var e3 = this, i3 = t4.isUpdating, a3 = this.w.globals.dom.Paper.node;
          a3.parentNode && a3.parentNode.parentNode && !i3 && (a3.parentNode.parentNode.style.minHeight = "unset");
          var s3 = this.w.globals.dom.baseEl;
          s3 && this.ctx.eventList.forEach(function(t5) {
            s3.removeEventListener(t5, e3.ctx.events.documentEvent);
          });
          var r3 = this.w.globals.dom;
          if (null !== this.ctx.el)
            for (; this.ctx.el.firstChild; )
              this.ctx.el.removeChild(this.ctx.el.firstChild);
          this.killSVG(r3.Paper), r3.Paper.remove(), r3.elWrap = null, r3.elGraphical = null, r3.elLegendWrap = null, r3.elLegendForeign = null, r3.baseEl = null, r3.elGridRect = null, r3.elGridRectMask = null, r3.elGridRectMarkerMask = null, r3.elForecastMask = null, r3.elNonForecastMask = null, r3.elDefs = null;
        } }]), t3;
      }();
      var jt2 = /* @__PURE__ */ new WeakMap();
      var _t2 = function() {
        function t3(e3, i3) {
          a2(this, t3), this.opts = i3, this.ctx = this, this.w = new F2(i3).init(), this.el = e3, this.w.globals.cuid = x2.randomId(), this.w.globals.chartID = this.w.config.chart.id ? x2.escapeString(this.w.config.chart.id) : this.w.globals.cuid, new Gt2(this).initModules(), this.create = x2.bind(this.create, this), this.windowResizeHandler = this._windowResizeHandler.bind(this), this.parentResizeHandler = this._parentResizeCallback.bind(this);
        }
        return r2(t3, [{ key: "render", value: function() {
          var t4 = this;
          return new Promise(function(e3, i3) {
            if (null !== t4.el) {
              void 0 === Apex._chartInstances && (Apex._chartInstances = []), t4.w.config.chart.id && Apex._chartInstances.push({ id: t4.w.globals.chartID, group: t4.w.config.chart.group, chart: t4 }), t4.setLocale(t4.w.config.chart.defaultLocale);
              var a3 = t4.w.config.chart.events.beforeMount;
              if ("function" == typeof a3 && a3(t4, t4.w), t4.events.fireEvent("beforeMount", [t4, t4.w]), window.addEventListener("resize", t4.windowResizeHandler), function(t5, e4) {
                var i4 = false;
                if (t5.nodeType !== Node.DOCUMENT_FRAGMENT_NODE) {
                  var a4 = t5.getBoundingClientRect();
                  "none" !== t5.style.display && 0 !== a4.width || (i4 = true);
                }
                var s4 = new ResizeObserver(function(a5) {
                  i4 && e4.call(t5, a5), i4 = true;
                });
                t5.nodeType === Node.DOCUMENT_FRAGMENT_NODE ? Array.from(t5.children).forEach(function(t6) {
                  return s4.observe(t6);
                }) : s4.observe(t5), jt2.set(e4, s4);
              }(t4.el.parentNode, t4.parentResizeHandler), !t4.css) {
                var s3 = t4.el.getRootNode && t4.el.getRootNode(), r3 = x2.is("ShadowRoot", s3), o3 = t4.el.ownerDocument, n3 = o3.getElementById("apexcharts-css");
                if (r3 || !n3) {
                  var l3;
                  t4.css = document.createElement("style"), t4.css.id = "apexcharts-css", t4.css.textContent = '@keyframes opaque {\n  0% {\n      opacity: 0\n  }\n\n  to {\n      opacity: 1\n  }\n}\n\n@keyframes resizeanim {\n  0%,to {\n      opacity: 0\n  }\n}\n\n.apexcharts-canvas {\n  position: relative;\n  user-select: none\n}\n\n.apexcharts-canvas ::-webkit-scrollbar {\n  -webkit-appearance: none;\n  width: 6px\n}\n\n.apexcharts-canvas ::-webkit-scrollbar-thumb {\n  border-radius: 4px;\n  background-color: rgba(0,0,0,.5);\n  box-shadow: 0 0 1px rgba(255,255,255,.5);\n  -webkit-box-shadow: 0 0 1px rgba(255,255,255,.5)\n}\n\n.apexcharts-inner {\n  position: relative\n}\n\n.apexcharts-text tspan {\n  font-family: inherit\n}\n\n.legend-mouseover-inactive {\n  transition: .15s ease all;\n  opacity: .2\n}\n\n.apexcharts-legend-text {\n  padding-left: 15px;\n  margin-left: -15px;\n}\n\n.apexcharts-series-collapsed {\n  opacity: 0\n}\n\n.apexcharts-tooltip {\n  border-radius: 5px;\n  box-shadow: 2px 2px 6px -4px #999;\n  cursor: default;\n  font-size: 14px;\n  left: 62px;\n  opacity: 0;\n  pointer-events: none;\n  position: absolute;\n  top: 20px;\n  display: flex;\n  flex-direction: column;\n  overflow: hidden;\n  white-space: nowrap;\n  z-index: 12;\n  transition: .15s ease all\n}\n\n.apexcharts-tooltip.apexcharts-active {\n  opacity: 1;\n  transition: .15s ease all\n}\n\n.apexcharts-tooltip.apexcharts-theme-light {\n  border: 1px solid #e3e3e3;\n  background: rgba(255,255,255,.96)\n}\n\n.apexcharts-tooltip.apexcharts-theme-dark {\n  color: #fff;\n  background: rgba(30,30,30,.8)\n}\n\n.apexcharts-tooltip * {\n  font-family: inherit\n}\n\n.apexcharts-tooltip-title {\n  padding: 6px;\n  font-size: 15px;\n  margin-bottom: 4px\n}\n\n.apexcharts-tooltip.apexcharts-theme-light .apexcharts-tooltip-title {\n  background: #eceff1;\n  border-bottom: 1px solid #ddd\n}\n\n.apexcharts-tooltip.apexcharts-theme-dark .apexcharts-tooltip-title {\n  background: rgba(0,0,0,.7);\n  border-bottom: 1px solid #333\n}\n\n.apexcharts-tooltip-text-goals-value,.apexcharts-tooltip-text-y-value,.apexcharts-tooltip-text-z-value {\n  display: inline-block;\n  margin-left: 5px;\n  font-weight: 600\n}\n\n.apexcharts-tooltip-text-goals-label:empty,.apexcharts-tooltip-text-goals-value:empty,.apexcharts-tooltip-text-y-label:empty,.apexcharts-tooltip-text-y-value:empty,.apexcharts-tooltip-text-z-value:empty,.apexcharts-tooltip-title:empty {\n  display: none\n}\n\n.apexcharts-tooltip-text-goals-label,.apexcharts-tooltip-text-goals-value {\n  padding: 6px 0 5px\n}\n\n.apexcharts-tooltip-goals-group,.apexcharts-tooltip-text-goals-label,.apexcharts-tooltip-text-goals-value {\n  display: flex\n}\n\n.apexcharts-tooltip-text-goals-label:not(:empty),.apexcharts-tooltip-text-goals-value:not(:empty) {\n  margin-top: -6px\n}\n\n.apexcharts-tooltip-marker {\n  width: 12px;\n  height: 12px;\n  position: relative;\n  top: 0;\n  margin-right: 10px;\n  border-radius: 50%\n}\n\n.apexcharts-tooltip-series-group {\n  padding: 0 10px;\n  display: none;\n  text-align: left;\n  justify-content: left;\n  align-items: center\n}\n\n.apexcharts-tooltip-series-group.apexcharts-active .apexcharts-tooltip-marker {\n  opacity: 1\n}\n\n.apexcharts-tooltip-series-group.apexcharts-active,.apexcharts-tooltip-series-group:last-child {\n  padding-bottom: 4px\n}\n\n.apexcharts-tooltip-series-group-hidden {\n  opacity: 0;\n  height: 0;\n  line-height: 0;\n  padding: 0!important\n}\n\n.apexcharts-tooltip-y-group {\n  padding: 6px 0 5px\n}\n\n.apexcharts-custom-tooltip,.apexcharts-tooltip-box {\n  padding: 4px 8px\n}\n\n.apexcharts-tooltip-boxPlot {\n  display: flex;\n  flex-direction: column-reverse\n}\n\n.apexcharts-tooltip-box>div {\n  margin: 4px 0\n}\n\n.apexcharts-tooltip-box span.value {\n  font-weight: 700\n}\n\n.apexcharts-tooltip-rangebar {\n  padding: 5px 8px\n}\n\n.apexcharts-tooltip-rangebar .category {\n  font-weight: 600;\n  color: #777\n}\n\n.apexcharts-tooltip-rangebar .series-name {\n  font-weight: 700;\n  display: block;\n  margin-bottom: 5px\n}\n\n.apexcharts-xaxistooltip,.apexcharts-yaxistooltip {\n  opacity: 0;\n  pointer-events: none;\n  color: #373d3f;\n  font-size: 13px;\n  text-align: center;\n  border-radius: 2px;\n  position: absolute;\n  z-index: 10;\n  background: #eceff1;\n  border: 1px solid #90a4ae\n}\n\n.apexcharts-xaxistooltip {\n  padding: 9px 10px;\n  transition: .15s ease all\n}\n\n.apexcharts-xaxistooltip.apexcharts-theme-dark {\n  background: rgba(0,0,0,.7);\n  border: 1px solid rgba(0,0,0,.5);\n  color: #fff\n}\n\n.apexcharts-xaxistooltip:after,.apexcharts-xaxistooltip:before {\n  left: 50%;\n  border: solid transparent;\n  content: " ";\n  height: 0;\n  width: 0;\n  position: absolute;\n  pointer-events: none\n}\n\n.apexcharts-xaxistooltip:after {\n  border-color: transparent;\n  border-width: 6px;\n  margin-left: -6px\n}\n\n.apexcharts-xaxistooltip:before {\n  border-color: transparent;\n  border-width: 7px;\n  margin-left: -7px\n}\n\n.apexcharts-xaxistooltip-bottom:after,.apexcharts-xaxistooltip-bottom:before {\n  bottom: 100%\n}\n\n.apexcharts-xaxistooltip-top:after,.apexcharts-xaxistooltip-top:before {\n  top: 100%\n}\n\n.apexcharts-xaxistooltip-bottom:after {\n  border-bottom-color: #eceff1\n}\n\n.apexcharts-xaxistooltip-bottom:before {\n  border-bottom-color: #90a4ae\n}\n\n.apexcharts-xaxistooltip-bottom.apexcharts-theme-dark:after,.apexcharts-xaxistooltip-bottom.apexcharts-theme-dark:before {\n  border-bottom-color: rgba(0,0,0,.5)\n}\n\n.apexcharts-xaxistooltip-top:after {\n  border-top-color: #eceff1\n}\n\n.apexcharts-xaxistooltip-top:before {\n  border-top-color: #90a4ae\n}\n\n.apexcharts-xaxistooltip-top.apexcharts-theme-dark:after,.apexcharts-xaxistooltip-top.apexcharts-theme-dark:before {\n  border-top-color: rgba(0,0,0,.5)\n}\n\n.apexcharts-xaxistooltip.apexcharts-active {\n  opacity: 1;\n  transition: .15s ease all\n}\n\n.apexcharts-yaxistooltip {\n  padding: 4px 10px\n}\n\n.apexcharts-yaxistooltip.apexcharts-theme-dark {\n  background: rgba(0,0,0,.7);\n  border: 1px solid rgba(0,0,0,.5);\n  color: #fff\n}\n\n.apexcharts-yaxistooltip:after,.apexcharts-yaxistooltip:before {\n  top: 50%;\n  border: solid transparent;\n  content: " ";\n  height: 0;\n  width: 0;\n  position: absolute;\n  pointer-events: none\n}\n\n.apexcharts-yaxistooltip:after {\n  border-color: transparent;\n  border-width: 6px;\n  margin-top: -6px\n}\n\n.apexcharts-yaxistooltip:before {\n  border-color: transparent;\n  border-width: 7px;\n  margin-top: -7px\n}\n\n.apexcharts-yaxistooltip-left:after,.apexcharts-yaxistooltip-left:before {\n  left: 100%\n}\n\n.apexcharts-yaxistooltip-right:after,.apexcharts-yaxistooltip-right:before {\n  right: 100%\n}\n\n.apexcharts-yaxistooltip-left:after {\n  border-left-color: #eceff1\n}\n\n.apexcharts-yaxistooltip-left:before {\n  border-left-color: #90a4ae\n}\n\n.apexcharts-yaxistooltip-left.apexcharts-theme-dark:after,.apexcharts-yaxistooltip-left.apexcharts-theme-dark:before {\n  border-left-color: rgba(0,0,0,.5)\n}\n\n.apexcharts-yaxistooltip-right:after {\n  border-right-color: #eceff1\n}\n\n.apexcharts-yaxistooltip-right:before {\n  border-right-color: #90a4ae\n}\n\n.apexcharts-yaxistooltip-right.apexcharts-theme-dark:after,.apexcharts-yaxistooltip-right.apexcharts-theme-dark:before {\n  border-right-color: rgba(0,0,0,.5)\n}\n\n.apexcharts-yaxistooltip.apexcharts-active {\n  opacity: 1\n}\n\n.apexcharts-yaxistooltip-hidden {\n  display: none\n}\n\n.apexcharts-xcrosshairs,.apexcharts-ycrosshairs {\n  pointer-events: none;\n  opacity: 0;\n  transition: .15s ease all\n}\n\n.apexcharts-xcrosshairs.apexcharts-active,.apexcharts-ycrosshairs.apexcharts-active {\n  opacity: 1;\n  transition: .15s ease all\n}\n\n.apexcharts-ycrosshairs-hidden {\n  opacity: 0\n}\n\n.apexcharts-selection-rect {\n  cursor: move\n}\n\n.svg_select_boundingRect,.svg_select_points_rot {\n  pointer-events: none;\n  opacity: 0;\n  visibility: hidden\n}\n\n.apexcharts-selection-rect+g .svg_select_boundingRect,.apexcharts-selection-rect+g .svg_select_points_rot {\n  opacity: 0;\n  visibility: hidden\n}\n\n.apexcharts-selection-rect+g .svg_select_points_l,.apexcharts-selection-rect+g .svg_select_points_r {\n  cursor: ew-resize;\n  opacity: 1;\n  visibility: visible\n}\n\n.svg_select_points {\n  fill: #efefef;\n  stroke: #333;\n  rx: 2\n}\n\n.apexcharts-svg.apexcharts-zoomable.hovering-zoom {\n  cursor: crosshair\n}\n\n.apexcharts-svg.apexcharts-zoomable.hovering-pan {\n  cursor: move\n}\n\n.apexcharts-menu-icon,.apexcharts-pan-icon,.apexcharts-reset-icon,.apexcharts-selection-icon,.apexcharts-toolbar-custom-icon,.apexcharts-zoom-icon,.apexcharts-zoomin-icon,.apexcharts-zoomout-icon {\n  cursor: pointer;\n  width: 20px;\n  height: 20px;\n  line-height: 24px;\n  color: #6e8192;\n  text-align: center\n}\n\n.apexcharts-menu-icon svg,.apexcharts-reset-icon svg,.apexcharts-zoom-icon svg,.apexcharts-zoomin-icon svg,.apexcharts-zoomout-icon svg {\n  fill: #6e8192\n}\n\n.apexcharts-selection-icon svg {\n  fill: #444;\n  transform: scale(.76)\n}\n\n.apexcharts-theme-dark .apexcharts-menu-icon svg,.apexcharts-theme-dark .apexcharts-pan-icon svg,.apexcharts-theme-dark .apexcharts-reset-icon svg,.apexcharts-theme-dark .apexcharts-selection-icon svg,.apexcharts-theme-dark .apexcharts-toolbar-custom-icon svg,.apexcharts-theme-dark .apexcharts-zoom-icon svg,.apexcharts-theme-dark .apexcharts-zoomin-icon svg,.apexcharts-theme-dark .apexcharts-zoomout-icon svg {\n  fill: #f3f4f5\n}\n\n.apexcharts-canvas .apexcharts-reset-zoom-icon.apexcharts-selected svg,.apexcharts-canvas .apexcharts-selection-icon.apexcharts-selected svg,.apexcharts-canvas .apexcharts-zoom-icon.apexcharts-selected svg {\n  fill: #008ffb\n}\n\n.apexcharts-theme-light .apexcharts-menu-icon:hover svg,.apexcharts-theme-light .apexcharts-reset-icon:hover svg,.apexcharts-theme-light .apexcharts-selection-icon:not(.apexcharts-selected):hover svg,.apexcharts-theme-light .apexcharts-zoom-icon:not(.apexcharts-selected):hover svg,.apexcharts-theme-light .apexcharts-zoomin-icon:hover svg,.apexcharts-theme-light .apexcharts-zoomout-icon:hover svg {\n  fill: #333\n}\n\n.apexcharts-menu-icon,.apexcharts-selection-icon {\n  position: relative\n}\n\n.apexcharts-reset-icon {\n  margin-left: 5px\n}\n\n.apexcharts-menu-icon,.apexcharts-reset-icon,.apexcharts-zoom-icon {\n  transform: scale(.85)\n}\n\n.apexcharts-zoomin-icon,.apexcharts-zoomout-icon {\n  transform: scale(.7)\n}\n\n.apexcharts-zoomout-icon {\n  margin-right: 3px\n}\n\n.apexcharts-pan-icon {\n  transform: scale(.62);\n  position: relative;\n  left: 1px;\n  top: 0\n}\n\n.apexcharts-pan-icon svg {\n  fill: #fff;\n  stroke: #6e8192;\n  stroke-width: 2\n}\n\n.apexcharts-pan-icon.apexcharts-selected svg {\n  stroke: #008ffb\n}\n\n.apexcharts-pan-icon:not(.apexcharts-selected):hover svg {\n  stroke: #333\n}\n\n.apexcharts-toolbar {\n  position: absolute;\n  z-index: 11;\n  max-width: 176px;\n  text-align: right;\n  border-radius: 3px;\n  padding: 0 6px 2px;\n  display: flex;\n  justify-content: space-between;\n  align-items: center\n}\n\n.apexcharts-menu {\n  background: #fff;\n  position: absolute;\n  top: 100%;\n  border: 1px solid #ddd;\n  border-radius: 3px;\n  padding: 3px;\n  right: 10px;\n  opacity: 0;\n  min-width: 110px;\n  transition: .15s ease all;\n  pointer-events: none\n}\n\n.apexcharts-menu.apexcharts-menu-open {\n  opacity: 1;\n  pointer-events: all;\n  transition: .15s ease all\n}\n\n.apexcharts-menu-item {\n  padding: 6px 7px;\n  font-size: 12px;\n  cursor: pointer\n}\n\n.apexcharts-theme-light .apexcharts-menu-item:hover {\n  background: #eee\n}\n\n.apexcharts-theme-dark .apexcharts-menu {\n  background: rgba(0,0,0,.7);\n  color: #fff\n}\n\n@media screen and (min-width:768px) {\n  .apexcharts-canvas:hover .apexcharts-toolbar {\n      opacity: 1\n  }\n}\n\n.apexcharts-canvas .apexcharts-element-hidden,.apexcharts-datalabel.apexcharts-element-hidden,.apexcharts-hide .apexcharts-series-points {\n  opacity: 0\n}\n\n.apexcharts-hidden-element-shown {\n  opacity: 1;\n  transition: 0.25s ease all;\n}\n.apexcharts-datalabel,.apexcharts-datalabel-label,.apexcharts-datalabel-value,.apexcharts-datalabels,.apexcharts-pie-label {\n  cursor: default;\n  pointer-events: none\n}\n\n.apexcharts-pie-label-delay {\n  opacity: 0;\n  animation-name: opaque;\n  animation-duration: .3s;\n  animation-fill-mode: forwards;\n  animation-timing-function: ease\n}\n\n.apexcharts-radialbar-label {\n  cursor: pointer;\n}\n\n.apexcharts-annotation-rect,.apexcharts-area-series .apexcharts-area,.apexcharts-area-series .apexcharts-series-markers .apexcharts-marker.no-pointer-events,.apexcharts-gridline,.apexcharts-line,.apexcharts-line-series .apexcharts-series-markers .apexcharts-marker.no-pointer-events,.apexcharts-point-annotation-label,.apexcharts-radar-series path,.apexcharts-radar-series polygon,.apexcharts-toolbar svg,.apexcharts-tooltip .apexcharts-marker,.apexcharts-xaxis-annotation-label,.apexcharts-yaxis-annotation-label,.apexcharts-zoom-rect {\n  pointer-events: none\n}\n\n.apexcharts-marker {\n  transition: .15s ease all\n}\n\n.resize-triggers {\n  animation: 1ms resizeanim;\n  visibility: hidden;\n  opacity: 0;\n  height: 100%;\n  width: 100%;\n  overflow: hidden\n}\n\n.contract-trigger:before,.resize-triggers,.resize-triggers>div {\n  content: " ";\n  display: block;\n  position: absolute;\n  top: 0;\n  left: 0\n}\n\n.resize-triggers>div {\n  height: 100%;\n  width: 100%;\n  background: #eee;\n  overflow: auto\n}\n\n.contract-trigger:before {\n  overflow: hidden;\n  width: 200%;\n  height: 200%\n}\n\n.apexcharts-bar-goals-markers{\n  pointer-events: none\n}\n\n.apexcharts-bar-shadows{\n  pointer-events: none\n}\n\n.apexcharts-rangebar-goals-markers{\n  pointer-events: none\n}';
                  var h3 = (null === (l3 = t4.opts.chart) || void 0 === l3 ? void 0 : l3.nonce) || t4.w.config.chart.nonce;
                  h3 && t4.css.setAttribute("nonce", h3), r3 ? s3.prepend(t4.css) : o3.head.appendChild(t4.css);
                }
              }
              var c3 = t4.create(t4.w.config.series, {});
              if (!c3)
                return e3(t4);
              t4.mount(c3).then(function() {
                "function" == typeof t4.w.config.chart.events.mounted && t4.w.config.chart.events.mounted(t4, t4.w), t4.events.fireEvent("mounted", [t4, t4.w]), e3(c3);
              }).catch(function(t5) {
                i3(t5);
              });
            } else
              i3(new Error("Element not found"));
          });
        } }, { key: "create", value: function(t4, e3) {
          var i3 = this.w;
          new Gt2(this).initModules();
          var a3 = this.w.globals;
          (a3.noData = false, a3.animationEnded = false, this.responsive.checkResponsiveConfig(e3), i3.config.xaxis.convertedCatToNumeric) && new X2(i3.config).convertCatToNumericXaxis(i3.config, this.ctx);
          if (null === this.el)
            return a3.animationEnded = true, null;
          if (this.core.setupElements(), "treemap" === i3.config.chart.type && (i3.config.grid.show = false, i3.config.yaxis[0].show = false), 0 === a3.svgWidth)
            return a3.animationEnded = true, null;
          var s3 = y2.checkComboSeries(t4);
          a3.comboCharts = s3.comboCharts, a3.comboBarCount = s3.comboBarCount;
          var r3 = t4.every(function(t5) {
            return t5.data && 0 === t5.data.length;
          });
          (0 === t4.length || r3) && this.series.handleNoData(), this.events.setupEventHandlers(), this.data.parseData(t4), this.theme.init(), new H2(this).setGlobalMarkerSize(), this.formatters.setLabelFormatters(), this.titleSubtitle.draw(), a3.noData && a3.collapsedSeries.length !== a3.series.length && !i3.config.legend.showForSingleSeries || this.legend.init(), this.series.hasAllSeriesEqualX(), a3.axisCharts && (this.core.coreCalculations(), "category" !== i3.config.xaxis.type && this.formatters.setLabelFormatters(), this.ctx.toolbar.minX = i3.globals.minX, this.ctx.toolbar.maxX = i3.globals.maxX), this.formatters.heatmapLabelFormatters(), new y2(this).getLargestMarkerSize(), this.dimensions.plotCoords();
          var o3 = this.core.xySettings();
          this.grid.createGridMask();
          var n3 = this.core.plotChartType(t4, o3), l3 = new O2(this);
          return l3.bringForward(), i3.config.dataLabels.background.enabled && l3.dataLabelsBackground(), this.core.shiftGraphPosition(), { elGraph: n3, xyRatios: o3, dimensions: { plot: { left: i3.globals.translateX, top: i3.globals.translateY, width: i3.globals.gridWidth, height: i3.globals.gridHeight } } };
        } }, { key: "mount", value: function() {
          var t4 = this, e3 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null, i3 = this, a3 = i3.w;
          return new Promise(function(s3, r3) {
            if (null === i3.el)
              return r3(new Error("Not enough data to display or target element not found"));
            (null === e3 || a3.globals.allSeriesCollapsed) && i3.series.handleNoData(), i3.grid = new j2(i3);
            var o3, n3, l3 = i3.grid.drawGrid();
            (i3.annotations = new P2(i3), i3.annotations.drawImageAnnos(), i3.annotations.drawTextAnnos(), "back" === a3.config.grid.position) && (l3 && a3.globals.dom.elGraphical.add(l3.el), null != l3 && null !== (o3 = l3.elGridBorders) && void 0 !== o3 && o3.node && a3.globals.dom.elGraphical.add(l3.elGridBorders));
            if (Array.isArray(e3.elGraph))
              for (var h3 = 0; h3 < e3.elGraph.length; h3++)
                a3.globals.dom.elGraphical.add(e3.elGraph[h3]);
            else
              a3.globals.dom.elGraphical.add(e3.elGraph);
            "front" === a3.config.grid.position && (l3 && a3.globals.dom.elGraphical.add(l3.el), null != l3 && null !== (n3 = l3.elGridBorders) && void 0 !== n3 && n3.node && a3.globals.dom.elGraphical.add(l3.elGridBorders));
            "front" === a3.config.xaxis.crosshairs.position && i3.crosshairs.drawXCrosshairs(), "front" === a3.config.yaxis[0].crosshairs.position && i3.crosshairs.drawYCrosshairs(), "treemap" !== a3.config.chart.type && i3.axes.drawAxis(a3.config.chart.type, l3);
            var c3 = new V2(t4.ctx, l3), d3 = new q2(t4.ctx, l3);
            if (null !== l3 && (c3.xAxisLabelCorrections(l3.xAxisTickWidth), d3.setYAxisTextAlignments(), a3.config.yaxis.map(function(t5, e4) {
              -1 === a3.globals.ignoreYAxisIndexes.indexOf(e4) && d3.yAxisTitleRotate(e4, t5.opposite);
            })), i3.annotations.drawAxesAnnotations(), !a3.globals.noData) {
              if (a3.config.tooltip.enabled && !a3.globals.noData && i3.w.globals.tooltip.drawTooltip(e3.xyRatios), a3.globals.axisCharts && (a3.globals.isXNumeric || a3.config.xaxis.convertedCatToNumeric || a3.globals.isRangeBar))
                (a3.config.chart.zoom.enabled || a3.config.chart.selection && a3.config.chart.selection.enabled || a3.config.chart.pan && a3.config.chart.pan.enabled) && i3.zoomPanSelection.init({ xyRatios: e3.xyRatios });
              else {
                var g3 = a3.config.chart.toolbar.tools;
                ["zoom", "zoomin", "zoomout", "selection", "pan", "reset"].forEach(function(t5) {
                  g3[t5] = false;
                });
              }
              a3.config.chart.toolbar.show && !a3.globals.allSeriesCollapsed && i3.toolbar.createToolbar();
            }
            a3.globals.memory.methodsToExec.length > 0 && a3.globals.memory.methodsToExec.forEach(function(t5) {
              t5.method(t5.params, false, t5.context);
            }), a3.globals.axisCharts || a3.globals.noData || i3.core.resizeNonAxisCharts(), s3(i3);
          });
        } }, { key: "destroy", value: function() {
          var t4, e3;
          window.removeEventListener("resize", this.windowResizeHandler), this.el.parentNode, t4 = this.parentResizeHandler, (e3 = jt2.get(t4)) && (e3.disconnect(), jt2.delete(t4));
          var i3 = this.w.config.chart.id;
          i3 && Apex._chartInstances.forEach(function(t5, e4) {
            t5.id === x2.escapeString(i3) && Apex._chartInstances.splice(e4, 1);
          }), new Vt2(this.ctx).clear({ isUpdating: false });
        } }, { key: "updateOptions", value: function(t4) {
          var e3 = this, i3 = arguments.length > 1 && void 0 !== arguments[1] && arguments[1], a3 = !(arguments.length > 2 && void 0 !== arguments[2]) || arguments[2], s3 = !(arguments.length > 3 && void 0 !== arguments[3]) || arguments[3], r3 = !(arguments.length > 4 && void 0 !== arguments[4]) || arguments[4], o3 = this.w;
          return o3.globals.selection = void 0, t4.series && (this.series.resetSeries(false, true, false), t4.series.length && t4.series[0].data && (t4.series = t4.series.map(function(t5, i4) {
            return e3.updateHelpers._extendSeries(t5, i4);
          })), this.updateHelpers.revertDefaultAxisMinMax()), t4.xaxis && (t4 = this.updateHelpers.forceXAxisUpdate(t4)), t4.yaxis && (t4 = this.updateHelpers.forceYAxisUpdate(t4)), o3.globals.collapsedSeriesIndices.length > 0 && this.series.clearPreviousPaths(), t4.theme && (t4 = this.theme.updateThemeOptions(t4)), this.updateHelpers._updateOptions(t4, i3, a3, s3, r3);
        } }, { key: "updateSeries", value: function() {
          var t4 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : [], e3 = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1], i3 = !(arguments.length > 2 && void 0 !== arguments[2]) || arguments[2];
          return this.series.resetSeries(false), this.updateHelpers.revertDefaultAxisMinMax(), this.updateHelpers._updateSeries(t4, e3, i3);
        } }, { key: "appendSeries", value: function(t4) {
          var e3 = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1], i3 = !(arguments.length > 2 && void 0 !== arguments[2]) || arguments[2], a3 = this.w.config.series.slice();
          return a3.push(t4), this.series.resetSeries(false), this.updateHelpers.revertDefaultAxisMinMax(), this.updateHelpers._updateSeries(a3, e3, i3);
        } }, { key: "appendData", value: function(t4) {
          var e3 = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1], i3 = this;
          i3.w.globals.dataChanged = true, i3.series.getPreviousPaths();
          for (var a3 = i3.w.config.series.slice(), s3 = 0; s3 < a3.length; s3++)
            if (null !== t4[s3] && void 0 !== t4[s3])
              for (var r3 = 0; r3 < t4[s3].data.length; r3++)
                a3[s3].data.push(t4[s3].data[r3]);
          return i3.w.config.series = a3, e3 && (i3.w.globals.initialSeries = x2.clone(i3.w.config.series)), this.update();
        } }, { key: "update", value: function(t4) {
          var e3 = this;
          return new Promise(function(i3, a3) {
            new Vt2(e3.ctx).clear({ isUpdating: true });
            var s3 = e3.create(e3.w.config.series, t4);
            if (!s3)
              return i3(e3);
            e3.mount(s3).then(function() {
              "function" == typeof e3.w.config.chart.events.updated && e3.w.config.chart.events.updated(e3, e3.w), e3.events.fireEvent("updated", [e3, e3.w]), e3.w.globals.isDirty = true, i3(e3);
            }).catch(function(t5) {
              a3(t5);
            });
          });
        } }, { key: "getSyncedCharts", value: function() {
          var t4 = this.getGroupedCharts(), e3 = [this];
          return t4.length && (e3 = [], t4.forEach(function(t5) {
            e3.push(t5);
          })), e3;
        } }, { key: "getGroupedCharts", value: function() {
          var t4 = this;
          return Apex._chartInstances.filter(function(t5) {
            if (t5.group)
              return true;
          }).map(function(e3) {
            return t4.w.config.chart.group === e3.group ? e3.chart : t4;
          });
        } }, { key: "toggleSeries", value: function(t4) {
          return this.series.toggleSeries(t4);
        } }, { key: "highlightSeriesOnLegendHover", value: function(t4, e3) {
          return this.series.toggleSeriesOnHover(t4, e3);
        } }, { key: "showSeries", value: function(t4) {
          this.series.showSeries(t4);
        } }, { key: "hideSeries", value: function(t4) {
          this.series.hideSeries(t4);
        } }, { key: "isSeriesHidden", value: function(t4) {
          this.series.isSeriesHidden(t4);
        } }, { key: "resetSeries", value: function() {
          var t4 = !(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0], e3 = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1];
          this.series.resetSeries(t4, e3);
        } }, { key: "addEventListener", value: function(t4, e3) {
          this.events.addEventListener(t4, e3);
        } }, { key: "removeEventListener", value: function(t4, e3) {
          this.events.removeEventListener(t4, e3);
        } }, { key: "addXaxisAnnotation", value: function(t4) {
          var e3 = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1], i3 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : void 0, a3 = this;
          i3 && (a3 = i3), a3.annotations.addXaxisAnnotationExternal(t4, e3, a3);
        } }, { key: "addYaxisAnnotation", value: function(t4) {
          var e3 = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1], i3 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : void 0, a3 = this;
          i3 && (a3 = i3), a3.annotations.addYaxisAnnotationExternal(t4, e3, a3);
        } }, { key: "addPointAnnotation", value: function(t4) {
          var e3 = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1], i3 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : void 0, a3 = this;
          i3 && (a3 = i3), a3.annotations.addPointAnnotationExternal(t4, e3, a3);
        } }, { key: "clearAnnotations", value: function() {
          var t4 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : void 0, e3 = this;
          t4 && (e3 = t4), e3.annotations.clearAnnotations(e3);
        } }, { key: "removeAnnotation", value: function(t4) {
          var e3 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : void 0, i3 = this;
          e3 && (i3 = e3), i3.annotations.removeAnnotation(i3, t4);
        } }, { key: "getChartArea", value: function() {
          return this.w.globals.dom.baseEl.querySelector(".apexcharts-inner");
        } }, { key: "getSeriesTotalXRange", value: function(t4, e3) {
          return this.coreUtils.getSeriesTotalsXRange(t4, e3);
        } }, { key: "getHighestValueInSeries", value: function() {
          var t4 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0;
          return new U2(this.ctx).getMinYMaxY(t4).highestY;
        } }, { key: "getLowestValueInSeries", value: function() {
          var t4 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0;
          return new U2(this.ctx).getMinYMaxY(t4).lowestY;
        } }, { key: "getSeriesTotal", value: function() {
          return this.w.globals.seriesTotals;
        } }, { key: "toggleDataPointSelection", value: function(t4, e3) {
          return this.updateHelpers.toggleDataPointSelection(t4, e3);
        } }, { key: "zoomX", value: function(t4, e3) {
          this.ctx.toolbar.zoomUpdateOptions(t4, e3);
        } }, { key: "setLocale", value: function(t4) {
          this.localization.setCurrentLocaleValues(t4);
        } }, { key: "dataURI", value: function(t4) {
          return new G2(this.ctx).dataURI(t4);
        } }, { key: "exportToCSV", value: function() {
          var t4 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
          return new G2(this.ctx).exportToCSV(t4);
        } }, { key: "paper", value: function() {
          return this.w.globals.dom.Paper;
        } }, { key: "_parentResizeCallback", value: function() {
          this.w.globals.animationEnded && this.w.config.chart.redrawOnParentResize && this._windowResize();
        } }, { key: "_windowResize", value: function() {
          var t4 = this;
          clearTimeout(this.w.globals.resizeTimer), this.w.globals.resizeTimer = window.setTimeout(function() {
            t4.w.globals.resized = true, t4.w.globals.dataChanged = false, t4.ctx.update();
          }, 150);
        } }, { key: "_windowResizeHandler", value: function() {
          var t4 = this.w.config.chart.redrawOnWindowResize;
          "function" == typeof t4 && (t4 = t4()), t4 && this._windowResize();
        } }], [{ key: "getChartByID", value: function(t4) {
          var e3 = x2.escapeString(t4);
          if (Apex._chartInstances) {
            var i3 = Apex._chartInstances.filter(function(t5) {
              return t5.id === e3;
            })[0];
            return i3 && i3.chart;
          }
        } }, { key: "initOnLoad", value: function() {
          for (var e3 = document.querySelectorAll("[data-apexcharts]"), i3 = 0; i3 < e3.length; i3++) {
            new t3(e3[i3], JSON.parse(e3[i3].getAttribute("data-options"))).render();
          }
        } }, { key: "exec", value: function(t4, e3) {
          var i3 = this.getChartByID(t4);
          if (i3) {
            i3.w.globals.isExecCalled = true;
            var a3 = null;
            if (-1 !== i3.publicMethods.indexOf(e3)) {
              for (var s3 = arguments.length, r3 = new Array(s3 > 2 ? s3 - 2 : 0), o3 = 2; o3 < s3; o3++)
                r3[o3 - 2] = arguments[o3];
              a3 = i3[e3].apply(i3, r3);
            }
            return a3;
          }
        } }, { key: "merge", value: function(t4, e3) {
          return x2.extend(t4, e3);
        } }]), t3;
      }();
      module.exports = _t2;
    }
  });

  // node_modules/@rails/actioncable/src/adapters.js
  var adapters_default;
  var init_adapters = __esm({
    "node_modules/@rails/actioncable/src/adapters.js"() {
      adapters_default = {
        logger: typeof console !== "undefined" ? console : void 0,
        WebSocket: typeof WebSocket !== "undefined" ? WebSocket : void 0
      };
    }
  });

  // node_modules/@rails/actioncable/src/logger.js
  var logger_default;
  var init_logger = __esm({
    "node_modules/@rails/actioncable/src/logger.js"() {
      init_adapters();
      logger_default = {
        log(...messages) {
          if (this.enabled) {
            messages.push(Date.now());
            adapters_default.logger.log("[ActionCable]", ...messages);
          }
        }
      };
    }
  });

  // node_modules/@rails/actioncable/src/connection_monitor.js
  var now, secondsSince, ConnectionMonitor, connection_monitor_default;
  var init_connection_monitor = __esm({
    "node_modules/@rails/actioncable/src/connection_monitor.js"() {
      init_logger();
      now = () => (/* @__PURE__ */ new Date()).getTime();
      secondsSince = (time) => (now() - time) / 1e3;
      ConnectionMonitor = class {
        constructor(connection) {
          this.visibilityDidChange = this.visibilityDidChange.bind(this);
          this.connection = connection;
          this.reconnectAttempts = 0;
        }
        start() {
          if (!this.isRunning()) {
            this.startedAt = now();
            delete this.stoppedAt;
            this.startPolling();
            addEventListener("visibilitychange", this.visibilityDidChange);
            logger_default.log(`ConnectionMonitor started. stale threshold = ${this.constructor.staleThreshold} s`);
          }
        }
        stop() {
          if (this.isRunning()) {
            this.stoppedAt = now();
            this.stopPolling();
            removeEventListener("visibilitychange", this.visibilityDidChange);
            logger_default.log("ConnectionMonitor stopped");
          }
        }
        isRunning() {
          return this.startedAt && !this.stoppedAt;
        }
        recordPing() {
          this.pingedAt = now();
        }
        recordConnect() {
          this.reconnectAttempts = 0;
          this.recordPing();
          delete this.disconnectedAt;
          logger_default.log("ConnectionMonitor recorded connect");
        }
        recordDisconnect() {
          this.disconnectedAt = now();
          logger_default.log("ConnectionMonitor recorded disconnect");
        }
        // Private
        startPolling() {
          this.stopPolling();
          this.poll();
        }
        stopPolling() {
          clearTimeout(this.pollTimeout);
        }
        poll() {
          this.pollTimeout = setTimeout(
            () => {
              this.reconnectIfStale();
              this.poll();
            },
            this.getPollInterval()
          );
        }
        getPollInterval() {
          const { staleThreshold, reconnectionBackoffRate } = this.constructor;
          const backoff = Math.pow(1 + reconnectionBackoffRate, Math.min(this.reconnectAttempts, 10));
          const jitterMax = this.reconnectAttempts === 0 ? 1 : reconnectionBackoffRate;
          const jitter = jitterMax * Math.random();
          return staleThreshold * 1e3 * backoff * (1 + jitter);
        }
        reconnectIfStale() {
          if (this.connectionIsStale()) {
            logger_default.log(`ConnectionMonitor detected stale connection. reconnectAttempts = ${this.reconnectAttempts}, time stale = ${secondsSince(this.refreshedAt)} s, stale threshold = ${this.constructor.staleThreshold} s`);
            this.reconnectAttempts++;
            if (this.disconnectedRecently()) {
              logger_default.log(`ConnectionMonitor skipping reopening recent disconnect. time disconnected = ${secondsSince(this.disconnectedAt)} s`);
            } else {
              logger_default.log("ConnectionMonitor reopening");
              this.connection.reopen();
            }
          }
        }
        get refreshedAt() {
          return this.pingedAt ? this.pingedAt : this.startedAt;
        }
        connectionIsStale() {
          return secondsSince(this.refreshedAt) > this.constructor.staleThreshold;
        }
        disconnectedRecently() {
          return this.disconnectedAt && secondsSince(this.disconnectedAt) < this.constructor.staleThreshold;
        }
        visibilityDidChange() {
          if (document.visibilityState === "visible") {
            setTimeout(
              () => {
                if (this.connectionIsStale() || !this.connection.isOpen()) {
                  logger_default.log(`ConnectionMonitor reopening stale connection on visibilitychange. visibilityState = ${document.visibilityState}`);
                  this.connection.reopen();
                }
              },
              200
            );
          }
        }
      };
      ConnectionMonitor.staleThreshold = 6;
      ConnectionMonitor.reconnectionBackoffRate = 0.15;
      connection_monitor_default = ConnectionMonitor;
    }
  });

  // node_modules/@rails/actioncable/src/internal.js
  var internal_default;
  var init_internal = __esm({
    "node_modules/@rails/actioncable/src/internal.js"() {
      internal_default = {
        "message_types": {
          "welcome": "welcome",
          "disconnect": "disconnect",
          "ping": "ping",
          "confirmation": "confirm_subscription",
          "rejection": "reject_subscription"
        },
        "disconnect_reasons": {
          "unauthorized": "unauthorized",
          "invalid_request": "invalid_request",
          "server_restart": "server_restart",
          "remote": "remote"
        },
        "default_mount_path": "/cable",
        "protocols": [
          "actioncable-v1-json",
          "actioncable-unsupported"
        ]
      };
    }
  });

  // node_modules/@rails/actioncable/src/connection.js
  var message_types, protocols, supportedProtocols, indexOf, Connection, connection_default;
  var init_connection = __esm({
    "node_modules/@rails/actioncable/src/connection.js"() {
      init_adapters();
      init_connection_monitor();
      init_internal();
      init_logger();
      ({ message_types, protocols } = internal_default);
      supportedProtocols = protocols.slice(0, protocols.length - 1);
      indexOf = [].indexOf;
      Connection = class {
        constructor(consumer2) {
          this.open = this.open.bind(this);
          this.consumer = consumer2;
          this.subscriptions = this.consumer.subscriptions;
          this.monitor = new connection_monitor_default(this);
          this.disconnected = true;
        }
        send(data) {
          if (this.isOpen()) {
            this.webSocket.send(JSON.stringify(data));
            return true;
          } else {
            return false;
          }
        }
        open() {
          if (this.isActive()) {
            logger_default.log(`Attempted to open WebSocket, but existing socket is ${this.getState()}`);
            return false;
          } else {
            const socketProtocols = [...protocols, ...this.consumer.subprotocols || []];
            logger_default.log(`Opening WebSocket, current state is ${this.getState()}, subprotocols: ${socketProtocols}`);
            if (this.webSocket) {
              this.uninstallEventHandlers();
            }
            this.webSocket = new adapters_default.WebSocket(this.consumer.url, socketProtocols);
            this.installEventHandlers();
            this.monitor.start();
            return true;
          }
        }
        close({ allowReconnect } = { allowReconnect: true }) {
          if (!allowReconnect) {
            this.monitor.stop();
          }
          if (this.isOpen()) {
            return this.webSocket.close();
          }
        }
        reopen() {
          logger_default.log(`Reopening WebSocket, current state is ${this.getState()}`);
          if (this.isActive()) {
            try {
              return this.close();
            } catch (error2) {
              logger_default.log("Failed to reopen WebSocket", error2);
            } finally {
              logger_default.log(`Reopening WebSocket in ${this.constructor.reopenDelay}ms`);
              setTimeout(this.open, this.constructor.reopenDelay);
            }
          } else {
            return this.open();
          }
        }
        getProtocol() {
          if (this.webSocket) {
            return this.webSocket.protocol;
          }
        }
        isOpen() {
          return this.isState("open");
        }
        isActive() {
          return this.isState("open", "connecting");
        }
        triedToReconnect() {
          return this.monitor.reconnectAttempts > 0;
        }
        // Private
        isProtocolSupported() {
          return indexOf.call(supportedProtocols, this.getProtocol()) >= 0;
        }
        isState(...states) {
          return indexOf.call(states, this.getState()) >= 0;
        }
        getState() {
          if (this.webSocket) {
            for (let state in adapters_default.WebSocket) {
              if (adapters_default.WebSocket[state] === this.webSocket.readyState) {
                return state.toLowerCase();
              }
            }
          }
          return null;
        }
        installEventHandlers() {
          for (let eventName in this.events) {
            const handler = this.events[eventName].bind(this);
            this.webSocket[`on${eventName}`] = handler;
          }
        }
        uninstallEventHandlers() {
          for (let eventName in this.events) {
            this.webSocket[`on${eventName}`] = function() {
            };
          }
        }
      };
      Connection.reopenDelay = 500;
      Connection.prototype.events = {
        message(event) {
          if (!this.isProtocolSupported()) {
            return;
          }
          const { identifier, message, reason, reconnect, type } = JSON.parse(event.data);
          switch (type) {
            case message_types.welcome:
              if (this.triedToReconnect()) {
                this.reconnectAttempted = true;
              }
              this.monitor.recordConnect();
              return this.subscriptions.reload();
            case message_types.disconnect:
              logger_default.log(`Disconnecting. Reason: ${reason}`);
              return this.close({ allowReconnect: reconnect });
            case message_types.ping:
              return this.monitor.recordPing();
            case message_types.confirmation:
              this.subscriptions.confirmSubscription(identifier);
              if (this.reconnectAttempted) {
                this.reconnectAttempted = false;
                return this.subscriptions.notify(identifier, "connected", { reconnected: true });
              } else {
                return this.subscriptions.notify(identifier, "connected", { reconnected: false });
              }
            case message_types.rejection:
              return this.subscriptions.reject(identifier);
            default:
              return this.subscriptions.notify(identifier, "received", message);
          }
        },
        open() {
          logger_default.log(`WebSocket onopen event, using '${this.getProtocol()}' subprotocol`);
          this.disconnected = false;
          if (!this.isProtocolSupported()) {
            logger_default.log("Protocol is unsupported. Stopping monitor and disconnecting.");
            return this.close({ allowReconnect: false });
          }
        },
        close(event) {
          logger_default.log("WebSocket onclose event");
          if (this.disconnected) {
            return;
          }
          this.disconnected = true;
          this.monitor.recordDisconnect();
          return this.subscriptions.notifyAll("disconnected", { willAttemptReconnect: this.monitor.isRunning() });
        },
        error() {
          logger_default.log("WebSocket onerror event");
        }
      };
      connection_default = Connection;
    }
  });

  // node_modules/@rails/actioncable/src/subscription.js
  var extend2, Subscription;
  var init_subscription = __esm({
    "node_modules/@rails/actioncable/src/subscription.js"() {
      extend2 = function(object, properties) {
        if (properties != null) {
          for (let key in properties) {
            const value = properties[key];
            object[key] = value;
          }
        }
        return object;
      };
      Subscription = class {
        constructor(consumer2, params = {}, mixin) {
          this.consumer = consumer2;
          this.identifier = JSON.stringify(params);
          extend2(this, mixin);
        }
        // Perform a channel action with the optional data passed as an attribute
        perform(action, data = {}) {
          data.action = action;
          return this.send(data);
        }
        send(data) {
          return this.consumer.send({ command: "message", identifier: this.identifier, data: JSON.stringify(data) });
        }
        unsubscribe() {
          return this.consumer.subscriptions.remove(this);
        }
      };
    }
  });

  // node_modules/@rails/actioncable/src/subscription_guarantor.js
  var SubscriptionGuarantor, subscription_guarantor_default;
  var init_subscription_guarantor = __esm({
    "node_modules/@rails/actioncable/src/subscription_guarantor.js"() {
      init_logger();
      SubscriptionGuarantor = class {
        constructor(subscriptions) {
          this.subscriptions = subscriptions;
          this.pendingSubscriptions = [];
        }
        guarantee(subscription) {
          if (this.pendingSubscriptions.indexOf(subscription) == -1) {
            logger_default.log(`SubscriptionGuarantor guaranteeing ${subscription.identifier}`);
            this.pendingSubscriptions.push(subscription);
          } else {
            logger_default.log(`SubscriptionGuarantor already guaranteeing ${subscription.identifier}`);
          }
          this.startGuaranteeing();
        }
        forget(subscription) {
          logger_default.log(`SubscriptionGuarantor forgetting ${subscription.identifier}`);
          this.pendingSubscriptions = this.pendingSubscriptions.filter((s2) => s2 !== subscription);
        }
        startGuaranteeing() {
          this.stopGuaranteeing();
          this.retrySubscribing();
        }
        stopGuaranteeing() {
          clearTimeout(this.retryTimeout);
        }
        retrySubscribing() {
          this.retryTimeout = setTimeout(
            () => {
              if (this.subscriptions && typeof this.subscriptions.subscribe === "function") {
                this.pendingSubscriptions.map((subscription) => {
                  logger_default.log(`SubscriptionGuarantor resubscribing ${subscription.identifier}`);
                  this.subscriptions.subscribe(subscription);
                });
              }
            },
            500
          );
        }
      };
      subscription_guarantor_default = SubscriptionGuarantor;
    }
  });

  // node_modules/@rails/actioncable/src/subscriptions.js
  var Subscriptions;
  var init_subscriptions = __esm({
    "node_modules/@rails/actioncable/src/subscriptions.js"() {
      init_subscription();
      init_subscription_guarantor();
      init_logger();
      Subscriptions = class {
        constructor(consumer2) {
          this.consumer = consumer2;
          this.guarantor = new subscription_guarantor_default(this);
          this.subscriptions = [];
        }
        create(channelName, mixin) {
          const channel = channelName;
          const params = typeof channel === "object" ? channel : { channel };
          const subscription = new Subscription(this.consumer, params, mixin);
          return this.add(subscription);
        }
        // Private
        add(subscription) {
          this.subscriptions.push(subscription);
          this.consumer.ensureActiveConnection();
          this.notify(subscription, "initialized");
          this.subscribe(subscription);
          return subscription;
        }
        remove(subscription) {
          this.forget(subscription);
          if (!this.findAll(subscription.identifier).length) {
            this.sendCommand(subscription, "unsubscribe");
          }
          return subscription;
        }
        reject(identifier) {
          return this.findAll(identifier).map((subscription) => {
            this.forget(subscription);
            this.notify(subscription, "rejected");
            return subscription;
          });
        }
        forget(subscription) {
          this.guarantor.forget(subscription);
          this.subscriptions = this.subscriptions.filter((s2) => s2 !== subscription);
          return subscription;
        }
        findAll(identifier) {
          return this.subscriptions.filter((s2) => s2.identifier === identifier);
        }
        reload() {
          return this.subscriptions.map((subscription) => this.subscribe(subscription));
        }
        notifyAll(callbackName, ...args) {
          return this.subscriptions.map((subscription) => this.notify(subscription, callbackName, ...args));
        }
        notify(subscription, callbackName, ...args) {
          let subscriptions;
          if (typeof subscription === "string") {
            subscriptions = this.findAll(subscription);
          } else {
            subscriptions = [subscription];
          }
          return subscriptions.map((subscription2) => typeof subscription2[callbackName] === "function" ? subscription2[callbackName](...args) : void 0);
        }
        subscribe(subscription) {
          if (this.sendCommand(subscription, "subscribe")) {
            this.guarantor.guarantee(subscription);
          }
        }
        confirmSubscription(identifier) {
          logger_default.log(`Subscription confirmed ${identifier}`);
          this.findAll(identifier).map((subscription) => this.guarantor.forget(subscription));
        }
        sendCommand(subscription, command) {
          const { identifier } = subscription;
          return this.consumer.send({ command, identifier });
        }
      };
    }
  });

  // node_modules/@rails/actioncable/src/consumer.js
  function createWebSocketURL(url) {
    if (typeof url === "function") {
      url = url();
    }
    if (url && !/^wss?:/i.test(url)) {
      const a2 = document.createElement("a");
      a2.href = url;
      a2.href = a2.href;
      a2.protocol = a2.protocol.replace("http", "ws");
      return a2.href;
    } else {
      return url;
    }
  }
  var Consumer;
  var init_consumer = __esm({
    "node_modules/@rails/actioncable/src/consumer.js"() {
      init_connection();
      init_subscriptions();
      Consumer = class {
        constructor(url) {
          this._url = url;
          this.subscriptions = new Subscriptions(this);
          this.connection = new connection_default(this);
          this.subprotocols = [];
        }
        get url() {
          return createWebSocketURL(this._url);
        }
        send(data) {
          return this.connection.send(data);
        }
        connect() {
          return this.connection.open();
        }
        disconnect() {
          return this.connection.close({ allowReconnect: false });
        }
        ensureActiveConnection() {
          if (!this.connection.isActive()) {
            return this.connection.open();
          }
        }
        addSubProtocol(subprotocol) {
          this.subprotocols = [...this.subprotocols, subprotocol];
        }
      };
    }
  });

  // node_modules/@rails/actioncable/src/index.js
  var src_exports = {};
  __export(src_exports, {
    Connection: () => connection_default,
    ConnectionMonitor: () => connection_monitor_default,
    Consumer: () => Consumer,
    INTERNAL: () => internal_default,
    Subscription: () => Subscription,
    SubscriptionGuarantor: () => subscription_guarantor_default,
    Subscriptions: () => Subscriptions,
    adapters: () => adapters_default,
    createConsumer: () => createConsumer,
    createWebSocketURL: () => createWebSocketURL,
    getConfig: () => getConfig,
    logger: () => logger_default
  });
  function createConsumer(url = getConfig("url") || internal_default.default_mount_path) {
    return new Consumer(url);
  }
  function getConfig(name) {
    const element = document.head.querySelector(`meta[name='action-cable-${name}']`);
    if (element) {
      return element.getAttribute("content");
    }
  }
  var init_src = __esm({
    "node_modules/@rails/actioncable/src/index.js"() {
      init_connection();
      init_connection_monitor();
      init_consumer();
      init_internal();
      init_subscription();
      init_subscriptions();
      init_subscription_guarantor();
      init_adapters();
      init_logger();
    }
  });

  // node_modules/@hotwired/stimulus/dist/stimulus.js
  var EventListener = class {
    constructor(eventTarget, eventName, eventOptions) {
      this.eventTarget = eventTarget;
      this.eventName = eventName;
      this.eventOptions = eventOptions;
      this.unorderedBindings = /* @__PURE__ */ new Set();
    }
    connect() {
      this.eventTarget.addEventListener(this.eventName, this, this.eventOptions);
    }
    disconnect() {
      this.eventTarget.removeEventListener(this.eventName, this, this.eventOptions);
    }
    bindingConnected(binding) {
      this.unorderedBindings.add(binding);
    }
    bindingDisconnected(binding) {
      this.unorderedBindings.delete(binding);
    }
    handleEvent(event) {
      const extendedEvent2 = extendEvent(event);
      for (const binding of this.bindings) {
        if (extendedEvent2.immediatePropagationStopped) {
          break;
        } else {
          binding.handleEvent(extendedEvent2);
        }
      }
    }
    hasBindings() {
      return this.unorderedBindings.size > 0;
    }
    get bindings() {
      return Array.from(this.unorderedBindings).sort((left, right) => {
        const leftIndex = left.index, rightIndex = right.index;
        return leftIndex < rightIndex ? -1 : leftIndex > rightIndex ? 1 : 0;
      });
    }
  };
  function extendEvent(event) {
    if ("immediatePropagationStopped" in event) {
      return event;
    } else {
      const { stopImmediatePropagation } = event;
      return Object.assign(event, {
        immediatePropagationStopped: false,
        stopImmediatePropagation() {
          this.immediatePropagationStopped = true;
          stopImmediatePropagation.call(this);
        }
      });
    }
  }
  var Dispatcher = class {
    constructor(application2) {
      this.application = application2;
      this.eventListenerMaps = /* @__PURE__ */ new Map();
      this.started = false;
    }
    start() {
      if (!this.started) {
        this.started = true;
        this.eventListeners.forEach((eventListener) => eventListener.connect());
      }
    }
    stop() {
      if (this.started) {
        this.started = false;
        this.eventListeners.forEach((eventListener) => eventListener.disconnect());
      }
    }
    get eventListeners() {
      return Array.from(this.eventListenerMaps.values()).reduce((listeners, map) => listeners.concat(Array.from(map.values())), []);
    }
    bindingConnected(binding) {
      this.fetchEventListenerForBinding(binding).bindingConnected(binding);
    }
    bindingDisconnected(binding, clearEventListeners = false) {
      this.fetchEventListenerForBinding(binding).bindingDisconnected(binding);
      if (clearEventListeners)
        this.clearEventListenersForBinding(binding);
    }
    handleError(error2, message, detail = {}) {
      this.application.handleError(error2, `Error ${message}`, detail);
    }
    clearEventListenersForBinding(binding) {
      const eventListener = this.fetchEventListenerForBinding(binding);
      if (!eventListener.hasBindings()) {
        eventListener.disconnect();
        this.removeMappedEventListenerFor(binding);
      }
    }
    removeMappedEventListenerFor(binding) {
      const { eventTarget, eventName, eventOptions } = binding;
      const eventListenerMap = this.fetchEventListenerMapForEventTarget(eventTarget);
      const cacheKey = this.cacheKey(eventName, eventOptions);
      eventListenerMap.delete(cacheKey);
      if (eventListenerMap.size == 0)
        this.eventListenerMaps.delete(eventTarget);
    }
    fetchEventListenerForBinding(binding) {
      const { eventTarget, eventName, eventOptions } = binding;
      return this.fetchEventListener(eventTarget, eventName, eventOptions);
    }
    fetchEventListener(eventTarget, eventName, eventOptions) {
      const eventListenerMap = this.fetchEventListenerMapForEventTarget(eventTarget);
      const cacheKey = this.cacheKey(eventName, eventOptions);
      let eventListener = eventListenerMap.get(cacheKey);
      if (!eventListener) {
        eventListener = this.createEventListener(eventTarget, eventName, eventOptions);
        eventListenerMap.set(cacheKey, eventListener);
      }
      return eventListener;
    }
    createEventListener(eventTarget, eventName, eventOptions) {
      const eventListener = new EventListener(eventTarget, eventName, eventOptions);
      if (this.started) {
        eventListener.connect();
      }
      return eventListener;
    }
    fetchEventListenerMapForEventTarget(eventTarget) {
      let eventListenerMap = this.eventListenerMaps.get(eventTarget);
      if (!eventListenerMap) {
        eventListenerMap = /* @__PURE__ */ new Map();
        this.eventListenerMaps.set(eventTarget, eventListenerMap);
      }
      return eventListenerMap;
    }
    cacheKey(eventName, eventOptions) {
      const parts = [eventName];
      Object.keys(eventOptions).sort().forEach((key) => {
        parts.push(`${eventOptions[key] ? "" : "!"}${key}`);
      });
      return parts.join(":");
    }
  };
  var defaultActionDescriptorFilters = {
    stop({ event, value }) {
      if (value)
        event.stopPropagation();
      return true;
    },
    prevent({ event, value }) {
      if (value)
        event.preventDefault();
      return true;
    },
    self({ event, value, element }) {
      if (value) {
        return element === event.target;
      } else {
        return true;
      }
    }
  };
  var descriptorPattern = /^(?:(?:([^.]+?)\+)?(.+?)(?:\.(.+?))?(?:@(window|document))?->)?(.+?)(?:#([^:]+?))(?::(.+))?$/;
  function parseActionDescriptorString(descriptorString) {
    const source = descriptorString.trim();
    const matches = source.match(descriptorPattern) || [];
    let eventName = matches[2];
    let keyFilter = matches[3];
    if (keyFilter && !["keydown", "keyup", "keypress"].includes(eventName)) {
      eventName += `.${keyFilter}`;
      keyFilter = "";
    }
    return {
      eventTarget: parseEventTarget(matches[4]),
      eventName,
      eventOptions: matches[7] ? parseEventOptions(matches[7]) : {},
      identifier: matches[5],
      methodName: matches[6],
      keyFilter: matches[1] || keyFilter
    };
  }
  function parseEventTarget(eventTargetName) {
    if (eventTargetName == "window") {
      return window;
    } else if (eventTargetName == "document") {
      return document;
    }
  }
  function parseEventOptions(eventOptions) {
    return eventOptions.split(":").reduce((options, token) => Object.assign(options, { [token.replace(/^!/, "")]: !/^!/.test(token) }), {});
  }
  function stringifyEventTarget(eventTarget) {
    if (eventTarget == window) {
      return "window";
    } else if (eventTarget == document) {
      return "document";
    }
  }
  function camelize(value) {
    return value.replace(/(?:[_-])([a-z0-9])/g, (_2, char) => char.toUpperCase());
  }
  function namespaceCamelize(value) {
    return camelize(value.replace(/--/g, "-").replace(/__/g, "_"));
  }
  function capitalize(value) {
    return value.charAt(0).toUpperCase() + value.slice(1);
  }
  function dasherize(value) {
    return value.replace(/([A-Z])/g, (_2, char) => `-${char.toLowerCase()}`);
  }
  function tokenize(value) {
    return value.match(/[^\s]+/g) || [];
  }
  function isSomething(object) {
    return object !== null && object !== void 0;
  }
  function hasProperty(object, property) {
    return Object.prototype.hasOwnProperty.call(object, property);
  }
  var allModifiers = ["meta", "ctrl", "alt", "shift"];
  var Action = class {
    constructor(element, index, descriptor, schema) {
      this.element = element;
      this.index = index;
      this.eventTarget = descriptor.eventTarget || element;
      this.eventName = descriptor.eventName || getDefaultEventNameForElement(element) || error("missing event name");
      this.eventOptions = descriptor.eventOptions || {};
      this.identifier = descriptor.identifier || error("missing identifier");
      this.methodName = descriptor.methodName || error("missing method name");
      this.keyFilter = descriptor.keyFilter || "";
      this.schema = schema;
    }
    static forToken(token, schema) {
      return new this(token.element, token.index, parseActionDescriptorString(token.content), schema);
    }
    toString() {
      const eventFilter = this.keyFilter ? `.${this.keyFilter}` : "";
      const eventTarget = this.eventTargetName ? `@${this.eventTargetName}` : "";
      return `${this.eventName}${eventFilter}${eventTarget}->${this.identifier}#${this.methodName}`;
    }
    shouldIgnoreKeyboardEvent(event) {
      if (!this.keyFilter) {
        return false;
      }
      const filters = this.keyFilter.split("+");
      if (this.keyFilterDissatisfied(event, filters)) {
        return true;
      }
      const standardFilter = filters.filter((key) => !allModifiers.includes(key))[0];
      if (!standardFilter) {
        return false;
      }
      if (!hasProperty(this.keyMappings, standardFilter)) {
        error(`contains unknown key filter: ${this.keyFilter}`);
      }
      return this.keyMappings[standardFilter].toLowerCase() !== event.key.toLowerCase();
    }
    shouldIgnoreMouseEvent(event) {
      if (!this.keyFilter) {
        return false;
      }
      const filters = [this.keyFilter];
      if (this.keyFilterDissatisfied(event, filters)) {
        return true;
      }
      return false;
    }
    get params() {
      const params = {};
      const pattern = new RegExp(`^data-${this.identifier}-(.+)-param$`, "i");
      for (const { name, value } of Array.from(this.element.attributes)) {
        const match = name.match(pattern);
        const key = match && match[1];
        if (key) {
          params[camelize(key)] = typecast(value);
        }
      }
      return params;
    }
    get eventTargetName() {
      return stringifyEventTarget(this.eventTarget);
    }
    get keyMappings() {
      return this.schema.keyMappings;
    }
    keyFilterDissatisfied(event, filters) {
      const [meta, ctrl, alt, shift] = allModifiers.map((modifier) => filters.includes(modifier));
      return event.metaKey !== meta || event.ctrlKey !== ctrl || event.altKey !== alt || event.shiftKey !== shift;
    }
  };
  var defaultEventNames = {
    a: () => "click",
    button: () => "click",
    form: () => "submit",
    details: () => "toggle",
    input: (e2) => e2.getAttribute("type") == "submit" ? "click" : "input",
    select: () => "change",
    textarea: () => "input"
  };
  function getDefaultEventNameForElement(element) {
    const tagName = element.tagName.toLowerCase();
    if (tagName in defaultEventNames) {
      return defaultEventNames[tagName](element);
    }
  }
  function error(message) {
    throw new Error(message);
  }
  function typecast(value) {
    try {
      return JSON.parse(value);
    } catch (o_O) {
      return value;
    }
  }
  var Binding = class {
    constructor(context, action) {
      this.context = context;
      this.action = action;
    }
    get index() {
      return this.action.index;
    }
    get eventTarget() {
      return this.action.eventTarget;
    }
    get eventOptions() {
      return this.action.eventOptions;
    }
    get identifier() {
      return this.context.identifier;
    }
    handleEvent(event) {
      const actionEvent = this.prepareActionEvent(event);
      if (this.willBeInvokedByEvent(event) && this.applyEventModifiers(actionEvent)) {
        this.invokeWithEvent(actionEvent);
      }
    }
    get eventName() {
      return this.action.eventName;
    }
    get method() {
      const method = this.controller[this.methodName];
      if (typeof method == "function") {
        return method;
      }
      throw new Error(`Action "${this.action}" references undefined method "${this.methodName}"`);
    }
    applyEventModifiers(event) {
      const { element } = this.action;
      const { actionDescriptorFilters } = this.context.application;
      const { controller } = this.context;
      let passes = true;
      for (const [name, value] of Object.entries(this.eventOptions)) {
        if (name in actionDescriptorFilters) {
          const filter2 = actionDescriptorFilters[name];
          passes = passes && filter2({ name, value, event, element, controller });
        } else {
          continue;
        }
      }
      return passes;
    }
    prepareActionEvent(event) {
      return Object.assign(event, { params: this.action.params });
    }
    invokeWithEvent(event) {
      const { target, currentTarget } = event;
      try {
        this.method.call(this.controller, event);
        this.context.logDebugActivity(this.methodName, { event, target, currentTarget, action: this.methodName });
      } catch (error2) {
        const { identifier, controller, element, index } = this;
        const detail = { identifier, controller, element, index, event };
        this.context.handleError(error2, `invoking action "${this.action}"`, detail);
      }
    }
    willBeInvokedByEvent(event) {
      const eventTarget = event.target;
      if (event instanceof KeyboardEvent && this.action.shouldIgnoreKeyboardEvent(event)) {
        return false;
      }
      if (event instanceof MouseEvent && this.action.shouldIgnoreMouseEvent(event)) {
        return false;
      }
      if (this.element === eventTarget) {
        return true;
      } else if (eventTarget instanceof Element && this.element.contains(eventTarget)) {
        return this.scope.containsElement(eventTarget);
      } else {
        return this.scope.containsElement(this.action.element);
      }
    }
    get controller() {
      return this.context.controller;
    }
    get methodName() {
      return this.action.methodName;
    }
    get element() {
      return this.scope.element;
    }
    get scope() {
      return this.context.scope;
    }
  };
  var ElementObserver = class {
    constructor(element, delegate) {
      this.mutationObserverInit = { attributes: true, childList: true, subtree: true };
      this.element = element;
      this.started = false;
      this.delegate = delegate;
      this.elements = /* @__PURE__ */ new Set();
      this.mutationObserver = new MutationObserver((mutations) => this.processMutations(mutations));
    }
    start() {
      if (!this.started) {
        this.started = true;
        this.mutationObserver.observe(this.element, this.mutationObserverInit);
        this.refresh();
      }
    }
    pause(callback) {
      if (this.started) {
        this.mutationObserver.disconnect();
        this.started = false;
      }
      callback();
      if (!this.started) {
        this.mutationObserver.observe(this.element, this.mutationObserverInit);
        this.started = true;
      }
    }
    stop() {
      if (this.started) {
        this.mutationObserver.takeRecords();
        this.mutationObserver.disconnect();
        this.started = false;
      }
    }
    refresh() {
      if (this.started) {
        const matches = new Set(this.matchElementsInTree());
        for (const element of Array.from(this.elements)) {
          if (!matches.has(element)) {
            this.removeElement(element);
          }
        }
        for (const element of Array.from(matches)) {
          this.addElement(element);
        }
      }
    }
    processMutations(mutations) {
      if (this.started) {
        for (const mutation of mutations) {
          this.processMutation(mutation);
        }
      }
    }
    processMutation(mutation) {
      if (mutation.type == "attributes") {
        this.processAttributeChange(mutation.target, mutation.attributeName);
      } else if (mutation.type == "childList") {
        this.processRemovedNodes(mutation.removedNodes);
        this.processAddedNodes(mutation.addedNodes);
      }
    }
    processAttributeChange(element, attributeName) {
      if (this.elements.has(element)) {
        if (this.delegate.elementAttributeChanged && this.matchElement(element)) {
          this.delegate.elementAttributeChanged(element, attributeName);
        } else {
          this.removeElement(element);
        }
      } else if (this.matchElement(element)) {
        this.addElement(element);
      }
    }
    processRemovedNodes(nodes) {
      for (const node of Array.from(nodes)) {
        const element = this.elementFromNode(node);
        if (element) {
          this.processTree(element, this.removeElement);
        }
      }
    }
    processAddedNodes(nodes) {
      for (const node of Array.from(nodes)) {
        const element = this.elementFromNode(node);
        if (element && this.elementIsActive(element)) {
          this.processTree(element, this.addElement);
        }
      }
    }
    matchElement(element) {
      return this.delegate.matchElement(element);
    }
    matchElementsInTree(tree = this.element) {
      return this.delegate.matchElementsInTree(tree);
    }
    processTree(tree, processor) {
      for (const element of this.matchElementsInTree(tree)) {
        processor.call(this, element);
      }
    }
    elementFromNode(node) {
      if (node.nodeType == Node.ELEMENT_NODE) {
        return node;
      }
    }
    elementIsActive(element) {
      if (element.isConnected != this.element.isConnected) {
        return false;
      } else {
        return this.element.contains(element);
      }
    }
    addElement(element) {
      if (!this.elements.has(element)) {
        if (this.elementIsActive(element)) {
          this.elements.add(element);
          if (this.delegate.elementMatched) {
            this.delegate.elementMatched(element);
          }
        }
      }
    }
    removeElement(element) {
      if (this.elements.has(element)) {
        this.elements.delete(element);
        if (this.delegate.elementUnmatched) {
          this.delegate.elementUnmatched(element);
        }
      }
    }
  };
  var AttributeObserver = class {
    constructor(element, attributeName, delegate) {
      this.attributeName = attributeName;
      this.delegate = delegate;
      this.elementObserver = new ElementObserver(element, this);
    }
    get element() {
      return this.elementObserver.element;
    }
    get selector() {
      return `[${this.attributeName}]`;
    }
    start() {
      this.elementObserver.start();
    }
    pause(callback) {
      this.elementObserver.pause(callback);
    }
    stop() {
      this.elementObserver.stop();
    }
    refresh() {
      this.elementObserver.refresh();
    }
    get started() {
      return this.elementObserver.started;
    }
    matchElement(element) {
      return element.hasAttribute(this.attributeName);
    }
    matchElementsInTree(tree) {
      const match = this.matchElement(tree) ? [tree] : [];
      const matches = Array.from(tree.querySelectorAll(this.selector));
      return match.concat(matches);
    }
    elementMatched(element) {
      if (this.delegate.elementMatchedAttribute) {
        this.delegate.elementMatchedAttribute(element, this.attributeName);
      }
    }
    elementUnmatched(element) {
      if (this.delegate.elementUnmatchedAttribute) {
        this.delegate.elementUnmatchedAttribute(element, this.attributeName);
      }
    }
    elementAttributeChanged(element, attributeName) {
      if (this.delegate.elementAttributeValueChanged && this.attributeName == attributeName) {
        this.delegate.elementAttributeValueChanged(element, attributeName);
      }
    }
  };
  function add(map, key, value) {
    fetch2(map, key).add(value);
  }
  function del(map, key, value) {
    fetch2(map, key).delete(value);
    prune(map, key);
  }
  function fetch2(map, key) {
    let values = map.get(key);
    if (!values) {
      values = /* @__PURE__ */ new Set();
      map.set(key, values);
    }
    return values;
  }
  function prune(map, key) {
    const values = map.get(key);
    if (values != null && values.size == 0) {
      map.delete(key);
    }
  }
  var Multimap = class {
    constructor() {
      this.valuesByKey = /* @__PURE__ */ new Map();
    }
    get keys() {
      return Array.from(this.valuesByKey.keys());
    }
    get values() {
      const sets = Array.from(this.valuesByKey.values());
      return sets.reduce((values, set) => values.concat(Array.from(set)), []);
    }
    get size() {
      const sets = Array.from(this.valuesByKey.values());
      return sets.reduce((size, set) => size + set.size, 0);
    }
    add(key, value) {
      add(this.valuesByKey, key, value);
    }
    delete(key, value) {
      del(this.valuesByKey, key, value);
    }
    has(key, value) {
      const values = this.valuesByKey.get(key);
      return values != null && values.has(value);
    }
    hasKey(key) {
      return this.valuesByKey.has(key);
    }
    hasValue(value) {
      const sets = Array.from(this.valuesByKey.values());
      return sets.some((set) => set.has(value));
    }
    getValuesForKey(key) {
      const values = this.valuesByKey.get(key);
      return values ? Array.from(values) : [];
    }
    getKeysForValue(value) {
      return Array.from(this.valuesByKey).filter(([_key, values]) => values.has(value)).map(([key, _values]) => key);
    }
  };
  var SelectorObserver = class {
    constructor(element, selector, delegate, details) {
      this._selector = selector;
      this.details = details;
      this.elementObserver = new ElementObserver(element, this);
      this.delegate = delegate;
      this.matchesByElement = new Multimap();
    }
    get started() {
      return this.elementObserver.started;
    }
    get selector() {
      return this._selector;
    }
    set selector(selector) {
      this._selector = selector;
      this.refresh();
    }
    start() {
      this.elementObserver.start();
    }
    pause(callback) {
      this.elementObserver.pause(callback);
    }
    stop() {
      this.elementObserver.stop();
    }
    refresh() {
      this.elementObserver.refresh();
    }
    get element() {
      return this.elementObserver.element;
    }
    matchElement(element) {
      const { selector } = this;
      if (selector) {
        const matches = element.matches(selector);
        if (this.delegate.selectorMatchElement) {
          return matches && this.delegate.selectorMatchElement(element, this.details);
        }
        return matches;
      } else {
        return false;
      }
    }
    matchElementsInTree(tree) {
      const { selector } = this;
      if (selector) {
        const match = this.matchElement(tree) ? [tree] : [];
        const matches = Array.from(tree.querySelectorAll(selector)).filter((match2) => this.matchElement(match2));
        return match.concat(matches);
      } else {
        return [];
      }
    }
    elementMatched(element) {
      const { selector } = this;
      if (selector) {
        this.selectorMatched(element, selector);
      }
    }
    elementUnmatched(element) {
      const selectors = this.matchesByElement.getKeysForValue(element);
      for (const selector of selectors) {
        this.selectorUnmatched(element, selector);
      }
    }
    elementAttributeChanged(element, _attributeName) {
      const { selector } = this;
      if (selector) {
        const matches = this.matchElement(element);
        const matchedBefore = this.matchesByElement.has(selector, element);
        if (matches && !matchedBefore) {
          this.selectorMatched(element, selector);
        } else if (!matches && matchedBefore) {
          this.selectorUnmatched(element, selector);
        }
      }
    }
    selectorMatched(element, selector) {
      this.delegate.selectorMatched(element, selector, this.details);
      this.matchesByElement.add(selector, element);
    }
    selectorUnmatched(element, selector) {
      this.delegate.selectorUnmatched(element, selector, this.details);
      this.matchesByElement.delete(selector, element);
    }
  };
  var StringMapObserver = class {
    constructor(element, delegate) {
      this.element = element;
      this.delegate = delegate;
      this.started = false;
      this.stringMap = /* @__PURE__ */ new Map();
      this.mutationObserver = new MutationObserver((mutations) => this.processMutations(mutations));
    }
    start() {
      if (!this.started) {
        this.started = true;
        this.mutationObserver.observe(this.element, { attributes: true, attributeOldValue: true });
        this.refresh();
      }
    }
    stop() {
      if (this.started) {
        this.mutationObserver.takeRecords();
        this.mutationObserver.disconnect();
        this.started = false;
      }
    }
    refresh() {
      if (this.started) {
        for (const attributeName of this.knownAttributeNames) {
          this.refreshAttribute(attributeName, null);
        }
      }
    }
    processMutations(mutations) {
      if (this.started) {
        for (const mutation of mutations) {
          this.processMutation(mutation);
        }
      }
    }
    processMutation(mutation) {
      const attributeName = mutation.attributeName;
      if (attributeName) {
        this.refreshAttribute(attributeName, mutation.oldValue);
      }
    }
    refreshAttribute(attributeName, oldValue) {
      const key = this.delegate.getStringMapKeyForAttribute(attributeName);
      if (key != null) {
        if (!this.stringMap.has(attributeName)) {
          this.stringMapKeyAdded(key, attributeName);
        }
        const value = this.element.getAttribute(attributeName);
        if (this.stringMap.get(attributeName) != value) {
          this.stringMapValueChanged(value, key, oldValue);
        }
        if (value == null) {
          const oldValue2 = this.stringMap.get(attributeName);
          this.stringMap.delete(attributeName);
          if (oldValue2)
            this.stringMapKeyRemoved(key, attributeName, oldValue2);
        } else {
          this.stringMap.set(attributeName, value);
        }
      }
    }
    stringMapKeyAdded(key, attributeName) {
      if (this.delegate.stringMapKeyAdded) {
        this.delegate.stringMapKeyAdded(key, attributeName);
      }
    }
    stringMapValueChanged(value, key, oldValue) {
      if (this.delegate.stringMapValueChanged) {
        this.delegate.stringMapValueChanged(value, key, oldValue);
      }
    }
    stringMapKeyRemoved(key, attributeName, oldValue) {
      if (this.delegate.stringMapKeyRemoved) {
        this.delegate.stringMapKeyRemoved(key, attributeName, oldValue);
      }
    }
    get knownAttributeNames() {
      return Array.from(new Set(this.currentAttributeNames.concat(this.recordedAttributeNames)));
    }
    get currentAttributeNames() {
      return Array.from(this.element.attributes).map((attribute) => attribute.name);
    }
    get recordedAttributeNames() {
      return Array.from(this.stringMap.keys());
    }
  };
  var TokenListObserver = class {
    constructor(element, attributeName, delegate) {
      this.attributeObserver = new AttributeObserver(element, attributeName, this);
      this.delegate = delegate;
      this.tokensByElement = new Multimap();
    }
    get started() {
      return this.attributeObserver.started;
    }
    start() {
      this.attributeObserver.start();
    }
    pause(callback) {
      this.attributeObserver.pause(callback);
    }
    stop() {
      this.attributeObserver.stop();
    }
    refresh() {
      this.attributeObserver.refresh();
    }
    get element() {
      return this.attributeObserver.element;
    }
    get attributeName() {
      return this.attributeObserver.attributeName;
    }
    elementMatchedAttribute(element) {
      this.tokensMatched(this.readTokensForElement(element));
    }
    elementAttributeValueChanged(element) {
      const [unmatchedTokens, matchedTokens] = this.refreshTokensForElement(element);
      this.tokensUnmatched(unmatchedTokens);
      this.tokensMatched(matchedTokens);
    }
    elementUnmatchedAttribute(element) {
      this.tokensUnmatched(this.tokensByElement.getValuesForKey(element));
    }
    tokensMatched(tokens) {
      tokens.forEach((token) => this.tokenMatched(token));
    }
    tokensUnmatched(tokens) {
      tokens.forEach((token) => this.tokenUnmatched(token));
    }
    tokenMatched(token) {
      this.delegate.tokenMatched(token);
      this.tokensByElement.add(token.element, token);
    }
    tokenUnmatched(token) {
      this.delegate.tokenUnmatched(token);
      this.tokensByElement.delete(token.element, token);
    }
    refreshTokensForElement(element) {
      const previousTokens = this.tokensByElement.getValuesForKey(element);
      const currentTokens = this.readTokensForElement(element);
      const firstDifferingIndex = zip(previousTokens, currentTokens).findIndex(([previousToken, currentToken]) => !tokensAreEqual(previousToken, currentToken));
      if (firstDifferingIndex == -1) {
        return [[], []];
      } else {
        return [previousTokens.slice(firstDifferingIndex), currentTokens.slice(firstDifferingIndex)];
      }
    }
    readTokensForElement(element) {
      const attributeName = this.attributeName;
      const tokenString = element.getAttribute(attributeName) || "";
      return parseTokenString(tokenString, element, attributeName);
    }
  };
  function parseTokenString(tokenString, element, attributeName) {
    return tokenString.trim().split(/\s+/).filter((content) => content.length).map((content, index) => ({ element, attributeName, content, index }));
  }
  function zip(left, right) {
    const length = Math.max(left.length, right.length);
    return Array.from({ length }, (_2, index) => [left[index], right[index]]);
  }
  function tokensAreEqual(left, right) {
    return left && right && left.index == right.index && left.content == right.content;
  }
  var ValueListObserver = class {
    constructor(element, attributeName, delegate) {
      this.tokenListObserver = new TokenListObserver(element, attributeName, this);
      this.delegate = delegate;
      this.parseResultsByToken = /* @__PURE__ */ new WeakMap();
      this.valuesByTokenByElement = /* @__PURE__ */ new WeakMap();
    }
    get started() {
      return this.tokenListObserver.started;
    }
    start() {
      this.tokenListObserver.start();
    }
    stop() {
      this.tokenListObserver.stop();
    }
    refresh() {
      this.tokenListObserver.refresh();
    }
    get element() {
      return this.tokenListObserver.element;
    }
    get attributeName() {
      return this.tokenListObserver.attributeName;
    }
    tokenMatched(token) {
      const { element } = token;
      const { value } = this.fetchParseResultForToken(token);
      if (value) {
        this.fetchValuesByTokenForElement(element).set(token, value);
        this.delegate.elementMatchedValue(element, value);
      }
    }
    tokenUnmatched(token) {
      const { element } = token;
      const { value } = this.fetchParseResultForToken(token);
      if (value) {
        this.fetchValuesByTokenForElement(element).delete(token);
        this.delegate.elementUnmatchedValue(element, value);
      }
    }
    fetchParseResultForToken(token) {
      let parseResult = this.parseResultsByToken.get(token);
      if (!parseResult) {
        parseResult = this.parseToken(token);
        this.parseResultsByToken.set(token, parseResult);
      }
      return parseResult;
    }
    fetchValuesByTokenForElement(element) {
      let valuesByToken = this.valuesByTokenByElement.get(element);
      if (!valuesByToken) {
        valuesByToken = /* @__PURE__ */ new Map();
        this.valuesByTokenByElement.set(element, valuesByToken);
      }
      return valuesByToken;
    }
    parseToken(token) {
      try {
        const value = this.delegate.parseValueForToken(token);
        return { value };
      } catch (error2) {
        return { error: error2 };
      }
    }
  };
  var BindingObserver = class {
    constructor(context, delegate) {
      this.context = context;
      this.delegate = delegate;
      this.bindingsByAction = /* @__PURE__ */ new Map();
    }
    start() {
      if (!this.valueListObserver) {
        this.valueListObserver = new ValueListObserver(this.element, this.actionAttribute, this);
        this.valueListObserver.start();
      }
    }
    stop() {
      if (this.valueListObserver) {
        this.valueListObserver.stop();
        delete this.valueListObserver;
        this.disconnectAllActions();
      }
    }
    get element() {
      return this.context.element;
    }
    get identifier() {
      return this.context.identifier;
    }
    get actionAttribute() {
      return this.schema.actionAttribute;
    }
    get schema() {
      return this.context.schema;
    }
    get bindings() {
      return Array.from(this.bindingsByAction.values());
    }
    connectAction(action) {
      const binding = new Binding(this.context, action);
      this.bindingsByAction.set(action, binding);
      this.delegate.bindingConnected(binding);
    }
    disconnectAction(action) {
      const binding = this.bindingsByAction.get(action);
      if (binding) {
        this.bindingsByAction.delete(action);
        this.delegate.bindingDisconnected(binding);
      }
    }
    disconnectAllActions() {
      this.bindings.forEach((binding) => this.delegate.bindingDisconnected(binding, true));
      this.bindingsByAction.clear();
    }
    parseValueForToken(token) {
      const action = Action.forToken(token, this.schema);
      if (action.identifier == this.identifier) {
        return action;
      }
    }
    elementMatchedValue(element, action) {
      this.connectAction(action);
    }
    elementUnmatchedValue(element, action) {
      this.disconnectAction(action);
    }
  };
  var ValueObserver = class {
    constructor(context, receiver) {
      this.context = context;
      this.receiver = receiver;
      this.stringMapObserver = new StringMapObserver(this.element, this);
      this.valueDescriptorMap = this.controller.valueDescriptorMap;
    }
    start() {
      this.stringMapObserver.start();
      this.invokeChangedCallbacksForDefaultValues();
    }
    stop() {
      this.stringMapObserver.stop();
    }
    get element() {
      return this.context.element;
    }
    get controller() {
      return this.context.controller;
    }
    getStringMapKeyForAttribute(attributeName) {
      if (attributeName in this.valueDescriptorMap) {
        return this.valueDescriptorMap[attributeName].name;
      }
    }
    stringMapKeyAdded(key, attributeName) {
      const descriptor = this.valueDescriptorMap[attributeName];
      if (!this.hasValue(key)) {
        this.invokeChangedCallback(key, descriptor.writer(this.receiver[key]), descriptor.writer(descriptor.defaultValue));
      }
    }
    stringMapValueChanged(value, name, oldValue) {
      const descriptor = this.valueDescriptorNameMap[name];
      if (value === null)
        return;
      if (oldValue === null) {
        oldValue = descriptor.writer(descriptor.defaultValue);
      }
      this.invokeChangedCallback(name, value, oldValue);
    }
    stringMapKeyRemoved(key, attributeName, oldValue) {
      const descriptor = this.valueDescriptorNameMap[key];
      if (this.hasValue(key)) {
        this.invokeChangedCallback(key, descriptor.writer(this.receiver[key]), oldValue);
      } else {
        this.invokeChangedCallback(key, descriptor.writer(descriptor.defaultValue), oldValue);
      }
    }
    invokeChangedCallbacksForDefaultValues() {
      for (const { key, name, defaultValue, writer } of this.valueDescriptors) {
        if (defaultValue != void 0 && !this.controller.data.has(key)) {
          this.invokeChangedCallback(name, writer(defaultValue), void 0);
        }
      }
    }
    invokeChangedCallback(name, rawValue, rawOldValue) {
      const changedMethodName = `${name}Changed`;
      const changedMethod = this.receiver[changedMethodName];
      if (typeof changedMethod == "function") {
        const descriptor = this.valueDescriptorNameMap[name];
        try {
          const value = descriptor.reader(rawValue);
          let oldValue = rawOldValue;
          if (rawOldValue) {
            oldValue = descriptor.reader(rawOldValue);
          }
          changedMethod.call(this.receiver, value, oldValue);
        } catch (error2) {
          if (error2 instanceof TypeError) {
            error2.message = `Stimulus Value "${this.context.identifier}.${descriptor.name}" - ${error2.message}`;
          }
          throw error2;
        }
      }
    }
    get valueDescriptors() {
      const { valueDescriptorMap } = this;
      return Object.keys(valueDescriptorMap).map((key) => valueDescriptorMap[key]);
    }
    get valueDescriptorNameMap() {
      const descriptors = {};
      Object.keys(this.valueDescriptorMap).forEach((key) => {
        const descriptor = this.valueDescriptorMap[key];
        descriptors[descriptor.name] = descriptor;
      });
      return descriptors;
    }
    hasValue(attributeName) {
      const descriptor = this.valueDescriptorNameMap[attributeName];
      const hasMethodName = `has${capitalize(descriptor.name)}`;
      return this.receiver[hasMethodName];
    }
  };
  var TargetObserver = class {
    constructor(context, delegate) {
      this.context = context;
      this.delegate = delegate;
      this.targetsByName = new Multimap();
    }
    start() {
      if (!this.tokenListObserver) {
        this.tokenListObserver = new TokenListObserver(this.element, this.attributeName, this);
        this.tokenListObserver.start();
      }
    }
    stop() {
      if (this.tokenListObserver) {
        this.disconnectAllTargets();
        this.tokenListObserver.stop();
        delete this.tokenListObserver;
      }
    }
    tokenMatched({ element, content: name }) {
      if (this.scope.containsElement(element)) {
        this.connectTarget(element, name);
      }
    }
    tokenUnmatched({ element, content: name }) {
      this.disconnectTarget(element, name);
    }
    connectTarget(element, name) {
      var _a;
      if (!this.targetsByName.has(name, element)) {
        this.targetsByName.add(name, element);
        (_a = this.tokenListObserver) === null || _a === void 0 ? void 0 : _a.pause(() => this.delegate.targetConnected(element, name));
      }
    }
    disconnectTarget(element, name) {
      var _a;
      if (this.targetsByName.has(name, element)) {
        this.targetsByName.delete(name, element);
        (_a = this.tokenListObserver) === null || _a === void 0 ? void 0 : _a.pause(() => this.delegate.targetDisconnected(element, name));
      }
    }
    disconnectAllTargets() {
      for (const name of this.targetsByName.keys) {
        for (const element of this.targetsByName.getValuesForKey(name)) {
          this.disconnectTarget(element, name);
        }
      }
    }
    get attributeName() {
      return `data-${this.context.identifier}-target`;
    }
    get element() {
      return this.context.element;
    }
    get scope() {
      return this.context.scope;
    }
  };
  function readInheritableStaticArrayValues(constructor, propertyName) {
    const ancestors = getAncestorsForConstructor(constructor);
    return Array.from(ancestors.reduce((values, constructor2) => {
      getOwnStaticArrayValues(constructor2, propertyName).forEach((name) => values.add(name));
      return values;
    }, /* @__PURE__ */ new Set()));
  }
  function readInheritableStaticObjectPairs(constructor, propertyName) {
    const ancestors = getAncestorsForConstructor(constructor);
    return ancestors.reduce((pairs, constructor2) => {
      pairs.push(...getOwnStaticObjectPairs(constructor2, propertyName));
      return pairs;
    }, []);
  }
  function getAncestorsForConstructor(constructor) {
    const ancestors = [];
    while (constructor) {
      ancestors.push(constructor);
      constructor = Object.getPrototypeOf(constructor);
    }
    return ancestors.reverse();
  }
  function getOwnStaticArrayValues(constructor, propertyName) {
    const definition = constructor[propertyName];
    return Array.isArray(definition) ? definition : [];
  }
  function getOwnStaticObjectPairs(constructor, propertyName) {
    const definition = constructor[propertyName];
    return definition ? Object.keys(definition).map((key) => [key, definition[key]]) : [];
  }
  var OutletObserver = class {
    constructor(context, delegate) {
      this.started = false;
      this.context = context;
      this.delegate = delegate;
      this.outletsByName = new Multimap();
      this.outletElementsByName = new Multimap();
      this.selectorObserverMap = /* @__PURE__ */ new Map();
      this.attributeObserverMap = /* @__PURE__ */ new Map();
    }
    start() {
      if (!this.started) {
        this.outletDefinitions.forEach((outletName) => {
          this.setupSelectorObserverForOutlet(outletName);
          this.setupAttributeObserverForOutlet(outletName);
        });
        this.started = true;
        this.dependentContexts.forEach((context) => context.refresh());
      }
    }
    refresh() {
      this.selectorObserverMap.forEach((observer) => observer.refresh());
      this.attributeObserverMap.forEach((observer) => observer.refresh());
    }
    stop() {
      if (this.started) {
        this.started = false;
        this.disconnectAllOutlets();
        this.stopSelectorObservers();
        this.stopAttributeObservers();
      }
    }
    stopSelectorObservers() {
      if (this.selectorObserverMap.size > 0) {
        this.selectorObserverMap.forEach((observer) => observer.stop());
        this.selectorObserverMap.clear();
      }
    }
    stopAttributeObservers() {
      if (this.attributeObserverMap.size > 0) {
        this.attributeObserverMap.forEach((observer) => observer.stop());
        this.attributeObserverMap.clear();
      }
    }
    selectorMatched(element, _selector, { outletName }) {
      const outlet = this.getOutlet(element, outletName);
      if (outlet) {
        this.connectOutlet(outlet, element, outletName);
      }
    }
    selectorUnmatched(element, _selector, { outletName }) {
      const outlet = this.getOutletFromMap(element, outletName);
      if (outlet) {
        this.disconnectOutlet(outlet, element, outletName);
      }
    }
    selectorMatchElement(element, { outletName }) {
      const selector = this.selector(outletName);
      const hasOutlet = this.hasOutlet(element, outletName);
      const hasOutletController = element.matches(`[${this.schema.controllerAttribute}~=${outletName}]`);
      if (selector) {
        return hasOutlet && hasOutletController && element.matches(selector);
      } else {
        return false;
      }
    }
    elementMatchedAttribute(_element, attributeName) {
      const outletName = this.getOutletNameFromOutletAttributeName(attributeName);
      if (outletName) {
        this.updateSelectorObserverForOutlet(outletName);
      }
    }
    elementAttributeValueChanged(_element, attributeName) {
      const outletName = this.getOutletNameFromOutletAttributeName(attributeName);
      if (outletName) {
        this.updateSelectorObserverForOutlet(outletName);
      }
    }
    elementUnmatchedAttribute(_element, attributeName) {
      const outletName = this.getOutletNameFromOutletAttributeName(attributeName);
      if (outletName) {
        this.updateSelectorObserverForOutlet(outletName);
      }
    }
    connectOutlet(outlet, element, outletName) {
      var _a;
      if (!this.outletElementsByName.has(outletName, element)) {
        this.outletsByName.add(outletName, outlet);
        this.outletElementsByName.add(outletName, element);
        (_a = this.selectorObserverMap.get(outletName)) === null || _a === void 0 ? void 0 : _a.pause(() => this.delegate.outletConnected(outlet, element, outletName));
      }
    }
    disconnectOutlet(outlet, element, outletName) {
      var _a;
      if (this.outletElementsByName.has(outletName, element)) {
        this.outletsByName.delete(outletName, outlet);
        this.outletElementsByName.delete(outletName, element);
        (_a = this.selectorObserverMap.get(outletName)) === null || _a === void 0 ? void 0 : _a.pause(() => this.delegate.outletDisconnected(outlet, element, outletName));
      }
    }
    disconnectAllOutlets() {
      for (const outletName of this.outletElementsByName.keys) {
        for (const element of this.outletElementsByName.getValuesForKey(outletName)) {
          for (const outlet of this.outletsByName.getValuesForKey(outletName)) {
            this.disconnectOutlet(outlet, element, outletName);
          }
        }
      }
    }
    updateSelectorObserverForOutlet(outletName) {
      const observer = this.selectorObserverMap.get(outletName);
      if (observer) {
        observer.selector = this.selector(outletName);
      }
    }
    setupSelectorObserverForOutlet(outletName) {
      const selector = this.selector(outletName);
      const selectorObserver = new SelectorObserver(document.body, selector, this, { outletName });
      this.selectorObserverMap.set(outletName, selectorObserver);
      selectorObserver.start();
    }
    setupAttributeObserverForOutlet(outletName) {
      const attributeName = this.attributeNameForOutletName(outletName);
      const attributeObserver = new AttributeObserver(this.scope.element, attributeName, this);
      this.attributeObserverMap.set(outletName, attributeObserver);
      attributeObserver.start();
    }
    selector(outletName) {
      return this.scope.outlets.getSelectorForOutletName(outletName);
    }
    attributeNameForOutletName(outletName) {
      return this.scope.schema.outletAttributeForScope(this.identifier, outletName);
    }
    getOutletNameFromOutletAttributeName(attributeName) {
      return this.outletDefinitions.find((outletName) => this.attributeNameForOutletName(outletName) === attributeName);
    }
    get outletDependencies() {
      const dependencies = new Multimap();
      this.router.modules.forEach((module) => {
        const constructor = module.definition.controllerConstructor;
        const outlets = readInheritableStaticArrayValues(constructor, "outlets");
        outlets.forEach((outlet) => dependencies.add(outlet, module.identifier));
      });
      return dependencies;
    }
    get outletDefinitions() {
      return this.outletDependencies.getKeysForValue(this.identifier);
    }
    get dependentControllerIdentifiers() {
      return this.outletDependencies.getValuesForKey(this.identifier);
    }
    get dependentContexts() {
      const identifiers = this.dependentControllerIdentifiers;
      return this.router.contexts.filter((context) => identifiers.includes(context.identifier));
    }
    hasOutlet(element, outletName) {
      return !!this.getOutlet(element, outletName) || !!this.getOutletFromMap(element, outletName);
    }
    getOutlet(element, outletName) {
      return this.application.getControllerForElementAndIdentifier(element, outletName);
    }
    getOutletFromMap(element, outletName) {
      return this.outletsByName.getValuesForKey(outletName).find((outlet) => outlet.element === element);
    }
    get scope() {
      return this.context.scope;
    }
    get schema() {
      return this.context.schema;
    }
    get identifier() {
      return this.context.identifier;
    }
    get application() {
      return this.context.application;
    }
    get router() {
      return this.application.router;
    }
  };
  var Context = class {
    constructor(module, scope) {
      this.logDebugActivity = (functionName, detail = {}) => {
        const { identifier, controller, element } = this;
        detail = Object.assign({ identifier, controller, element }, detail);
        this.application.logDebugActivity(this.identifier, functionName, detail);
      };
      this.module = module;
      this.scope = scope;
      this.controller = new module.controllerConstructor(this);
      this.bindingObserver = new BindingObserver(this, this.dispatcher);
      this.valueObserver = new ValueObserver(this, this.controller);
      this.targetObserver = new TargetObserver(this, this);
      this.outletObserver = new OutletObserver(this, this);
      try {
        this.controller.initialize();
        this.logDebugActivity("initialize");
      } catch (error2) {
        this.handleError(error2, "initializing controller");
      }
    }
    connect() {
      this.bindingObserver.start();
      this.valueObserver.start();
      this.targetObserver.start();
      this.outletObserver.start();
      try {
        this.controller.connect();
        this.logDebugActivity("connect");
      } catch (error2) {
        this.handleError(error2, "connecting controller");
      }
    }
    refresh() {
      this.outletObserver.refresh();
    }
    disconnect() {
      try {
        this.controller.disconnect();
        this.logDebugActivity("disconnect");
      } catch (error2) {
        this.handleError(error2, "disconnecting controller");
      }
      this.outletObserver.stop();
      this.targetObserver.stop();
      this.valueObserver.stop();
      this.bindingObserver.stop();
    }
    get application() {
      return this.module.application;
    }
    get identifier() {
      return this.module.identifier;
    }
    get schema() {
      return this.application.schema;
    }
    get dispatcher() {
      return this.application.dispatcher;
    }
    get element() {
      return this.scope.element;
    }
    get parentElement() {
      return this.element.parentElement;
    }
    handleError(error2, message, detail = {}) {
      const { identifier, controller, element } = this;
      detail = Object.assign({ identifier, controller, element }, detail);
      this.application.handleError(error2, `Error ${message}`, detail);
    }
    targetConnected(element, name) {
      this.invokeControllerMethod(`${name}TargetConnected`, element);
    }
    targetDisconnected(element, name) {
      this.invokeControllerMethod(`${name}TargetDisconnected`, element);
    }
    outletConnected(outlet, element, name) {
      this.invokeControllerMethod(`${namespaceCamelize(name)}OutletConnected`, outlet, element);
    }
    outletDisconnected(outlet, element, name) {
      this.invokeControllerMethod(`${namespaceCamelize(name)}OutletDisconnected`, outlet, element);
    }
    invokeControllerMethod(methodName, ...args) {
      const controller = this.controller;
      if (typeof controller[methodName] == "function") {
        controller[methodName](...args);
      }
    }
  };
  function bless(constructor) {
    return shadow(constructor, getBlessedProperties(constructor));
  }
  function shadow(constructor, properties) {
    const shadowConstructor = extend(constructor);
    const shadowProperties = getShadowProperties(constructor.prototype, properties);
    Object.defineProperties(shadowConstructor.prototype, shadowProperties);
    return shadowConstructor;
  }
  function getBlessedProperties(constructor) {
    const blessings = readInheritableStaticArrayValues(constructor, "blessings");
    return blessings.reduce((blessedProperties, blessing) => {
      const properties = blessing(constructor);
      for (const key in properties) {
        const descriptor = blessedProperties[key] || {};
        blessedProperties[key] = Object.assign(descriptor, properties[key]);
      }
      return blessedProperties;
    }, {});
  }
  function getShadowProperties(prototype, properties) {
    return getOwnKeys(properties).reduce((shadowProperties, key) => {
      const descriptor = getShadowedDescriptor(prototype, properties, key);
      if (descriptor) {
        Object.assign(shadowProperties, { [key]: descriptor });
      }
      return shadowProperties;
    }, {});
  }
  function getShadowedDescriptor(prototype, properties, key) {
    const shadowingDescriptor = Object.getOwnPropertyDescriptor(prototype, key);
    const shadowedByValue = shadowingDescriptor && "value" in shadowingDescriptor;
    if (!shadowedByValue) {
      const descriptor = Object.getOwnPropertyDescriptor(properties, key).value;
      if (shadowingDescriptor) {
        descriptor.get = shadowingDescriptor.get || descriptor.get;
        descriptor.set = shadowingDescriptor.set || descriptor.set;
      }
      return descriptor;
    }
  }
  var getOwnKeys = (() => {
    if (typeof Object.getOwnPropertySymbols == "function") {
      return (object) => [...Object.getOwnPropertyNames(object), ...Object.getOwnPropertySymbols(object)];
    } else {
      return Object.getOwnPropertyNames;
    }
  })();
  var extend = (() => {
    function extendWithReflect(constructor) {
      function extended() {
        return Reflect.construct(constructor, arguments, new.target);
      }
      extended.prototype = Object.create(constructor.prototype, {
        constructor: { value: extended }
      });
      Reflect.setPrototypeOf(extended, constructor);
      return extended;
    }
    function testReflectExtension() {
      const a2 = function() {
        this.a.call(this);
      };
      const b2 = extendWithReflect(a2);
      b2.prototype.a = function() {
      };
      return new b2();
    }
    try {
      testReflectExtension();
      return extendWithReflect;
    } catch (error2) {
      return (constructor) => class extended extends constructor {
      };
    }
  })();
  function blessDefinition(definition) {
    return {
      identifier: definition.identifier,
      controllerConstructor: bless(definition.controllerConstructor)
    };
  }
  var Module = class {
    constructor(application2, definition) {
      this.application = application2;
      this.definition = blessDefinition(definition);
      this.contextsByScope = /* @__PURE__ */ new WeakMap();
      this.connectedContexts = /* @__PURE__ */ new Set();
    }
    get identifier() {
      return this.definition.identifier;
    }
    get controllerConstructor() {
      return this.definition.controllerConstructor;
    }
    get contexts() {
      return Array.from(this.connectedContexts);
    }
    connectContextForScope(scope) {
      const context = this.fetchContextForScope(scope);
      this.connectedContexts.add(context);
      context.connect();
    }
    disconnectContextForScope(scope) {
      const context = this.contextsByScope.get(scope);
      if (context) {
        this.connectedContexts.delete(context);
        context.disconnect();
      }
    }
    fetchContextForScope(scope) {
      let context = this.contextsByScope.get(scope);
      if (!context) {
        context = new Context(this, scope);
        this.contextsByScope.set(scope, context);
      }
      return context;
    }
  };
  var ClassMap = class {
    constructor(scope) {
      this.scope = scope;
    }
    has(name) {
      return this.data.has(this.getDataKey(name));
    }
    get(name) {
      return this.getAll(name)[0];
    }
    getAll(name) {
      const tokenString = this.data.get(this.getDataKey(name)) || "";
      return tokenize(tokenString);
    }
    getAttributeName(name) {
      return this.data.getAttributeNameForKey(this.getDataKey(name));
    }
    getDataKey(name) {
      return `${name}-class`;
    }
    get data() {
      return this.scope.data;
    }
  };
  var DataMap = class {
    constructor(scope) {
      this.scope = scope;
    }
    get element() {
      return this.scope.element;
    }
    get identifier() {
      return this.scope.identifier;
    }
    get(key) {
      const name = this.getAttributeNameForKey(key);
      return this.element.getAttribute(name);
    }
    set(key, value) {
      const name = this.getAttributeNameForKey(key);
      this.element.setAttribute(name, value);
      return this.get(key);
    }
    has(key) {
      const name = this.getAttributeNameForKey(key);
      return this.element.hasAttribute(name);
    }
    delete(key) {
      if (this.has(key)) {
        const name = this.getAttributeNameForKey(key);
        this.element.removeAttribute(name);
        return true;
      } else {
        return false;
      }
    }
    getAttributeNameForKey(key) {
      return `data-${this.identifier}-${dasherize(key)}`;
    }
  };
  var Guide = class {
    constructor(logger) {
      this.warnedKeysByObject = /* @__PURE__ */ new WeakMap();
      this.logger = logger;
    }
    warn(object, key, message) {
      let warnedKeys = this.warnedKeysByObject.get(object);
      if (!warnedKeys) {
        warnedKeys = /* @__PURE__ */ new Set();
        this.warnedKeysByObject.set(object, warnedKeys);
      }
      if (!warnedKeys.has(key)) {
        warnedKeys.add(key);
        this.logger.warn(message, object);
      }
    }
  };
  function attributeValueContainsToken(attributeName, token) {
    return `[${attributeName}~="${token}"]`;
  }
  var TargetSet = class {
    constructor(scope) {
      this.scope = scope;
    }
    get element() {
      return this.scope.element;
    }
    get identifier() {
      return this.scope.identifier;
    }
    get schema() {
      return this.scope.schema;
    }
    has(targetName) {
      return this.find(targetName) != null;
    }
    find(...targetNames) {
      return targetNames.reduce((target, targetName) => target || this.findTarget(targetName) || this.findLegacyTarget(targetName), void 0);
    }
    findAll(...targetNames) {
      return targetNames.reduce((targets, targetName) => [
        ...targets,
        ...this.findAllTargets(targetName),
        ...this.findAllLegacyTargets(targetName)
      ], []);
    }
    findTarget(targetName) {
      const selector = this.getSelectorForTargetName(targetName);
      return this.scope.findElement(selector);
    }
    findAllTargets(targetName) {
      const selector = this.getSelectorForTargetName(targetName);
      return this.scope.findAllElements(selector);
    }
    getSelectorForTargetName(targetName) {
      const attributeName = this.schema.targetAttributeForScope(this.identifier);
      return attributeValueContainsToken(attributeName, targetName);
    }
    findLegacyTarget(targetName) {
      const selector = this.getLegacySelectorForTargetName(targetName);
      return this.deprecate(this.scope.findElement(selector), targetName);
    }
    findAllLegacyTargets(targetName) {
      const selector = this.getLegacySelectorForTargetName(targetName);
      return this.scope.findAllElements(selector).map((element) => this.deprecate(element, targetName));
    }
    getLegacySelectorForTargetName(targetName) {
      const targetDescriptor = `${this.identifier}.${targetName}`;
      return attributeValueContainsToken(this.schema.targetAttribute, targetDescriptor);
    }
    deprecate(element, targetName) {
      if (element) {
        const { identifier } = this;
        const attributeName = this.schema.targetAttribute;
        const revisedAttributeName = this.schema.targetAttributeForScope(identifier);
        this.guide.warn(element, `target:${targetName}`, `Please replace ${attributeName}="${identifier}.${targetName}" with ${revisedAttributeName}="${targetName}". The ${attributeName} attribute is deprecated and will be removed in a future version of Stimulus.`);
      }
      return element;
    }
    get guide() {
      return this.scope.guide;
    }
  };
  var OutletSet = class {
    constructor(scope, controllerElement) {
      this.scope = scope;
      this.controllerElement = controllerElement;
    }
    get element() {
      return this.scope.element;
    }
    get identifier() {
      return this.scope.identifier;
    }
    get schema() {
      return this.scope.schema;
    }
    has(outletName) {
      return this.find(outletName) != null;
    }
    find(...outletNames) {
      return outletNames.reduce((outlet, outletName) => outlet || this.findOutlet(outletName), void 0);
    }
    findAll(...outletNames) {
      return outletNames.reduce((outlets, outletName) => [...outlets, ...this.findAllOutlets(outletName)], []);
    }
    getSelectorForOutletName(outletName) {
      const attributeName = this.schema.outletAttributeForScope(this.identifier, outletName);
      return this.controllerElement.getAttribute(attributeName);
    }
    findOutlet(outletName) {
      const selector = this.getSelectorForOutletName(outletName);
      if (selector)
        return this.findElement(selector, outletName);
    }
    findAllOutlets(outletName) {
      const selector = this.getSelectorForOutletName(outletName);
      return selector ? this.findAllElements(selector, outletName) : [];
    }
    findElement(selector, outletName) {
      const elements = this.scope.queryElements(selector);
      return elements.filter((element) => this.matchesElement(element, selector, outletName))[0];
    }
    findAllElements(selector, outletName) {
      const elements = this.scope.queryElements(selector);
      return elements.filter((element) => this.matchesElement(element, selector, outletName));
    }
    matchesElement(element, selector, outletName) {
      const controllerAttribute = element.getAttribute(this.scope.schema.controllerAttribute) || "";
      return element.matches(selector) && controllerAttribute.split(" ").includes(outletName);
    }
  };
  var Scope = class _Scope {
    constructor(schema, element, identifier, logger) {
      this.targets = new TargetSet(this);
      this.classes = new ClassMap(this);
      this.data = new DataMap(this);
      this.containsElement = (element2) => {
        return element2.closest(this.controllerSelector) === this.element;
      };
      this.schema = schema;
      this.element = element;
      this.identifier = identifier;
      this.guide = new Guide(logger);
      this.outlets = new OutletSet(this.documentScope, element);
    }
    findElement(selector) {
      return this.element.matches(selector) ? this.element : this.queryElements(selector).find(this.containsElement);
    }
    findAllElements(selector) {
      return [
        ...this.element.matches(selector) ? [this.element] : [],
        ...this.queryElements(selector).filter(this.containsElement)
      ];
    }
    queryElements(selector) {
      return Array.from(this.element.querySelectorAll(selector));
    }
    get controllerSelector() {
      return attributeValueContainsToken(this.schema.controllerAttribute, this.identifier);
    }
    get isDocumentScope() {
      return this.element === document.documentElement;
    }
    get documentScope() {
      return this.isDocumentScope ? this : new _Scope(this.schema, document.documentElement, this.identifier, this.guide.logger);
    }
  };
  var ScopeObserver = class {
    constructor(element, schema, delegate) {
      this.element = element;
      this.schema = schema;
      this.delegate = delegate;
      this.valueListObserver = new ValueListObserver(this.element, this.controllerAttribute, this);
      this.scopesByIdentifierByElement = /* @__PURE__ */ new WeakMap();
      this.scopeReferenceCounts = /* @__PURE__ */ new WeakMap();
    }
    start() {
      this.valueListObserver.start();
    }
    stop() {
      this.valueListObserver.stop();
    }
    get controllerAttribute() {
      return this.schema.controllerAttribute;
    }
    parseValueForToken(token) {
      const { element, content: identifier } = token;
      return this.parseValueForElementAndIdentifier(element, identifier);
    }
    parseValueForElementAndIdentifier(element, identifier) {
      const scopesByIdentifier = this.fetchScopesByIdentifierForElement(element);
      let scope = scopesByIdentifier.get(identifier);
      if (!scope) {
        scope = this.delegate.createScopeForElementAndIdentifier(element, identifier);
        scopesByIdentifier.set(identifier, scope);
      }
      return scope;
    }
    elementMatchedValue(element, value) {
      const referenceCount = (this.scopeReferenceCounts.get(value) || 0) + 1;
      this.scopeReferenceCounts.set(value, referenceCount);
      if (referenceCount == 1) {
        this.delegate.scopeConnected(value);
      }
    }
    elementUnmatchedValue(element, value) {
      const referenceCount = this.scopeReferenceCounts.get(value);
      if (referenceCount) {
        this.scopeReferenceCounts.set(value, referenceCount - 1);
        if (referenceCount == 1) {
          this.delegate.scopeDisconnected(value);
        }
      }
    }
    fetchScopesByIdentifierForElement(element) {
      let scopesByIdentifier = this.scopesByIdentifierByElement.get(element);
      if (!scopesByIdentifier) {
        scopesByIdentifier = /* @__PURE__ */ new Map();
        this.scopesByIdentifierByElement.set(element, scopesByIdentifier);
      }
      return scopesByIdentifier;
    }
  };
  var Router = class {
    constructor(application2) {
      this.application = application2;
      this.scopeObserver = new ScopeObserver(this.element, this.schema, this);
      this.scopesByIdentifier = new Multimap();
      this.modulesByIdentifier = /* @__PURE__ */ new Map();
    }
    get element() {
      return this.application.element;
    }
    get schema() {
      return this.application.schema;
    }
    get logger() {
      return this.application.logger;
    }
    get controllerAttribute() {
      return this.schema.controllerAttribute;
    }
    get modules() {
      return Array.from(this.modulesByIdentifier.values());
    }
    get contexts() {
      return this.modules.reduce((contexts, module) => contexts.concat(module.contexts), []);
    }
    start() {
      this.scopeObserver.start();
    }
    stop() {
      this.scopeObserver.stop();
    }
    loadDefinition(definition) {
      this.unloadIdentifier(definition.identifier);
      const module = new Module(this.application, definition);
      this.connectModule(module);
      const afterLoad = definition.controllerConstructor.afterLoad;
      if (afterLoad) {
        afterLoad.call(definition.controllerConstructor, definition.identifier, this.application);
      }
    }
    unloadIdentifier(identifier) {
      const module = this.modulesByIdentifier.get(identifier);
      if (module) {
        this.disconnectModule(module);
      }
    }
    getContextForElementAndIdentifier(element, identifier) {
      const module = this.modulesByIdentifier.get(identifier);
      if (module) {
        return module.contexts.find((context) => context.element == element);
      }
    }
    proposeToConnectScopeForElementAndIdentifier(element, identifier) {
      const scope = this.scopeObserver.parseValueForElementAndIdentifier(element, identifier);
      if (scope) {
        this.scopeObserver.elementMatchedValue(scope.element, scope);
      } else {
        console.error(`Couldn't find or create scope for identifier: "${identifier}" and element:`, element);
      }
    }
    handleError(error2, message, detail) {
      this.application.handleError(error2, message, detail);
    }
    createScopeForElementAndIdentifier(element, identifier) {
      return new Scope(this.schema, element, identifier, this.logger);
    }
    scopeConnected(scope) {
      this.scopesByIdentifier.add(scope.identifier, scope);
      const module = this.modulesByIdentifier.get(scope.identifier);
      if (module) {
        module.connectContextForScope(scope);
      }
    }
    scopeDisconnected(scope) {
      this.scopesByIdentifier.delete(scope.identifier, scope);
      const module = this.modulesByIdentifier.get(scope.identifier);
      if (module) {
        module.disconnectContextForScope(scope);
      }
    }
    connectModule(module) {
      this.modulesByIdentifier.set(module.identifier, module);
      const scopes = this.scopesByIdentifier.getValuesForKey(module.identifier);
      scopes.forEach((scope) => module.connectContextForScope(scope));
    }
    disconnectModule(module) {
      this.modulesByIdentifier.delete(module.identifier);
      const scopes = this.scopesByIdentifier.getValuesForKey(module.identifier);
      scopes.forEach((scope) => module.disconnectContextForScope(scope));
    }
  };
  var defaultSchema = {
    controllerAttribute: "data-controller",
    actionAttribute: "data-action",
    targetAttribute: "data-target",
    targetAttributeForScope: (identifier) => `data-${identifier}-target`,
    outletAttributeForScope: (identifier, outlet) => `data-${identifier}-${outlet}-outlet`,
    keyMappings: Object.assign(Object.assign({ enter: "Enter", tab: "Tab", esc: "Escape", space: " ", up: "ArrowUp", down: "ArrowDown", left: "ArrowLeft", right: "ArrowRight", home: "Home", end: "End", page_up: "PageUp", page_down: "PageDown" }, objectFromEntries("abcdefghijklmnopqrstuvwxyz".split("").map((c2) => [c2, c2]))), objectFromEntries("0123456789".split("").map((n2) => [n2, n2])))
  };
  function objectFromEntries(array) {
    return array.reduce((memo, [k2, v2]) => Object.assign(Object.assign({}, memo), { [k2]: v2 }), {});
  }
  var Application = class {
    constructor(element = document.documentElement, schema = defaultSchema) {
      this.logger = console;
      this.debug = false;
      this.logDebugActivity = (identifier, functionName, detail = {}) => {
        if (this.debug) {
          this.logFormattedMessage(identifier, functionName, detail);
        }
      };
      this.element = element;
      this.schema = schema;
      this.dispatcher = new Dispatcher(this);
      this.router = new Router(this);
      this.actionDescriptorFilters = Object.assign({}, defaultActionDescriptorFilters);
    }
    static start(element, schema) {
      const application2 = new this(element, schema);
      application2.start();
      return application2;
    }
    async start() {
      await domReady();
      this.logDebugActivity("application", "starting");
      this.dispatcher.start();
      this.router.start();
      this.logDebugActivity("application", "start");
    }
    stop() {
      this.logDebugActivity("application", "stopping");
      this.dispatcher.stop();
      this.router.stop();
      this.logDebugActivity("application", "stop");
    }
    register(identifier, controllerConstructor) {
      this.load({ identifier, controllerConstructor });
    }
    registerActionOption(name, filter2) {
      this.actionDescriptorFilters[name] = filter2;
    }
    load(head, ...rest) {
      const definitions = Array.isArray(head) ? head : [head, ...rest];
      definitions.forEach((definition) => {
        if (definition.controllerConstructor.shouldLoad) {
          this.router.loadDefinition(definition);
        }
      });
    }
    unload(head, ...rest) {
      const identifiers = Array.isArray(head) ? head : [head, ...rest];
      identifiers.forEach((identifier) => this.router.unloadIdentifier(identifier));
    }
    get controllers() {
      return this.router.contexts.map((context) => context.controller);
    }
    getControllerForElementAndIdentifier(element, identifier) {
      const context = this.router.getContextForElementAndIdentifier(element, identifier);
      return context ? context.controller : null;
    }
    handleError(error2, message, detail) {
      var _a;
      this.logger.error(`%s

%o

%o`, message, error2, detail);
      (_a = window.onerror) === null || _a === void 0 ? void 0 : _a.call(window, message, "", 0, 0, error2);
    }
    logFormattedMessage(identifier, functionName, detail = {}) {
      detail = Object.assign({ application: this }, detail);
      this.logger.groupCollapsed(`${identifier} #${functionName}`);
      this.logger.log("details:", Object.assign({}, detail));
      this.logger.groupEnd();
    }
  };
  function domReady() {
    return new Promise((resolve) => {
      if (document.readyState == "loading") {
        document.addEventListener("DOMContentLoaded", () => resolve());
      } else {
        resolve();
      }
    });
  }
  function ClassPropertiesBlessing(constructor) {
    const classes = readInheritableStaticArrayValues(constructor, "classes");
    return classes.reduce((properties, classDefinition) => {
      return Object.assign(properties, propertiesForClassDefinition(classDefinition));
    }, {});
  }
  function propertiesForClassDefinition(key) {
    return {
      [`${key}Class`]: {
        get() {
          const { classes } = this;
          if (classes.has(key)) {
            return classes.get(key);
          } else {
            const attribute = classes.getAttributeName(key);
            throw new Error(`Missing attribute "${attribute}"`);
          }
        }
      },
      [`${key}Classes`]: {
        get() {
          return this.classes.getAll(key);
        }
      },
      [`has${capitalize(key)}Class`]: {
        get() {
          return this.classes.has(key);
        }
      }
    };
  }
  function OutletPropertiesBlessing(constructor) {
    const outlets = readInheritableStaticArrayValues(constructor, "outlets");
    return outlets.reduce((properties, outletDefinition) => {
      return Object.assign(properties, propertiesForOutletDefinition(outletDefinition));
    }, {});
  }
  function getOutletController(controller, element, identifier) {
    return controller.application.getControllerForElementAndIdentifier(element, identifier);
  }
  function getControllerAndEnsureConnectedScope(controller, element, outletName) {
    let outletController = getOutletController(controller, element, outletName);
    if (outletController)
      return outletController;
    controller.application.router.proposeToConnectScopeForElementAndIdentifier(element, outletName);
    outletController = getOutletController(controller, element, outletName);
    if (outletController)
      return outletController;
  }
  function propertiesForOutletDefinition(name) {
    const camelizedName = namespaceCamelize(name);
    return {
      [`${camelizedName}Outlet`]: {
        get() {
          const outletElement = this.outlets.find(name);
          const selector = this.outlets.getSelectorForOutletName(name);
          if (outletElement) {
            const outletController = getControllerAndEnsureConnectedScope(this, outletElement, name);
            if (outletController)
              return outletController;
            throw new Error(`The provided outlet element is missing an outlet controller "${name}" instance for host controller "${this.identifier}"`);
          }
          throw new Error(`Missing outlet element "${name}" for host controller "${this.identifier}". Stimulus couldn't find a matching outlet element using selector "${selector}".`);
        }
      },
      [`${camelizedName}Outlets`]: {
        get() {
          const outlets = this.outlets.findAll(name);
          if (outlets.length > 0) {
            return outlets.map((outletElement) => {
              const outletController = getControllerAndEnsureConnectedScope(this, outletElement, name);
              if (outletController)
                return outletController;
              console.warn(`The provided outlet element is missing an outlet controller "${name}" instance for host controller "${this.identifier}"`, outletElement);
            }).filter((controller) => controller);
          }
          return [];
        }
      },
      [`${camelizedName}OutletElement`]: {
        get() {
          const outletElement = this.outlets.find(name);
          const selector = this.outlets.getSelectorForOutletName(name);
          if (outletElement) {
            return outletElement;
          } else {
            throw new Error(`Missing outlet element "${name}" for host controller "${this.identifier}". Stimulus couldn't find a matching outlet element using selector "${selector}".`);
          }
        }
      },
      [`${camelizedName}OutletElements`]: {
        get() {
          return this.outlets.findAll(name);
        }
      },
      [`has${capitalize(camelizedName)}Outlet`]: {
        get() {
          return this.outlets.has(name);
        }
      }
    };
  }
  function TargetPropertiesBlessing(constructor) {
    const targets = readInheritableStaticArrayValues(constructor, "targets");
    return targets.reduce((properties, targetDefinition) => {
      return Object.assign(properties, propertiesForTargetDefinition(targetDefinition));
    }, {});
  }
  function propertiesForTargetDefinition(name) {
    return {
      [`${name}Target`]: {
        get() {
          const target = this.targets.find(name);
          if (target) {
            return target;
          } else {
            throw new Error(`Missing target element "${name}" for "${this.identifier}" controller`);
          }
        }
      },
      [`${name}Targets`]: {
        get() {
          return this.targets.findAll(name);
        }
      },
      [`has${capitalize(name)}Target`]: {
        get() {
          return this.targets.has(name);
        }
      }
    };
  }
  function ValuePropertiesBlessing(constructor) {
    const valueDefinitionPairs = readInheritableStaticObjectPairs(constructor, "values");
    const propertyDescriptorMap = {
      valueDescriptorMap: {
        get() {
          return valueDefinitionPairs.reduce((result, valueDefinitionPair) => {
            const valueDescriptor = parseValueDefinitionPair(valueDefinitionPair, this.identifier);
            const attributeName = this.data.getAttributeNameForKey(valueDescriptor.key);
            return Object.assign(result, { [attributeName]: valueDescriptor });
          }, {});
        }
      }
    };
    return valueDefinitionPairs.reduce((properties, valueDefinitionPair) => {
      return Object.assign(properties, propertiesForValueDefinitionPair(valueDefinitionPair));
    }, propertyDescriptorMap);
  }
  function propertiesForValueDefinitionPair(valueDefinitionPair, controller) {
    const definition = parseValueDefinitionPair(valueDefinitionPair, controller);
    const { key, name, reader: read, writer: write } = definition;
    return {
      [name]: {
        get() {
          const value = this.data.get(key);
          if (value !== null) {
            return read(value);
          } else {
            return definition.defaultValue;
          }
        },
        set(value) {
          if (value === void 0) {
            this.data.delete(key);
          } else {
            this.data.set(key, write(value));
          }
        }
      },
      [`has${capitalize(name)}`]: {
        get() {
          return this.data.has(key) || definition.hasCustomDefaultValue;
        }
      }
    };
  }
  function parseValueDefinitionPair([token, typeDefinition], controller) {
    return valueDescriptorForTokenAndTypeDefinition({
      controller,
      token,
      typeDefinition
    });
  }
  function parseValueTypeConstant(constant) {
    switch (constant) {
      case Array:
        return "array";
      case Boolean:
        return "boolean";
      case Number:
        return "number";
      case Object:
        return "object";
      case String:
        return "string";
    }
  }
  function parseValueTypeDefault(defaultValue) {
    switch (typeof defaultValue) {
      case "boolean":
        return "boolean";
      case "number":
        return "number";
      case "string":
        return "string";
    }
    if (Array.isArray(defaultValue))
      return "array";
    if (Object.prototype.toString.call(defaultValue) === "[object Object]")
      return "object";
  }
  function parseValueTypeObject(payload) {
    const { controller, token, typeObject } = payload;
    const hasType = isSomething(typeObject.type);
    const hasDefault = isSomething(typeObject.default);
    const fullObject = hasType && hasDefault;
    const onlyType = hasType && !hasDefault;
    const onlyDefault = !hasType && hasDefault;
    const typeFromObject = parseValueTypeConstant(typeObject.type);
    const typeFromDefaultValue = parseValueTypeDefault(payload.typeObject.default);
    if (onlyType)
      return typeFromObject;
    if (onlyDefault)
      return typeFromDefaultValue;
    if (typeFromObject !== typeFromDefaultValue) {
      const propertyPath = controller ? `${controller}.${token}` : token;
      throw new Error(`The specified default value for the Stimulus Value "${propertyPath}" must match the defined type "${typeFromObject}". The provided default value of "${typeObject.default}" is of type "${typeFromDefaultValue}".`);
    }
    if (fullObject)
      return typeFromObject;
  }
  function parseValueTypeDefinition(payload) {
    const { controller, token, typeDefinition } = payload;
    const typeObject = { controller, token, typeObject: typeDefinition };
    const typeFromObject = parseValueTypeObject(typeObject);
    const typeFromDefaultValue = parseValueTypeDefault(typeDefinition);
    const typeFromConstant = parseValueTypeConstant(typeDefinition);
    const type = typeFromObject || typeFromDefaultValue || typeFromConstant;
    if (type)
      return type;
    const propertyPath = controller ? `${controller}.${typeDefinition}` : token;
    throw new Error(`Unknown value type "${propertyPath}" for "${token}" value`);
  }
  function defaultValueForDefinition(typeDefinition) {
    const constant = parseValueTypeConstant(typeDefinition);
    if (constant)
      return defaultValuesByType[constant];
    const hasDefault = hasProperty(typeDefinition, "default");
    const hasType = hasProperty(typeDefinition, "type");
    const typeObject = typeDefinition;
    if (hasDefault)
      return typeObject.default;
    if (hasType) {
      const { type } = typeObject;
      const constantFromType = parseValueTypeConstant(type);
      if (constantFromType)
        return defaultValuesByType[constantFromType];
    }
    return typeDefinition;
  }
  function valueDescriptorForTokenAndTypeDefinition(payload) {
    const { token, typeDefinition } = payload;
    const key = `${dasherize(token)}-value`;
    const type = parseValueTypeDefinition(payload);
    return {
      type,
      key,
      name: camelize(key),
      get defaultValue() {
        return defaultValueForDefinition(typeDefinition);
      },
      get hasCustomDefaultValue() {
        return parseValueTypeDefault(typeDefinition) !== void 0;
      },
      reader: readers[type],
      writer: writers[type] || writers.default
    };
  }
  var defaultValuesByType = {
    get array() {
      return [];
    },
    boolean: false,
    number: 0,
    get object() {
      return {};
    },
    string: ""
  };
  var readers = {
    array(value) {
      const array = JSON.parse(value);
      if (!Array.isArray(array)) {
        throw new TypeError(`expected value of type "array" but instead got value "${value}" of type "${parseValueTypeDefault(array)}"`);
      }
      return array;
    },
    boolean(value) {
      return !(value == "0" || String(value).toLowerCase() == "false");
    },
    number(value) {
      return Number(value.replace(/_/g, ""));
    },
    object(value) {
      const object = JSON.parse(value);
      if (object === null || typeof object != "object" || Array.isArray(object)) {
        throw new TypeError(`expected value of type "object" but instead got value "${value}" of type "${parseValueTypeDefault(object)}"`);
      }
      return object;
    },
    string(value) {
      return value;
    }
  };
  var writers = {
    default: writeString,
    array: writeJSON,
    object: writeJSON
  };
  function writeJSON(value) {
    return JSON.stringify(value);
  }
  function writeString(value) {
    return `${value}`;
  }
  var Controller = class {
    constructor(context) {
      this.context = context;
    }
    static get shouldLoad() {
      return true;
    }
    static afterLoad(_identifier, _application) {
      return;
    }
    get application() {
      return this.context.application;
    }
    get scope() {
      return this.context.scope;
    }
    get element() {
      return this.scope.element;
    }
    get identifier() {
      return this.scope.identifier;
    }
    get targets() {
      return this.scope.targets;
    }
    get outlets() {
      return this.scope.outlets;
    }
    get classes() {
      return this.scope.classes;
    }
    get data() {
      return this.scope.data;
    }
    initialize() {
    }
    connect() {
    }
    disconnect() {
    }
    dispatch(eventName, { target = this.element, detail = {}, prefix = this.identifier, bubbles = true, cancelable = true } = {}) {
      const type = prefix ? `${prefix}:${eventName}` : eventName;
      const event = new CustomEvent(type, { detail, bubbles, cancelable });
      target.dispatchEvent(event);
      return event;
    }
  };
  Controller.blessings = [
    ClassPropertiesBlessing,
    TargetPropertiesBlessing,
    ValuePropertiesBlessing,
    OutletPropertiesBlessing
  ];
  Controller.targets = [];
  Controller.outlets = [];
  Controller.values = {};

  // app/javascript/controllers/application.js
  var application = Application.start();
  application.debug = false;
  window.Stimulus = application;

  // app/javascript/controllers/auto_expand_text_area_controller.js
  var auto_expand_text_area_controller_default = class extends Controller {
    expand() {
      this.element.style.height = `${this.element.scrollHeight + 2}px`;
      if (this.element.scrollHeight > 60) {
        this.element.classList.remove("rounded-full");
        this.element.classList.add("rounded-lg");
      } else {
        this.resetTextarea();
      }
      if (this.element.value.trim() === "") {
        this.resetTextarea();
      }
    }
    resetTextarea() {
      this.element.style.height = "auto";
      this.element.classList.add("rounded-full");
      this.element.classList.remove("rounded-lg");
    }
  };

  // app/javascript/controllers/counter_input_controller.js
  var counter_input_controller_default = class extends Controller {
    static targets = ["value", "decrementBtn"];
    connect() {
      this.disableDecrementIfZero();
    }
    increment(event) {
      event.preventDefault();
      this.valueTarget.value = parseInt(this.valueTarget.value) + 1;
      this.disableDecrementIfZero();
    }
    decrement(event) {
      event.preventDefault();
      this.valueTarget.value = Math.max(parseInt(this.valueTarget.value) - 1, 0);
      this.disableDecrementIfZero();
    }
    disableDecrementIfZero() {
      if (this.decrementBtnTarget && this.valueTarget.value == 0) {
        this.decrementBtnTarget.classList.add("pointer-events-none", "opacity-50");
      } else {
        this.decrementBtnTarget.classList.remove(
          "pointer-events-none",
          "opacity-50"
        );
      }
    }
  };

  // app/javascript/controllers/dark_mode_controller.js
  var dark_mode_controller_default = class extends Controller {
    connect() {
      const prefersDark = window.matchMedia("(prefers-color-scheme: dark)");
      const handleSystemColorChange = (event) => {
        if (event.matches) {
          this.setDarkMode();
        } else {
          this.setLightMode();
        }
      };
      if (localStorage.theme === "dark" || !("theme" in localStorage) && prefersDark.matches) {
        this.setDarkMode();
      } else {
        this.setLightMode();
      }
      prefersDark.addListener(handleSystemColorChange);
    }
    toggle(event) {
      const selectedTheme = event.currentTarget.getAttribute("data-theme");
      if (selectedTheme === "dark") {
        this.setDarkMode();
      } else if (selectedTheme === "light") {
        this.setLightMode();
      } else {
        this.setSystemMode();
      }
    }
    setDarkMode() {
      document.documentElement.classList.add("dark");
      localStorage.theme = "dark";
    }
    setLightMode() {
      document.documentElement.classList.remove("dark");
      localStorage.theme = "light";
    }
    setSystemMode() {
      const prefersDark = window.matchMedia("(prefers-color-scheme: dark)");
      if (prefersDark.matches) {
        this.setDarkMode();
      } else {
        this.setLightMode();
      }
      delete localStorage.theme;
    }
  };

  // node_modules/flatpickr/dist/esm/types/options.js
  var HOOKS = [
    "onChange",
    "onClose",
    "onDayCreate",
    "onDestroy",
    "onKeyDown",
    "onMonthChange",
    "onOpen",
    "onParseConfig",
    "onReady",
    "onValueUpdate",
    "onYearChange",
    "onPreCalendarPosition"
  ];
  var defaults = {
    _disable: [],
    allowInput: false,
    allowInvalidPreload: false,
    altFormat: "F j, Y",
    altInput: false,
    altInputClass: "form-control input",
    animate: typeof window === "object" && window.navigator.userAgent.indexOf("MSIE") === -1,
    ariaDateFormat: "F j, Y",
    autoFillDefaultTime: true,
    clickOpens: true,
    closeOnSelect: true,
    conjunction: ", ",
    dateFormat: "Y-m-d",
    defaultHour: 12,
    defaultMinute: 0,
    defaultSeconds: 0,
    disable: [],
    disableMobile: false,
    enableSeconds: false,
    enableTime: false,
    errorHandler: function(err) {
      return typeof console !== "undefined" && console.warn(err);
    },
    getWeek: function(givenDate) {
      var date = new Date(givenDate.getTime());
      date.setHours(0, 0, 0, 0);
      date.setDate(date.getDate() + 3 - (date.getDay() + 6) % 7);
      var week1 = new Date(date.getFullYear(), 0, 4);
      return 1 + Math.round(((date.getTime() - week1.getTime()) / 864e5 - 3 + (week1.getDay() + 6) % 7) / 7);
    },
    hourIncrement: 1,
    ignoredFocusElements: [],
    inline: false,
    locale: "default",
    minuteIncrement: 5,
    mode: "single",
    monthSelectorType: "dropdown",
    nextArrow: "<svg version='1.1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' viewBox='0 0 17 17'><g></g><path d='M13.207 8.472l-7.854 7.854-0.707-0.707 7.146-7.146-7.146-7.148 0.707-0.707 7.854 7.854z' /></svg>",
    noCalendar: false,
    now: /* @__PURE__ */ new Date(),
    onChange: [],
    onClose: [],
    onDayCreate: [],
    onDestroy: [],
    onKeyDown: [],
    onMonthChange: [],
    onOpen: [],
    onParseConfig: [],
    onReady: [],
    onValueUpdate: [],
    onYearChange: [],
    onPreCalendarPosition: [],
    plugins: [],
    position: "auto",
    positionElement: void 0,
    prevArrow: "<svg version='1.1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' viewBox='0 0 17 17'><g></g><path d='M5.207 8.471l7.146 7.147-0.707 0.707-7.853-7.854 7.854-7.853 0.707 0.707-7.147 7.146z' /></svg>",
    shorthandCurrentMonth: false,
    showMonths: 1,
    static: false,
    time_24hr: false,
    weekNumbers: false,
    wrap: false
  };

  // node_modules/flatpickr/dist/esm/l10n/default.js
  var english = {
    weekdays: {
      shorthand: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
      longhand: [
        "Sunday",
        "Monday",
        "Tuesday",
        "Wednesday",
        "Thursday",
        "Friday",
        "Saturday"
      ]
    },
    months: {
      shorthand: [
        "Jan",
        "Feb",
        "Mar",
        "Apr",
        "May",
        "Jun",
        "Jul",
        "Aug",
        "Sep",
        "Oct",
        "Nov",
        "Dec"
      ],
      longhand: [
        "January",
        "February",
        "March",
        "April",
        "May",
        "June",
        "July",
        "August",
        "September",
        "October",
        "November",
        "December"
      ]
    },
    daysInMonth: [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31],
    firstDayOfWeek: 0,
    ordinal: function(nth) {
      var s2 = nth % 100;
      if (s2 > 3 && s2 < 21)
        return "th";
      switch (s2 % 10) {
        case 1:
          return "st";
        case 2:
          return "nd";
        case 3:
          return "rd";
        default:
          return "th";
      }
    },
    rangeSeparator: " to ",
    weekAbbreviation: "Wk",
    scrollTitle: "Scroll to increment",
    toggleTitle: "Click to toggle",
    amPM: ["AM", "PM"],
    yearAriaLabel: "Year",
    monthAriaLabel: "Month",
    hourAriaLabel: "Hour",
    minuteAriaLabel: "Minute",
    time_24hr: false
  };
  var default_default = english;

  // node_modules/flatpickr/dist/esm/utils/index.js
  var pad = function(number, length) {
    if (length === void 0) {
      length = 2;
    }
    return ("000" + number).slice(length * -1);
  };
  var int = function(bool) {
    return bool === true ? 1 : 0;
  };
  function debounce(fn2, wait) {
    var t2;
    return function() {
      var _this = this;
      var args = arguments;
      clearTimeout(t2);
      t2 = setTimeout(function() {
        return fn2.apply(_this, args);
      }, wait);
    };
  }
  var arrayify = function(obj) {
    return obj instanceof Array ? obj : [obj];
  };

  // node_modules/flatpickr/dist/esm/utils/dom.js
  function toggleClass(elem, className, bool) {
    if (bool === true)
      return elem.classList.add(className);
    elem.classList.remove(className);
  }
  function createElement(tag, className, content) {
    var e2 = window.document.createElement(tag);
    className = className || "";
    content = content || "";
    e2.className = className;
    if (content !== void 0)
      e2.textContent = content;
    return e2;
  }
  function clearNode(node) {
    while (node.firstChild)
      node.removeChild(node.firstChild);
  }
  function findParent(node, condition) {
    if (condition(node))
      return node;
    else if (node.parentNode)
      return findParent(node.parentNode, condition);
    return void 0;
  }
  function createNumberInput(inputClassName, opts) {
    var wrapper = createElement("div", "numInputWrapper"), numInput = createElement("input", "numInput " + inputClassName), arrowUp = createElement("span", "arrowUp"), arrowDown = createElement("span", "arrowDown");
    if (navigator.userAgent.indexOf("MSIE 9.0") === -1) {
      numInput.type = "number";
    } else {
      numInput.type = "text";
      numInput.pattern = "\\d*";
    }
    if (opts !== void 0)
      for (var key in opts)
        numInput.setAttribute(key, opts[key]);
    wrapper.appendChild(numInput);
    wrapper.appendChild(arrowUp);
    wrapper.appendChild(arrowDown);
    return wrapper;
  }
  function getEventTarget(event) {
    try {
      if (typeof event.composedPath === "function") {
        var path = event.composedPath();
        return path[0];
      }
      return event.target;
    } catch (error2) {
      return event.target;
    }
  }

  // node_modules/flatpickr/dist/esm/utils/formatting.js
  var doNothing = function() {
    return void 0;
  };
  var monthToStr = function(monthNumber, shorthand, locale) {
    return locale.months[shorthand ? "shorthand" : "longhand"][monthNumber];
  };
  var revFormat = {
    D: doNothing,
    F: function(dateObj, monthName, locale) {
      dateObj.setMonth(locale.months.longhand.indexOf(monthName));
    },
    G: function(dateObj, hour) {
      dateObj.setHours((dateObj.getHours() >= 12 ? 12 : 0) + parseFloat(hour));
    },
    H: function(dateObj, hour) {
      dateObj.setHours(parseFloat(hour));
    },
    J: function(dateObj, day) {
      dateObj.setDate(parseFloat(day));
    },
    K: function(dateObj, amPM, locale) {
      dateObj.setHours(dateObj.getHours() % 12 + 12 * int(new RegExp(locale.amPM[1], "i").test(amPM)));
    },
    M: function(dateObj, shortMonth, locale) {
      dateObj.setMonth(locale.months.shorthand.indexOf(shortMonth));
    },
    S: function(dateObj, seconds) {
      dateObj.setSeconds(parseFloat(seconds));
    },
    U: function(_2, unixSeconds) {
      return new Date(parseFloat(unixSeconds) * 1e3);
    },
    W: function(dateObj, weekNum, locale) {
      var weekNumber = parseInt(weekNum);
      var date = new Date(dateObj.getFullYear(), 0, 2 + (weekNumber - 1) * 7, 0, 0, 0, 0);
      date.setDate(date.getDate() - date.getDay() + locale.firstDayOfWeek);
      return date;
    },
    Y: function(dateObj, year) {
      dateObj.setFullYear(parseFloat(year));
    },
    Z: function(_2, ISODate) {
      return new Date(ISODate);
    },
    d: function(dateObj, day) {
      dateObj.setDate(parseFloat(day));
    },
    h: function(dateObj, hour) {
      dateObj.setHours((dateObj.getHours() >= 12 ? 12 : 0) + parseFloat(hour));
    },
    i: function(dateObj, minutes) {
      dateObj.setMinutes(parseFloat(minutes));
    },
    j: function(dateObj, day) {
      dateObj.setDate(parseFloat(day));
    },
    l: doNothing,
    m: function(dateObj, month) {
      dateObj.setMonth(parseFloat(month) - 1);
    },
    n: function(dateObj, month) {
      dateObj.setMonth(parseFloat(month) - 1);
    },
    s: function(dateObj, seconds) {
      dateObj.setSeconds(parseFloat(seconds));
    },
    u: function(_2, unixMillSeconds) {
      return new Date(parseFloat(unixMillSeconds));
    },
    w: doNothing,
    y: function(dateObj, year) {
      dateObj.setFullYear(2e3 + parseFloat(year));
    }
  };
  var tokenRegex = {
    D: "",
    F: "",
    G: "(\\d\\d|\\d)",
    H: "(\\d\\d|\\d)",
    J: "(\\d\\d|\\d)\\w+",
    K: "",
    M: "",
    S: "(\\d\\d|\\d)",
    U: "(.+)",
    W: "(\\d\\d|\\d)",
    Y: "(\\d{4})",
    Z: "(.+)",
    d: "(\\d\\d|\\d)",
    h: "(\\d\\d|\\d)",
    i: "(\\d\\d|\\d)",
    j: "(\\d\\d|\\d)",
    l: "",
    m: "(\\d\\d|\\d)",
    n: "(\\d\\d|\\d)",
    s: "(\\d\\d|\\d)",
    u: "(.+)",
    w: "(\\d\\d|\\d)",
    y: "(\\d{2})"
  };
  var formats = {
    Z: function(date) {
      return date.toISOString();
    },
    D: function(date, locale, options) {
      return locale.weekdays.shorthand[formats.w(date, locale, options)];
    },
    F: function(date, locale, options) {
      return monthToStr(formats.n(date, locale, options) - 1, false, locale);
    },
    G: function(date, locale, options) {
      return pad(formats.h(date, locale, options));
    },
    H: function(date) {
      return pad(date.getHours());
    },
    J: function(date, locale) {
      return locale.ordinal !== void 0 ? date.getDate() + locale.ordinal(date.getDate()) : date.getDate();
    },
    K: function(date, locale) {
      return locale.amPM[int(date.getHours() > 11)];
    },
    M: function(date, locale) {
      return monthToStr(date.getMonth(), true, locale);
    },
    S: function(date) {
      return pad(date.getSeconds());
    },
    U: function(date) {
      return date.getTime() / 1e3;
    },
    W: function(date, _2, options) {
      return options.getWeek(date);
    },
    Y: function(date) {
      return pad(date.getFullYear(), 4);
    },
    d: function(date) {
      return pad(date.getDate());
    },
    h: function(date) {
      return date.getHours() % 12 ? date.getHours() % 12 : 12;
    },
    i: function(date) {
      return pad(date.getMinutes());
    },
    j: function(date) {
      return date.getDate();
    },
    l: function(date, locale) {
      return locale.weekdays.longhand[date.getDay()];
    },
    m: function(date) {
      return pad(date.getMonth() + 1);
    },
    n: function(date) {
      return date.getMonth() + 1;
    },
    s: function(date) {
      return date.getSeconds();
    },
    u: function(date) {
      return date.getTime();
    },
    w: function(date) {
      return date.getDay();
    },
    y: function(date) {
      return String(date.getFullYear()).substring(2);
    }
  };

  // node_modules/flatpickr/dist/esm/utils/dates.js
  var createDateFormatter = function(_a) {
    var _b = _a.config, config = _b === void 0 ? defaults : _b, _c = _a.l10n, l10n = _c === void 0 ? english : _c, _d = _a.isMobile, isMobile = _d === void 0 ? false : _d;
    return function(dateObj, frmt, overrideLocale) {
      var locale = overrideLocale || l10n;
      if (config.formatDate !== void 0 && !isMobile) {
        return config.formatDate(dateObj, frmt, locale);
      }
      return frmt.split("").map(function(c2, i2, arr) {
        return formats[c2] && arr[i2 - 1] !== "\\" ? formats[c2](dateObj, locale, config) : c2 !== "\\" ? c2 : "";
      }).join("");
    };
  };
  var createDateParser = function(_a) {
    var _b = _a.config, config = _b === void 0 ? defaults : _b, _c = _a.l10n, l10n = _c === void 0 ? english : _c;
    return function(date, givenFormat, timeless, customLocale) {
      if (date !== 0 && !date)
        return void 0;
      var locale = customLocale || l10n;
      var parsedDate;
      var dateOrig = date;
      if (date instanceof Date)
        parsedDate = new Date(date.getTime());
      else if (typeof date !== "string" && date.toFixed !== void 0)
        parsedDate = new Date(date);
      else if (typeof date === "string") {
        var format = givenFormat || (config || defaults).dateFormat;
        var datestr = String(date).trim();
        if (datestr === "today") {
          parsedDate = /* @__PURE__ */ new Date();
          timeless = true;
        } else if (config && config.parseDate) {
          parsedDate = config.parseDate(date, format);
        } else if (/Z$/.test(datestr) || /GMT$/.test(datestr)) {
          parsedDate = new Date(date);
        } else {
          var matched = void 0, ops = [];
          for (var i2 = 0, matchIndex = 0, regexStr = ""; i2 < format.length; i2++) {
            var token = format[i2];
            var isBackSlash = token === "\\";
            var escaped = format[i2 - 1] === "\\" || isBackSlash;
            if (tokenRegex[token] && !escaped) {
              regexStr += tokenRegex[token];
              var match = new RegExp(regexStr).exec(date);
              if (match && (matched = true)) {
                ops[token !== "Y" ? "push" : "unshift"]({
                  fn: revFormat[token],
                  val: match[++matchIndex]
                });
              }
            } else if (!isBackSlash)
              regexStr += ".";
          }
          parsedDate = !config || !config.noCalendar ? new Date((/* @__PURE__ */ new Date()).getFullYear(), 0, 1, 0, 0, 0, 0) : new Date((/* @__PURE__ */ new Date()).setHours(0, 0, 0, 0));
          ops.forEach(function(_a2) {
            var fn2 = _a2.fn, val = _a2.val;
            return parsedDate = fn2(parsedDate, val, locale) || parsedDate;
          });
          parsedDate = matched ? parsedDate : void 0;
        }
      }
      if (!(parsedDate instanceof Date && !isNaN(parsedDate.getTime()))) {
        config.errorHandler(new Error("Invalid date provided: " + dateOrig));
        return void 0;
      }
      if (timeless === true)
        parsedDate.setHours(0, 0, 0, 0);
      return parsedDate;
    };
  };
  function compareDates(date1, date2, timeless) {
    if (timeless === void 0) {
      timeless = true;
    }
    if (timeless !== false) {
      return new Date(date1.getTime()).setHours(0, 0, 0, 0) - new Date(date2.getTime()).setHours(0, 0, 0, 0);
    }
    return date1.getTime() - date2.getTime();
  }
  var isBetween = function(ts, ts1, ts2) {
    return ts > Math.min(ts1, ts2) && ts < Math.max(ts1, ts2);
  };
  var calculateSecondsSinceMidnight = function(hours, minutes, seconds) {
    return hours * 3600 + minutes * 60 + seconds;
  };
  var parseSeconds = function(secondsSinceMidnight) {
    var hours = Math.floor(secondsSinceMidnight / 3600), minutes = (secondsSinceMidnight - hours * 3600) / 60;
    return [hours, minutes, secondsSinceMidnight - hours * 3600 - minutes * 60];
  };
  var duration = {
    DAY: 864e5
  };
  function getDefaultHours(config) {
    var hours = config.defaultHour;
    var minutes = config.defaultMinute;
    var seconds = config.defaultSeconds;
    if (config.minDate !== void 0) {
      var minHour = config.minDate.getHours();
      var minMinutes = config.minDate.getMinutes();
      var minSeconds = config.minDate.getSeconds();
      if (hours < minHour) {
        hours = minHour;
      }
      if (hours === minHour && minutes < minMinutes) {
        minutes = minMinutes;
      }
      if (hours === minHour && minutes === minMinutes && seconds < minSeconds)
        seconds = config.minDate.getSeconds();
    }
    if (config.maxDate !== void 0) {
      var maxHr = config.maxDate.getHours();
      var maxMinutes = config.maxDate.getMinutes();
      hours = Math.min(hours, maxHr);
      if (hours === maxHr)
        minutes = Math.min(maxMinutes, minutes);
      if (hours === maxHr && minutes === maxMinutes)
        seconds = config.maxDate.getSeconds();
    }
    return { hours, minutes, seconds };
  }

  // node_modules/flatpickr/dist/esm/utils/polyfills.js
  if (typeof Object.assign !== "function") {
    Object.assign = function(target) {
      var args = [];
      for (var _i2 = 1; _i2 < arguments.length; _i2++) {
        args[_i2 - 1] = arguments[_i2];
      }
      if (!target) {
        throw TypeError("Cannot convert undefined or null to object");
      }
      var _loop_1 = function(source2) {
        if (source2) {
          Object.keys(source2).forEach(function(key) {
            return target[key] = source2[key];
          });
        }
      };
      for (var _a = 0, args_1 = args; _a < args_1.length; _a++) {
        var source = args_1[_a];
        _loop_1(source);
      }
      return target;
    };
  }

  // node_modules/flatpickr/dist/esm/index.js
  var __assign = function() {
    __assign = Object.assign || function(t2) {
      for (var s2, i2 = 1, n2 = arguments.length; i2 < n2; i2++) {
        s2 = arguments[i2];
        for (var p2 in s2)
          if (Object.prototype.hasOwnProperty.call(s2, p2))
            t2[p2] = s2[p2];
      }
      return t2;
    };
    return __assign.apply(this, arguments);
  };
  var __spreadArrays = function() {
    for (var s2 = 0, i2 = 0, il = arguments.length; i2 < il; i2++)
      s2 += arguments[i2].length;
    for (var r2 = Array(s2), k2 = 0, i2 = 0; i2 < il; i2++)
      for (var a2 = arguments[i2], j2 = 0, jl = a2.length; j2 < jl; j2++, k2++)
        r2[k2] = a2[j2];
    return r2;
  };
  var DEBOUNCED_CHANGE_MS = 300;
  function FlatpickrInstance(element, instanceConfig) {
    var self = {
      config: __assign(__assign({}, defaults), flatpickr.defaultConfig),
      l10n: default_default
    };
    self.parseDate = createDateParser({ config: self.config, l10n: self.l10n });
    self._handlers = [];
    self.pluginElements = [];
    self.loadedPlugins = [];
    self._bind = bind;
    self._setHoursFromDate = setHoursFromDate;
    self._positionCalendar = positionCalendar;
    self.changeMonth = changeMonth;
    self.changeYear = changeYear;
    self.clear = clear;
    self.close = close;
    self.onMouseOver = onMouseOver;
    self._createElement = createElement;
    self.createDay = createDay;
    self.destroy = destroy;
    self.isEnabled = isEnabled;
    self.jumpToDate = jumpToDate;
    self.updateValue = updateValue;
    self.open = open;
    self.redraw = redraw;
    self.set = set;
    self.setDate = setDate;
    self.toggle = toggle;
    function setupHelperFunctions() {
      self.utils = {
        getDaysInMonth: function(month, yr) {
          if (month === void 0) {
            month = self.currentMonth;
          }
          if (yr === void 0) {
            yr = self.currentYear;
          }
          if (month === 1 && (yr % 4 === 0 && yr % 100 !== 0 || yr % 400 === 0))
            return 29;
          return self.l10n.daysInMonth[month];
        }
      };
    }
    function init() {
      self.element = self.input = element;
      self.isOpen = false;
      parseConfig();
      setupLocale();
      setupInputs();
      setupDates();
      setupHelperFunctions();
      if (!self.isMobile)
        build();
      bindEvents();
      if (self.selectedDates.length || self.config.noCalendar) {
        if (self.config.enableTime) {
          setHoursFromDate(self.config.noCalendar ? self.latestSelectedDateObj : void 0);
        }
        updateValue(false);
      }
      setCalendarWidth();
      var isSafari3 = /^((?!chrome|android).)*safari/i.test(navigator.userAgent);
      if (!self.isMobile && isSafari3) {
        positionCalendar();
      }
      triggerEvent("onReady");
    }
    function getClosestActiveElement() {
      var _a;
      return ((_a = self.calendarContainer) === null || _a === void 0 ? void 0 : _a.getRootNode()).activeElement || document.activeElement;
    }
    function bindToInstance(fn2) {
      return fn2.bind(self);
    }
    function setCalendarWidth() {
      var config = self.config;
      if (config.weekNumbers === false && config.showMonths === 1) {
        return;
      } else if (config.noCalendar !== true) {
        window.requestAnimationFrame(function() {
          if (self.calendarContainer !== void 0) {
            self.calendarContainer.style.visibility = "hidden";
            self.calendarContainer.style.display = "block";
          }
          if (self.daysContainer !== void 0) {
            var daysWidth = (self.days.offsetWidth + 1) * config.showMonths;
            self.daysContainer.style.width = daysWidth + "px";
            self.calendarContainer.style.width = daysWidth + (self.weekWrapper !== void 0 ? self.weekWrapper.offsetWidth : 0) + "px";
            self.calendarContainer.style.removeProperty("visibility");
            self.calendarContainer.style.removeProperty("display");
          }
        });
      }
    }
    function updateTime(e2) {
      if (self.selectedDates.length === 0) {
        var defaultDate = self.config.minDate === void 0 || compareDates(/* @__PURE__ */ new Date(), self.config.minDate) >= 0 ? /* @__PURE__ */ new Date() : new Date(self.config.minDate.getTime());
        var defaults2 = getDefaultHours(self.config);
        defaultDate.setHours(defaults2.hours, defaults2.minutes, defaults2.seconds, defaultDate.getMilliseconds());
        self.selectedDates = [defaultDate];
        self.latestSelectedDateObj = defaultDate;
      }
      if (e2 !== void 0 && e2.type !== "blur") {
        timeWrapper(e2);
      }
      var prevValue = self._input.value;
      setHoursFromInputs();
      updateValue();
      if (self._input.value !== prevValue) {
        self._debouncedChange();
      }
    }
    function ampm2military(hour, amPM) {
      return hour % 12 + 12 * int(amPM === self.l10n.amPM[1]);
    }
    function military2ampm(hour) {
      switch (hour % 24) {
        case 0:
        case 12:
          return 12;
        default:
          return hour % 12;
      }
    }
    function setHoursFromInputs() {
      if (self.hourElement === void 0 || self.minuteElement === void 0)
        return;
      var hours = (parseInt(self.hourElement.value.slice(-2), 10) || 0) % 24, minutes = (parseInt(self.minuteElement.value, 10) || 0) % 60, seconds = self.secondElement !== void 0 ? (parseInt(self.secondElement.value, 10) || 0) % 60 : 0;
      if (self.amPM !== void 0) {
        hours = ampm2military(hours, self.amPM.textContent);
      }
      var limitMinHours = self.config.minTime !== void 0 || self.config.minDate && self.minDateHasTime && self.latestSelectedDateObj && compareDates(self.latestSelectedDateObj, self.config.minDate, true) === 0;
      var limitMaxHours = self.config.maxTime !== void 0 || self.config.maxDate && self.maxDateHasTime && self.latestSelectedDateObj && compareDates(self.latestSelectedDateObj, self.config.maxDate, true) === 0;
      if (self.config.maxTime !== void 0 && self.config.minTime !== void 0 && self.config.minTime > self.config.maxTime) {
        var minBound = calculateSecondsSinceMidnight(self.config.minTime.getHours(), self.config.minTime.getMinutes(), self.config.minTime.getSeconds());
        var maxBound = calculateSecondsSinceMidnight(self.config.maxTime.getHours(), self.config.maxTime.getMinutes(), self.config.maxTime.getSeconds());
        var currentTime = calculateSecondsSinceMidnight(hours, minutes, seconds);
        if (currentTime > maxBound && currentTime < minBound) {
          var result = parseSeconds(minBound);
          hours = result[0];
          minutes = result[1];
          seconds = result[2];
        }
      } else {
        if (limitMaxHours) {
          var maxTime = self.config.maxTime !== void 0 ? self.config.maxTime : self.config.maxDate;
          hours = Math.min(hours, maxTime.getHours());
          if (hours === maxTime.getHours())
            minutes = Math.min(minutes, maxTime.getMinutes());
          if (minutes === maxTime.getMinutes())
            seconds = Math.min(seconds, maxTime.getSeconds());
        }
        if (limitMinHours) {
          var minTime = self.config.minTime !== void 0 ? self.config.minTime : self.config.minDate;
          hours = Math.max(hours, minTime.getHours());
          if (hours === minTime.getHours() && minutes < minTime.getMinutes())
            minutes = minTime.getMinutes();
          if (minutes === minTime.getMinutes())
            seconds = Math.max(seconds, minTime.getSeconds());
        }
      }
      setHours(hours, minutes, seconds);
    }
    function setHoursFromDate(dateObj) {
      var date = dateObj || self.latestSelectedDateObj;
      if (date && date instanceof Date) {
        setHours(date.getHours(), date.getMinutes(), date.getSeconds());
      }
    }
    function setHours(hours, minutes, seconds) {
      if (self.latestSelectedDateObj !== void 0) {
        self.latestSelectedDateObj.setHours(hours % 24, minutes, seconds || 0, 0);
      }
      if (!self.hourElement || !self.minuteElement || self.isMobile)
        return;
      self.hourElement.value = pad(!self.config.time_24hr ? (12 + hours) % 12 + 12 * int(hours % 12 === 0) : hours);
      self.minuteElement.value = pad(minutes);
      if (self.amPM !== void 0)
        self.amPM.textContent = self.l10n.amPM[int(hours >= 12)];
      if (self.secondElement !== void 0)
        self.secondElement.value = pad(seconds);
    }
    function onYearInput(event) {
      var eventTarget = getEventTarget(event);
      var year = parseInt(eventTarget.value) + (event.delta || 0);
      if (year / 1e3 > 1 || event.key === "Enter" && !/[^\d]/.test(year.toString())) {
        changeYear(year);
      }
    }
    function bind(element2, event, handler, options) {
      if (event instanceof Array)
        return event.forEach(function(ev) {
          return bind(element2, ev, handler, options);
        });
      if (element2 instanceof Array)
        return element2.forEach(function(el) {
          return bind(el, event, handler, options);
        });
      element2.addEventListener(event, handler, options);
      self._handlers.push({
        remove: function() {
          return element2.removeEventListener(event, handler, options);
        }
      });
    }
    function triggerChange() {
      triggerEvent("onChange");
    }
    function bindEvents() {
      if (self.config.wrap) {
        ["open", "close", "toggle", "clear"].forEach(function(evt) {
          Array.prototype.forEach.call(self.element.querySelectorAll("[data-" + evt + "]"), function(el) {
            return bind(el, "click", self[evt]);
          });
        });
      }
      if (self.isMobile) {
        setupMobile();
        return;
      }
      var debouncedResize = debounce(onResize, 50);
      self._debouncedChange = debounce(triggerChange, DEBOUNCED_CHANGE_MS);
      if (self.daysContainer && !/iPhone|iPad|iPod/i.test(navigator.userAgent))
        bind(self.daysContainer, "mouseover", function(e2) {
          if (self.config.mode === "range")
            onMouseOver(getEventTarget(e2));
        });
      bind(self._input, "keydown", onKeyDown);
      if (self.calendarContainer !== void 0) {
        bind(self.calendarContainer, "keydown", onKeyDown);
      }
      if (!self.config.inline && !self.config.static)
        bind(window, "resize", debouncedResize);
      if (window.ontouchstart !== void 0)
        bind(window.document, "touchstart", documentClick);
      else
        bind(window.document, "mousedown", documentClick);
      bind(window.document, "focus", documentClick, { capture: true });
      if (self.config.clickOpens === true) {
        bind(self._input, "focus", self.open);
        bind(self._input, "click", self.open);
      }
      if (self.daysContainer !== void 0) {
        bind(self.monthNav, "click", onMonthNavClick);
        bind(self.monthNav, ["keyup", "increment"], onYearInput);
        bind(self.daysContainer, "click", selectDate);
      }
      if (self.timeContainer !== void 0 && self.minuteElement !== void 0 && self.hourElement !== void 0) {
        var selText = function(e2) {
          return getEventTarget(e2).select();
        };
        bind(self.timeContainer, ["increment"], updateTime);
        bind(self.timeContainer, "blur", updateTime, { capture: true });
        bind(self.timeContainer, "click", timeIncrement);
        bind([self.hourElement, self.minuteElement], ["focus", "click"], selText);
        if (self.secondElement !== void 0)
          bind(self.secondElement, "focus", function() {
            return self.secondElement && self.secondElement.select();
          });
        if (self.amPM !== void 0) {
          bind(self.amPM, "click", function(e2) {
            updateTime(e2);
          });
        }
      }
      if (self.config.allowInput) {
        bind(self._input, "blur", onBlur);
      }
    }
    function jumpToDate(jumpDate, triggerChange2) {
      var jumpTo = jumpDate !== void 0 ? self.parseDate(jumpDate) : self.latestSelectedDateObj || (self.config.minDate && self.config.minDate > self.now ? self.config.minDate : self.config.maxDate && self.config.maxDate < self.now ? self.config.maxDate : self.now);
      var oldYear = self.currentYear;
      var oldMonth = self.currentMonth;
      try {
        if (jumpTo !== void 0) {
          self.currentYear = jumpTo.getFullYear();
          self.currentMonth = jumpTo.getMonth();
        }
      } catch (e2) {
        e2.message = "Invalid date supplied: " + jumpTo;
        self.config.errorHandler(e2);
      }
      if (triggerChange2 && self.currentYear !== oldYear) {
        triggerEvent("onYearChange");
        buildMonthSwitch();
      }
      if (triggerChange2 && (self.currentYear !== oldYear || self.currentMonth !== oldMonth)) {
        triggerEvent("onMonthChange");
      }
      self.redraw();
    }
    function timeIncrement(e2) {
      var eventTarget = getEventTarget(e2);
      if (~eventTarget.className.indexOf("arrow"))
        incrementNumInput(e2, eventTarget.classList.contains("arrowUp") ? 1 : -1);
    }
    function incrementNumInput(e2, delta, inputElem) {
      var target = e2 && getEventTarget(e2);
      var input = inputElem || target && target.parentNode && target.parentNode.firstChild;
      var event = createEvent("increment");
      event.delta = delta;
      input && input.dispatchEvent(event);
    }
    function build() {
      var fragment = window.document.createDocumentFragment();
      self.calendarContainer = createElement("div", "flatpickr-calendar");
      self.calendarContainer.tabIndex = -1;
      if (!self.config.noCalendar) {
        fragment.appendChild(buildMonthNav());
        self.innerContainer = createElement("div", "flatpickr-innerContainer");
        if (self.config.weekNumbers) {
          var _a = buildWeeks(), weekWrapper = _a.weekWrapper, weekNumbers = _a.weekNumbers;
          self.innerContainer.appendChild(weekWrapper);
          self.weekNumbers = weekNumbers;
          self.weekWrapper = weekWrapper;
        }
        self.rContainer = createElement("div", "flatpickr-rContainer");
        self.rContainer.appendChild(buildWeekdays());
        if (!self.daysContainer) {
          self.daysContainer = createElement("div", "flatpickr-days");
          self.daysContainer.tabIndex = -1;
        }
        buildDays();
        self.rContainer.appendChild(self.daysContainer);
        self.innerContainer.appendChild(self.rContainer);
        fragment.appendChild(self.innerContainer);
      }
      if (self.config.enableTime) {
        fragment.appendChild(buildTime());
      }
      toggleClass(self.calendarContainer, "rangeMode", self.config.mode === "range");
      toggleClass(self.calendarContainer, "animate", self.config.animate === true);
      toggleClass(self.calendarContainer, "multiMonth", self.config.showMonths > 1);
      self.calendarContainer.appendChild(fragment);
      var customAppend = self.config.appendTo !== void 0 && self.config.appendTo.nodeType !== void 0;
      if (self.config.inline || self.config.static) {
        self.calendarContainer.classList.add(self.config.inline ? "inline" : "static");
        if (self.config.inline) {
          if (!customAppend && self.element.parentNode)
            self.element.parentNode.insertBefore(self.calendarContainer, self._input.nextSibling);
          else if (self.config.appendTo !== void 0)
            self.config.appendTo.appendChild(self.calendarContainer);
        }
        if (self.config.static) {
          var wrapper = createElement("div", "flatpickr-wrapper");
          if (self.element.parentNode)
            self.element.parentNode.insertBefore(wrapper, self.element);
          wrapper.appendChild(self.element);
          if (self.altInput)
            wrapper.appendChild(self.altInput);
          wrapper.appendChild(self.calendarContainer);
        }
      }
      if (!self.config.static && !self.config.inline)
        (self.config.appendTo !== void 0 ? self.config.appendTo : window.document.body).appendChild(self.calendarContainer);
    }
    function createDay(className, date, _dayNumber, i2) {
      var dateIsEnabled = isEnabled(date, true), dayElement = createElement("span", className, date.getDate().toString());
      dayElement.dateObj = date;
      dayElement.$i = i2;
      dayElement.setAttribute("aria-label", self.formatDate(date, self.config.ariaDateFormat));
      if (className.indexOf("hidden") === -1 && compareDates(date, self.now) === 0) {
        self.todayDateElem = dayElement;
        dayElement.classList.add("today");
        dayElement.setAttribute("aria-current", "date");
      }
      if (dateIsEnabled) {
        dayElement.tabIndex = -1;
        if (isDateSelected(date)) {
          dayElement.classList.add("selected");
          self.selectedDateElem = dayElement;
          if (self.config.mode === "range") {
            toggleClass(dayElement, "startRange", self.selectedDates[0] && compareDates(date, self.selectedDates[0], true) === 0);
            toggleClass(dayElement, "endRange", self.selectedDates[1] && compareDates(date, self.selectedDates[1], true) === 0);
            if (className === "nextMonthDay")
              dayElement.classList.add("inRange");
          }
        }
      } else {
        dayElement.classList.add("flatpickr-disabled");
      }
      if (self.config.mode === "range") {
        if (isDateInRange(date) && !isDateSelected(date))
          dayElement.classList.add("inRange");
      }
      if (self.weekNumbers && self.config.showMonths === 1 && className !== "prevMonthDay" && i2 % 7 === 6) {
        self.weekNumbers.insertAdjacentHTML("beforeend", "<span class='flatpickr-day'>" + self.config.getWeek(date) + "</span>");
      }
      triggerEvent("onDayCreate", dayElement);
      return dayElement;
    }
    function focusOnDayElem(targetNode) {
      targetNode.focus();
      if (self.config.mode === "range")
        onMouseOver(targetNode);
    }
    function getFirstAvailableDay(delta) {
      var startMonth = delta > 0 ? 0 : self.config.showMonths - 1;
      var endMonth = delta > 0 ? self.config.showMonths : -1;
      for (var m2 = startMonth; m2 != endMonth; m2 += delta) {
        var month = self.daysContainer.children[m2];
        var startIndex = delta > 0 ? 0 : month.children.length - 1;
        var endIndex = delta > 0 ? month.children.length : -1;
        for (var i2 = startIndex; i2 != endIndex; i2 += delta) {
          var c2 = month.children[i2];
          if (c2.className.indexOf("hidden") === -1 && isEnabled(c2.dateObj))
            return c2;
        }
      }
      return void 0;
    }
    function getNextAvailableDay(current, delta) {
      var givenMonth = current.className.indexOf("Month") === -1 ? current.dateObj.getMonth() : self.currentMonth;
      var endMonth = delta > 0 ? self.config.showMonths : -1;
      var loopDelta = delta > 0 ? 1 : -1;
      for (var m2 = givenMonth - self.currentMonth; m2 != endMonth; m2 += loopDelta) {
        var month = self.daysContainer.children[m2];
        var startIndex = givenMonth - self.currentMonth === m2 ? current.$i + delta : delta < 0 ? month.children.length - 1 : 0;
        var numMonthDays = month.children.length;
        for (var i2 = startIndex; i2 >= 0 && i2 < numMonthDays && i2 != (delta > 0 ? numMonthDays : -1); i2 += loopDelta) {
          var c2 = month.children[i2];
          if (c2.className.indexOf("hidden") === -1 && isEnabled(c2.dateObj) && Math.abs(current.$i - i2) >= Math.abs(delta))
            return focusOnDayElem(c2);
        }
      }
      self.changeMonth(loopDelta);
      focusOnDay(getFirstAvailableDay(loopDelta), 0);
      return void 0;
    }
    function focusOnDay(current, offset) {
      var activeElement = getClosestActiveElement();
      var dayFocused = isInView(activeElement || document.body);
      var startElem = current !== void 0 ? current : dayFocused ? activeElement : self.selectedDateElem !== void 0 && isInView(self.selectedDateElem) ? self.selectedDateElem : self.todayDateElem !== void 0 && isInView(self.todayDateElem) ? self.todayDateElem : getFirstAvailableDay(offset > 0 ? 1 : -1);
      if (startElem === void 0) {
        self._input.focus();
      } else if (!dayFocused) {
        focusOnDayElem(startElem);
      } else {
        getNextAvailableDay(startElem, offset);
      }
    }
    function buildMonthDays(year, month) {
      var firstOfMonth = (new Date(year, month, 1).getDay() - self.l10n.firstDayOfWeek + 7) % 7;
      var prevMonthDays = self.utils.getDaysInMonth((month - 1 + 12) % 12, year);
      var daysInMonth = self.utils.getDaysInMonth(month, year), days = window.document.createDocumentFragment(), isMultiMonth = self.config.showMonths > 1, prevMonthDayClass = isMultiMonth ? "prevMonthDay hidden" : "prevMonthDay", nextMonthDayClass = isMultiMonth ? "nextMonthDay hidden" : "nextMonthDay";
      var dayNumber = prevMonthDays + 1 - firstOfMonth, dayIndex = 0;
      for (; dayNumber <= prevMonthDays; dayNumber++, dayIndex++) {
        days.appendChild(createDay("flatpickr-day " + prevMonthDayClass, new Date(year, month - 1, dayNumber), dayNumber, dayIndex));
      }
      for (dayNumber = 1; dayNumber <= daysInMonth; dayNumber++, dayIndex++) {
        days.appendChild(createDay("flatpickr-day", new Date(year, month, dayNumber), dayNumber, dayIndex));
      }
      for (var dayNum = daysInMonth + 1; dayNum <= 42 - firstOfMonth && (self.config.showMonths === 1 || dayIndex % 7 !== 0); dayNum++, dayIndex++) {
        days.appendChild(createDay("flatpickr-day " + nextMonthDayClass, new Date(year, month + 1, dayNum % daysInMonth), dayNum, dayIndex));
      }
      var dayContainer = createElement("div", "dayContainer");
      dayContainer.appendChild(days);
      return dayContainer;
    }
    function buildDays() {
      if (self.daysContainer === void 0) {
        return;
      }
      clearNode(self.daysContainer);
      if (self.weekNumbers)
        clearNode(self.weekNumbers);
      var frag = document.createDocumentFragment();
      for (var i2 = 0; i2 < self.config.showMonths; i2++) {
        var d2 = new Date(self.currentYear, self.currentMonth, 1);
        d2.setMonth(self.currentMonth + i2);
        frag.appendChild(buildMonthDays(d2.getFullYear(), d2.getMonth()));
      }
      self.daysContainer.appendChild(frag);
      self.days = self.daysContainer.firstChild;
      if (self.config.mode === "range" && self.selectedDates.length === 1) {
        onMouseOver();
      }
    }
    function buildMonthSwitch() {
      if (self.config.showMonths > 1 || self.config.monthSelectorType !== "dropdown")
        return;
      var shouldBuildMonth = function(month2) {
        if (self.config.minDate !== void 0 && self.currentYear === self.config.minDate.getFullYear() && month2 < self.config.minDate.getMonth()) {
          return false;
        }
        return !(self.config.maxDate !== void 0 && self.currentYear === self.config.maxDate.getFullYear() && month2 > self.config.maxDate.getMonth());
      };
      self.monthsDropdownContainer.tabIndex = -1;
      self.monthsDropdownContainer.innerHTML = "";
      for (var i2 = 0; i2 < 12; i2++) {
        if (!shouldBuildMonth(i2))
          continue;
        var month = createElement("option", "flatpickr-monthDropdown-month");
        month.value = new Date(self.currentYear, i2).getMonth().toString();
        month.textContent = monthToStr(i2, self.config.shorthandCurrentMonth, self.l10n);
        month.tabIndex = -1;
        if (self.currentMonth === i2) {
          month.selected = true;
        }
        self.monthsDropdownContainer.appendChild(month);
      }
    }
    function buildMonth() {
      var container = createElement("div", "flatpickr-month");
      var monthNavFragment = window.document.createDocumentFragment();
      var monthElement;
      if (self.config.showMonths > 1 || self.config.monthSelectorType === "static") {
        monthElement = createElement("span", "cur-month");
      } else {
        self.monthsDropdownContainer = createElement("select", "flatpickr-monthDropdown-months");
        self.monthsDropdownContainer.setAttribute("aria-label", self.l10n.monthAriaLabel);
        bind(self.monthsDropdownContainer, "change", function(e2) {
          var target = getEventTarget(e2);
          var selectedMonth = parseInt(target.value, 10);
          self.changeMonth(selectedMonth - self.currentMonth);
          triggerEvent("onMonthChange");
        });
        buildMonthSwitch();
        monthElement = self.monthsDropdownContainer;
      }
      var yearInput = createNumberInput("cur-year", { tabindex: "-1" });
      var yearElement = yearInput.getElementsByTagName("input")[0];
      yearElement.setAttribute("aria-label", self.l10n.yearAriaLabel);
      if (self.config.minDate) {
        yearElement.setAttribute("min", self.config.minDate.getFullYear().toString());
      }
      if (self.config.maxDate) {
        yearElement.setAttribute("max", self.config.maxDate.getFullYear().toString());
        yearElement.disabled = !!self.config.minDate && self.config.minDate.getFullYear() === self.config.maxDate.getFullYear();
      }
      var currentMonth = createElement("div", "flatpickr-current-month");
      currentMonth.appendChild(monthElement);
      currentMonth.appendChild(yearInput);
      monthNavFragment.appendChild(currentMonth);
      container.appendChild(monthNavFragment);
      return {
        container,
        yearElement,
        monthElement
      };
    }
    function buildMonths() {
      clearNode(self.monthNav);
      self.monthNav.appendChild(self.prevMonthNav);
      if (self.config.showMonths) {
        self.yearElements = [];
        self.monthElements = [];
      }
      for (var m2 = self.config.showMonths; m2--; ) {
        var month = buildMonth();
        self.yearElements.push(month.yearElement);
        self.monthElements.push(month.monthElement);
        self.monthNav.appendChild(month.container);
      }
      self.monthNav.appendChild(self.nextMonthNav);
    }
    function buildMonthNav() {
      self.monthNav = createElement("div", "flatpickr-months");
      self.yearElements = [];
      self.monthElements = [];
      self.prevMonthNav = createElement("span", "flatpickr-prev-month");
      self.prevMonthNav.innerHTML = self.config.prevArrow;
      self.nextMonthNav = createElement("span", "flatpickr-next-month");
      self.nextMonthNav.innerHTML = self.config.nextArrow;
      buildMonths();
      Object.defineProperty(self, "_hidePrevMonthArrow", {
        get: function() {
          return self.__hidePrevMonthArrow;
        },
        set: function(bool) {
          if (self.__hidePrevMonthArrow !== bool) {
            toggleClass(self.prevMonthNav, "flatpickr-disabled", bool);
            self.__hidePrevMonthArrow = bool;
          }
        }
      });
      Object.defineProperty(self, "_hideNextMonthArrow", {
        get: function() {
          return self.__hideNextMonthArrow;
        },
        set: function(bool) {
          if (self.__hideNextMonthArrow !== bool) {
            toggleClass(self.nextMonthNav, "flatpickr-disabled", bool);
            self.__hideNextMonthArrow = bool;
          }
        }
      });
      self.currentYearElement = self.yearElements[0];
      updateNavigationCurrentMonth();
      return self.monthNav;
    }
    function buildTime() {
      self.calendarContainer.classList.add("hasTime");
      if (self.config.noCalendar)
        self.calendarContainer.classList.add("noCalendar");
      var defaults2 = getDefaultHours(self.config);
      self.timeContainer = createElement("div", "flatpickr-time");
      self.timeContainer.tabIndex = -1;
      var separator = createElement("span", "flatpickr-time-separator", ":");
      var hourInput = createNumberInput("flatpickr-hour", {
        "aria-label": self.l10n.hourAriaLabel
      });
      self.hourElement = hourInput.getElementsByTagName("input")[0];
      var minuteInput = createNumberInput("flatpickr-minute", {
        "aria-label": self.l10n.minuteAriaLabel
      });
      self.minuteElement = minuteInput.getElementsByTagName("input")[0];
      self.hourElement.tabIndex = self.minuteElement.tabIndex = -1;
      self.hourElement.value = pad(self.latestSelectedDateObj ? self.latestSelectedDateObj.getHours() : self.config.time_24hr ? defaults2.hours : military2ampm(defaults2.hours));
      self.minuteElement.value = pad(self.latestSelectedDateObj ? self.latestSelectedDateObj.getMinutes() : defaults2.minutes);
      self.hourElement.setAttribute("step", self.config.hourIncrement.toString());
      self.minuteElement.setAttribute("step", self.config.minuteIncrement.toString());
      self.hourElement.setAttribute("min", self.config.time_24hr ? "0" : "1");
      self.hourElement.setAttribute("max", self.config.time_24hr ? "23" : "12");
      self.hourElement.setAttribute("maxlength", "2");
      self.minuteElement.setAttribute("min", "0");
      self.minuteElement.setAttribute("max", "59");
      self.minuteElement.setAttribute("maxlength", "2");
      self.timeContainer.appendChild(hourInput);
      self.timeContainer.appendChild(separator);
      self.timeContainer.appendChild(minuteInput);
      if (self.config.time_24hr)
        self.timeContainer.classList.add("time24hr");
      if (self.config.enableSeconds) {
        self.timeContainer.classList.add("hasSeconds");
        var secondInput = createNumberInput("flatpickr-second");
        self.secondElement = secondInput.getElementsByTagName("input")[0];
        self.secondElement.value = pad(self.latestSelectedDateObj ? self.latestSelectedDateObj.getSeconds() : defaults2.seconds);
        self.secondElement.setAttribute("step", self.minuteElement.getAttribute("step"));
        self.secondElement.setAttribute("min", "0");
        self.secondElement.setAttribute("max", "59");
        self.secondElement.setAttribute("maxlength", "2");
        self.timeContainer.appendChild(createElement("span", "flatpickr-time-separator", ":"));
        self.timeContainer.appendChild(secondInput);
      }
      if (!self.config.time_24hr) {
        self.amPM = createElement("span", "flatpickr-am-pm", self.l10n.amPM[int((self.latestSelectedDateObj ? self.hourElement.value : self.config.defaultHour) > 11)]);
        self.amPM.title = self.l10n.toggleTitle;
        self.amPM.tabIndex = -1;
        self.timeContainer.appendChild(self.amPM);
      }
      return self.timeContainer;
    }
    function buildWeekdays() {
      if (!self.weekdayContainer)
        self.weekdayContainer = createElement("div", "flatpickr-weekdays");
      else
        clearNode(self.weekdayContainer);
      for (var i2 = self.config.showMonths; i2--; ) {
        var container = createElement("div", "flatpickr-weekdaycontainer");
        self.weekdayContainer.appendChild(container);
      }
      updateWeekdays();
      return self.weekdayContainer;
    }
    function updateWeekdays() {
      if (!self.weekdayContainer) {
        return;
      }
      var firstDayOfWeek = self.l10n.firstDayOfWeek;
      var weekdays = __spreadArrays(self.l10n.weekdays.shorthand);
      if (firstDayOfWeek > 0 && firstDayOfWeek < weekdays.length) {
        weekdays = __spreadArrays(weekdays.splice(firstDayOfWeek, weekdays.length), weekdays.splice(0, firstDayOfWeek));
      }
      for (var i2 = self.config.showMonths; i2--; ) {
        self.weekdayContainer.children[i2].innerHTML = "\n      <span class='flatpickr-weekday'>\n        " + weekdays.join("</span><span class='flatpickr-weekday'>") + "\n      </span>\n      ";
      }
    }
    function buildWeeks() {
      self.calendarContainer.classList.add("hasWeeks");
      var weekWrapper = createElement("div", "flatpickr-weekwrapper");
      weekWrapper.appendChild(createElement("span", "flatpickr-weekday", self.l10n.weekAbbreviation));
      var weekNumbers = createElement("div", "flatpickr-weeks");
      weekWrapper.appendChild(weekNumbers);
      return {
        weekWrapper,
        weekNumbers
      };
    }
    function changeMonth(value, isOffset) {
      if (isOffset === void 0) {
        isOffset = true;
      }
      var delta = isOffset ? value : value - self.currentMonth;
      if (delta < 0 && self._hidePrevMonthArrow === true || delta > 0 && self._hideNextMonthArrow === true)
        return;
      self.currentMonth += delta;
      if (self.currentMonth < 0 || self.currentMonth > 11) {
        self.currentYear += self.currentMonth > 11 ? 1 : -1;
        self.currentMonth = (self.currentMonth + 12) % 12;
        triggerEvent("onYearChange");
        buildMonthSwitch();
      }
      buildDays();
      triggerEvent("onMonthChange");
      updateNavigationCurrentMonth();
    }
    function clear(triggerChangeEvent, toInitial) {
      if (triggerChangeEvent === void 0) {
        triggerChangeEvent = true;
      }
      if (toInitial === void 0) {
        toInitial = true;
      }
      self.input.value = "";
      if (self.altInput !== void 0)
        self.altInput.value = "";
      if (self.mobileInput !== void 0)
        self.mobileInput.value = "";
      self.selectedDates = [];
      self.latestSelectedDateObj = void 0;
      if (toInitial === true) {
        self.currentYear = self._initialDate.getFullYear();
        self.currentMonth = self._initialDate.getMonth();
      }
      if (self.config.enableTime === true) {
        var _a = getDefaultHours(self.config), hours = _a.hours, minutes = _a.minutes, seconds = _a.seconds;
        setHours(hours, minutes, seconds);
      }
      self.redraw();
      if (triggerChangeEvent)
        triggerEvent("onChange");
    }
    function close() {
      self.isOpen = false;
      if (!self.isMobile) {
        if (self.calendarContainer !== void 0) {
          self.calendarContainer.classList.remove("open");
        }
        if (self._input !== void 0) {
          self._input.classList.remove("active");
        }
      }
      triggerEvent("onClose");
    }
    function destroy() {
      if (self.config !== void 0)
        triggerEvent("onDestroy");
      for (var i2 = self._handlers.length; i2--; ) {
        self._handlers[i2].remove();
      }
      self._handlers = [];
      if (self.mobileInput) {
        if (self.mobileInput.parentNode)
          self.mobileInput.parentNode.removeChild(self.mobileInput);
        self.mobileInput = void 0;
      } else if (self.calendarContainer && self.calendarContainer.parentNode) {
        if (self.config.static && self.calendarContainer.parentNode) {
          var wrapper = self.calendarContainer.parentNode;
          wrapper.lastChild && wrapper.removeChild(wrapper.lastChild);
          if (wrapper.parentNode) {
            while (wrapper.firstChild)
              wrapper.parentNode.insertBefore(wrapper.firstChild, wrapper);
            wrapper.parentNode.removeChild(wrapper);
          }
        } else
          self.calendarContainer.parentNode.removeChild(self.calendarContainer);
      }
      if (self.altInput) {
        self.input.type = "text";
        if (self.altInput.parentNode)
          self.altInput.parentNode.removeChild(self.altInput);
        delete self.altInput;
      }
      if (self.input) {
        self.input.type = self.input._type;
        self.input.classList.remove("flatpickr-input");
        self.input.removeAttribute("readonly");
      }
      [
        "_showTimeInput",
        "latestSelectedDateObj",
        "_hideNextMonthArrow",
        "_hidePrevMonthArrow",
        "__hideNextMonthArrow",
        "__hidePrevMonthArrow",
        "isMobile",
        "isOpen",
        "selectedDateElem",
        "minDateHasTime",
        "maxDateHasTime",
        "days",
        "daysContainer",
        "_input",
        "_positionElement",
        "innerContainer",
        "rContainer",
        "monthNav",
        "todayDateElem",
        "calendarContainer",
        "weekdayContainer",
        "prevMonthNav",
        "nextMonthNav",
        "monthsDropdownContainer",
        "currentMonthElement",
        "currentYearElement",
        "navigationCurrentMonth",
        "selectedDateElem",
        "config"
      ].forEach(function(k2) {
        try {
          delete self[k2];
        } catch (_2) {
        }
      });
    }
    function isCalendarElem(elem) {
      return self.calendarContainer.contains(elem);
    }
    function documentClick(e2) {
      if (self.isOpen && !self.config.inline) {
        var eventTarget_1 = getEventTarget(e2);
        var isCalendarElement = isCalendarElem(eventTarget_1);
        var isInput = eventTarget_1 === self.input || eventTarget_1 === self.altInput || self.element.contains(eventTarget_1) || e2.path && e2.path.indexOf && (~e2.path.indexOf(self.input) || ~e2.path.indexOf(self.altInput));
        var lostFocus = !isInput && !isCalendarElement && !isCalendarElem(e2.relatedTarget);
        var isIgnored = !self.config.ignoredFocusElements.some(function(elem) {
          return elem.contains(eventTarget_1);
        });
        if (lostFocus && isIgnored) {
          if (self.config.allowInput) {
            self.setDate(self._input.value, false, self.config.altInput ? self.config.altFormat : self.config.dateFormat);
          }
          if (self.timeContainer !== void 0 && self.minuteElement !== void 0 && self.hourElement !== void 0 && self.input.value !== "" && self.input.value !== void 0) {
            updateTime();
          }
          self.close();
          if (self.config && self.config.mode === "range" && self.selectedDates.length === 1)
            self.clear(false);
        }
      }
    }
    function changeYear(newYear) {
      if (!newYear || self.config.minDate && newYear < self.config.minDate.getFullYear() || self.config.maxDate && newYear > self.config.maxDate.getFullYear())
        return;
      var newYearNum = newYear, isNewYear = self.currentYear !== newYearNum;
      self.currentYear = newYearNum || self.currentYear;
      if (self.config.maxDate && self.currentYear === self.config.maxDate.getFullYear()) {
        self.currentMonth = Math.min(self.config.maxDate.getMonth(), self.currentMonth);
      } else if (self.config.minDate && self.currentYear === self.config.minDate.getFullYear()) {
        self.currentMonth = Math.max(self.config.minDate.getMonth(), self.currentMonth);
      }
      if (isNewYear) {
        self.redraw();
        triggerEvent("onYearChange");
        buildMonthSwitch();
      }
    }
    function isEnabled(date, timeless) {
      var _a;
      if (timeless === void 0) {
        timeless = true;
      }
      var dateToCheck = self.parseDate(date, void 0, timeless);
      if (self.config.minDate && dateToCheck && compareDates(dateToCheck, self.config.minDate, timeless !== void 0 ? timeless : !self.minDateHasTime) < 0 || self.config.maxDate && dateToCheck && compareDates(dateToCheck, self.config.maxDate, timeless !== void 0 ? timeless : !self.maxDateHasTime) > 0)
        return false;
      if (!self.config.enable && self.config.disable.length === 0)
        return true;
      if (dateToCheck === void 0)
        return false;
      var bool = !!self.config.enable, array = (_a = self.config.enable) !== null && _a !== void 0 ? _a : self.config.disable;
      for (var i2 = 0, d2 = void 0; i2 < array.length; i2++) {
        d2 = array[i2];
        if (typeof d2 === "function" && d2(dateToCheck))
          return bool;
        else if (d2 instanceof Date && dateToCheck !== void 0 && d2.getTime() === dateToCheck.getTime())
          return bool;
        else if (typeof d2 === "string") {
          var parsed = self.parseDate(d2, void 0, true);
          return parsed && parsed.getTime() === dateToCheck.getTime() ? bool : !bool;
        } else if (typeof d2 === "object" && dateToCheck !== void 0 && d2.from && d2.to && dateToCheck.getTime() >= d2.from.getTime() && dateToCheck.getTime() <= d2.to.getTime())
          return bool;
      }
      return !bool;
    }
    function isInView(elem) {
      if (self.daysContainer !== void 0)
        return elem.className.indexOf("hidden") === -1 && elem.className.indexOf("flatpickr-disabled") === -1 && self.daysContainer.contains(elem);
      return false;
    }
    function onBlur(e2) {
      var isInput = e2.target === self._input;
      var valueChanged = self._input.value.trimEnd() !== getDateStr();
      if (isInput && valueChanged && !(e2.relatedTarget && isCalendarElem(e2.relatedTarget))) {
        self.setDate(self._input.value, true, e2.target === self.altInput ? self.config.altFormat : self.config.dateFormat);
      }
    }
    function onKeyDown(e2) {
      var eventTarget = getEventTarget(e2);
      var isInput = self.config.wrap ? element.contains(eventTarget) : eventTarget === self._input;
      var allowInput = self.config.allowInput;
      var allowKeydown = self.isOpen && (!allowInput || !isInput);
      var allowInlineKeydown = self.config.inline && isInput && !allowInput;
      if (e2.keyCode === 13 && isInput) {
        if (allowInput) {
          self.setDate(self._input.value, true, eventTarget === self.altInput ? self.config.altFormat : self.config.dateFormat);
          self.close();
          return eventTarget.blur();
        } else {
          self.open();
        }
      } else if (isCalendarElem(eventTarget) || allowKeydown || allowInlineKeydown) {
        var isTimeObj = !!self.timeContainer && self.timeContainer.contains(eventTarget);
        switch (e2.keyCode) {
          case 13:
            if (isTimeObj) {
              e2.preventDefault();
              updateTime();
              focusAndClose();
            } else
              selectDate(e2);
            break;
          case 27:
            e2.preventDefault();
            focusAndClose();
            break;
          case 8:
          case 46:
            if (isInput && !self.config.allowInput) {
              e2.preventDefault();
              self.clear();
            }
            break;
          case 37:
          case 39:
            if (!isTimeObj && !isInput) {
              e2.preventDefault();
              var activeElement = getClosestActiveElement();
              if (self.daysContainer !== void 0 && (allowInput === false || activeElement && isInView(activeElement))) {
                var delta_1 = e2.keyCode === 39 ? 1 : -1;
                if (!e2.ctrlKey)
                  focusOnDay(void 0, delta_1);
                else {
                  e2.stopPropagation();
                  changeMonth(delta_1);
                  focusOnDay(getFirstAvailableDay(1), 0);
                }
              }
            } else if (self.hourElement)
              self.hourElement.focus();
            break;
          case 38:
          case 40:
            e2.preventDefault();
            var delta = e2.keyCode === 40 ? 1 : -1;
            if (self.daysContainer && eventTarget.$i !== void 0 || eventTarget === self.input || eventTarget === self.altInput) {
              if (e2.ctrlKey) {
                e2.stopPropagation();
                changeYear(self.currentYear - delta);
                focusOnDay(getFirstAvailableDay(1), 0);
              } else if (!isTimeObj)
                focusOnDay(void 0, delta * 7);
            } else if (eventTarget === self.currentYearElement) {
              changeYear(self.currentYear - delta);
            } else if (self.config.enableTime) {
              if (!isTimeObj && self.hourElement)
                self.hourElement.focus();
              updateTime(e2);
              self._debouncedChange();
            }
            break;
          case 9:
            if (isTimeObj) {
              var elems = [
                self.hourElement,
                self.minuteElement,
                self.secondElement,
                self.amPM
              ].concat(self.pluginElements).filter(function(x2) {
                return x2;
              });
              var i2 = elems.indexOf(eventTarget);
              if (i2 !== -1) {
                var target = elems[i2 + (e2.shiftKey ? -1 : 1)];
                e2.preventDefault();
                (target || self._input).focus();
              }
            } else if (!self.config.noCalendar && self.daysContainer && self.daysContainer.contains(eventTarget) && e2.shiftKey) {
              e2.preventDefault();
              self._input.focus();
            }
            break;
          default:
            break;
        }
      }
      if (self.amPM !== void 0 && eventTarget === self.amPM) {
        switch (e2.key) {
          case self.l10n.amPM[0].charAt(0):
          case self.l10n.amPM[0].charAt(0).toLowerCase():
            self.amPM.textContent = self.l10n.amPM[0];
            setHoursFromInputs();
            updateValue();
            break;
          case self.l10n.amPM[1].charAt(0):
          case self.l10n.amPM[1].charAt(0).toLowerCase():
            self.amPM.textContent = self.l10n.amPM[1];
            setHoursFromInputs();
            updateValue();
            break;
        }
      }
      if (isInput || isCalendarElem(eventTarget)) {
        triggerEvent("onKeyDown", e2);
      }
    }
    function onMouseOver(elem, cellClass) {
      if (cellClass === void 0) {
        cellClass = "flatpickr-day";
      }
      if (self.selectedDates.length !== 1 || elem && (!elem.classList.contains(cellClass) || elem.classList.contains("flatpickr-disabled")))
        return;
      var hoverDate = elem ? elem.dateObj.getTime() : self.days.firstElementChild.dateObj.getTime(), initialDate = self.parseDate(self.selectedDates[0], void 0, true).getTime(), rangeStartDate = Math.min(hoverDate, self.selectedDates[0].getTime()), rangeEndDate = Math.max(hoverDate, self.selectedDates[0].getTime());
      var containsDisabled = false;
      var minRange = 0, maxRange = 0;
      for (var t2 = rangeStartDate; t2 < rangeEndDate; t2 += duration.DAY) {
        if (!isEnabled(new Date(t2), true)) {
          containsDisabled = containsDisabled || t2 > rangeStartDate && t2 < rangeEndDate;
          if (t2 < initialDate && (!minRange || t2 > minRange))
            minRange = t2;
          else if (t2 > initialDate && (!maxRange || t2 < maxRange))
            maxRange = t2;
        }
      }
      var hoverableCells = Array.from(self.rContainer.querySelectorAll("*:nth-child(-n+" + self.config.showMonths + ") > ." + cellClass));
      hoverableCells.forEach(function(dayElem) {
        var date = dayElem.dateObj;
        var timestamp = date.getTime();
        var outOfRange = minRange > 0 && timestamp < minRange || maxRange > 0 && timestamp > maxRange;
        if (outOfRange) {
          dayElem.classList.add("notAllowed");
          ["inRange", "startRange", "endRange"].forEach(function(c2) {
            dayElem.classList.remove(c2);
          });
          return;
        } else if (containsDisabled && !outOfRange)
          return;
        ["startRange", "inRange", "endRange", "notAllowed"].forEach(function(c2) {
          dayElem.classList.remove(c2);
        });
        if (elem !== void 0) {
          elem.classList.add(hoverDate <= self.selectedDates[0].getTime() ? "startRange" : "endRange");
          if (initialDate < hoverDate && timestamp === initialDate)
            dayElem.classList.add("startRange");
          else if (initialDate > hoverDate && timestamp === initialDate)
            dayElem.classList.add("endRange");
          if (timestamp >= minRange && (maxRange === 0 || timestamp <= maxRange) && isBetween(timestamp, initialDate, hoverDate))
            dayElem.classList.add("inRange");
        }
      });
    }
    function onResize() {
      if (self.isOpen && !self.config.static && !self.config.inline)
        positionCalendar();
    }
    function open(e2, positionElement) {
      if (positionElement === void 0) {
        positionElement = self._positionElement;
      }
      if (self.isMobile === true) {
        if (e2) {
          e2.preventDefault();
          var eventTarget = getEventTarget(e2);
          if (eventTarget) {
            eventTarget.blur();
          }
        }
        if (self.mobileInput !== void 0) {
          self.mobileInput.focus();
          self.mobileInput.click();
        }
        triggerEvent("onOpen");
        return;
      } else if (self._input.disabled || self.config.inline) {
        return;
      }
      var wasOpen = self.isOpen;
      self.isOpen = true;
      if (!wasOpen) {
        self.calendarContainer.classList.add("open");
        self._input.classList.add("active");
        triggerEvent("onOpen");
        positionCalendar(positionElement);
      }
      if (self.config.enableTime === true && self.config.noCalendar === true) {
        if (self.config.allowInput === false && (e2 === void 0 || !self.timeContainer.contains(e2.relatedTarget))) {
          setTimeout(function() {
            return self.hourElement.select();
          }, 50);
        }
      }
    }
    function minMaxDateSetter(type) {
      return function(date) {
        var dateObj = self.config["_" + type + "Date"] = self.parseDate(date, self.config.dateFormat);
        var inverseDateObj = self.config["_" + (type === "min" ? "max" : "min") + "Date"];
        if (dateObj !== void 0) {
          self[type === "min" ? "minDateHasTime" : "maxDateHasTime"] = dateObj.getHours() > 0 || dateObj.getMinutes() > 0 || dateObj.getSeconds() > 0;
        }
        if (self.selectedDates) {
          self.selectedDates = self.selectedDates.filter(function(d2) {
            return isEnabled(d2);
          });
          if (!self.selectedDates.length && type === "min")
            setHoursFromDate(dateObj);
          updateValue();
        }
        if (self.daysContainer) {
          redraw();
          if (dateObj !== void 0)
            self.currentYearElement[type] = dateObj.getFullYear().toString();
          else
            self.currentYearElement.removeAttribute(type);
          self.currentYearElement.disabled = !!inverseDateObj && dateObj !== void 0 && inverseDateObj.getFullYear() === dateObj.getFullYear();
        }
      };
    }
    function parseConfig() {
      var boolOpts = [
        "wrap",
        "weekNumbers",
        "allowInput",
        "allowInvalidPreload",
        "clickOpens",
        "time_24hr",
        "enableTime",
        "noCalendar",
        "altInput",
        "shorthandCurrentMonth",
        "inline",
        "static",
        "enableSeconds",
        "disableMobile"
      ];
      var userConfig = __assign(__assign({}, JSON.parse(JSON.stringify(element.dataset || {}))), instanceConfig);
      var formats2 = {};
      self.config.parseDate = userConfig.parseDate;
      self.config.formatDate = userConfig.formatDate;
      Object.defineProperty(self.config, "enable", {
        get: function() {
          return self.config._enable;
        },
        set: function(dates) {
          self.config._enable = parseDateRules(dates);
        }
      });
      Object.defineProperty(self.config, "disable", {
        get: function() {
          return self.config._disable;
        },
        set: function(dates) {
          self.config._disable = parseDateRules(dates);
        }
      });
      var timeMode = userConfig.mode === "time";
      if (!userConfig.dateFormat && (userConfig.enableTime || timeMode)) {
        var defaultDateFormat = flatpickr.defaultConfig.dateFormat || defaults.dateFormat;
        formats2.dateFormat = userConfig.noCalendar || timeMode ? "H:i" + (userConfig.enableSeconds ? ":S" : "") : defaultDateFormat + " H:i" + (userConfig.enableSeconds ? ":S" : "");
      }
      if (userConfig.altInput && (userConfig.enableTime || timeMode) && !userConfig.altFormat) {
        var defaultAltFormat = flatpickr.defaultConfig.altFormat || defaults.altFormat;
        formats2.altFormat = userConfig.noCalendar || timeMode ? "h:i" + (userConfig.enableSeconds ? ":S K" : " K") : defaultAltFormat + (" h:i" + (userConfig.enableSeconds ? ":S" : "") + " K");
      }
      Object.defineProperty(self.config, "minDate", {
        get: function() {
          return self.config._minDate;
        },
        set: minMaxDateSetter("min")
      });
      Object.defineProperty(self.config, "maxDate", {
        get: function() {
          return self.config._maxDate;
        },
        set: minMaxDateSetter("max")
      });
      var minMaxTimeSetter = function(type) {
        return function(val) {
          self.config[type === "min" ? "_minTime" : "_maxTime"] = self.parseDate(val, "H:i:S");
        };
      };
      Object.defineProperty(self.config, "minTime", {
        get: function() {
          return self.config._minTime;
        },
        set: minMaxTimeSetter("min")
      });
      Object.defineProperty(self.config, "maxTime", {
        get: function() {
          return self.config._maxTime;
        },
        set: minMaxTimeSetter("max")
      });
      if (userConfig.mode === "time") {
        self.config.noCalendar = true;
        self.config.enableTime = true;
      }
      Object.assign(self.config, formats2, userConfig);
      for (var i2 = 0; i2 < boolOpts.length; i2++)
        self.config[boolOpts[i2]] = self.config[boolOpts[i2]] === true || self.config[boolOpts[i2]] === "true";
      HOOKS.filter(function(hook) {
        return self.config[hook] !== void 0;
      }).forEach(function(hook) {
        self.config[hook] = arrayify(self.config[hook] || []).map(bindToInstance);
      });
      self.isMobile = !self.config.disableMobile && !self.config.inline && self.config.mode === "single" && !self.config.disable.length && !self.config.enable && !self.config.weekNumbers && /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
      for (var i2 = 0; i2 < self.config.plugins.length; i2++) {
        var pluginConf = self.config.plugins[i2](self) || {};
        for (var key in pluginConf) {
          if (HOOKS.indexOf(key) > -1) {
            self.config[key] = arrayify(pluginConf[key]).map(bindToInstance).concat(self.config[key]);
          } else if (typeof userConfig[key] === "undefined")
            self.config[key] = pluginConf[key];
        }
      }
      if (!userConfig.altInputClass) {
        self.config.altInputClass = getInputElem().className + " " + self.config.altInputClass;
      }
      triggerEvent("onParseConfig");
    }
    function getInputElem() {
      return self.config.wrap ? element.querySelector("[data-input]") : element;
    }
    function setupLocale() {
      if (typeof self.config.locale !== "object" && typeof flatpickr.l10ns[self.config.locale] === "undefined")
        self.config.errorHandler(new Error("flatpickr: invalid locale " + self.config.locale));
      self.l10n = __assign(__assign({}, flatpickr.l10ns.default), typeof self.config.locale === "object" ? self.config.locale : self.config.locale !== "default" ? flatpickr.l10ns[self.config.locale] : void 0);
      tokenRegex.D = "(" + self.l10n.weekdays.shorthand.join("|") + ")";
      tokenRegex.l = "(" + self.l10n.weekdays.longhand.join("|") + ")";
      tokenRegex.M = "(" + self.l10n.months.shorthand.join("|") + ")";
      tokenRegex.F = "(" + self.l10n.months.longhand.join("|") + ")";
      tokenRegex.K = "(" + self.l10n.amPM[0] + "|" + self.l10n.amPM[1] + "|" + self.l10n.amPM[0].toLowerCase() + "|" + self.l10n.amPM[1].toLowerCase() + ")";
      var userConfig = __assign(__assign({}, instanceConfig), JSON.parse(JSON.stringify(element.dataset || {})));
      if (userConfig.time_24hr === void 0 && flatpickr.defaultConfig.time_24hr === void 0) {
        self.config.time_24hr = self.l10n.time_24hr;
      }
      self.formatDate = createDateFormatter(self);
      self.parseDate = createDateParser({ config: self.config, l10n: self.l10n });
    }
    function positionCalendar(customPositionElement) {
      if (typeof self.config.position === "function") {
        return void self.config.position(self, customPositionElement);
      }
      if (self.calendarContainer === void 0)
        return;
      triggerEvent("onPreCalendarPosition");
      var positionElement = customPositionElement || self._positionElement;
      var calendarHeight = Array.prototype.reduce.call(self.calendarContainer.children, function(acc, child) {
        return acc + child.offsetHeight;
      }, 0), calendarWidth = self.calendarContainer.offsetWidth, configPos = self.config.position.split(" "), configPosVertical = configPos[0], configPosHorizontal = configPos.length > 1 ? configPos[1] : null, inputBounds = positionElement.getBoundingClientRect(), distanceFromBottom = window.innerHeight - inputBounds.bottom, showOnTop = configPosVertical === "above" || configPosVertical !== "below" && distanceFromBottom < calendarHeight && inputBounds.top > calendarHeight;
      var top = window.pageYOffset + inputBounds.top + (!showOnTop ? positionElement.offsetHeight + 2 : -calendarHeight - 2);
      toggleClass(self.calendarContainer, "arrowTop", !showOnTop);
      toggleClass(self.calendarContainer, "arrowBottom", showOnTop);
      if (self.config.inline)
        return;
      var left = window.pageXOffset + inputBounds.left;
      var isCenter = false;
      var isRight = false;
      if (configPosHorizontal === "center") {
        left -= (calendarWidth - inputBounds.width) / 2;
        isCenter = true;
      } else if (configPosHorizontal === "right") {
        left -= calendarWidth - inputBounds.width;
        isRight = true;
      }
      toggleClass(self.calendarContainer, "arrowLeft", !isCenter && !isRight);
      toggleClass(self.calendarContainer, "arrowCenter", isCenter);
      toggleClass(self.calendarContainer, "arrowRight", isRight);
      var right = window.document.body.offsetWidth - (window.pageXOffset + inputBounds.right);
      var rightMost = left + calendarWidth > window.document.body.offsetWidth;
      var centerMost = right + calendarWidth > window.document.body.offsetWidth;
      toggleClass(self.calendarContainer, "rightMost", rightMost);
      if (self.config.static)
        return;
      self.calendarContainer.style.top = top + "px";
      if (!rightMost) {
        self.calendarContainer.style.left = left + "px";
        self.calendarContainer.style.right = "auto";
      } else if (!centerMost) {
        self.calendarContainer.style.left = "auto";
        self.calendarContainer.style.right = right + "px";
      } else {
        var doc = getDocumentStyleSheet();
        if (doc === void 0)
          return;
        var bodyWidth = window.document.body.offsetWidth;
        var centerLeft = Math.max(0, bodyWidth / 2 - calendarWidth / 2);
        var centerBefore = ".flatpickr-calendar.centerMost:before";
        var centerAfter = ".flatpickr-calendar.centerMost:after";
        var centerIndex = doc.cssRules.length;
        var centerStyle = "{left:" + inputBounds.left + "px;right:auto;}";
        toggleClass(self.calendarContainer, "rightMost", false);
        toggleClass(self.calendarContainer, "centerMost", true);
        doc.insertRule(centerBefore + "," + centerAfter + centerStyle, centerIndex);
        self.calendarContainer.style.left = centerLeft + "px";
        self.calendarContainer.style.right = "auto";
      }
    }
    function getDocumentStyleSheet() {
      var editableSheet = null;
      for (var i2 = 0; i2 < document.styleSheets.length; i2++) {
        var sheet = document.styleSheets[i2];
        if (!sheet.cssRules)
          continue;
        try {
          sheet.cssRules;
        } catch (err) {
          continue;
        }
        editableSheet = sheet;
        break;
      }
      return editableSheet != null ? editableSheet : createStyleSheet();
    }
    function createStyleSheet() {
      var style = document.createElement("style");
      document.head.appendChild(style);
      return style.sheet;
    }
    function redraw() {
      if (self.config.noCalendar || self.isMobile)
        return;
      buildMonthSwitch();
      updateNavigationCurrentMonth();
      buildDays();
    }
    function focusAndClose() {
      self._input.focus();
      if (window.navigator.userAgent.indexOf("MSIE") !== -1 || navigator.msMaxTouchPoints !== void 0) {
        setTimeout(self.close, 0);
      } else {
        self.close();
      }
    }
    function selectDate(e2) {
      e2.preventDefault();
      e2.stopPropagation();
      var isSelectable = function(day) {
        return day.classList && day.classList.contains("flatpickr-day") && !day.classList.contains("flatpickr-disabled") && !day.classList.contains("notAllowed");
      };
      var t2 = findParent(getEventTarget(e2), isSelectable);
      if (t2 === void 0)
        return;
      var target = t2;
      var selectedDate = self.latestSelectedDateObj = new Date(target.dateObj.getTime());
      var shouldChangeMonth = (selectedDate.getMonth() < self.currentMonth || selectedDate.getMonth() > self.currentMonth + self.config.showMonths - 1) && self.config.mode !== "range";
      self.selectedDateElem = target;
      if (self.config.mode === "single")
        self.selectedDates = [selectedDate];
      else if (self.config.mode === "multiple") {
        var selectedIndex = isDateSelected(selectedDate);
        if (selectedIndex)
          self.selectedDates.splice(parseInt(selectedIndex), 1);
        else
          self.selectedDates.push(selectedDate);
      } else if (self.config.mode === "range") {
        if (self.selectedDates.length === 2) {
          self.clear(false, false);
        }
        self.latestSelectedDateObj = selectedDate;
        self.selectedDates.push(selectedDate);
        if (compareDates(selectedDate, self.selectedDates[0], true) !== 0)
          self.selectedDates.sort(function(a2, b2) {
            return a2.getTime() - b2.getTime();
          });
      }
      setHoursFromInputs();
      if (shouldChangeMonth) {
        var isNewYear = self.currentYear !== selectedDate.getFullYear();
        self.currentYear = selectedDate.getFullYear();
        self.currentMonth = selectedDate.getMonth();
        if (isNewYear) {
          triggerEvent("onYearChange");
          buildMonthSwitch();
        }
        triggerEvent("onMonthChange");
      }
      updateNavigationCurrentMonth();
      buildDays();
      updateValue();
      if (!shouldChangeMonth && self.config.mode !== "range" && self.config.showMonths === 1)
        focusOnDayElem(target);
      else if (self.selectedDateElem !== void 0 && self.hourElement === void 0) {
        self.selectedDateElem && self.selectedDateElem.focus();
      }
      if (self.hourElement !== void 0)
        self.hourElement !== void 0 && self.hourElement.focus();
      if (self.config.closeOnSelect) {
        var single = self.config.mode === "single" && !self.config.enableTime;
        var range = self.config.mode === "range" && self.selectedDates.length === 2 && !self.config.enableTime;
        if (single || range) {
          focusAndClose();
        }
      }
      triggerChange();
    }
    var CALLBACKS = {
      locale: [setupLocale, updateWeekdays],
      showMonths: [buildMonths, setCalendarWidth, buildWeekdays],
      minDate: [jumpToDate],
      maxDate: [jumpToDate],
      positionElement: [updatePositionElement],
      clickOpens: [
        function() {
          if (self.config.clickOpens === true) {
            bind(self._input, "focus", self.open);
            bind(self._input, "click", self.open);
          } else {
            self._input.removeEventListener("focus", self.open);
            self._input.removeEventListener("click", self.open);
          }
        }
      ]
    };
    function set(option, value) {
      if (option !== null && typeof option === "object") {
        Object.assign(self.config, option);
        for (var key in option) {
          if (CALLBACKS[key] !== void 0)
            CALLBACKS[key].forEach(function(x2) {
              return x2();
            });
        }
      } else {
        self.config[option] = value;
        if (CALLBACKS[option] !== void 0)
          CALLBACKS[option].forEach(function(x2) {
            return x2();
          });
        else if (HOOKS.indexOf(option) > -1)
          self.config[option] = arrayify(value);
      }
      self.redraw();
      updateValue(true);
    }
    function setSelectedDate(inputDate, format) {
      var dates = [];
      if (inputDate instanceof Array)
        dates = inputDate.map(function(d2) {
          return self.parseDate(d2, format);
        });
      else if (inputDate instanceof Date || typeof inputDate === "number")
        dates = [self.parseDate(inputDate, format)];
      else if (typeof inputDate === "string") {
        switch (self.config.mode) {
          case "single":
          case "time":
            dates = [self.parseDate(inputDate, format)];
            break;
          case "multiple":
            dates = inputDate.split(self.config.conjunction).map(function(date) {
              return self.parseDate(date, format);
            });
            break;
          case "range":
            dates = inputDate.split(self.l10n.rangeSeparator).map(function(date) {
              return self.parseDate(date, format);
            });
            break;
          default:
            break;
        }
      } else
        self.config.errorHandler(new Error("Invalid date supplied: " + JSON.stringify(inputDate)));
      self.selectedDates = self.config.allowInvalidPreload ? dates : dates.filter(function(d2) {
        return d2 instanceof Date && isEnabled(d2, false);
      });
      if (self.config.mode === "range")
        self.selectedDates.sort(function(a2, b2) {
          return a2.getTime() - b2.getTime();
        });
    }
    function setDate(date, triggerChange2, format) {
      if (triggerChange2 === void 0) {
        triggerChange2 = false;
      }
      if (format === void 0) {
        format = self.config.dateFormat;
      }
      if (date !== 0 && !date || date instanceof Array && date.length === 0)
        return self.clear(triggerChange2);
      setSelectedDate(date, format);
      self.latestSelectedDateObj = self.selectedDates[self.selectedDates.length - 1];
      self.redraw();
      jumpToDate(void 0, triggerChange2);
      setHoursFromDate();
      if (self.selectedDates.length === 0) {
        self.clear(false);
      }
      updateValue(triggerChange2);
      if (triggerChange2)
        triggerEvent("onChange");
    }
    function parseDateRules(arr) {
      return arr.slice().map(function(rule) {
        if (typeof rule === "string" || typeof rule === "number" || rule instanceof Date) {
          return self.parseDate(rule, void 0, true);
        } else if (rule && typeof rule === "object" && rule.from && rule.to)
          return {
            from: self.parseDate(rule.from, void 0),
            to: self.parseDate(rule.to, void 0)
          };
        return rule;
      }).filter(function(x2) {
        return x2;
      });
    }
    function setupDates() {
      self.selectedDates = [];
      self.now = self.parseDate(self.config.now) || /* @__PURE__ */ new Date();
      var preloadedDate = self.config.defaultDate || ((self.input.nodeName === "INPUT" || self.input.nodeName === "TEXTAREA") && self.input.placeholder && self.input.value === self.input.placeholder ? null : self.input.value);
      if (preloadedDate)
        setSelectedDate(preloadedDate, self.config.dateFormat);
      self._initialDate = self.selectedDates.length > 0 ? self.selectedDates[0] : self.config.minDate && self.config.minDate.getTime() > self.now.getTime() ? self.config.minDate : self.config.maxDate && self.config.maxDate.getTime() < self.now.getTime() ? self.config.maxDate : self.now;
      self.currentYear = self._initialDate.getFullYear();
      self.currentMonth = self._initialDate.getMonth();
      if (self.selectedDates.length > 0)
        self.latestSelectedDateObj = self.selectedDates[0];
      if (self.config.minTime !== void 0)
        self.config.minTime = self.parseDate(self.config.minTime, "H:i");
      if (self.config.maxTime !== void 0)
        self.config.maxTime = self.parseDate(self.config.maxTime, "H:i");
      self.minDateHasTime = !!self.config.minDate && (self.config.minDate.getHours() > 0 || self.config.minDate.getMinutes() > 0 || self.config.minDate.getSeconds() > 0);
      self.maxDateHasTime = !!self.config.maxDate && (self.config.maxDate.getHours() > 0 || self.config.maxDate.getMinutes() > 0 || self.config.maxDate.getSeconds() > 0);
    }
    function setupInputs() {
      self.input = getInputElem();
      if (!self.input) {
        self.config.errorHandler(new Error("Invalid input element specified"));
        return;
      }
      self.input._type = self.input.type;
      self.input.type = "text";
      self.input.classList.add("flatpickr-input");
      self._input = self.input;
      if (self.config.altInput) {
        self.altInput = createElement(self.input.nodeName, self.config.altInputClass);
        self._input = self.altInput;
        self.altInput.placeholder = self.input.placeholder;
        self.altInput.disabled = self.input.disabled;
        self.altInput.required = self.input.required;
        self.altInput.tabIndex = self.input.tabIndex;
        self.altInput.type = "text";
        self.input.setAttribute("type", "hidden");
        if (!self.config.static && self.input.parentNode)
          self.input.parentNode.insertBefore(self.altInput, self.input.nextSibling);
      }
      if (!self.config.allowInput)
        self._input.setAttribute("readonly", "readonly");
      updatePositionElement();
    }
    function updatePositionElement() {
      self._positionElement = self.config.positionElement || self._input;
    }
    function setupMobile() {
      var inputType = self.config.enableTime ? self.config.noCalendar ? "time" : "datetime-local" : "date";
      self.mobileInput = createElement("input", self.input.className + " flatpickr-mobile");
      self.mobileInput.tabIndex = 1;
      self.mobileInput.type = inputType;
      self.mobileInput.disabled = self.input.disabled;
      self.mobileInput.required = self.input.required;
      self.mobileInput.placeholder = self.input.placeholder;
      self.mobileFormatStr = inputType === "datetime-local" ? "Y-m-d\\TH:i:S" : inputType === "date" ? "Y-m-d" : "H:i:S";
      if (self.selectedDates.length > 0) {
        self.mobileInput.defaultValue = self.mobileInput.value = self.formatDate(self.selectedDates[0], self.mobileFormatStr);
      }
      if (self.config.minDate)
        self.mobileInput.min = self.formatDate(self.config.minDate, "Y-m-d");
      if (self.config.maxDate)
        self.mobileInput.max = self.formatDate(self.config.maxDate, "Y-m-d");
      if (self.input.getAttribute("step"))
        self.mobileInput.step = String(self.input.getAttribute("step"));
      self.input.type = "hidden";
      if (self.altInput !== void 0)
        self.altInput.type = "hidden";
      try {
        if (self.input.parentNode)
          self.input.parentNode.insertBefore(self.mobileInput, self.input.nextSibling);
      } catch (_a) {
      }
      bind(self.mobileInput, "change", function(e2) {
        self.setDate(getEventTarget(e2).value, false, self.mobileFormatStr);
        triggerEvent("onChange");
        triggerEvent("onClose");
      });
    }
    function toggle(e2) {
      if (self.isOpen === true)
        return self.close();
      self.open(e2);
    }
    function triggerEvent(event, data) {
      if (self.config === void 0)
        return;
      var hooks = self.config[event];
      if (hooks !== void 0 && hooks.length > 0) {
        for (var i2 = 0; hooks[i2] && i2 < hooks.length; i2++)
          hooks[i2](self.selectedDates, self.input.value, self, data);
      }
      if (event === "onChange") {
        self.input.dispatchEvent(createEvent("change"));
        self.input.dispatchEvent(createEvent("input"));
      }
    }
    function createEvent(name) {
      var e2 = document.createEvent("Event");
      e2.initEvent(name, true, true);
      return e2;
    }
    function isDateSelected(date) {
      for (var i2 = 0; i2 < self.selectedDates.length; i2++) {
        var selectedDate = self.selectedDates[i2];
        if (selectedDate instanceof Date && compareDates(selectedDate, date) === 0)
          return "" + i2;
      }
      return false;
    }
    function isDateInRange(date) {
      if (self.config.mode !== "range" || self.selectedDates.length < 2)
        return false;
      return compareDates(date, self.selectedDates[0]) >= 0 && compareDates(date, self.selectedDates[1]) <= 0;
    }
    function updateNavigationCurrentMonth() {
      if (self.config.noCalendar || self.isMobile || !self.monthNav)
        return;
      self.yearElements.forEach(function(yearElement, i2) {
        var d2 = new Date(self.currentYear, self.currentMonth, 1);
        d2.setMonth(self.currentMonth + i2);
        if (self.config.showMonths > 1 || self.config.monthSelectorType === "static") {
          self.monthElements[i2].textContent = monthToStr(d2.getMonth(), self.config.shorthandCurrentMonth, self.l10n) + " ";
        } else {
          self.monthsDropdownContainer.value = d2.getMonth().toString();
        }
        yearElement.value = d2.getFullYear().toString();
      });
      self._hidePrevMonthArrow = self.config.minDate !== void 0 && (self.currentYear === self.config.minDate.getFullYear() ? self.currentMonth <= self.config.minDate.getMonth() : self.currentYear < self.config.minDate.getFullYear());
      self._hideNextMonthArrow = self.config.maxDate !== void 0 && (self.currentYear === self.config.maxDate.getFullYear() ? self.currentMonth + 1 > self.config.maxDate.getMonth() : self.currentYear > self.config.maxDate.getFullYear());
    }
    function getDateStr(specificFormat) {
      var format = specificFormat || (self.config.altInput ? self.config.altFormat : self.config.dateFormat);
      return self.selectedDates.map(function(dObj) {
        return self.formatDate(dObj, format);
      }).filter(function(d2, i2, arr) {
        return self.config.mode !== "range" || self.config.enableTime || arr.indexOf(d2) === i2;
      }).join(self.config.mode !== "range" ? self.config.conjunction : self.l10n.rangeSeparator);
    }
    function updateValue(triggerChange2) {
      if (triggerChange2 === void 0) {
        triggerChange2 = true;
      }
      if (self.mobileInput !== void 0 && self.mobileFormatStr) {
        self.mobileInput.value = self.latestSelectedDateObj !== void 0 ? self.formatDate(self.latestSelectedDateObj, self.mobileFormatStr) : "";
      }
      self.input.value = getDateStr(self.config.dateFormat);
      if (self.altInput !== void 0) {
        self.altInput.value = getDateStr(self.config.altFormat);
      }
      if (triggerChange2 !== false)
        triggerEvent("onValueUpdate");
    }
    function onMonthNavClick(e2) {
      var eventTarget = getEventTarget(e2);
      var isPrevMonth = self.prevMonthNav.contains(eventTarget);
      var isNextMonth = self.nextMonthNav.contains(eventTarget);
      if (isPrevMonth || isNextMonth) {
        changeMonth(isPrevMonth ? -1 : 1);
      } else if (self.yearElements.indexOf(eventTarget) >= 0) {
        eventTarget.select();
      } else if (eventTarget.classList.contains("arrowUp")) {
        self.changeYear(self.currentYear + 1);
      } else if (eventTarget.classList.contains("arrowDown")) {
        self.changeYear(self.currentYear - 1);
      }
    }
    function timeWrapper(e2) {
      e2.preventDefault();
      var isKeyDown = e2.type === "keydown", eventTarget = getEventTarget(e2), input = eventTarget;
      if (self.amPM !== void 0 && eventTarget === self.amPM) {
        self.amPM.textContent = self.l10n.amPM[int(self.amPM.textContent === self.l10n.amPM[0])];
      }
      var min = parseFloat(input.getAttribute("min")), max = parseFloat(input.getAttribute("max")), step = parseFloat(input.getAttribute("step")), curValue = parseInt(input.value, 10), delta = e2.delta || (isKeyDown ? e2.which === 38 ? 1 : -1 : 0);
      var newValue = curValue + step * delta;
      if (typeof input.value !== "undefined" && input.value.length === 2) {
        var isHourElem = input === self.hourElement, isMinuteElem = input === self.minuteElement;
        if (newValue < min) {
          newValue = max + newValue + int(!isHourElem) + (int(isHourElem) && int(!self.amPM));
          if (isMinuteElem)
            incrementNumInput(void 0, -1, self.hourElement);
        } else if (newValue > max) {
          newValue = input === self.hourElement ? newValue - max - int(!self.amPM) : min;
          if (isMinuteElem)
            incrementNumInput(void 0, 1, self.hourElement);
        }
        if (self.amPM && isHourElem && (step === 1 ? newValue + curValue === 23 : Math.abs(newValue - curValue) > step)) {
          self.amPM.textContent = self.l10n.amPM[int(self.amPM.textContent === self.l10n.amPM[0])];
        }
        input.value = pad(newValue);
      }
    }
    init();
    return self;
  }
  function _flatpickr(nodeList, config) {
    var nodes = Array.prototype.slice.call(nodeList).filter(function(x2) {
      return x2 instanceof HTMLElement;
    });
    var instances = [];
    for (var i2 = 0; i2 < nodes.length; i2++) {
      var node = nodes[i2];
      try {
        if (node.getAttribute("data-fp-omit") !== null)
          continue;
        if (node._flatpickr !== void 0) {
          node._flatpickr.destroy();
          node._flatpickr = void 0;
        }
        node._flatpickr = FlatpickrInstance(node, config || {});
        instances.push(node._flatpickr);
      } catch (e2) {
        console.error(e2);
      }
    }
    return instances.length === 1 ? instances[0] : instances;
  }
  if (typeof HTMLElement !== "undefined" && typeof HTMLCollection !== "undefined" && typeof NodeList !== "undefined") {
    HTMLCollection.prototype.flatpickr = NodeList.prototype.flatpickr = function(config) {
      return _flatpickr(this, config);
    };
    HTMLElement.prototype.flatpickr = function(config) {
      return _flatpickr([this], config);
    };
  }
  var flatpickr = function(selector, config) {
    if (typeof selector === "string") {
      return _flatpickr(window.document.querySelectorAll(selector), config);
    } else if (selector instanceof Node) {
      return _flatpickr([selector], config);
    } else {
      return _flatpickr(selector, config);
    }
  };
  flatpickr.defaultConfig = {};
  flatpickr.l10ns = {
    en: __assign({}, default_default),
    default: __assign({}, default_default)
  };
  flatpickr.localize = function(l10n) {
    flatpickr.l10ns.default = __assign(__assign({}, flatpickr.l10ns.default), l10n);
  };
  flatpickr.setDefaults = function(config) {
    flatpickr.defaultConfig = __assign(__assign({}, flatpickr.defaultConfig), config);
  };
  flatpickr.parseDate = createDateParser({});
  flatpickr.formatDate = createDateFormatter({});
  flatpickr.compareDates = compareDates;
  if (typeof jQuery !== "undefined" && typeof jQuery.fn !== "undefined") {
    jQuery.fn.flatpickr = function(config) {
      return _flatpickr(this, config);
    };
  }
  Date.prototype.fp_incr = function(days) {
    return new Date(this.getFullYear(), this.getMonth(), this.getDate() + (typeof days === "string" ? parseInt(days, 10) : days));
  };
  if (typeof window !== "undefined") {
    window.flatpickr = flatpickr;
  }
  var esm_default = flatpickr;

  // app/javascript/controllers/date_range_picker_controller.js
  var currentDate = /* @__PURE__ */ new Date();
  var oneWeekLater = new Date(currentDate.getTime() + 7 * 24 * 60 * 60 * 1e3);
  var date_range_picker_controller_default = class extends Controller {
    static targets = ["label", "input"];
    static values = {
      mode: String || "",
      minDate: String || "today",
      dateFormat: String || "Y-m-d",
      range: {
        type: Array,
        default: [currentDate, oneWeekLater]
      }
    };
    connect() {
      this.rangeValue = this.rangeValue.map((dateString) => new Date(dateString));
      let self = this;
      const picker = esm_default(this.element, {
        mode: "range",
        minDate: this.minDateValue,
        dateFormat: this.dateFormatValue,
        defaultDate: this.rangeValue,
        onChange: function(selectedDates, dateStr, instance) {
          self.setCurrentRange(instance);
        }
      });
      this.setCurrentRange(picker);
    }
    setCurrentRange(picker) {
      const formatDate = (date) => {
        const options = { month: "short", day: "numeric" };
        return date.toLocaleDateString("en-US", options);
      };
      const range = picker.selectedDates.map(formatDate).join(" - ");
      if (this.hasLabelTarget) {
        this.labelTarget.textContent = range;
        this.inputTarget.value = picker.selectedDates;
      }
    }
  };

  // node_modules/stimulus-use/dist/index.js
  var composeEventName = (name, controller, eventPrefix) => {
    let composedName = name;
    if (eventPrefix === true) {
      composedName = `${controller.identifier}:${name}`;
    } else if (typeof eventPrefix === "string") {
      composedName = `${eventPrefix}:${name}`;
    }
    return composedName;
  };
  var extendedEvent = (type, event, detail) => {
    const { bubbles, cancelable, composed } = event || {
      bubbles: true,
      cancelable: true,
      composed: true
    };
    if (event) {
      Object.assign(detail, {
        originalEvent: event
      });
    }
    const customEvent = new CustomEvent(type, {
      bubbles,
      cancelable,
      composed,
      detail
    });
    return customEvent;
  };
  function isElementInViewport(el) {
    const rect = el.getBoundingClientRect();
    const windowHeight = window.innerHeight || document.documentElement.clientHeight;
    const windowWidth = window.innerWidth || document.documentElement.clientWidth;
    const vertInView = rect.top <= windowHeight && rect.top + rect.height > 0;
    const horInView = rect.left <= windowWidth && rect.left + rect.width > 0;
    return vertInView && horInView;
  }
  var defaultOptions$5 = {
    events: ["click", "touchend"],
    onlyVisible: true,
    dispatchEvent: true,
    eventPrefix: true
  };
  var useClickOutside = (composableController, options = {}) => {
    const controller = composableController;
    const { onlyVisible, dispatchEvent: dispatchEvent3, events, eventPrefix } = Object.assign({}, defaultOptions$5, options);
    const onEvent = (event) => {
      const targetElement = (options === null || options === void 0 ? void 0 : options.element) || controller.element;
      if (targetElement.contains(event.target) || !isElementInViewport(targetElement) && onlyVisible) {
        return;
      }
      if (controller.clickOutside) {
        controller.clickOutside(event);
      }
      if (dispatchEvent3) {
        const eventName = composeEventName("click:outside", controller, eventPrefix);
        const clickOutsideEvent = extendedEvent(eventName, event, {
          controller
        });
        targetElement.dispatchEvent(clickOutsideEvent);
      }
    };
    const observe = () => {
      events === null || events === void 0 ? void 0 : events.forEach((event) => {
        window.addEventListener(event, onEvent, true);
      });
    };
    const unobserve = () => {
      events === null || events === void 0 ? void 0 : events.forEach((event) => {
        window.removeEventListener(event, onEvent, true);
      });
    };
    const controllerDisconnect = controller.disconnect.bind(controller);
    Object.assign(controller, {
      disconnect() {
        unobserve();
        controllerDisconnect();
      }
    });
    observe();
    return [observe, unobserve];
  };
  var DebounceController = class extends Controller {
  };
  DebounceController.debounces = [];
  var ThrottleController = class extends Controller {
  };
  ThrottleController.throttles = [];
  var alpineNames = {
    enterFromClass: "enter",
    enterActiveClass: "enterStart",
    enterToClass: "enterEnd",
    leaveFromClass: "leave",
    leaveActiveClass: "leaveStart",
    leaveToClass: "leaveEnd"
  };
  var defaultOptions = {
    transitioned: false,
    hiddenClass: "hidden",
    preserveOriginalClass: true,
    removeToClasses: true
  };
  var useTransition = (composableController, options = {}) => {
    var _a, _b, _c;
    const controller = composableController;
    const targetName = controller.element.dataset.transitionTarget;
    let targetFromAttribute;
    if (targetName) {
      targetFromAttribute = controller[`${targetName}Target`];
    }
    const targetElement = (options === null || options === void 0 ? void 0 : options.element) || targetFromAttribute || controller.element;
    if (!(targetElement instanceof HTMLElement || targetElement instanceof SVGElement))
      return;
    const dataset = targetElement.dataset;
    const leaveAfter = parseInt(dataset.leaveAfter || "") || options.leaveAfter || 0;
    const { transitioned, hiddenClass, preserveOriginalClass, removeToClasses } = Object.assign({}, defaultOptions, options);
    const controllerEnter = (_a = controller.enter) === null || _a === void 0 ? void 0 : _a.bind(controller);
    const controllerLeave = (_b = controller.leave) === null || _b === void 0 ? void 0 : _b.bind(controller);
    const controllerToggleTransition = (_c = controller.toggleTransition) === null || _c === void 0 ? void 0 : _c.bind(controller);
    async function enter(event) {
      if (controller.transitioned)
        return;
      controller.transitioned = true;
      controllerEnter && controllerEnter(event);
      const enterFromClasses = getAttribute("enterFrom", options, dataset);
      const enterActiveClasses = getAttribute("enterActive", options, dataset);
      const enterToClasses = getAttribute("enterTo", options, dataset);
      const leaveToClasses = getAttribute("leaveTo", options, dataset);
      if (!!hiddenClass) {
        targetElement.classList.remove(hiddenClass);
      }
      if (!removeToClasses) {
        removeClasses(targetElement, leaveToClasses);
      }
      await transition(targetElement, enterFromClasses, enterActiveClasses, enterToClasses, hiddenClass, preserveOriginalClass, removeToClasses);
      if (leaveAfter > 0) {
        setTimeout(() => {
          leave(event);
        }, leaveAfter);
      }
    }
    async function leave(event) {
      if (!controller.transitioned)
        return;
      controller.transitioned = false;
      controllerLeave && controllerLeave(event);
      const leaveFromClasses = getAttribute("leaveFrom", options, dataset);
      const leaveActiveClasses = getAttribute("leaveActive", options, dataset);
      const leaveToClasses = getAttribute("leaveTo", options, dataset);
      const enterToClasses = getAttribute("enterTo", options, dataset);
      if (!removeToClasses) {
        removeClasses(targetElement, enterToClasses);
      }
      await transition(targetElement, leaveFromClasses, leaveActiveClasses, leaveToClasses, hiddenClass, preserveOriginalClass, removeToClasses);
      if (!!hiddenClass) {
        targetElement.classList.add(hiddenClass);
      }
    }
    function toggleTransition(event) {
      controllerToggleTransition && controllerToggleTransition(event);
      if (controller.transitioned) {
        leave();
      } else {
        enter();
      }
    }
    async function transition(element, initialClasses, activeClasses, endClasses, hiddenClass2, preserveOriginalClass2, removeEndClasses) {
      const stashedClasses = [];
      if (preserveOriginalClass2) {
        initialClasses.forEach((cls) => element.classList.contains(cls) && cls !== hiddenClass2 && stashedClasses.push(cls));
        activeClasses.forEach((cls) => element.classList.contains(cls) && cls !== hiddenClass2 && stashedClasses.push(cls));
        endClasses.forEach((cls) => element.classList.contains(cls) && cls !== hiddenClass2 && stashedClasses.push(cls));
      }
      addClasses(element, initialClasses);
      removeClasses(element, stashedClasses);
      addClasses(element, activeClasses);
      await nextAnimationFrame();
      removeClasses(element, initialClasses);
      addClasses(element, endClasses);
      await afterTransition(element);
      removeClasses(element, activeClasses);
      if (removeEndClasses) {
        removeClasses(element, endClasses);
      }
      addClasses(element, stashedClasses);
    }
    function initialState() {
      controller.transitioned = transitioned;
      if (transitioned) {
        if (!!hiddenClass) {
          targetElement.classList.remove(hiddenClass);
        }
        enter();
      } else {
        if (!!hiddenClass) {
          targetElement.classList.add(hiddenClass);
        }
        leave();
      }
    }
    function addClasses(element, classes) {
      if (classes.length > 0) {
        element.classList.add(...classes);
      }
    }
    function removeClasses(element, classes) {
      if (classes.length > 0) {
        element.classList.remove(...classes);
      }
    }
    initialState();
    Object.assign(controller, {
      enter,
      leave,
      toggleTransition
    });
    return [enter, leave, toggleTransition];
  };
  function getAttribute(name, options, dataset) {
    const datasetName = `transition${name[0].toUpperCase()}${name.substr(1)}`;
    const datasetAlpineName = alpineNames[name];
    const classes = options[name] || dataset[datasetName] || dataset[datasetAlpineName] || " ";
    return isEmpty(classes) ? [] : classes.split(" ");
  }
  async function afterTransition(element) {
    return new Promise((resolve) => {
      const duration2 = Number(getComputedStyle(element).transitionDuration.split(",")[0].replace("s", "")) * 1e3;
      setTimeout(() => {
        resolve(duration2);
      }, duration2);
    });
  }
  async function nextAnimationFrame() {
    return new Promise((resolve) => {
      requestAnimationFrame(() => {
        requestAnimationFrame(resolve);
      });
    });
  }
  function isEmpty(str) {
    return str.length === 0 || !str.trim();
  }

  // app/javascript/controllers/dropdown_controller.js
  var dropdown_controller_default = class extends Controller {
    static targets = ["menu", "trigger"];
    connect() {
      useTransition(this, {
        element: this.menuTarget
      });
    }
    toggle() {
      this.toggleTransition();
    }
    hide(event) {
      if (!this.element.contains(event.target) && !this.menuTarget.classList.contains("hidden")) {
        this.leave();
      }
    }
  };

  // node_modules/photoswipe/dist/photoswipe-lightbox.esm.js
  function createElement2(className, tagName, appendToEl) {
    const el = document.createElement(tagName);
    if (className) {
      el.className = className;
    }
    if (appendToEl) {
      appendToEl.appendChild(el);
    }
    return el;
  }
  function toTransformString(x2, y2, scale) {
    let propValue = `translate3d(${x2}px,${y2 || 0}px,0)`;
    if (scale !== void 0) {
      propValue += ` scale3d(${scale},${scale},1)`;
    }
    return propValue;
  }
  function setWidthHeight(el, w2, h2) {
    el.style.width = typeof w2 === "number" ? `${w2}px` : w2;
    el.style.height = typeof h2 === "number" ? `${h2}px` : h2;
  }
  var LOAD_STATE = {
    IDLE: "idle",
    LOADING: "loading",
    LOADED: "loaded",
    ERROR: "error"
  };
  function specialKeyUsed(e2) {
    return "button" in e2 && e2.button === 1 || e2.ctrlKey || e2.metaKey || e2.altKey || e2.shiftKey;
  }
  function getElementsFromOption(option, legacySelector, parent = document) {
    let elements = [];
    if (option instanceof Element) {
      elements = [option];
    } else if (option instanceof NodeList || Array.isArray(option)) {
      elements = Array.from(option);
    } else {
      const selector = typeof option === "string" ? option : legacySelector;
      if (selector) {
        elements = Array.from(parent.querySelectorAll(selector));
      }
    }
    return elements;
  }
  function isPswpClass(fn2) {
    return typeof fn2 === "function" && fn2.prototype && fn2.prototype.goTo;
  }
  function isSafari() {
    return !!(navigator.vendor && navigator.vendor.match(/apple/i));
  }
  var PhotoSwipeEvent = class {
    /**
     * @param {T} type
     * @param {PhotoSwipeEventsMap[T]} [details]
     */
    constructor(type, details) {
      this.type = type;
      this.defaultPrevented = false;
      if (details) {
        Object.assign(this, details);
      }
    }
    preventDefault() {
      this.defaultPrevented = true;
    }
  };
  var Eventable = class {
    constructor() {
      this._listeners = {};
      this._filters = {};
      this.pswp = void 0;
      this.options = void 0;
    }
    /**
     * @template {keyof PhotoSwipeFiltersMap} T
     * @param {T} name
     * @param {PhotoSwipeFiltersMap[T]} fn
     * @param {number} priority
     */
    addFilter(name, fn2, priority = 100) {
      var _this$_filters$name, _this$_filters$name2, _this$pswp;
      if (!this._filters[name]) {
        this._filters[name] = [];
      }
      (_this$_filters$name = this._filters[name]) === null || _this$_filters$name === void 0 || _this$_filters$name.push({
        fn: fn2,
        priority
      });
      (_this$_filters$name2 = this._filters[name]) === null || _this$_filters$name2 === void 0 || _this$_filters$name2.sort((f1, f2) => f1.priority - f2.priority);
      (_this$pswp = this.pswp) === null || _this$pswp === void 0 || _this$pswp.addFilter(name, fn2, priority);
    }
    /**
     * @template {keyof PhotoSwipeFiltersMap} T
     * @param {T} name
     * @param {PhotoSwipeFiltersMap[T]} fn
     */
    removeFilter(name, fn2) {
      if (this._filters[name]) {
        this._filters[name] = this._filters[name].filter((filter2) => filter2.fn !== fn2);
      }
      if (this.pswp) {
        this.pswp.removeFilter(name, fn2);
      }
    }
    /**
     * @template {keyof PhotoSwipeFiltersMap} T
     * @param {T} name
     * @param {Parameters<PhotoSwipeFiltersMap[T]>} args
     * @returns {Parameters<PhotoSwipeFiltersMap[T]>[0]}
     */
    applyFilters(name, ...args) {
      var _this$_filters$name3;
      (_this$_filters$name3 = this._filters[name]) === null || _this$_filters$name3 === void 0 || _this$_filters$name3.forEach((filter2) => {
        args[0] = filter2.fn.apply(this, args);
      });
      return args[0];
    }
    /**
     * @template {keyof PhotoSwipeEventsMap} T
     * @param {T} name
     * @param {EventCallback<T>} fn
     */
    on(name, fn2) {
      var _this$_listeners$name, _this$pswp2;
      if (!this._listeners[name]) {
        this._listeners[name] = [];
      }
      (_this$_listeners$name = this._listeners[name]) === null || _this$_listeners$name === void 0 || _this$_listeners$name.push(fn2);
      (_this$pswp2 = this.pswp) === null || _this$pswp2 === void 0 || _this$pswp2.on(name, fn2);
    }
    /**
     * @template {keyof PhotoSwipeEventsMap} T
     * @param {T} name
     * @param {EventCallback<T>} fn
     */
    off(name, fn2) {
      var _this$pswp3;
      if (this._listeners[name]) {
        this._listeners[name] = this._listeners[name].filter((listener) => fn2 !== listener);
      }
      (_this$pswp3 = this.pswp) === null || _this$pswp3 === void 0 || _this$pswp3.off(name, fn2);
    }
    /**
     * @template {keyof PhotoSwipeEventsMap} T
     * @param {T} name
     * @param {PhotoSwipeEventsMap[T]} [details]
     * @returns {AugmentedEvent<T>}
     */
    dispatch(name, details) {
      var _this$_listeners$name2;
      if (this.pswp) {
        return this.pswp.dispatch(name, details);
      }
      const event = (
        /** @type {AugmentedEvent<T>} */
        new PhotoSwipeEvent(name, details)
      );
      (_this$_listeners$name2 = this._listeners[name]) === null || _this$_listeners$name2 === void 0 || _this$_listeners$name2.forEach((listener) => {
        listener.call(this, event);
      });
      return event;
    }
  };
  var Placeholder = class {
    /**
     * @param {string | false} imageSrc
     * @param {HTMLElement} container
     */
    constructor(imageSrc, container) {
      this.element = createElement2("pswp__img pswp__img--placeholder", imageSrc ? "img" : "div", container);
      if (imageSrc) {
        const imgEl = (
          /** @type {HTMLImageElement} */
          this.element
        );
        imgEl.decoding = "async";
        imgEl.alt = "";
        imgEl.src = imageSrc;
        imgEl.setAttribute("role", "presentation");
      }
      this.element.setAttribute("aria-hidden", "true");
    }
    /**
     * @param {number} width
     * @param {number} height
     */
    setDisplayedSize(width, height) {
      if (!this.element) {
        return;
      }
      if (this.element.tagName === "IMG") {
        setWidthHeight(this.element, 250, "auto");
        this.element.style.transformOrigin = "0 0";
        this.element.style.transform = toTransformString(0, 0, width / 250);
      } else {
        setWidthHeight(this.element, width, height);
      }
    }
    destroy() {
      var _this$element;
      if ((_this$element = this.element) !== null && _this$element !== void 0 && _this$element.parentNode) {
        this.element.remove();
      }
      this.element = null;
    }
  };
  var Content = class {
    /**
     * @param {SlideData} itemData Slide data
     * @param {PhotoSwipeBase} instance PhotoSwipe or PhotoSwipeLightbox instance
     * @param {number} index
     */
    constructor(itemData, instance, index) {
      this.instance = instance;
      this.data = itemData;
      this.index = index;
      this.element = void 0;
      this.placeholder = void 0;
      this.slide = void 0;
      this.displayedImageWidth = 0;
      this.displayedImageHeight = 0;
      this.width = Number(this.data.w) || Number(this.data.width) || 0;
      this.height = Number(this.data.h) || Number(this.data.height) || 0;
      this.isAttached = false;
      this.hasSlide = false;
      this.isDecoding = false;
      this.state = LOAD_STATE.IDLE;
      if (this.data.type) {
        this.type = this.data.type;
      } else if (this.data.src) {
        this.type = "image";
      } else {
        this.type = "html";
      }
      this.instance.dispatch("contentInit", {
        content: this
      });
    }
    removePlaceholder() {
      if (this.placeholder && !this.keepPlaceholder()) {
        setTimeout(() => {
          if (this.placeholder) {
            this.placeholder.destroy();
            this.placeholder = void 0;
          }
        }, 1e3);
      }
    }
    /**
     * Preload content
     *
     * @param {boolean} isLazy
     * @param {boolean} [reload]
     */
    load(isLazy, reload) {
      if (this.slide && this.usePlaceholder()) {
        if (!this.placeholder) {
          const placeholderSrc = this.instance.applyFilters(
            "placeholderSrc",
            // use  image-based placeholder only for the first slide,
            // as rendering (even small stretched thumbnail) is an expensive operation
            this.data.msrc && this.slide.isFirstSlide ? this.data.msrc : false,
            this
          );
          this.placeholder = new Placeholder(placeholderSrc, this.slide.container);
        } else {
          const placeholderEl = this.placeholder.element;
          if (placeholderEl && !placeholderEl.parentElement) {
            this.slide.container.prepend(placeholderEl);
          }
        }
      }
      if (this.element && !reload) {
        return;
      }
      if (this.instance.dispatch("contentLoad", {
        content: this,
        isLazy
      }).defaultPrevented) {
        return;
      }
      if (this.isImageContent()) {
        this.element = createElement2("pswp__img", "img");
        if (this.displayedImageWidth) {
          this.loadImage(isLazy);
        }
      } else {
        this.element = createElement2("pswp__content", "div");
        this.element.innerHTML = this.data.html || "";
      }
      if (reload && this.slide) {
        this.slide.updateContentSize(true);
      }
    }
    /**
     * Preload image
     *
     * @param {boolean} isLazy
     */
    loadImage(isLazy) {
      var _this$data$src, _this$data$alt;
      if (!this.isImageContent() || !this.element || this.instance.dispatch("contentLoadImage", {
        content: this,
        isLazy
      }).defaultPrevented) {
        return;
      }
      const imageElement = (
        /** @type HTMLImageElement */
        this.element
      );
      this.updateSrcsetSizes();
      if (this.data.srcset) {
        imageElement.srcset = this.data.srcset;
      }
      imageElement.src = (_this$data$src = this.data.src) !== null && _this$data$src !== void 0 ? _this$data$src : "";
      imageElement.alt = (_this$data$alt = this.data.alt) !== null && _this$data$alt !== void 0 ? _this$data$alt : "";
      this.state = LOAD_STATE.LOADING;
      if (imageElement.complete) {
        this.onLoaded();
      } else {
        imageElement.onload = () => {
          this.onLoaded();
        };
        imageElement.onerror = () => {
          this.onError();
        };
      }
    }
    /**
     * Assign slide to content
     *
     * @param {Slide} slide
     */
    setSlide(slide) {
      this.slide = slide;
      this.hasSlide = true;
      this.instance = slide.pswp;
    }
    /**
     * Content load success handler
     */
    onLoaded() {
      this.state = LOAD_STATE.LOADED;
      if (this.slide && this.element) {
        this.instance.dispatch("loadComplete", {
          slide: this.slide,
          content: this
        });
        if (this.slide.isActive && this.slide.heavyAppended && !this.element.parentNode) {
          this.append();
          this.slide.updateContentSize(true);
        }
        if (this.state === LOAD_STATE.LOADED || this.state === LOAD_STATE.ERROR) {
          this.removePlaceholder();
        }
      }
    }
    /**
     * Content load error handler
     */
    onError() {
      this.state = LOAD_STATE.ERROR;
      if (this.slide) {
        this.displayError();
        this.instance.dispatch("loadComplete", {
          slide: this.slide,
          isError: true,
          content: this
        });
        this.instance.dispatch("loadError", {
          slide: this.slide,
          content: this
        });
      }
    }
    /**
     * @returns {Boolean} If the content is currently loading
     */
    isLoading() {
      return this.instance.applyFilters("isContentLoading", this.state === LOAD_STATE.LOADING, this);
    }
    /**
     * @returns {Boolean} If the content is in error state
     */
    isError() {
      return this.state === LOAD_STATE.ERROR;
    }
    /**
     * @returns {boolean} If the content is image
     */
    isImageContent() {
      return this.type === "image";
    }
    /**
     * Update content size
     *
     * @param {Number} width
     * @param {Number} height
     */
    setDisplayedSize(width, height) {
      if (!this.element) {
        return;
      }
      if (this.placeholder) {
        this.placeholder.setDisplayedSize(width, height);
      }
      if (this.instance.dispatch("contentResize", {
        content: this,
        width,
        height
      }).defaultPrevented) {
        return;
      }
      setWidthHeight(this.element, width, height);
      if (this.isImageContent() && !this.isError()) {
        const isInitialSizeUpdate = !this.displayedImageWidth && width;
        this.displayedImageWidth = width;
        this.displayedImageHeight = height;
        if (isInitialSizeUpdate) {
          this.loadImage(false);
        } else {
          this.updateSrcsetSizes();
        }
        if (this.slide) {
          this.instance.dispatch("imageSizeChange", {
            slide: this.slide,
            width,
            height,
            content: this
          });
        }
      }
    }
    /**
     * @returns {boolean} If the content can be zoomed
     */
    isZoomable() {
      return this.instance.applyFilters("isContentZoomable", this.isImageContent() && this.state !== LOAD_STATE.ERROR, this);
    }
    /**
     * Update image srcset sizes attribute based on width and height
     */
    updateSrcsetSizes() {
      if (!this.isImageContent() || !this.element || !this.data.srcset) {
        return;
      }
      const image = (
        /** @type HTMLImageElement */
        this.element
      );
      const sizesWidth = this.instance.applyFilters("srcsetSizesWidth", this.displayedImageWidth, this);
      if (!image.dataset.largestUsedSize || sizesWidth > parseInt(image.dataset.largestUsedSize, 10)) {
        image.sizes = sizesWidth + "px";
        image.dataset.largestUsedSize = String(sizesWidth);
      }
    }
    /**
     * @returns {boolean} If content should use a placeholder (from msrc by default)
     */
    usePlaceholder() {
      return this.instance.applyFilters("useContentPlaceholder", this.isImageContent(), this);
    }
    /**
     * Preload content with lazy-loading param
     */
    lazyLoad() {
      if (this.instance.dispatch("contentLazyLoad", {
        content: this
      }).defaultPrevented) {
        return;
      }
      this.load(true);
    }
    /**
     * @returns {boolean} If placeholder should be kept after content is loaded
     */
    keepPlaceholder() {
      return this.instance.applyFilters("isKeepingPlaceholder", this.isLoading(), this);
    }
    /**
     * Destroy the content
     */
    destroy() {
      this.hasSlide = false;
      this.slide = void 0;
      if (this.instance.dispatch("contentDestroy", {
        content: this
      }).defaultPrevented) {
        return;
      }
      this.remove();
      if (this.placeholder) {
        this.placeholder.destroy();
        this.placeholder = void 0;
      }
      if (this.isImageContent() && this.element) {
        this.element.onload = null;
        this.element.onerror = null;
        this.element = void 0;
      }
    }
    /**
     * Display error message
     */
    displayError() {
      if (this.slide) {
        var _this$instance$option, _this$instance$option2;
        let errorMsgEl = createElement2("pswp__error-msg", "div");
        errorMsgEl.innerText = (_this$instance$option = (_this$instance$option2 = this.instance.options) === null || _this$instance$option2 === void 0 ? void 0 : _this$instance$option2.errorMsg) !== null && _this$instance$option !== void 0 ? _this$instance$option : "";
        errorMsgEl = /** @type {HTMLDivElement} */
        this.instance.applyFilters("contentErrorElement", errorMsgEl, this);
        this.element = createElement2("pswp__content pswp__error-msg-container", "div");
        this.element.appendChild(errorMsgEl);
        this.slide.container.innerText = "";
        this.slide.container.appendChild(this.element);
        this.slide.updateContentSize(true);
        this.removePlaceholder();
      }
    }
    /**
     * Append the content
     */
    append() {
      if (this.isAttached || !this.element) {
        return;
      }
      this.isAttached = true;
      if (this.state === LOAD_STATE.ERROR) {
        this.displayError();
        return;
      }
      if (this.instance.dispatch("contentAppend", {
        content: this
      }).defaultPrevented) {
        return;
      }
      const supportsDecode = "decode" in this.element;
      if (this.isImageContent()) {
        if (supportsDecode && this.slide && (!this.slide.isActive || isSafari())) {
          this.isDecoding = true;
          this.element.decode().catch(() => {
          }).finally(() => {
            this.isDecoding = false;
            this.appendImage();
          });
        } else {
          this.appendImage();
        }
      } else if (this.slide && !this.element.parentNode) {
        this.slide.container.appendChild(this.element);
      }
    }
    /**
     * Activate the slide,
     * active slide is generally the current one,
     * meaning the user can see it.
     */
    activate() {
      if (this.instance.dispatch("contentActivate", {
        content: this
      }).defaultPrevented || !this.slide) {
        return;
      }
      if (this.isImageContent() && this.isDecoding && !isSafari()) {
        this.appendImage();
      } else if (this.isError()) {
        this.load(false, true);
      }
      if (this.slide.holderElement) {
        this.slide.holderElement.setAttribute("aria-hidden", "false");
      }
    }
    /**
     * Deactivate the content
     */
    deactivate() {
      this.instance.dispatch("contentDeactivate", {
        content: this
      });
      if (this.slide && this.slide.holderElement) {
        this.slide.holderElement.setAttribute("aria-hidden", "true");
      }
    }
    /**
     * Remove the content from DOM
     */
    remove() {
      this.isAttached = false;
      if (this.instance.dispatch("contentRemove", {
        content: this
      }).defaultPrevented) {
        return;
      }
      if (this.element && this.element.parentNode) {
        this.element.remove();
      }
      if (this.placeholder && this.placeholder.element) {
        this.placeholder.element.remove();
      }
    }
    /**
     * Append the image content to slide container
     */
    appendImage() {
      if (!this.isAttached) {
        return;
      }
      if (this.instance.dispatch("contentAppendImage", {
        content: this
      }).defaultPrevented) {
        return;
      }
      if (this.slide && this.element && !this.element.parentNode) {
        this.slide.container.appendChild(this.element);
      }
      if (this.state === LOAD_STATE.LOADED || this.state === LOAD_STATE.ERROR) {
        this.removePlaceholder();
      }
    }
  };
  function getViewportSize(options, pswp) {
    if (options.getViewportSizeFn) {
      const newViewportSize = options.getViewportSizeFn(options, pswp);
      if (newViewportSize) {
        return newViewportSize;
      }
    }
    return {
      x: document.documentElement.clientWidth,
      // TODO: height on mobile is very incosistent due to toolbar
      // find a way to improve this
      //
      // document.documentElement.clientHeight - doesn't seem to work well
      y: window.innerHeight
    };
  }
  function parsePaddingOption(prop, options, viewportSize, itemData, index) {
    let paddingValue = 0;
    if (options.paddingFn) {
      paddingValue = options.paddingFn(viewportSize, itemData, index)[prop];
    } else if (options.padding) {
      paddingValue = options.padding[prop];
    } else {
      const legacyPropName = "padding" + prop[0].toUpperCase() + prop.slice(1);
      if (options[legacyPropName]) {
        paddingValue = options[legacyPropName];
      }
    }
    return Number(paddingValue) || 0;
  }
  function getPanAreaSize(options, viewportSize, itemData, index) {
    return {
      x: viewportSize.x - parsePaddingOption("left", options, viewportSize, itemData, index) - parsePaddingOption("right", options, viewportSize, itemData, index),
      y: viewportSize.y - parsePaddingOption("top", options, viewportSize, itemData, index) - parsePaddingOption("bottom", options, viewportSize, itemData, index)
    };
  }
  var MAX_IMAGE_WIDTH = 4e3;
  var ZoomLevel = class {
    /**
     * @param {PhotoSwipeOptions} options PhotoSwipe options
     * @param {SlideData} itemData Slide data
     * @param {number} index Slide index
     * @param {PhotoSwipe} [pswp] PhotoSwipe instance, can be undefined if not initialized yet
     */
    constructor(options, itemData, index, pswp) {
      this.pswp = pswp;
      this.options = options;
      this.itemData = itemData;
      this.index = index;
      this.panAreaSize = null;
      this.elementSize = null;
      this.fit = 1;
      this.fill = 1;
      this.vFill = 1;
      this.initial = 1;
      this.secondary = 1;
      this.max = 1;
      this.min = 1;
    }
    /**
     * Calculate initial, secondary and maximum zoom level for the specified slide.
     *
     * It should be called when either image or viewport size changes.
     *
     * @param {number} maxWidth
     * @param {number} maxHeight
     * @param {Point} panAreaSize
     */
    update(maxWidth, maxHeight, panAreaSize) {
      const elementSize = {
        x: maxWidth,
        y: maxHeight
      };
      this.elementSize = elementSize;
      this.panAreaSize = panAreaSize;
      const hRatio = panAreaSize.x / elementSize.x;
      const vRatio = panAreaSize.y / elementSize.y;
      this.fit = Math.min(1, hRatio < vRatio ? hRatio : vRatio);
      this.fill = Math.min(1, hRatio > vRatio ? hRatio : vRatio);
      this.vFill = Math.min(1, vRatio);
      this.initial = this._getInitial();
      this.secondary = this._getSecondary();
      this.max = Math.max(this.initial, this.secondary, this._getMax());
      this.min = Math.min(this.fit, this.initial, this.secondary);
      if (this.pswp) {
        this.pswp.dispatch("zoomLevelsUpdate", {
          zoomLevels: this,
          slideData: this.itemData
        });
      }
    }
    /**
     * Parses user-defined zoom option.
     *
     * @private
     * @param {'initial' | 'secondary' | 'max'} optionPrefix Zoom level option prefix (initial, secondary, max)
     * @returns { number | undefined }
     */
    _parseZoomLevelOption(optionPrefix) {
      const optionName = (
        /** @type {'initialZoomLevel' | 'secondaryZoomLevel' | 'maxZoomLevel'} */
        optionPrefix + "ZoomLevel"
      );
      const optionValue = this.options[optionName];
      if (!optionValue) {
        return;
      }
      if (typeof optionValue === "function") {
        return optionValue(this);
      }
      if (optionValue === "fill") {
        return this.fill;
      }
      if (optionValue === "fit") {
        return this.fit;
      }
      return Number(optionValue);
    }
    /**
     * Get zoom level to which image will be zoomed after double-tap gesture,
     * or when user clicks on zoom icon,
     * or mouse-click on image itself.
     * If you return 1 image will be zoomed to its original size.
     *
     * @private
     * @return {number}
     */
    _getSecondary() {
      let currZoomLevel = this._parseZoomLevelOption("secondary");
      if (currZoomLevel) {
        return currZoomLevel;
      }
      currZoomLevel = Math.min(1, this.fit * 3);
      if (this.elementSize && currZoomLevel * this.elementSize.x > MAX_IMAGE_WIDTH) {
        currZoomLevel = MAX_IMAGE_WIDTH / this.elementSize.x;
      }
      return currZoomLevel;
    }
    /**
     * Get initial image zoom level.
     *
     * @private
     * @return {number}
     */
    _getInitial() {
      return this._parseZoomLevelOption("initial") || this.fit;
    }
    /**
     * Maximum zoom level when user zooms
     * via zoom/pinch gesture,
     * via cmd/ctrl-wheel or via trackpad.
     *
     * @private
     * @return {number}
     */
    _getMax() {
      return this._parseZoomLevelOption("max") || Math.max(1, this.fit * 4);
    }
  };
  function lazyLoadData(itemData, instance, index) {
    const content = instance.createContentFromData(itemData, index);
    let zoomLevel;
    const {
      options
    } = instance;
    if (options) {
      zoomLevel = new ZoomLevel(options, itemData, -1);
      let viewportSize;
      if (instance.pswp) {
        viewportSize = instance.pswp.viewportSize;
      } else {
        viewportSize = getViewportSize(options, instance);
      }
      const panAreaSize = getPanAreaSize(options, viewportSize, itemData, index);
      zoomLevel.update(content.width, content.height, panAreaSize);
    }
    content.lazyLoad();
    if (zoomLevel) {
      content.setDisplayedSize(Math.ceil(content.width * zoomLevel.initial), Math.ceil(content.height * zoomLevel.initial));
    }
    return content;
  }
  function lazyLoadSlide(index, instance) {
    const itemData = instance.getItemData(index);
    if (instance.dispatch("lazyLoadSlide", {
      index,
      itemData
    }).defaultPrevented) {
      return;
    }
    return lazyLoadData(itemData, instance, index);
  }
  var PhotoSwipeBase = class extends Eventable {
    /**
     * Get total number of slides
     *
     * @returns {number}
     */
    getNumItems() {
      var _this$options;
      let numItems = 0;
      const dataSource = (_this$options = this.options) === null || _this$options === void 0 ? void 0 : _this$options.dataSource;
      if (dataSource && "length" in dataSource) {
        numItems = dataSource.length;
      } else if (dataSource && "gallery" in dataSource) {
        if (!dataSource.items) {
          dataSource.items = this._getGalleryDOMElements(dataSource.gallery);
        }
        if (dataSource.items) {
          numItems = dataSource.items.length;
        }
      }
      const event = this.dispatch("numItems", {
        dataSource,
        numItems
      });
      return this.applyFilters("numItems", event.numItems, dataSource);
    }
    /**
     * @param {SlideData} slideData
     * @param {number} index
     * @returns {Content}
     */
    createContentFromData(slideData, index) {
      return new Content(slideData, this, index);
    }
    /**
     * Get item data by index.
     *
     * "item data" should contain normalized information that PhotoSwipe needs to generate a slide.
     * For example, it may contain properties like
     * `src`, `srcset`, `w`, `h`, which will be used to generate a slide with image.
     *
     * @param {number} index
     * @returns {SlideData}
     */
    getItemData(index) {
      var _this$options2;
      const dataSource = (_this$options2 = this.options) === null || _this$options2 === void 0 ? void 0 : _this$options2.dataSource;
      let dataSourceItem = {};
      if (Array.isArray(dataSource)) {
        dataSourceItem = dataSource[index];
      } else if (dataSource && "gallery" in dataSource) {
        if (!dataSource.items) {
          dataSource.items = this._getGalleryDOMElements(dataSource.gallery);
        }
        dataSourceItem = dataSource.items[index];
      }
      let itemData = dataSourceItem;
      if (itemData instanceof Element) {
        itemData = this._domElementToItemData(itemData);
      }
      const event = this.dispatch("itemData", {
        itemData: itemData || {},
        index
      });
      return this.applyFilters("itemData", event.itemData, index);
    }
    /**
     * Get array of gallery DOM elements,
     * based on childSelector and gallery element.
     *
     * @param {HTMLElement} galleryElement
     * @returns {HTMLElement[]}
     */
    _getGalleryDOMElements(galleryElement) {
      var _this$options3, _this$options4;
      if ((_this$options3 = this.options) !== null && _this$options3 !== void 0 && _this$options3.children || (_this$options4 = this.options) !== null && _this$options4 !== void 0 && _this$options4.childSelector) {
        return getElementsFromOption(this.options.children, this.options.childSelector, galleryElement) || [];
      }
      return [galleryElement];
    }
    /**
     * Converts DOM element to item data object.
     *
     * @param {HTMLElement} element DOM element
     * @returns {SlideData}
     */
    _domElementToItemData(element) {
      const itemData = {
        element
      };
      const linkEl = (
        /** @type {HTMLAnchorElement} */
        element.tagName === "A" ? element : element.querySelector("a")
      );
      if (linkEl) {
        itemData.src = linkEl.dataset.pswpSrc || linkEl.href;
        if (linkEl.dataset.pswpSrcset) {
          itemData.srcset = linkEl.dataset.pswpSrcset;
        }
        itemData.width = linkEl.dataset.pswpWidth ? parseInt(linkEl.dataset.pswpWidth, 10) : 0;
        itemData.height = linkEl.dataset.pswpHeight ? parseInt(linkEl.dataset.pswpHeight, 10) : 0;
        itemData.w = itemData.width;
        itemData.h = itemData.height;
        if (linkEl.dataset.pswpType) {
          itemData.type = linkEl.dataset.pswpType;
        }
        const thumbnailEl = element.querySelector("img");
        if (thumbnailEl) {
          var _thumbnailEl$getAttri;
          itemData.msrc = thumbnailEl.currentSrc || thumbnailEl.src;
          itemData.alt = (_thumbnailEl$getAttri = thumbnailEl.getAttribute("alt")) !== null && _thumbnailEl$getAttri !== void 0 ? _thumbnailEl$getAttri : "";
        }
        if (linkEl.dataset.pswpCropped || linkEl.dataset.cropped) {
          itemData.thumbCropped = true;
        }
      }
      return this.applyFilters("domItemData", itemData, element, linkEl);
    }
    /**
     * Lazy-load by slide data
     *
     * @param {SlideData} itemData Data about the slide
     * @param {number} index
     * @returns {Content} Image that is being decoded or false.
     */
    lazyLoadData(itemData, index) {
      return lazyLoadData(itemData, this, index);
    }
  };
  var PhotoSwipeLightbox = class extends PhotoSwipeBase {
    /**
     * @param {PhotoSwipeOptions} [options]
     */
    constructor(options) {
      super();
      this.options = options || {};
      this._uid = 0;
      this.shouldOpen = false;
      this._preloadedContent = void 0;
      this.onThumbnailsClick = this.onThumbnailsClick.bind(this);
    }
    /**
     * Initialize lightbox, should be called only once.
     * It's not included in the main constructor, so you may bind events before it.
     */
    init() {
      getElementsFromOption(this.options.gallery, this.options.gallerySelector).forEach((galleryElement) => {
        galleryElement.addEventListener("click", this.onThumbnailsClick, false);
      });
    }
    /**
     * @param {MouseEvent} e
     */
    onThumbnailsClick(e2) {
      if (specialKeyUsed(e2) || window.pswp) {
        return;
      }
      let initialPoint = {
        x: e2.clientX,
        y: e2.clientY
      };
      if (!initialPoint.x && !initialPoint.y) {
        initialPoint = null;
      }
      let clickedIndex = this.getClickedIndex(e2);
      clickedIndex = this.applyFilters("clickedIndex", clickedIndex, e2, this);
      const dataSource = {
        gallery: (
          /** @type {HTMLElement} */
          e2.currentTarget
        )
      };
      if (clickedIndex >= 0) {
        e2.preventDefault();
        this.loadAndOpen(clickedIndex, dataSource, initialPoint);
      }
    }
    /**
     * Get index of gallery item that was clicked.
     *
     * @param {MouseEvent} e click event
     * @returns {number}
     */
    getClickedIndex(e2) {
      if (this.options.getClickedIndexFn) {
        return this.options.getClickedIndexFn.call(this, e2);
      }
      const clickedTarget = (
        /** @type {HTMLElement} */
        e2.target
      );
      const childElements = getElementsFromOption(
        this.options.children,
        this.options.childSelector,
        /** @type {HTMLElement} */
        e2.currentTarget
      );
      const clickedChildIndex = childElements.findIndex((child) => child === clickedTarget || child.contains(clickedTarget));
      if (clickedChildIndex !== -1) {
        return clickedChildIndex;
      } else if (this.options.children || this.options.childSelector) {
        return -1;
      }
      return 0;
    }
    /**
     * Load and open PhotoSwipe
     *
     * @param {number} index
     * @param {DataSource} [dataSource]
     * @param {Point | null} [initialPoint]
     * @returns {boolean}
     */
    loadAndOpen(index, dataSource, initialPoint) {
      if (window.pswp || !this.options) {
        return false;
      }
      if (!dataSource && this.options.gallery && this.options.children) {
        const galleryElements = getElementsFromOption(this.options.gallery);
        if (galleryElements[0]) {
          dataSource = {
            gallery: galleryElements[0]
          };
        }
      }
      this.options.index = index;
      this.options.initialPointerPos = initialPoint;
      this.shouldOpen = true;
      this.preload(index, dataSource);
      return true;
    }
    /**
     * Load the main module and the slide content by index
     *
     * @param {number} index
     * @param {DataSource} [dataSource]
     */
    preload(index, dataSource) {
      const {
        options
      } = this;
      if (dataSource) {
        options.dataSource = dataSource;
      }
      const promiseArray = [];
      const pswpModuleType = typeof options.pswpModule;
      if (isPswpClass(options.pswpModule)) {
        promiseArray.push(Promise.resolve(
          /** @type {Type<PhotoSwipe>} */
          options.pswpModule
        ));
      } else if (pswpModuleType === "string") {
        throw new Error("pswpModule as string is no longer supported");
      } else if (pswpModuleType === "function") {
        promiseArray.push(
          /** @type {() => Promise<Type<PhotoSwipe>>} */
          options.pswpModule()
        );
      } else {
        throw new Error("pswpModule is not valid");
      }
      if (typeof options.openPromise === "function") {
        promiseArray.push(options.openPromise());
      }
      if (options.preloadFirstSlide !== false && index >= 0) {
        this._preloadedContent = lazyLoadSlide(index, this);
      }
      const uid = ++this._uid;
      Promise.all(promiseArray).then((iterableModules) => {
        if (this.shouldOpen) {
          const mainModule = iterableModules[0];
          this._openPhotoswipe(mainModule, uid);
        }
      });
    }
    /**
     * @private
     * @param {Type<PhotoSwipe> | { default: Type<PhotoSwipe> }} module
     * @param {number} uid
     */
    _openPhotoswipe(module, uid) {
      if (uid !== this._uid && this.shouldOpen) {
        return;
      }
      this.shouldOpen = false;
      if (window.pswp) {
        return;
      }
      const pswp = typeof module === "object" ? new module.default(this.options) : new module(this.options);
      this.pswp = pswp;
      window.pswp = pswp;
      Object.keys(this._listeners).forEach((name) => {
        var _this$_listeners$name;
        (_this$_listeners$name = this._listeners[name]) === null || _this$_listeners$name === void 0 || _this$_listeners$name.forEach((fn2) => {
          pswp.on(
            name,
            /** @type {EventCallback<typeof name>} */
            fn2
          );
        });
      });
      Object.keys(this._filters).forEach((name) => {
        var _this$_filters$name;
        (_this$_filters$name = this._filters[name]) === null || _this$_filters$name === void 0 || _this$_filters$name.forEach((filter2) => {
          pswp.addFilter(name, filter2.fn, filter2.priority);
        });
      });
      if (this._preloadedContent) {
        pswp.contentLoader.addToCache(this._preloadedContent);
        this._preloadedContent = void 0;
      }
      pswp.on("destroy", () => {
        this.pswp = void 0;
        delete window.pswp;
      });
      pswp.init();
    }
    /**
     * Unbinds all events, closes PhotoSwipe if it's open.
     */
    destroy() {
      var _this$pswp;
      (_this$pswp = this.pswp) === null || _this$pswp === void 0 || _this$pswp.destroy();
      this.shouldOpen = false;
      this._listeners = {};
      getElementsFromOption(this.options.gallery, this.options.gallerySelector).forEach((galleryElement) => {
        galleryElement.removeEventListener("click", this.onThumbnailsClick, false);
      });
    }
  };

  // app/javascript/controllers/gallery_controller.js
  var gallery_controller_default = class extends Controller {
    connect() {
      const lightbox = new PhotoSwipeLightbox({
        gallery: this.element,
        children: "a",
        pswpModule: () => Promise.resolve().then(() => (init_photoswipe_esm(), photoswipe_esm_exports))
      });
      lightbox.init();
    }
  };

  // app/javascript/controllers/hello_controller.js
  var hello_controller_default = class extends Controller {
    connect() {
      this.element.textContent = "Hello World!";
    }
  };

  // app/javascript/controllers/help_search_controller.js
  var help_search_controller_default = class extends Controller {
    static targets = ["searchMenu"];
    static values = {
      recentData: Array,
      linkClasses: String
    };
    connect() {
      useTransition(this, {
        element: this.searchMenuTarget
      });
    }
    toggle() {
      this.toggleTransition();
      this.showRecents();
    }
    hide(event) {
      if (!this.element.contains(event.target) && !this.searchMenuTarget.classList.contains("hidden")) {
        this.leave();
      }
    }
    disconnect() {
      this.leave();
    }
    closeMenu() {
      this.toggleTransition();
    }
    showRecents() {
      const data = this.recentDataValue;
      const listContainer = this.searchMenuTarget;
      const linkClasses = this.linkClassesValue;
      const svgIcon = `<svg class="w-6 h-6 stroke-current opacity-50 group-hover:opacity-90" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><title>magnifying-glass</title><g fill="none"><path d="M21 21l-5.197-5.197m0 0A7.5 7.5 0 1 0 5.196 5.196a7.5 7.5 0 0 0 10.607 10.607z" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"></path></g></svg>`;
      listContainer.innerHTML = "";
      data.forEach((item) => {
        const li2 = `
      <li>
        <a href="${item.url}" class="group flex items-center ${linkClasses}" target="_blank">
          ${svgIcon} <span class="pl-2">${item.title}</span>
        </a>
      </li>
    `;
        listContainer.insertAdjacentHTML("afterbegin", li2);
      });
    }
  };

  // app/javascript/controllers/inbox_controller.js
  var inbox_controller_default = class extends Controller {
    static targets = [
      "inboxBtn",
      "inboxContainer",
      "messageContainer",
      "bookingContainer"
    ];
    toggle(event) {
      console.log(event.target.dataset.buttonValue);
      this.resetButtons();
      switch (event.target.dataset.buttonValue) {
        case "inbox":
          event.target.classList.add("text-primary-600");
          this.showInbox();
          break;
        case "message":
          event.target.classList.add("text-primary-600");
          this.showMessage();
          break;
        case "booking":
          event.target.classList.add("text-primary-600");
          this.showBooking();
      }
    }
    showInbox() {
      this.inboxContainerTarget.style.display = "block";
      this.messageContainerTarget.style.display = "none";
      this.bookingContainerTarget.style.display = "none";
    }
    showMessage() {
      this.messageContainerTarget.style.display = "block";
      this.inboxContainerTarget.style.display = "none";
      this.bookingContainerTarget.style.display = "none";
    }
    showBooking() {
      this.bookingContainerTarget.style.display = "block";
      this.inboxContainerTarget.style.display = "none";
      this.messageContainerTarget.style.display = "none";
    }
    resetButtons() {
      this.inboxBtnTargets.forEach((btn) => {
        btn.classList.remove("text-primary-600");
      });
    }
  };

  // app/javascript/controllers/insight_chart_controller.js
  var import_apexcharts = __toESM(require_apexcharts_common());
  var insight_chart_controller_default = class extends Controller {
    static values = {
      name: String,
      data: Array,
      yAxisMin: Number,
      default: 0,
      yAxisMax: { type: Number, default: 100 },
      yAxisDenomination: { type: String, default: "%" }
    };
    connect() {
      window.matchMedia("(prefers-color-scheme: dark)").addListener(() => {
        this.initializeChart();
        this.updateChartTheme();
      });
      this.initializeChart();
      this.updateChartTheme();
    }
    initializeChart() {
      const options = {
        series: [
          {
            name: this.nameValue,
            data: this.dataValue
          }
        ],
        chart: {
          height: 350,
          type: "line",
          background: "transparent",
          toolbar: {
            show: false
          },
          // Add the theme property
          theme: {
            mode: this.isDarkMode() ? "dark" : "light"
          }
        },
        stroke: {
          width: 5,
          curve: "smooth"
        },
        xaxis: {
          type: "datetime",
          tickAmount: 6,
          labels: {
            formatter: function(value, timestamp, opts) {
              return opts.dateFormatter(new Date(timestamp), "MM/dd");
            },
            style: {
              fontFamily: "Lexend",
              fontSize: 14
            }
          }
        },
        yaxis: {
          min: this.yAxisMinValue,
          max: this.yAxisMaxValue,
          tickAmount: 5,
          labels: {
            formatter: (value) => `${value.toFixed(2)} ${this.yAxisDenominationValue}`,
            style: {
              fontFamily: "Lexend",
              fontSize: 14
            }
          }
        },
        fill: {
          type: "gradient",
          gradient: {
            shade: "dark",
            gradientToColors: ["#F43F5E"],
            shadeIntensity: 1,
            type: "horizontal",
            opacityFrom: 1,
            opacityTo: 1,
            stops: [0, 100, 100, 100]
          }
        },
        tooltip: {
          x: {
            title: {
              formatter: (seriesName) => `${seriesName.toFixed(2)} ${this.yAxisDenominationValue}`
            }
          },
          marker: {
            show: false
          }
        }
      };
      this.chart = new import_apexcharts.default(this.element, options);
      this.chart.render();
    }
    updateChartTheme() {
      if (this.chart) {
        const newTheme = this.isDarkMode() ? "dark" : "light";
        this.chart.updateOptions({
          theme: {
            mode: newTheme
          }
        });
      }
    }
    isDarkMode() {
      return window.matchMedia && window.matchMedia("(prefers-color-scheme: dark)").matches;
    }
  };

  // app/javascript/controllers/insights_controller.js
  var import_apexcharts2 = __toESM(require_apexcharts_common());
  var insights_controller_default = class extends Controller {
    connect() {
    }
    performance() {
    }
  };

  // app/javascript/controllers/modal_controller.js
  var modal_controller_default = class extends Controller {
    static targets = ["container", "content"];
    connect() {
      useTransition(this, {
        element: this.contentTarget
      });
      useClickOutside(this, {
        element: this.contentTarget
      });
    }
    open(event) {
      event.preventDefault();
      this.enableAppearance();
      this.toggleTransition();
    }
    close(event) {
      event.preventDefault();
      this.leave();
      this.disableAppearance();
    }
    clickOutside(event) {
      const action = event.target.dataset.action;
      if (action == "click->modal#open" || action == "click->modal#open:prevent") {
        return;
      }
      this.close(event);
    }
    closeWithEsc(event) {
      if (event.keyCode === 27 && !this.containerTarget.classList.contains("hidden")) {
        this.close(event);
      }
    }
    enableAppearance() {
      this.containerTarget.classList.add("bg-black/80");
      this.containerTarget.classList.remove("hidden");
    }
    disableAppearance() {
      this.containerTarget.classList.add("hidden");
      this.containerTarget.classList.remove("bg-black/80");
    }
    disconnect() {
      this.toggleTransition();
    }
  };

  // app/javascript/controllers/nav_controller.js
  var nav_controller_default = class extends Controller {
    static targets = ["nav"];
    connect() {
      useTransition(this, {
        element: this.navTarget
      });
    }
    toggle() {
      this.toggleTransition();
    }
    disconnect() {
      this.leave();
    }
  };

  // app/javascript/controllers/pricing_controller.js
  var pricing_controller_default = class extends Controller {
    static targets = ["price", "interval", "intervalBtn", "promotion"];
    initialize() {
      this.interval = "month";
    }
    toggle(event) {
      this.interval = this.interval === "month" ? "year" : "month";
      this.priceTargets.forEach((price) => {
        const monthlyPrice = price.dataset.month;
        const annualPrice = price.dataset.year;
        price.innerText = this.interval === "month" ? monthlyPrice : annualPrice;
      });
      this.intervalTargets.forEach((interval) => {
        interval.innerText = `/${this.interval}`;
      });
      this.intervalBtnTargets.forEach((btn) => {
        if (event.currentTarget === btn) {
          btn.classList.remove("btn", "btn-transparent");
          btn.classList.add("btn", "btn-primary");
        } else {
          btn.classList.remove("btn", "btn-primary");
          btn.classList.add("btn", "btn-transparent");
        }
      });
      this.promotionTarget.classList.toggle("hidden");
    }
  };

  // app/javascript/controllers/properties_controller.js
  var properties_controller_default = class extends Controller {
    static targets = ["grid", "list", "listbutton", "gridbutton"];
    connect() {
    }
    toggle(event) {
      event.preventDefault();
      const view = event.target.getAttribute("data-view");
      if (view === "grid") {
        this.gridTarget.classList.remove("hidden");
        this.listTarget.classList.add("hidden");
        this.listbuttonTarget.dataset.active = "false";
        this.gridbuttonTarget.dataset.active = "true";
      } else if (view === "list") {
        this.gridTarget.classList.add("hidden");
        this.listTarget.classList.remove("hidden");
        this.listbuttonTarget.dataset.active = "true";
        this.gridbuttonTarget.dataset.active = "false";
      }
    }
  };

  // app/javascript/controllers/scroll_spy_controller.js
  var scroll_spy_controller_default = class extends Controller {
    static targets = ["link"];
    static values = {
      activeClass: String,
      inactiveClass: String
    };
    connect() {
      this.scrollHandler = this.scrollHandler.bind(this);
      window.addEventListener("scroll", this.scrollHandler);
    }
    disconnect() {
      window.removeEventListener("scroll", this.scrollHandler);
    }
    scrollHandler() {
      const scrollPosition = window.scrollY;
      this.linkTargets.forEach((link) => {
        if (!link) {
          return;
        }
        const targetId = link.getAttribute("href");
        const targetElement = document.querySelector(targetId);
        if (targetElement) {
          const targetPosition = targetElement.offsetTop;
          const targetHeight = targetElement.offsetHeight;
          if (scrollPosition >= targetPosition && scrollPosition < targetPosition + targetHeight) {
            this.activateLink(link);
          } else {
            this.deactivateLink(link);
          }
        }
      });
    }
    activateLink(link) {
      const activeClasses = this.activeClassValue.split(" ");
      activeClasses.forEach((className) => {
        link.classList.add(className);
      });
      const inactiveClasses = this.inactiveClassValue.split(" ");
      inactiveClasses.forEach((className) => {
        link.classList.remove(className);
      });
    }
    deactivateLink(link) {
      const activeClasses = this.activeClassValue.split(" ");
      activeClasses.forEach((className) => {
        link.classList.remove(className);
      });
      const inactiveClasses = this.inactiveClassValue.split(" ");
      inactiveClasses.forEach((className) => {
        link.classList.add(className);
      });
    }
  };

  // node_modules/hotkeys-js/dist/hotkeys.esm.js
  var isff = typeof navigator !== "undefined" ? navigator.userAgent.toLowerCase().indexOf("firefox") > 0 : false;
  function addEvent(object, event, method, useCapture) {
    if (object.addEventListener) {
      object.addEventListener(event, method, useCapture);
    } else if (object.attachEvent) {
      object.attachEvent("on".concat(event), method);
    }
  }
  function removeEvent(object, event, method, useCapture) {
    if (object.removeEventListener) {
      object.removeEventListener(event, method, useCapture);
    } else if (object.deachEvent) {
      object.deachEvent("on".concat(event), method);
    }
  }
  function getMods(modifier, key) {
    const mods = key.slice(0, key.length - 1);
    for (let i2 = 0; i2 < mods.length; i2++)
      mods[i2] = modifier[mods[i2].toLowerCase()];
    return mods;
  }
  function getKeys(key) {
    if (typeof key !== "string")
      key = "";
    key = key.replace(/\s/g, "");
    const keys = key.split(",");
    let index = keys.lastIndexOf("");
    for (; index >= 0; ) {
      keys[index - 1] += ",";
      keys.splice(index, 1);
      index = keys.lastIndexOf("");
    }
    return keys;
  }
  function compareArray(a1, a2) {
    const arr1 = a1.length >= a2.length ? a1 : a2;
    const arr2 = a1.length >= a2.length ? a2 : a1;
    let isIndex = true;
    for (let i2 = 0; i2 < arr1.length; i2++) {
      if (arr2.indexOf(arr1[i2]) === -1)
        isIndex = false;
    }
    return isIndex;
  }
  var _keyMap = {
    backspace: 8,
    "\u232B": 8,
    tab: 9,
    clear: 12,
    enter: 13,
    "\u21A9": 13,
    return: 13,
    esc: 27,
    escape: 27,
    space: 32,
    left: 37,
    up: 38,
    right: 39,
    down: 40,
    del: 46,
    delete: 46,
    ins: 45,
    insert: 45,
    home: 36,
    end: 35,
    pageup: 33,
    pagedown: 34,
    capslock: 20,
    num_0: 96,
    num_1: 97,
    num_2: 98,
    num_3: 99,
    num_4: 100,
    num_5: 101,
    num_6: 102,
    num_7: 103,
    num_8: 104,
    num_9: 105,
    num_multiply: 106,
    num_add: 107,
    num_enter: 108,
    num_subtract: 109,
    num_decimal: 110,
    num_divide: 111,
    "\u21EA": 20,
    ",": 188,
    ".": 190,
    "/": 191,
    "`": 192,
    "-": isff ? 173 : 189,
    "=": isff ? 61 : 187,
    ";": isff ? 59 : 186,
    "'": 222,
    "[": 219,
    "]": 221,
    "\\": 220
  };
  var _modifier = {
    // shiftKey
    "\u21E7": 16,
    shift: 16,
    // altKey
    "\u2325": 18,
    alt: 18,
    option: 18,
    // ctrlKey
    "\u2303": 17,
    ctrl: 17,
    control: 17,
    // metaKey
    "\u2318": 91,
    cmd: 91,
    command: 91
  };
  var modifierMap = {
    16: "shiftKey",
    18: "altKey",
    17: "ctrlKey",
    91: "metaKey",
    shiftKey: 16,
    ctrlKey: 17,
    altKey: 18,
    metaKey: 91
  };
  var _mods = {
    16: false,
    18: false,
    17: false,
    91: false
  };
  var _handlers = {};
  for (let k2 = 1; k2 < 20; k2++) {
    _keyMap["f".concat(k2)] = 111 + k2;
  }
  var _downKeys = [];
  var winListendFocus = null;
  var _scope = "all";
  var elementEventMap = /* @__PURE__ */ new Map();
  var code = (x2) => _keyMap[x2.toLowerCase()] || _modifier[x2.toLowerCase()] || x2.toUpperCase().charCodeAt(0);
  var getKey = (x2) => Object.keys(_keyMap).find((k2) => _keyMap[k2] === x2);
  var getModifier = (x2) => Object.keys(_modifier).find((k2) => _modifier[k2] === x2);
  function setScope(scope) {
    _scope = scope || "all";
  }
  function getScope() {
    return _scope || "all";
  }
  function getPressedKeyCodes() {
    return _downKeys.slice(0);
  }
  function getPressedKeyString() {
    return _downKeys.map((c2) => getKey(c2) || getModifier(c2) || String.fromCharCode(c2));
  }
  function getAllKeyCodes() {
    const result = [];
    Object.keys(_handlers).forEach((k2) => {
      _handlers[k2].forEach((_ref) => {
        let {
          key,
          scope,
          mods,
          shortcut
        } = _ref;
        result.push({
          scope,
          shortcut,
          mods,
          keys: key.split("+").map((v2) => code(v2))
        });
      });
    });
    return result;
  }
  function filter(event) {
    const target = event.target || event.srcElement;
    const {
      tagName
    } = target;
    let flag = true;
    const isInput = tagName === "INPUT" && !["checkbox", "radio", "range", "button", "file", "reset", "submit", "color"].includes(target.type);
    if (target.isContentEditable || (isInput || tagName === "TEXTAREA" || tagName === "SELECT") && !target.readOnly) {
      flag = false;
    }
    return flag;
  }
  function isPressed(keyCode) {
    if (typeof keyCode === "string") {
      keyCode = code(keyCode);
    }
    return _downKeys.indexOf(keyCode) !== -1;
  }
  function deleteScope(scope, newScope) {
    let handlers;
    let i2;
    if (!scope)
      scope = getScope();
    for (const key in _handlers) {
      if (Object.prototype.hasOwnProperty.call(_handlers, key)) {
        handlers = _handlers[key];
        for (i2 = 0; i2 < handlers.length; ) {
          if (handlers[i2].scope === scope) {
            const deleteItems = handlers.splice(i2, 1);
            deleteItems.forEach((_ref2) => {
              let {
                element
              } = _ref2;
              return removeKeyEvent(element);
            });
          } else {
            i2++;
          }
        }
      }
    }
    if (getScope() === scope)
      setScope(newScope || "all");
  }
  function clearModifier(event) {
    let key = event.keyCode || event.which || event.charCode;
    const i2 = _downKeys.indexOf(key);
    if (i2 >= 0) {
      _downKeys.splice(i2, 1);
    }
    if (event.key && event.key.toLowerCase() === "meta") {
      _downKeys.splice(0, _downKeys.length);
    }
    if (key === 93 || key === 224)
      key = 91;
    if (key in _mods) {
      _mods[key] = false;
      for (const k2 in _modifier)
        if (_modifier[k2] === key)
          hotkeys[k2] = false;
    }
  }
  function unbind(keysInfo) {
    if (typeof keysInfo === "undefined") {
      Object.keys(_handlers).forEach((key) => {
        Array.isArray(_handlers[key]) && _handlers[key].forEach((info) => eachUnbind(info));
        delete _handlers[key];
      });
      removeKeyEvent(null);
    } else if (Array.isArray(keysInfo)) {
      keysInfo.forEach((info) => {
        if (info.key)
          eachUnbind(info);
      });
    } else if (typeof keysInfo === "object") {
      if (keysInfo.key)
        eachUnbind(keysInfo);
    } else if (typeof keysInfo === "string") {
      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }
      let [scope, method] = args;
      if (typeof scope === "function") {
        method = scope;
        scope = "";
      }
      eachUnbind({
        key: keysInfo,
        scope,
        method,
        splitKey: "+"
      });
    }
  }
  var eachUnbind = (_ref3) => {
    let {
      key,
      scope,
      method,
      splitKey = "+"
    } = _ref3;
    const multipleKeys = getKeys(key);
    multipleKeys.forEach((originKey) => {
      const unbindKeys = originKey.split(splitKey);
      const len = unbindKeys.length;
      const lastKey = unbindKeys[len - 1];
      const keyCode = lastKey === "*" ? "*" : code(lastKey);
      if (!_handlers[keyCode])
        return;
      if (!scope)
        scope = getScope();
      const mods = len > 1 ? getMods(_modifier, unbindKeys) : [];
      const unbindElements = [];
      _handlers[keyCode] = _handlers[keyCode].filter((record) => {
        const isMatchingMethod = method ? record.method === method : true;
        const isUnbind = isMatchingMethod && record.scope === scope && compareArray(record.mods, mods);
        if (isUnbind)
          unbindElements.push(record.element);
        return !isUnbind;
      });
      unbindElements.forEach((element) => removeKeyEvent(element));
    });
  };
  function eventHandler(event, handler, scope, element) {
    if (handler.element !== element) {
      return;
    }
    let modifiersMatch;
    if (handler.scope === scope || handler.scope === "all") {
      modifiersMatch = handler.mods.length > 0;
      for (const y2 in _mods) {
        if (Object.prototype.hasOwnProperty.call(_mods, y2)) {
          if (!_mods[y2] && handler.mods.indexOf(+y2) > -1 || _mods[y2] && handler.mods.indexOf(+y2) === -1) {
            modifiersMatch = false;
          }
        }
      }
      if (handler.mods.length === 0 && !_mods[16] && !_mods[18] && !_mods[17] && !_mods[91] || modifiersMatch || handler.shortcut === "*") {
        handler.keys = [];
        handler.keys = handler.keys.concat(_downKeys);
        if (handler.method(event, handler) === false) {
          if (event.preventDefault)
            event.preventDefault();
          else
            event.returnValue = false;
          if (event.stopPropagation)
            event.stopPropagation();
          if (event.cancelBubble)
            event.cancelBubble = true;
        }
      }
    }
  }
  function dispatch(event, element) {
    const asterisk = _handlers["*"];
    let key = event.keyCode || event.which || event.charCode;
    if (!hotkeys.filter.call(this, event))
      return;
    if (key === 93 || key === 224)
      key = 91;
    if (_downKeys.indexOf(key) === -1 && key !== 229)
      _downKeys.push(key);
    ["ctrlKey", "altKey", "shiftKey", "metaKey"].forEach((keyName) => {
      const keyNum = modifierMap[keyName];
      if (event[keyName] && _downKeys.indexOf(keyNum) === -1) {
        _downKeys.push(keyNum);
      } else if (!event[keyName] && _downKeys.indexOf(keyNum) > -1) {
        _downKeys.splice(_downKeys.indexOf(keyNum), 1);
      } else if (keyName === "metaKey" && event[keyName] && _downKeys.length === 3) {
        if (!(event.ctrlKey || event.shiftKey || event.altKey)) {
          _downKeys = _downKeys.slice(_downKeys.indexOf(keyNum));
        }
      }
    });
    if (key in _mods) {
      _mods[key] = true;
      for (const k2 in _modifier) {
        if (_modifier[k2] === key)
          hotkeys[k2] = true;
      }
      if (!asterisk)
        return;
    }
    for (const e2 in _mods) {
      if (Object.prototype.hasOwnProperty.call(_mods, e2)) {
        _mods[e2] = event[modifierMap[e2]];
      }
    }
    if (event.getModifierState && !(event.altKey && !event.ctrlKey) && event.getModifierState("AltGraph")) {
      if (_downKeys.indexOf(17) === -1) {
        _downKeys.push(17);
      }
      if (_downKeys.indexOf(18) === -1) {
        _downKeys.push(18);
      }
      _mods[17] = true;
      _mods[18] = true;
    }
    const scope = getScope();
    if (asterisk) {
      for (let i2 = 0; i2 < asterisk.length; i2++) {
        if (asterisk[i2].scope === scope && (event.type === "keydown" && asterisk[i2].keydown || event.type === "keyup" && asterisk[i2].keyup)) {
          eventHandler(event, asterisk[i2], scope, element);
        }
      }
    }
    if (!(key in _handlers))
      return;
    const handlerKey = _handlers[key];
    const keyLen = handlerKey.length;
    for (let i2 = 0; i2 < keyLen; i2++) {
      if (event.type === "keydown" && handlerKey[i2].keydown || event.type === "keyup" && handlerKey[i2].keyup) {
        if (handlerKey[i2].key) {
          const record = handlerKey[i2];
          const {
            splitKey
          } = record;
          const keyShortcut = record.key.split(splitKey);
          const _downKeysCurrent = [];
          for (let a2 = 0; a2 < keyShortcut.length; a2++) {
            _downKeysCurrent.push(code(keyShortcut[a2]));
          }
          if (_downKeysCurrent.sort().join("") === _downKeys.sort().join("")) {
            eventHandler(event, record, scope, element);
          }
        }
      }
    }
  }
  function hotkeys(key, option, method) {
    _downKeys = [];
    const keys = getKeys(key);
    let mods = [];
    let scope = "all";
    let element = document;
    let i2 = 0;
    let keyup = false;
    let keydown = true;
    let splitKey = "+";
    let capture = false;
    let single = false;
    if (method === void 0 && typeof option === "function") {
      method = option;
    }
    if (Object.prototype.toString.call(option) === "[object Object]") {
      if (option.scope)
        scope = option.scope;
      if (option.element)
        element = option.element;
      if (option.keyup)
        keyup = option.keyup;
      if (option.keydown !== void 0)
        keydown = option.keydown;
      if (option.capture !== void 0)
        capture = option.capture;
      if (typeof option.splitKey === "string")
        splitKey = option.splitKey;
      if (option.single === true)
        single = true;
    }
    if (typeof option === "string")
      scope = option;
    if (single)
      unbind(key, scope);
    for (; i2 < keys.length; i2++) {
      key = keys[i2].split(splitKey);
      mods = [];
      if (key.length > 1)
        mods = getMods(_modifier, key);
      key = key[key.length - 1];
      key = key === "*" ? "*" : code(key);
      if (!(key in _handlers))
        _handlers[key] = [];
      _handlers[key].push({
        keyup,
        keydown,
        scope,
        mods,
        shortcut: keys[i2],
        method,
        key: keys[i2],
        splitKey,
        element
      });
    }
    if (typeof element !== "undefined" && window) {
      if (!elementEventMap.has(element)) {
        const keydownListener = function() {
          let event = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : window.event;
          return dispatch(event, element);
        };
        const keyupListenr = function() {
          let event = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : window.event;
          dispatch(event, element);
          clearModifier(event);
        };
        elementEventMap.set(element, {
          keydownListener,
          keyupListenr,
          capture
        });
        addEvent(element, "keydown", keydownListener, capture);
        addEvent(element, "keyup", keyupListenr, capture);
      }
      if (!winListendFocus) {
        const listener = () => {
          _downKeys = [];
        };
        winListendFocus = {
          listener,
          capture
        };
        addEvent(window, "focus", listener, capture);
      }
    }
  }
  function trigger(shortcut) {
    let scope = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "all";
    Object.keys(_handlers).forEach((key) => {
      const dataList = _handlers[key].filter((item) => item.scope === scope && item.shortcut === shortcut);
      dataList.forEach((data) => {
        if (data && data.method) {
          data.method();
        }
      });
    });
  }
  function removeKeyEvent(element) {
    const values = Object.values(_handlers).flat();
    const findindex = values.findIndex((_ref4) => {
      let {
        element: el
      } = _ref4;
      return el === element;
    });
    if (findindex < 0) {
      const {
        keydownListener,
        keyupListenr,
        capture
      } = elementEventMap.get(element) || {};
      if (keydownListener && keyupListenr) {
        removeEvent(element, "keyup", keyupListenr, capture);
        removeEvent(element, "keydown", keydownListener, capture);
        elementEventMap.delete(element);
      }
    }
    if (values.length <= 0 || elementEventMap.size <= 0) {
      const eventKeys = Object.keys(elementEventMap);
      eventKeys.forEach((el) => {
        const {
          keydownListener,
          keyupListenr,
          capture
        } = elementEventMap.get(el) || {};
        if (keydownListener && keyupListenr) {
          removeEvent(el, "keyup", keyupListenr, capture);
          removeEvent(el, "keydown", keydownListener, capture);
          elementEventMap.delete(el);
        }
      });
      elementEventMap.clear();
      Object.keys(_handlers).forEach((key) => delete _handlers[key]);
      if (winListendFocus) {
        const {
          listener,
          capture
        } = winListendFocus;
        removeEvent(window, "focus", listener, capture);
        winListendFocus = null;
      }
    }
  }
  var _api = {
    getPressedKeyString,
    setScope,
    getScope,
    deleteScope,
    getPressedKeyCodes,
    getAllKeyCodes,
    isPressed,
    filter,
    trigger,
    unbind,
    keyMap: _keyMap,
    modifier: _modifier,
    modifierMap
  };
  for (const a2 in _api) {
    if (Object.prototype.hasOwnProperty.call(_api, a2)) {
      hotkeys[a2] = _api[a2];
    }
  }
  if (typeof window !== "undefined") {
    const _hotkeys = window.hotkeys;
    hotkeys.noConflict = (deep) => {
      if (deep && window.hotkeys === hotkeys) {
        window.hotkeys = _hotkeys;
      }
      return hotkeys;
    };
    window.hotkeys = hotkeys;
  }

  // app/javascript/controllers/search_controller.js
  var search_controller_default = class extends Controller {
    static targets = ["input", "overlay", "content", "anchor"];
    connect() {
      if (this.hasOverlayTarget) {
        useTransition(this, {
          element: this.overlayTarget
        });
        const keyCombination = this.isMac() ? "command+k" : "ctrl+k";
        hotkeys(keyCombination, (event, handler) => {
          event.preventDefault();
          this.toggle();
        });
      }
    }
    isMac() {
      return navigator.platform.toUpperCase().indexOf("MAC") >= 0;
    }
    toggle() {
      if (this.overlayTarget.classList.contains("hidden")) {
        this.toggleTransition();
        this.inputTarget.focus();
      } else {
        this.close();
      }
    }
    close() {
      this.inputTarget.blur();
      this.toggleTransition();
      this.inputTarget.value = "";
    }
  };

  // app/javascript/controllers/select_all_controller.js
  var select_all_controller_default = class extends Controller {
    static targets = ["checkbox", "selectAll"];
    connect() {
      this.selectAllTarget.addEventListener("change", this.selectAll.bind(this));
    }
    selectAll() {
      const isChecked = this.selectAllTarget.checked;
      this.checkboxTargets.forEach((checkbox) => {
        checkbox.checked = isChecked;
      });
    }
  };

  // app/javascript/controllers/smooth_scroll_controller.js
  var smooth_scroll_controller_default = class extends Controller {
    scroll(event) {
      event.preventDefault();
      const targetId = event.currentTarget.getAttribute("href").substring(1);
      const targetElement = document.getElementById(targetId);
      if (targetElement) {
        targetElement.scrollIntoView({ behavior: "smooth" });
      }
    }
  };

  // app/javascript/controllers/tabs_controller.js
  var tabs_controller_default = class extends Controller {
    static targets = ["tab", "panel"];
    connect() {
      this.activeTabClasses = (this.data.get("activeTab") || "active").split(" ");
      this.inactiveTabClasses = (this.data.get("inactiveTab") || "inactive").split(" ");
      if (this.anchor)
        this.index = this.tabTargets.findIndex((tab) => tab.id === this.anchor);
      this.showTab();
    }
    change(event) {
      event.preventDefault();
      if (event.currentTarget.dataset.index) {
        this.index = event.currentTarget.dataset.index;
      } else if (event.currentTarget.dataset.id) {
        this.index = this.tabTargets.findIndex(
          (tab) => tab.id == event.currentTarget.dataset.id
        );
      } else {
        this.index = this.tabTargets.indexOf(event.currentTarget);
      }
      window.dispatchEvent(new CustomEvent("tsc:tab-change"));
    }
    showTab() {
      this.tabTargets.forEach((tab, index) => {
        const panel = this.panelTargets[index];
        if (index === this.index) {
          panel.classList.remove("hidden");
          tab.classList.remove(...this.inactiveTabClasses);
          tab.classList.add(...this.activeTabClasses);
          if (tab.id) {
            location.hash = tab.id;
          }
        } else {
          panel.classList.add("hidden");
          tab.classList.remove(...this.activeTabClasses);
          tab.classList.add(...this.inactiveTabClasses);
        }
      });
    }
    get index() {
      return parseInt(this.data.get("index") || 0);
    }
    set index(value) {
      this.data.set("index", value >= 0 ? value : 0);
      this.showTab();
    }
    get anchor() {
      return document.URL.split("#").length > 1 ? document.URL.split("#")[1] : null;
    }
  };

  // app/javascript/controllers/visibility_controller.js
  var visibility_controller_default = class extends Controller {
    static targets = ["container"];
    connect() {
      useTransition(this, {
        element: this.containerTarget
      });
    }
    toggle() {
      this.toggleTransition();
    }
    disconnect() {
      this.leave();
    }
  };

  // app/javascript/controllers/index.js
  application.register("auto-expand-text-area", auto_expand_text_area_controller_default);
  application.register("counter-input", counter_input_controller_default);
  application.register("dark-mode", dark_mode_controller_default);
  application.register("date-range-picker", date_range_picker_controller_default);
  application.register("dropdown", dropdown_controller_default);
  application.register("gallery", gallery_controller_default);
  application.register("hello", hello_controller_default);
  application.register("help-search", help_search_controller_default);
  application.register("inbox", inbox_controller_default);
  application.register("insight-chart", insight_chart_controller_default);
  application.register("insights", insights_controller_default);
  application.register("modal", modal_controller_default);
  application.register("nav", nav_controller_default);
  application.register("pricing", pricing_controller_default);
  application.register("properties", properties_controller_default);
  application.register("scroll-spy", scroll_spy_controller_default);
  application.register("search", search_controller_default);
  application.register("select-all", select_all_controller_default);
  application.register("smooth-scroll", smooth_scroll_controller_default);
  application.register("tabs", tabs_controller_default);
  application.register("visibility", visibility_controller_default);

  // node_modules/@hotwired/turbo/dist/turbo.es2017-esm.js
  (function() {
    if (window.Reflect === void 0 || window.customElements === void 0 || window.customElements.polyfillWrapFlushCallback) {
      return;
    }
    const BuiltInHTMLElement = HTMLElement;
    const wrapperForTheName = {
      HTMLElement: function HTMLElement2() {
        return Reflect.construct(BuiltInHTMLElement, [], this.constructor);
      }
    };
    window.HTMLElement = wrapperForTheName["HTMLElement"];
    HTMLElement.prototype = BuiltInHTMLElement.prototype;
    HTMLElement.prototype.constructor = HTMLElement;
    Object.setPrototypeOf(HTMLElement, BuiltInHTMLElement);
  })();
  (function(prototype) {
    if (typeof prototype.requestSubmit == "function")
      return;
    prototype.requestSubmit = function(submitter) {
      if (submitter) {
        validateSubmitter(submitter, this);
        submitter.click();
      } else {
        submitter = document.createElement("input");
        submitter.type = "submit";
        submitter.hidden = true;
        this.appendChild(submitter);
        submitter.click();
        this.removeChild(submitter);
      }
    };
    function validateSubmitter(submitter, form) {
      submitter instanceof HTMLElement || raise(TypeError, "parameter 1 is not of type 'HTMLElement'");
      submitter.type == "submit" || raise(TypeError, "The specified element is not a submit button");
      submitter.form == form || raise(DOMException, "The specified element is not owned by this form element", "NotFoundError");
    }
    function raise(errorConstructor, message, name) {
      throw new errorConstructor("Failed to execute 'requestSubmit' on 'HTMLFormElement': " + message + ".", name);
    }
  })(HTMLFormElement.prototype);
  var submittersByForm = /* @__PURE__ */ new WeakMap();
  function findSubmitterFromClickTarget(target) {
    const element = target instanceof Element ? target : target instanceof Node ? target.parentElement : null;
    const candidate = element ? element.closest("input, button") : null;
    return (candidate === null || candidate === void 0 ? void 0 : candidate.type) == "submit" ? candidate : null;
  }
  function clickCaptured(event) {
    const submitter = findSubmitterFromClickTarget(event.target);
    if (submitter && submitter.form) {
      submittersByForm.set(submitter.form, submitter);
    }
  }
  (function() {
    if ("submitter" in Event.prototype)
      return;
    let prototype = window.Event.prototype;
    if ("SubmitEvent" in window && /Apple Computer/.test(navigator.vendor)) {
      prototype = window.SubmitEvent.prototype;
    } else if ("SubmitEvent" in window) {
      return;
    }
    addEventListener("click", clickCaptured, true);
    Object.defineProperty(prototype, "submitter", {
      get() {
        if (this.type == "submit" && this.target instanceof HTMLFormElement) {
          return submittersByForm.get(this.target);
        }
      }
    });
  })();
  var FrameLoadingStyle;
  (function(FrameLoadingStyle2) {
    FrameLoadingStyle2["eager"] = "eager";
    FrameLoadingStyle2["lazy"] = "lazy";
  })(FrameLoadingStyle || (FrameLoadingStyle = {}));
  var FrameElement = class _FrameElement extends HTMLElement {
    static get observedAttributes() {
      return ["disabled", "complete", "loading", "src"];
    }
    constructor() {
      super();
      this.loaded = Promise.resolve();
      this.delegate = new _FrameElement.delegateConstructor(this);
    }
    connectedCallback() {
      this.delegate.connect();
    }
    disconnectedCallback() {
      this.delegate.disconnect();
    }
    reload() {
      return this.delegate.sourceURLReloaded();
    }
    attributeChangedCallback(name) {
      if (name == "loading") {
        this.delegate.loadingStyleChanged();
      } else if (name == "complete") {
        this.delegate.completeChanged();
      } else if (name == "src") {
        this.delegate.sourceURLChanged();
      } else {
        this.delegate.disabledChanged();
      }
    }
    get src() {
      return this.getAttribute("src");
    }
    set src(value) {
      if (value) {
        this.setAttribute("src", value);
      } else {
        this.removeAttribute("src");
      }
    }
    get loading() {
      return frameLoadingStyleFromString(this.getAttribute("loading") || "");
    }
    set loading(value) {
      if (value) {
        this.setAttribute("loading", value);
      } else {
        this.removeAttribute("loading");
      }
    }
    get disabled() {
      return this.hasAttribute("disabled");
    }
    set disabled(value) {
      if (value) {
        this.setAttribute("disabled", "");
      } else {
        this.removeAttribute("disabled");
      }
    }
    get autoscroll() {
      return this.hasAttribute("autoscroll");
    }
    set autoscroll(value) {
      if (value) {
        this.setAttribute("autoscroll", "");
      } else {
        this.removeAttribute("autoscroll");
      }
    }
    get complete() {
      return !this.delegate.isLoading;
    }
    get isActive() {
      return this.ownerDocument === document && !this.isPreview;
    }
    get isPreview() {
      var _a, _b;
      return (_b = (_a = this.ownerDocument) === null || _a === void 0 ? void 0 : _a.documentElement) === null || _b === void 0 ? void 0 : _b.hasAttribute("data-turbo-preview");
    }
  };
  function frameLoadingStyleFromString(style) {
    switch (style.toLowerCase()) {
      case "lazy":
        return FrameLoadingStyle.lazy;
      default:
        return FrameLoadingStyle.eager;
    }
  }
  function expandURL(locatable) {
    return new URL(locatable.toString(), document.baseURI);
  }
  function getAnchor(url) {
    let anchorMatch;
    if (url.hash) {
      return url.hash.slice(1);
    } else if (anchorMatch = url.href.match(/#(.*)$/)) {
      return anchorMatch[1];
    }
  }
  function getAction(form, submitter) {
    const action = (submitter === null || submitter === void 0 ? void 0 : submitter.getAttribute("formaction")) || form.getAttribute("action") || form.action;
    return expandURL(action);
  }
  function getExtension(url) {
    return (getLastPathComponent(url).match(/\.[^.]*$/) || [])[0] || "";
  }
  function isHTML(url) {
    return !!getExtension(url).match(/^(?:|\.(?:htm|html|xhtml|php))$/);
  }
  function isPrefixedBy(baseURL, url) {
    const prefix = getPrefix(url);
    return baseURL.href === expandURL(prefix).href || baseURL.href.startsWith(prefix);
  }
  function locationIsVisitable(location2, rootLocation) {
    return isPrefixedBy(location2, rootLocation) && isHTML(location2);
  }
  function getRequestURL(url) {
    const anchor = getAnchor(url);
    return anchor != null ? url.href.slice(0, -(anchor.length + 1)) : url.href;
  }
  function toCacheKey(url) {
    return getRequestURL(url);
  }
  function urlsAreEqual(left, right) {
    return expandURL(left).href == expandURL(right).href;
  }
  function getPathComponents(url) {
    return url.pathname.split("/").slice(1);
  }
  function getLastPathComponent(url) {
    return getPathComponents(url).slice(-1)[0];
  }
  function getPrefix(url) {
    return addTrailingSlash(url.origin + url.pathname);
  }
  function addTrailingSlash(value) {
    return value.endsWith("/") ? value : value + "/";
  }
  var FetchResponse = class {
    constructor(response) {
      this.response = response;
    }
    get succeeded() {
      return this.response.ok;
    }
    get failed() {
      return !this.succeeded;
    }
    get clientError() {
      return this.statusCode >= 400 && this.statusCode <= 499;
    }
    get serverError() {
      return this.statusCode >= 500 && this.statusCode <= 599;
    }
    get redirected() {
      return this.response.redirected;
    }
    get location() {
      return expandURL(this.response.url);
    }
    get isHTML() {
      return this.contentType && this.contentType.match(/^(?:text\/([^\s;,]+\b)?html|application\/xhtml\+xml)\b/);
    }
    get statusCode() {
      return this.response.status;
    }
    get contentType() {
      return this.header("Content-Type");
    }
    get responseText() {
      return this.response.clone().text();
    }
    get responseHTML() {
      if (this.isHTML) {
        return this.response.clone().text();
      } else {
        return Promise.resolve(void 0);
      }
    }
    header(name) {
      return this.response.headers.get(name);
    }
  };
  function activateScriptElement(element) {
    if (element.getAttribute("data-turbo-eval") == "false") {
      return element;
    } else {
      const createdScriptElement = document.createElement("script");
      const cspNonce = getMetaContent("csp-nonce");
      if (cspNonce) {
        createdScriptElement.nonce = cspNonce;
      }
      createdScriptElement.textContent = element.textContent;
      createdScriptElement.async = false;
      copyElementAttributes(createdScriptElement, element);
      return createdScriptElement;
    }
  }
  function copyElementAttributes(destinationElement, sourceElement) {
    for (const { name, value } of sourceElement.attributes) {
      destinationElement.setAttribute(name, value);
    }
  }
  function createDocumentFragment(html) {
    const template = document.createElement("template");
    template.innerHTML = html;
    return template.content;
  }
  function dispatch2(eventName, { target, cancelable, detail } = {}) {
    const event = new CustomEvent(eventName, {
      cancelable,
      bubbles: true,
      composed: true,
      detail
    });
    if (target && target.isConnected) {
      target.dispatchEvent(event);
    } else {
      document.documentElement.dispatchEvent(event);
    }
    return event;
  }
  function nextAnimationFrame2() {
    return new Promise((resolve) => requestAnimationFrame(() => resolve()));
  }
  function nextEventLoopTick() {
    return new Promise((resolve) => setTimeout(() => resolve(), 0));
  }
  function nextMicrotask() {
    return Promise.resolve();
  }
  function parseHTMLDocument(html = "") {
    return new DOMParser().parseFromString(html, "text/html");
  }
  function unindent(strings, ...values) {
    const lines = interpolate(strings, values).replace(/^\n/, "").split("\n");
    const match = lines[0].match(/^\s+/);
    const indent = match ? match[0].length : 0;
    return lines.map((line) => line.slice(indent)).join("\n");
  }
  function interpolate(strings, values) {
    return strings.reduce((result, string, i2) => {
      const value = values[i2] == void 0 ? "" : values[i2];
      return result + string + value;
    }, "");
  }
  function uuid() {
    return Array.from({ length: 36 }).map((_2, i2) => {
      if (i2 == 8 || i2 == 13 || i2 == 18 || i2 == 23) {
        return "-";
      } else if (i2 == 14) {
        return "4";
      } else if (i2 == 19) {
        return (Math.floor(Math.random() * 4) + 8).toString(16);
      } else {
        return Math.floor(Math.random() * 15).toString(16);
      }
    }).join("");
  }
  function getAttribute2(attributeName, ...elements) {
    for (const value of elements.map((element) => element === null || element === void 0 ? void 0 : element.getAttribute(attributeName))) {
      if (typeof value == "string")
        return value;
    }
    return null;
  }
  function hasAttribute(attributeName, ...elements) {
    return elements.some((element) => element && element.hasAttribute(attributeName));
  }
  function markAsBusy(...elements) {
    for (const element of elements) {
      if (element.localName == "turbo-frame") {
        element.setAttribute("busy", "");
      }
      element.setAttribute("aria-busy", "true");
    }
  }
  function clearBusyState(...elements) {
    for (const element of elements) {
      if (element.localName == "turbo-frame") {
        element.removeAttribute("busy");
      }
      element.removeAttribute("aria-busy");
    }
  }
  function waitForLoad(element, timeoutInMilliseconds = 2e3) {
    return new Promise((resolve) => {
      const onComplete = () => {
        element.removeEventListener("error", onComplete);
        element.removeEventListener("load", onComplete);
        resolve();
      };
      element.addEventListener("load", onComplete, { once: true });
      element.addEventListener("error", onComplete, { once: true });
      setTimeout(resolve, timeoutInMilliseconds);
    });
  }
  function getHistoryMethodForAction(action) {
    switch (action) {
      case "replace":
        return history.replaceState;
      case "advance":
      case "restore":
        return history.pushState;
    }
  }
  function isAction(action) {
    return action == "advance" || action == "replace" || action == "restore";
  }
  function getVisitAction(...elements) {
    const action = getAttribute2("data-turbo-action", ...elements);
    return isAction(action) ? action : null;
  }
  function getMetaElement(name) {
    return document.querySelector(`meta[name="${name}"]`);
  }
  function getMetaContent(name) {
    const element = getMetaElement(name);
    return element && element.content;
  }
  function setMetaContent(name, content) {
    let element = getMetaElement(name);
    if (!element) {
      element = document.createElement("meta");
      element.setAttribute("name", name);
      document.head.appendChild(element);
    }
    element.setAttribute("content", content);
    return element;
  }
  function findClosestRecursively(element, selector) {
    var _a;
    if (element instanceof Element) {
      return element.closest(selector) || findClosestRecursively(element.assignedSlot || ((_a = element.getRootNode()) === null || _a === void 0 ? void 0 : _a.host), selector);
    }
  }
  var FetchMethod;
  (function(FetchMethod2) {
    FetchMethod2[FetchMethod2["get"] = 0] = "get";
    FetchMethod2[FetchMethod2["post"] = 1] = "post";
    FetchMethod2[FetchMethod2["put"] = 2] = "put";
    FetchMethod2[FetchMethod2["patch"] = 3] = "patch";
    FetchMethod2[FetchMethod2["delete"] = 4] = "delete";
  })(FetchMethod || (FetchMethod = {}));
  function fetchMethodFromString(method) {
    switch (method.toLowerCase()) {
      case "get":
        return FetchMethod.get;
      case "post":
        return FetchMethod.post;
      case "put":
        return FetchMethod.put;
      case "patch":
        return FetchMethod.patch;
      case "delete":
        return FetchMethod.delete;
    }
  }
  var FetchRequest = class {
    constructor(delegate, method, location2, body = new URLSearchParams(), target = null) {
      this.abortController = new AbortController();
      this.resolveRequestPromise = (_value) => {
      };
      this.delegate = delegate;
      this.method = method;
      this.headers = this.defaultHeaders;
      this.body = body;
      this.url = location2;
      this.target = target;
    }
    get location() {
      return this.url;
    }
    get params() {
      return this.url.searchParams;
    }
    get entries() {
      return this.body ? Array.from(this.body.entries()) : [];
    }
    cancel() {
      this.abortController.abort();
    }
    async perform() {
      const { fetchOptions } = this;
      this.delegate.prepareRequest(this);
      await this.allowRequestToBeIntercepted(fetchOptions);
      try {
        this.delegate.requestStarted(this);
        const response = await fetch(this.url.href, fetchOptions);
        return await this.receive(response);
      } catch (error2) {
        if (error2.name !== "AbortError") {
          if (this.willDelegateErrorHandling(error2)) {
            this.delegate.requestErrored(this, error2);
          }
          throw error2;
        }
      } finally {
        this.delegate.requestFinished(this);
      }
    }
    async receive(response) {
      const fetchResponse = new FetchResponse(response);
      const event = dispatch2("turbo:before-fetch-response", {
        cancelable: true,
        detail: { fetchResponse },
        target: this.target
      });
      if (event.defaultPrevented) {
        this.delegate.requestPreventedHandlingResponse(this, fetchResponse);
      } else if (fetchResponse.succeeded) {
        this.delegate.requestSucceededWithResponse(this, fetchResponse);
      } else {
        this.delegate.requestFailedWithResponse(this, fetchResponse);
      }
      return fetchResponse;
    }
    get fetchOptions() {
      var _a;
      return {
        method: FetchMethod[this.method].toUpperCase(),
        credentials: "same-origin",
        headers: this.headers,
        redirect: "follow",
        body: this.isSafe ? null : this.body,
        signal: this.abortSignal,
        referrer: (_a = this.delegate.referrer) === null || _a === void 0 ? void 0 : _a.href
      };
    }
    get defaultHeaders() {
      return {
        Accept: "text/html, application/xhtml+xml"
      };
    }
    get isSafe() {
      return this.method === FetchMethod.get;
    }
    get abortSignal() {
      return this.abortController.signal;
    }
    acceptResponseType(mimeType) {
      this.headers["Accept"] = [mimeType, this.headers["Accept"]].join(", ");
    }
    async allowRequestToBeIntercepted(fetchOptions) {
      const requestInterception = new Promise((resolve) => this.resolveRequestPromise = resolve);
      const event = dispatch2("turbo:before-fetch-request", {
        cancelable: true,
        detail: {
          fetchOptions,
          url: this.url,
          resume: this.resolveRequestPromise
        },
        target: this.target
      });
      if (event.defaultPrevented)
        await requestInterception;
    }
    willDelegateErrorHandling(error2) {
      const event = dispatch2("turbo:fetch-request-error", {
        target: this.target,
        cancelable: true,
        detail: { request: this, error: error2 }
      });
      return !event.defaultPrevented;
    }
  };
  var AppearanceObserver = class {
    constructor(delegate, element) {
      this.started = false;
      this.intersect = (entries) => {
        const lastEntry = entries.slice(-1)[0];
        if (lastEntry === null || lastEntry === void 0 ? void 0 : lastEntry.isIntersecting) {
          this.delegate.elementAppearedInViewport(this.element);
        }
      };
      this.delegate = delegate;
      this.element = element;
      this.intersectionObserver = new IntersectionObserver(this.intersect);
    }
    start() {
      if (!this.started) {
        this.started = true;
        this.intersectionObserver.observe(this.element);
      }
    }
    stop() {
      if (this.started) {
        this.started = false;
        this.intersectionObserver.unobserve(this.element);
      }
    }
  };
  var StreamMessage = class {
    static wrap(message) {
      if (typeof message == "string") {
        return new this(createDocumentFragment(message));
      } else {
        return message;
      }
    }
    constructor(fragment) {
      this.fragment = importStreamElements(fragment);
    }
  };
  StreamMessage.contentType = "text/vnd.turbo-stream.html";
  function importStreamElements(fragment) {
    for (const element of fragment.querySelectorAll("turbo-stream")) {
      const streamElement = document.importNode(element, true);
      for (const inertScriptElement of streamElement.templateElement.content.querySelectorAll("script")) {
        inertScriptElement.replaceWith(activateScriptElement(inertScriptElement));
      }
      element.replaceWith(streamElement);
    }
    return fragment;
  }
  var FormSubmissionState;
  (function(FormSubmissionState2) {
    FormSubmissionState2[FormSubmissionState2["initialized"] = 0] = "initialized";
    FormSubmissionState2[FormSubmissionState2["requesting"] = 1] = "requesting";
    FormSubmissionState2[FormSubmissionState2["waiting"] = 2] = "waiting";
    FormSubmissionState2[FormSubmissionState2["receiving"] = 3] = "receiving";
    FormSubmissionState2[FormSubmissionState2["stopping"] = 4] = "stopping";
    FormSubmissionState2[FormSubmissionState2["stopped"] = 5] = "stopped";
  })(FormSubmissionState || (FormSubmissionState = {}));
  var FormEnctype;
  (function(FormEnctype2) {
    FormEnctype2["urlEncoded"] = "application/x-www-form-urlencoded";
    FormEnctype2["multipart"] = "multipart/form-data";
    FormEnctype2["plain"] = "text/plain";
  })(FormEnctype || (FormEnctype = {}));
  function formEnctypeFromString(encoding) {
    switch (encoding.toLowerCase()) {
      case FormEnctype.multipart:
        return FormEnctype.multipart;
      case FormEnctype.plain:
        return FormEnctype.plain;
      default:
        return FormEnctype.urlEncoded;
    }
  }
  var FormSubmission = class _FormSubmission {
    static confirmMethod(message, _element, _submitter) {
      return Promise.resolve(confirm(message));
    }
    constructor(delegate, formElement, submitter, mustRedirect = false) {
      this.state = FormSubmissionState.initialized;
      this.delegate = delegate;
      this.formElement = formElement;
      this.submitter = submitter;
      this.formData = buildFormData(formElement, submitter);
      this.location = expandURL(this.action);
      if (this.method == FetchMethod.get) {
        mergeFormDataEntries(this.location, [...this.body.entries()]);
      }
      this.fetchRequest = new FetchRequest(this, this.method, this.location, this.body, this.formElement);
      this.mustRedirect = mustRedirect;
    }
    get method() {
      var _a;
      const method = ((_a = this.submitter) === null || _a === void 0 ? void 0 : _a.getAttribute("formmethod")) || this.formElement.getAttribute("method") || "";
      return fetchMethodFromString(method.toLowerCase()) || FetchMethod.get;
    }
    get action() {
      var _a;
      const formElementAction = typeof this.formElement.action === "string" ? this.formElement.action : null;
      if ((_a = this.submitter) === null || _a === void 0 ? void 0 : _a.hasAttribute("formaction")) {
        return this.submitter.getAttribute("formaction") || "";
      } else {
        return this.formElement.getAttribute("action") || formElementAction || "";
      }
    }
    get body() {
      if (this.enctype == FormEnctype.urlEncoded || this.method == FetchMethod.get) {
        return new URLSearchParams(this.stringFormData);
      } else {
        return this.formData;
      }
    }
    get enctype() {
      var _a;
      return formEnctypeFromString(((_a = this.submitter) === null || _a === void 0 ? void 0 : _a.getAttribute("formenctype")) || this.formElement.enctype);
    }
    get isSafe() {
      return this.fetchRequest.isSafe;
    }
    get stringFormData() {
      return [...this.formData].reduce((entries, [name, value]) => {
        return entries.concat(typeof value == "string" ? [[name, value]] : []);
      }, []);
    }
    async start() {
      const { initialized, requesting } = FormSubmissionState;
      const confirmationMessage = getAttribute2("data-turbo-confirm", this.submitter, this.formElement);
      if (typeof confirmationMessage === "string") {
        const answer = await _FormSubmission.confirmMethod(confirmationMessage, this.formElement, this.submitter);
        if (!answer) {
          return;
        }
      }
      if (this.state == initialized) {
        this.state = requesting;
        return this.fetchRequest.perform();
      }
    }
    stop() {
      const { stopping, stopped } = FormSubmissionState;
      if (this.state != stopping && this.state != stopped) {
        this.state = stopping;
        this.fetchRequest.cancel();
        return true;
      }
    }
    prepareRequest(request) {
      if (!request.isSafe) {
        const token = getCookieValue(getMetaContent("csrf-param")) || getMetaContent("csrf-token");
        if (token) {
          request.headers["X-CSRF-Token"] = token;
        }
      }
      if (this.requestAcceptsTurboStreamResponse(request)) {
        request.acceptResponseType(StreamMessage.contentType);
      }
    }
    requestStarted(_request) {
      var _a;
      this.state = FormSubmissionState.waiting;
      (_a = this.submitter) === null || _a === void 0 ? void 0 : _a.setAttribute("disabled", "");
      this.setSubmitsWith();
      dispatch2("turbo:submit-start", {
        target: this.formElement,
        detail: { formSubmission: this }
      });
      this.delegate.formSubmissionStarted(this);
    }
    requestPreventedHandlingResponse(request, response) {
      this.result = { success: response.succeeded, fetchResponse: response };
    }
    requestSucceededWithResponse(request, response) {
      if (response.clientError || response.serverError) {
        this.delegate.formSubmissionFailedWithResponse(this, response);
      } else if (this.requestMustRedirect(request) && responseSucceededWithoutRedirect(response)) {
        const error2 = new Error("Form responses must redirect to another location");
        this.delegate.formSubmissionErrored(this, error2);
      } else {
        this.state = FormSubmissionState.receiving;
        this.result = { success: true, fetchResponse: response };
        this.delegate.formSubmissionSucceededWithResponse(this, response);
      }
    }
    requestFailedWithResponse(request, response) {
      this.result = { success: false, fetchResponse: response };
      this.delegate.formSubmissionFailedWithResponse(this, response);
    }
    requestErrored(request, error2) {
      this.result = { success: false, error: error2 };
      this.delegate.formSubmissionErrored(this, error2);
    }
    requestFinished(_request) {
      var _a;
      this.state = FormSubmissionState.stopped;
      (_a = this.submitter) === null || _a === void 0 ? void 0 : _a.removeAttribute("disabled");
      this.resetSubmitterText();
      dispatch2("turbo:submit-end", {
        target: this.formElement,
        detail: Object.assign({ formSubmission: this }, this.result)
      });
      this.delegate.formSubmissionFinished(this);
    }
    setSubmitsWith() {
      if (!this.submitter || !this.submitsWith)
        return;
      if (this.submitter.matches("button")) {
        this.originalSubmitText = this.submitter.innerHTML;
        this.submitter.innerHTML = this.submitsWith;
      } else if (this.submitter.matches("input")) {
        const input = this.submitter;
        this.originalSubmitText = input.value;
        input.value = this.submitsWith;
      }
    }
    resetSubmitterText() {
      if (!this.submitter || !this.originalSubmitText)
        return;
      if (this.submitter.matches("button")) {
        this.submitter.innerHTML = this.originalSubmitText;
      } else if (this.submitter.matches("input")) {
        const input = this.submitter;
        input.value = this.originalSubmitText;
      }
    }
    requestMustRedirect(request) {
      return !request.isSafe && this.mustRedirect;
    }
    requestAcceptsTurboStreamResponse(request) {
      return !request.isSafe || hasAttribute("data-turbo-stream", this.submitter, this.formElement);
    }
    get submitsWith() {
      var _a;
      return (_a = this.submitter) === null || _a === void 0 ? void 0 : _a.getAttribute("data-turbo-submits-with");
    }
  };
  function buildFormData(formElement, submitter) {
    const formData = new FormData(formElement);
    const name = submitter === null || submitter === void 0 ? void 0 : submitter.getAttribute("name");
    const value = submitter === null || submitter === void 0 ? void 0 : submitter.getAttribute("value");
    if (name) {
      formData.append(name, value || "");
    }
    return formData;
  }
  function getCookieValue(cookieName) {
    if (cookieName != null) {
      const cookies = document.cookie ? document.cookie.split("; ") : [];
      const cookie = cookies.find((cookie2) => cookie2.startsWith(cookieName));
      if (cookie) {
        const value = cookie.split("=").slice(1).join("=");
        return value ? decodeURIComponent(value) : void 0;
      }
    }
  }
  function responseSucceededWithoutRedirect(response) {
    return response.statusCode == 200 && !response.redirected;
  }
  function mergeFormDataEntries(url, entries) {
    const searchParams = new URLSearchParams();
    for (const [name, value] of entries) {
      if (value instanceof File)
        continue;
      searchParams.append(name, value);
    }
    url.search = searchParams.toString();
    return url;
  }
  var Snapshot = class {
    constructor(element) {
      this.element = element;
    }
    get activeElement() {
      return this.element.ownerDocument.activeElement;
    }
    get children() {
      return [...this.element.children];
    }
    hasAnchor(anchor) {
      return this.getElementForAnchor(anchor) != null;
    }
    getElementForAnchor(anchor) {
      return anchor ? this.element.querySelector(`[id='${anchor}'], a[name='${anchor}']`) : null;
    }
    get isConnected() {
      return this.element.isConnected;
    }
    get firstAutofocusableElement() {
      const inertDisabledOrHidden = "[inert], :disabled, [hidden], details:not([open]), dialog:not([open])";
      for (const element of this.element.querySelectorAll("[autofocus]")) {
        if (element.closest(inertDisabledOrHidden) == null)
          return element;
        else
          continue;
      }
      return null;
    }
    get permanentElements() {
      return queryPermanentElementsAll(this.element);
    }
    getPermanentElementById(id2) {
      return getPermanentElementById(this.element, id2);
    }
    getPermanentElementMapForSnapshot(snapshot) {
      const permanentElementMap = {};
      for (const currentPermanentElement of this.permanentElements) {
        const { id: id2 } = currentPermanentElement;
        const newPermanentElement = snapshot.getPermanentElementById(id2);
        if (newPermanentElement) {
          permanentElementMap[id2] = [currentPermanentElement, newPermanentElement];
        }
      }
      return permanentElementMap;
    }
  };
  function getPermanentElementById(node, id2) {
    return node.querySelector(`#${id2}[data-turbo-permanent]`);
  }
  function queryPermanentElementsAll(node) {
    return node.querySelectorAll("[id][data-turbo-permanent]");
  }
  var FormSubmitObserver = class {
    constructor(delegate, eventTarget) {
      this.started = false;
      this.submitCaptured = () => {
        this.eventTarget.removeEventListener("submit", this.submitBubbled, false);
        this.eventTarget.addEventListener("submit", this.submitBubbled, false);
      };
      this.submitBubbled = (event) => {
        if (!event.defaultPrevented) {
          const form = event.target instanceof HTMLFormElement ? event.target : void 0;
          const submitter = event.submitter || void 0;
          if (form && submissionDoesNotDismissDialog(form, submitter) && submissionDoesNotTargetIFrame(form, submitter) && this.delegate.willSubmitForm(form, submitter)) {
            event.preventDefault();
            event.stopImmediatePropagation();
            this.delegate.formSubmitted(form, submitter);
          }
        }
      };
      this.delegate = delegate;
      this.eventTarget = eventTarget;
    }
    start() {
      if (!this.started) {
        this.eventTarget.addEventListener("submit", this.submitCaptured, true);
        this.started = true;
      }
    }
    stop() {
      if (this.started) {
        this.eventTarget.removeEventListener("submit", this.submitCaptured, true);
        this.started = false;
      }
    }
  };
  function submissionDoesNotDismissDialog(form, submitter) {
    const method = (submitter === null || submitter === void 0 ? void 0 : submitter.getAttribute("formmethod")) || form.getAttribute("method");
    return method != "dialog";
  }
  function submissionDoesNotTargetIFrame(form, submitter) {
    if ((submitter === null || submitter === void 0 ? void 0 : submitter.hasAttribute("formtarget")) || form.hasAttribute("target")) {
      const target = (submitter === null || submitter === void 0 ? void 0 : submitter.getAttribute("formtarget")) || form.target;
      for (const element of document.getElementsByName(target)) {
        if (element instanceof HTMLIFrameElement)
          return false;
      }
      return true;
    } else {
      return true;
    }
  }
  var View = class {
    constructor(delegate, element) {
      this.resolveRenderPromise = (_value) => {
      };
      this.resolveInterceptionPromise = (_value) => {
      };
      this.delegate = delegate;
      this.element = element;
    }
    scrollToAnchor(anchor) {
      const element = this.snapshot.getElementForAnchor(anchor);
      if (element) {
        this.scrollToElement(element);
        this.focusElement(element);
      } else {
        this.scrollToPosition({ x: 0, y: 0 });
      }
    }
    scrollToAnchorFromLocation(location2) {
      this.scrollToAnchor(getAnchor(location2));
    }
    scrollToElement(element) {
      element.scrollIntoView();
    }
    focusElement(element) {
      if (element instanceof HTMLElement) {
        if (element.hasAttribute("tabindex")) {
          element.focus();
        } else {
          element.setAttribute("tabindex", "-1");
          element.focus();
          element.removeAttribute("tabindex");
        }
      }
    }
    scrollToPosition({ x: x2, y: y2 }) {
      this.scrollRoot.scrollTo(x2, y2);
    }
    scrollToTop() {
      this.scrollToPosition({ x: 0, y: 0 });
    }
    get scrollRoot() {
      return window;
    }
    async render(renderer) {
      const { isPreview, shouldRender, newSnapshot: snapshot } = renderer;
      if (shouldRender) {
        try {
          this.renderPromise = new Promise((resolve) => this.resolveRenderPromise = resolve);
          this.renderer = renderer;
          await this.prepareToRenderSnapshot(renderer);
          const renderInterception = new Promise((resolve) => this.resolveInterceptionPromise = resolve);
          const options = { resume: this.resolveInterceptionPromise, render: this.renderer.renderElement };
          const immediateRender = this.delegate.allowsImmediateRender(snapshot, options);
          if (!immediateRender)
            await renderInterception;
          await this.renderSnapshot(renderer);
          this.delegate.viewRenderedSnapshot(snapshot, isPreview);
          this.delegate.preloadOnLoadLinksForView(this.element);
          this.finishRenderingSnapshot(renderer);
        } finally {
          delete this.renderer;
          this.resolveRenderPromise(void 0);
          delete this.renderPromise;
        }
      } else {
        this.invalidate(renderer.reloadReason);
      }
    }
    invalidate(reason) {
      this.delegate.viewInvalidated(reason);
    }
    async prepareToRenderSnapshot(renderer) {
      this.markAsPreview(renderer.isPreview);
      await renderer.prepareToRender();
    }
    markAsPreview(isPreview) {
      if (isPreview) {
        this.element.setAttribute("data-turbo-preview", "");
      } else {
        this.element.removeAttribute("data-turbo-preview");
      }
    }
    async renderSnapshot(renderer) {
      await renderer.render();
    }
    finishRenderingSnapshot(renderer) {
      renderer.finishRendering();
    }
  };
  var FrameView = class extends View {
    missing() {
      this.element.innerHTML = `<strong class="turbo-frame-error">Content missing</strong>`;
    }
    get snapshot() {
      return new Snapshot(this.element);
    }
  };
  var LinkInterceptor = class {
    constructor(delegate, element) {
      this.clickBubbled = (event) => {
        if (this.respondsToEventTarget(event.target)) {
          this.clickEvent = event;
        } else {
          delete this.clickEvent;
        }
      };
      this.linkClicked = (event) => {
        if (this.clickEvent && this.respondsToEventTarget(event.target) && event.target instanceof Element) {
          if (this.delegate.shouldInterceptLinkClick(event.target, event.detail.url, event.detail.originalEvent)) {
            this.clickEvent.preventDefault();
            event.preventDefault();
            this.delegate.linkClickIntercepted(event.target, event.detail.url, event.detail.originalEvent);
          }
        }
        delete this.clickEvent;
      };
      this.willVisit = (_event) => {
        delete this.clickEvent;
      };
      this.delegate = delegate;
      this.element = element;
    }
    start() {
      this.element.addEventListener("click", this.clickBubbled);
      document.addEventListener("turbo:click", this.linkClicked);
      document.addEventListener("turbo:before-visit", this.willVisit);
    }
    stop() {
      this.element.removeEventListener("click", this.clickBubbled);
      document.removeEventListener("turbo:click", this.linkClicked);
      document.removeEventListener("turbo:before-visit", this.willVisit);
    }
    respondsToEventTarget(target) {
      const element = target instanceof Element ? target : target instanceof Node ? target.parentElement : null;
      return element && element.closest("turbo-frame, html") == this.element;
    }
  };
  var LinkClickObserver = class {
    constructor(delegate, eventTarget) {
      this.started = false;
      this.clickCaptured = () => {
        this.eventTarget.removeEventListener("click", this.clickBubbled, false);
        this.eventTarget.addEventListener("click", this.clickBubbled, false);
      };
      this.clickBubbled = (event) => {
        if (event instanceof MouseEvent && this.clickEventIsSignificant(event)) {
          const target = event.composedPath && event.composedPath()[0] || event.target;
          const link = this.findLinkFromClickTarget(target);
          if (link && doesNotTargetIFrame(link)) {
            const location2 = this.getLocationForLink(link);
            if (this.delegate.willFollowLinkToLocation(link, location2, event)) {
              event.preventDefault();
              this.delegate.followedLinkToLocation(link, location2);
            }
          }
        }
      };
      this.delegate = delegate;
      this.eventTarget = eventTarget;
    }
    start() {
      if (!this.started) {
        this.eventTarget.addEventListener("click", this.clickCaptured, true);
        this.started = true;
      }
    }
    stop() {
      if (this.started) {
        this.eventTarget.removeEventListener("click", this.clickCaptured, true);
        this.started = false;
      }
    }
    clickEventIsSignificant(event) {
      return !(event.target && event.target.isContentEditable || event.defaultPrevented || event.which > 1 || event.altKey || event.ctrlKey || event.metaKey || event.shiftKey);
    }
    findLinkFromClickTarget(target) {
      return findClosestRecursively(target, "a[href]:not([target^=_]):not([download])");
    }
    getLocationForLink(link) {
      return expandURL(link.getAttribute("href") || "");
    }
  };
  function doesNotTargetIFrame(anchor) {
    if (anchor.hasAttribute("target")) {
      for (const element of document.getElementsByName(anchor.target)) {
        if (element instanceof HTMLIFrameElement)
          return false;
      }
      return true;
    } else {
      return true;
    }
  }
  var FormLinkClickObserver = class {
    constructor(delegate, element) {
      this.delegate = delegate;
      this.linkInterceptor = new LinkClickObserver(this, element);
    }
    start() {
      this.linkInterceptor.start();
    }
    stop() {
      this.linkInterceptor.stop();
    }
    willFollowLinkToLocation(link, location2, originalEvent) {
      return this.delegate.willSubmitFormLinkToLocation(link, location2, originalEvent) && link.hasAttribute("data-turbo-method");
    }
    followedLinkToLocation(link, location2) {
      const form = document.createElement("form");
      const type = "hidden";
      for (const [name, value] of location2.searchParams) {
        form.append(Object.assign(document.createElement("input"), { type, name, value }));
      }
      const action = Object.assign(location2, { search: "" });
      form.setAttribute("data-turbo", "true");
      form.setAttribute("action", action.href);
      form.setAttribute("hidden", "");
      const method = link.getAttribute("data-turbo-method");
      if (method)
        form.setAttribute("method", method);
      const turboFrame = link.getAttribute("data-turbo-frame");
      if (turboFrame)
        form.setAttribute("data-turbo-frame", turboFrame);
      const turboAction = getVisitAction(link);
      if (turboAction)
        form.setAttribute("data-turbo-action", turboAction);
      const turboConfirm = link.getAttribute("data-turbo-confirm");
      if (turboConfirm)
        form.setAttribute("data-turbo-confirm", turboConfirm);
      const turboStream = link.hasAttribute("data-turbo-stream");
      if (turboStream)
        form.setAttribute("data-turbo-stream", "");
      this.delegate.submittedFormLinkToLocation(link, location2, form);
      document.body.appendChild(form);
      form.addEventListener("turbo:submit-end", () => form.remove(), { once: true });
      requestAnimationFrame(() => form.requestSubmit());
    }
  };
  var Bardo = class {
    static async preservingPermanentElements(delegate, permanentElementMap, callback) {
      const bardo = new this(delegate, permanentElementMap);
      bardo.enter();
      await callback();
      bardo.leave();
    }
    constructor(delegate, permanentElementMap) {
      this.delegate = delegate;
      this.permanentElementMap = permanentElementMap;
    }
    enter() {
      for (const id2 in this.permanentElementMap) {
        const [currentPermanentElement, newPermanentElement] = this.permanentElementMap[id2];
        this.delegate.enteringBardo(currentPermanentElement, newPermanentElement);
        this.replaceNewPermanentElementWithPlaceholder(newPermanentElement);
      }
    }
    leave() {
      for (const id2 in this.permanentElementMap) {
        const [currentPermanentElement] = this.permanentElementMap[id2];
        this.replaceCurrentPermanentElementWithClone(currentPermanentElement);
        this.replacePlaceholderWithPermanentElement(currentPermanentElement);
        this.delegate.leavingBardo(currentPermanentElement);
      }
    }
    replaceNewPermanentElementWithPlaceholder(permanentElement) {
      const placeholder = createPlaceholderForPermanentElement(permanentElement);
      permanentElement.replaceWith(placeholder);
    }
    replaceCurrentPermanentElementWithClone(permanentElement) {
      const clone = permanentElement.cloneNode(true);
      permanentElement.replaceWith(clone);
    }
    replacePlaceholderWithPermanentElement(permanentElement) {
      const placeholder = this.getPlaceholderById(permanentElement.id);
      placeholder === null || placeholder === void 0 ? void 0 : placeholder.replaceWith(permanentElement);
    }
    getPlaceholderById(id2) {
      return this.placeholders.find((element) => element.content == id2);
    }
    get placeholders() {
      return [...document.querySelectorAll("meta[name=turbo-permanent-placeholder][content]")];
    }
  };
  function createPlaceholderForPermanentElement(permanentElement) {
    const element = document.createElement("meta");
    element.setAttribute("name", "turbo-permanent-placeholder");
    element.setAttribute("content", permanentElement.id);
    return element;
  }
  var Renderer = class {
    constructor(currentSnapshot, newSnapshot, renderElement, isPreview, willRender = true) {
      this.activeElement = null;
      this.currentSnapshot = currentSnapshot;
      this.newSnapshot = newSnapshot;
      this.isPreview = isPreview;
      this.willRender = willRender;
      this.renderElement = renderElement;
      this.promise = new Promise((resolve, reject) => this.resolvingFunctions = { resolve, reject });
    }
    get shouldRender() {
      return true;
    }
    get reloadReason() {
      return;
    }
    prepareToRender() {
      return;
    }
    finishRendering() {
      if (this.resolvingFunctions) {
        this.resolvingFunctions.resolve();
        delete this.resolvingFunctions;
      }
    }
    async preservingPermanentElements(callback) {
      await Bardo.preservingPermanentElements(this, this.permanentElementMap, callback);
    }
    focusFirstAutofocusableElement() {
      const element = this.connectedSnapshot.firstAutofocusableElement;
      if (elementIsFocusable(element)) {
        element.focus();
      }
    }
    enteringBardo(currentPermanentElement) {
      if (this.activeElement)
        return;
      if (currentPermanentElement.contains(this.currentSnapshot.activeElement)) {
        this.activeElement = this.currentSnapshot.activeElement;
      }
    }
    leavingBardo(currentPermanentElement) {
      if (currentPermanentElement.contains(this.activeElement) && this.activeElement instanceof HTMLElement) {
        this.activeElement.focus();
        this.activeElement = null;
      }
    }
    get connectedSnapshot() {
      return this.newSnapshot.isConnected ? this.newSnapshot : this.currentSnapshot;
    }
    get currentElement() {
      return this.currentSnapshot.element;
    }
    get newElement() {
      return this.newSnapshot.element;
    }
    get permanentElementMap() {
      return this.currentSnapshot.getPermanentElementMapForSnapshot(this.newSnapshot);
    }
  };
  function elementIsFocusable(element) {
    return element && typeof element.focus == "function";
  }
  var FrameRenderer = class extends Renderer {
    static renderElement(currentElement, newElement) {
      var _a;
      const destinationRange = document.createRange();
      destinationRange.selectNodeContents(currentElement);
      destinationRange.deleteContents();
      const frameElement = newElement;
      const sourceRange = (_a = frameElement.ownerDocument) === null || _a === void 0 ? void 0 : _a.createRange();
      if (sourceRange) {
        sourceRange.selectNodeContents(frameElement);
        currentElement.appendChild(sourceRange.extractContents());
      }
    }
    constructor(delegate, currentSnapshot, newSnapshot, renderElement, isPreview, willRender = true) {
      super(currentSnapshot, newSnapshot, renderElement, isPreview, willRender);
      this.delegate = delegate;
    }
    get shouldRender() {
      return true;
    }
    async render() {
      await nextAnimationFrame2();
      this.preservingPermanentElements(() => {
        this.loadFrameElement();
      });
      this.scrollFrameIntoView();
      await nextAnimationFrame2();
      this.focusFirstAutofocusableElement();
      await nextAnimationFrame2();
      this.activateScriptElements();
    }
    loadFrameElement() {
      this.delegate.willRenderFrame(this.currentElement, this.newElement);
      this.renderElement(this.currentElement, this.newElement);
    }
    scrollFrameIntoView() {
      if (this.currentElement.autoscroll || this.newElement.autoscroll) {
        const element = this.currentElement.firstElementChild;
        const block = readScrollLogicalPosition(this.currentElement.getAttribute("data-autoscroll-block"), "end");
        const behavior = readScrollBehavior(this.currentElement.getAttribute("data-autoscroll-behavior"), "auto");
        if (element) {
          element.scrollIntoView({ block, behavior });
          return true;
        }
      }
      return false;
    }
    activateScriptElements() {
      for (const inertScriptElement of this.newScriptElements) {
        const activatedScriptElement = activateScriptElement(inertScriptElement);
        inertScriptElement.replaceWith(activatedScriptElement);
      }
    }
    get newScriptElements() {
      return this.currentElement.querySelectorAll("script");
    }
  };
  function readScrollLogicalPosition(value, defaultValue) {
    if (value == "end" || value == "start" || value == "center" || value == "nearest") {
      return value;
    } else {
      return defaultValue;
    }
  }
  function readScrollBehavior(value, defaultValue) {
    if (value == "auto" || value == "smooth") {
      return value;
    } else {
      return defaultValue;
    }
  }
  var ProgressBar = class _ProgressBar {
    static get defaultCSS() {
      return unindent`
      .turbo-progress-bar {
        position: fixed;
        display: block;
        top: 0;
        left: 0;
        height: 3px;
        background: #0076ff;
        z-index: 2147483647;
        transition:
          width ${_ProgressBar.animationDuration}ms ease-out,
          opacity ${_ProgressBar.animationDuration / 2}ms ${_ProgressBar.animationDuration / 2}ms ease-in;
        transform: translate3d(0, 0, 0);
      }
    `;
    }
    constructor() {
      this.hiding = false;
      this.value = 0;
      this.visible = false;
      this.trickle = () => {
        this.setValue(this.value + Math.random() / 100);
      };
      this.stylesheetElement = this.createStylesheetElement();
      this.progressElement = this.createProgressElement();
      this.installStylesheetElement();
      this.setValue(0);
    }
    show() {
      if (!this.visible) {
        this.visible = true;
        this.installProgressElement();
        this.startTrickling();
      }
    }
    hide() {
      if (this.visible && !this.hiding) {
        this.hiding = true;
        this.fadeProgressElement(() => {
          this.uninstallProgressElement();
          this.stopTrickling();
          this.visible = false;
          this.hiding = false;
        });
      }
    }
    setValue(value) {
      this.value = value;
      this.refresh();
    }
    installStylesheetElement() {
      document.head.insertBefore(this.stylesheetElement, document.head.firstChild);
    }
    installProgressElement() {
      this.progressElement.style.width = "0";
      this.progressElement.style.opacity = "1";
      document.documentElement.insertBefore(this.progressElement, document.body);
      this.refresh();
    }
    fadeProgressElement(callback) {
      this.progressElement.style.opacity = "0";
      setTimeout(callback, _ProgressBar.animationDuration * 1.5);
    }
    uninstallProgressElement() {
      if (this.progressElement.parentNode) {
        document.documentElement.removeChild(this.progressElement);
      }
    }
    startTrickling() {
      if (!this.trickleInterval) {
        this.trickleInterval = window.setInterval(this.trickle, _ProgressBar.animationDuration);
      }
    }
    stopTrickling() {
      window.clearInterval(this.trickleInterval);
      delete this.trickleInterval;
    }
    refresh() {
      requestAnimationFrame(() => {
        this.progressElement.style.width = `${10 + this.value * 90}%`;
      });
    }
    createStylesheetElement() {
      const element = document.createElement("style");
      element.type = "text/css";
      element.textContent = _ProgressBar.defaultCSS;
      if (this.cspNonce) {
        element.nonce = this.cspNonce;
      }
      return element;
    }
    createProgressElement() {
      const element = document.createElement("div");
      element.className = "turbo-progress-bar";
      return element;
    }
    get cspNonce() {
      return getMetaContent("csp-nonce");
    }
  };
  ProgressBar.animationDuration = 300;
  var HeadSnapshot = class extends Snapshot {
    constructor() {
      super(...arguments);
      this.detailsByOuterHTML = this.children.filter((element) => !elementIsNoscript(element)).map((element) => elementWithoutNonce(element)).reduce((result, element) => {
        const { outerHTML } = element;
        const details = outerHTML in result ? result[outerHTML] : {
          type: elementType(element),
          tracked: elementIsTracked(element),
          elements: []
        };
        return Object.assign(Object.assign({}, result), { [outerHTML]: Object.assign(Object.assign({}, details), { elements: [...details.elements, element] }) });
      }, {});
    }
    get trackedElementSignature() {
      return Object.keys(this.detailsByOuterHTML).filter((outerHTML) => this.detailsByOuterHTML[outerHTML].tracked).join("");
    }
    getScriptElementsNotInSnapshot(snapshot) {
      return this.getElementsMatchingTypeNotInSnapshot("script", snapshot);
    }
    getStylesheetElementsNotInSnapshot(snapshot) {
      return this.getElementsMatchingTypeNotInSnapshot("stylesheet", snapshot);
    }
    getElementsMatchingTypeNotInSnapshot(matchedType, snapshot) {
      return Object.keys(this.detailsByOuterHTML).filter((outerHTML) => !(outerHTML in snapshot.detailsByOuterHTML)).map((outerHTML) => this.detailsByOuterHTML[outerHTML]).filter(({ type }) => type == matchedType).map(({ elements: [element] }) => element);
    }
    get provisionalElements() {
      return Object.keys(this.detailsByOuterHTML).reduce((result, outerHTML) => {
        const { type, tracked, elements } = this.detailsByOuterHTML[outerHTML];
        if (type == null && !tracked) {
          return [...result, ...elements];
        } else if (elements.length > 1) {
          return [...result, ...elements.slice(1)];
        } else {
          return result;
        }
      }, []);
    }
    getMetaValue(name) {
      const element = this.findMetaElementByName(name);
      return element ? element.getAttribute("content") : null;
    }
    findMetaElementByName(name) {
      return Object.keys(this.detailsByOuterHTML).reduce((result, outerHTML) => {
        const { elements: [element] } = this.detailsByOuterHTML[outerHTML];
        return elementIsMetaElementWithName(element, name) ? element : result;
      }, void 0);
    }
  };
  function elementType(element) {
    if (elementIsScript(element)) {
      return "script";
    } else if (elementIsStylesheet(element)) {
      return "stylesheet";
    }
  }
  function elementIsTracked(element) {
    return element.getAttribute("data-turbo-track") == "reload";
  }
  function elementIsScript(element) {
    const tagName = element.localName;
    return tagName == "script";
  }
  function elementIsNoscript(element) {
    const tagName = element.localName;
    return tagName == "noscript";
  }
  function elementIsStylesheet(element) {
    const tagName = element.localName;
    return tagName == "style" || tagName == "link" && element.getAttribute("rel") == "stylesheet";
  }
  function elementIsMetaElementWithName(element, name) {
    const tagName = element.localName;
    return tagName == "meta" && element.getAttribute("name") == name;
  }
  function elementWithoutNonce(element) {
    if (element.hasAttribute("nonce")) {
      element.setAttribute("nonce", "");
    }
    return element;
  }
  var PageSnapshot = class _PageSnapshot extends Snapshot {
    static fromHTMLString(html = "") {
      return this.fromDocument(parseHTMLDocument(html));
    }
    static fromElement(element) {
      return this.fromDocument(element.ownerDocument);
    }
    static fromDocument({ head, body }) {
      return new this(body, new HeadSnapshot(head));
    }
    constructor(element, headSnapshot) {
      super(element);
      this.headSnapshot = headSnapshot;
    }
    clone() {
      const clonedElement = this.element.cloneNode(true);
      const selectElements = this.element.querySelectorAll("select");
      const clonedSelectElements = clonedElement.querySelectorAll("select");
      for (const [index, source] of selectElements.entries()) {
        const clone = clonedSelectElements[index];
        for (const option of clone.selectedOptions)
          option.selected = false;
        for (const option of source.selectedOptions)
          clone.options[option.index].selected = true;
      }
      for (const clonedPasswordInput of clonedElement.querySelectorAll('input[type="password"]')) {
        clonedPasswordInput.value = "";
      }
      return new _PageSnapshot(clonedElement, this.headSnapshot);
    }
    get headElement() {
      return this.headSnapshot.element;
    }
    get rootLocation() {
      var _a;
      const root = (_a = this.getSetting("root")) !== null && _a !== void 0 ? _a : "/";
      return expandURL(root);
    }
    get cacheControlValue() {
      return this.getSetting("cache-control");
    }
    get isPreviewable() {
      return this.cacheControlValue != "no-preview";
    }
    get isCacheable() {
      return this.cacheControlValue != "no-cache";
    }
    get isVisitable() {
      return this.getSetting("visit-control") != "reload";
    }
    getSetting(name) {
      return this.headSnapshot.getMetaValue(`turbo-${name}`);
    }
  };
  var TimingMetric;
  (function(TimingMetric2) {
    TimingMetric2["visitStart"] = "visitStart";
    TimingMetric2["requestStart"] = "requestStart";
    TimingMetric2["requestEnd"] = "requestEnd";
    TimingMetric2["visitEnd"] = "visitEnd";
  })(TimingMetric || (TimingMetric = {}));
  var VisitState;
  (function(VisitState2) {
    VisitState2["initialized"] = "initialized";
    VisitState2["started"] = "started";
    VisitState2["canceled"] = "canceled";
    VisitState2["failed"] = "failed";
    VisitState2["completed"] = "completed";
  })(VisitState || (VisitState = {}));
  var defaultOptions3 = {
    action: "advance",
    historyChanged: false,
    visitCachedSnapshot: () => {
    },
    willRender: true,
    updateHistory: true,
    shouldCacheSnapshot: true,
    acceptsStreamResponse: false
  };
  var SystemStatusCode;
  (function(SystemStatusCode2) {
    SystemStatusCode2[SystemStatusCode2["networkFailure"] = 0] = "networkFailure";
    SystemStatusCode2[SystemStatusCode2["timeoutFailure"] = -1] = "timeoutFailure";
    SystemStatusCode2[SystemStatusCode2["contentTypeMismatch"] = -2] = "contentTypeMismatch";
  })(SystemStatusCode || (SystemStatusCode = {}));
  var Visit = class {
    constructor(delegate, location2, restorationIdentifier, options = {}) {
      this.identifier = uuid();
      this.timingMetrics = {};
      this.followedRedirect = false;
      this.historyChanged = false;
      this.scrolled = false;
      this.shouldCacheSnapshot = true;
      this.acceptsStreamResponse = false;
      this.snapshotCached = false;
      this.state = VisitState.initialized;
      this.delegate = delegate;
      this.location = location2;
      this.restorationIdentifier = restorationIdentifier || uuid();
      const { action, historyChanged, referrer, snapshot, snapshotHTML, response, visitCachedSnapshot, willRender, updateHistory, shouldCacheSnapshot, acceptsStreamResponse } = Object.assign(Object.assign({}, defaultOptions3), options);
      this.action = action;
      this.historyChanged = historyChanged;
      this.referrer = referrer;
      this.snapshot = snapshot;
      this.snapshotHTML = snapshotHTML;
      this.response = response;
      this.isSamePage = this.delegate.locationWithActionIsSamePage(this.location, this.action);
      this.visitCachedSnapshot = visitCachedSnapshot;
      this.willRender = willRender;
      this.updateHistory = updateHistory;
      this.scrolled = !willRender;
      this.shouldCacheSnapshot = shouldCacheSnapshot;
      this.acceptsStreamResponse = acceptsStreamResponse;
    }
    get adapter() {
      return this.delegate.adapter;
    }
    get view() {
      return this.delegate.view;
    }
    get history() {
      return this.delegate.history;
    }
    get restorationData() {
      return this.history.getRestorationDataForIdentifier(this.restorationIdentifier);
    }
    get silent() {
      return this.isSamePage;
    }
    start() {
      if (this.state == VisitState.initialized) {
        this.recordTimingMetric(TimingMetric.visitStart);
        this.state = VisitState.started;
        this.adapter.visitStarted(this);
        this.delegate.visitStarted(this);
      }
    }
    cancel() {
      if (this.state == VisitState.started) {
        if (this.request) {
          this.request.cancel();
        }
        this.cancelRender();
        this.state = VisitState.canceled;
      }
    }
    complete() {
      if (this.state == VisitState.started) {
        this.recordTimingMetric(TimingMetric.visitEnd);
        this.state = VisitState.completed;
        this.followRedirect();
        if (!this.followedRedirect) {
          this.adapter.visitCompleted(this);
          this.delegate.visitCompleted(this);
        }
      }
    }
    fail() {
      if (this.state == VisitState.started) {
        this.state = VisitState.failed;
        this.adapter.visitFailed(this);
      }
    }
    changeHistory() {
      var _a;
      if (!this.historyChanged && this.updateHistory) {
        const actionForHistory = this.location.href === ((_a = this.referrer) === null || _a === void 0 ? void 0 : _a.href) ? "replace" : this.action;
        const method = getHistoryMethodForAction(actionForHistory);
        this.history.update(method, this.location, this.restorationIdentifier);
        this.historyChanged = true;
      }
    }
    issueRequest() {
      if (this.hasPreloadedResponse()) {
        this.simulateRequest();
      } else if (this.shouldIssueRequest() && !this.request) {
        this.request = new FetchRequest(this, FetchMethod.get, this.location);
        this.request.perform();
      }
    }
    simulateRequest() {
      if (this.response) {
        this.startRequest();
        this.recordResponse();
        this.finishRequest();
      }
    }
    startRequest() {
      this.recordTimingMetric(TimingMetric.requestStart);
      this.adapter.visitRequestStarted(this);
    }
    recordResponse(response = this.response) {
      this.response = response;
      if (response) {
        const { statusCode } = response;
        if (isSuccessful(statusCode)) {
          this.adapter.visitRequestCompleted(this);
        } else {
          this.adapter.visitRequestFailedWithStatusCode(this, statusCode);
        }
      }
    }
    finishRequest() {
      this.recordTimingMetric(TimingMetric.requestEnd);
      this.adapter.visitRequestFinished(this);
    }
    loadResponse() {
      if (this.response) {
        const { statusCode, responseHTML } = this.response;
        this.render(async () => {
          if (this.shouldCacheSnapshot)
            this.cacheSnapshot();
          if (this.view.renderPromise)
            await this.view.renderPromise;
          if (isSuccessful(statusCode) && responseHTML != null) {
            await this.view.renderPage(PageSnapshot.fromHTMLString(responseHTML), false, this.willRender, this);
            this.performScroll();
            this.adapter.visitRendered(this);
            this.complete();
          } else {
            await this.view.renderError(PageSnapshot.fromHTMLString(responseHTML), this);
            this.adapter.visitRendered(this);
            this.fail();
          }
        });
      }
    }
    getCachedSnapshot() {
      const snapshot = this.view.getCachedSnapshotForLocation(this.location) || this.getPreloadedSnapshot();
      if (snapshot && (!getAnchor(this.location) || snapshot.hasAnchor(getAnchor(this.location)))) {
        if (this.action == "restore" || snapshot.isPreviewable) {
          return snapshot;
        }
      }
    }
    getPreloadedSnapshot() {
      if (this.snapshotHTML) {
        return PageSnapshot.fromHTMLString(this.snapshotHTML);
      }
    }
    hasCachedSnapshot() {
      return this.getCachedSnapshot() != null;
    }
    loadCachedSnapshot() {
      const snapshot = this.getCachedSnapshot();
      if (snapshot) {
        const isPreview = this.shouldIssueRequest();
        this.render(async () => {
          this.cacheSnapshot();
          if (this.isSamePage) {
            this.adapter.visitRendered(this);
          } else {
            if (this.view.renderPromise)
              await this.view.renderPromise;
            await this.view.renderPage(snapshot, isPreview, this.willRender, this);
            this.performScroll();
            this.adapter.visitRendered(this);
            if (!isPreview) {
              this.complete();
            }
          }
        });
      }
    }
    followRedirect() {
      var _a;
      if (this.redirectedToLocation && !this.followedRedirect && ((_a = this.response) === null || _a === void 0 ? void 0 : _a.redirected)) {
        this.adapter.visitProposedToLocation(this.redirectedToLocation, {
          action: "replace",
          response: this.response,
          shouldCacheSnapshot: false,
          willRender: false
        });
        this.followedRedirect = true;
      }
    }
    goToSamePageAnchor() {
      if (this.isSamePage) {
        this.render(async () => {
          this.cacheSnapshot();
          this.performScroll();
          this.changeHistory();
          this.adapter.visitRendered(this);
        });
      }
    }
    prepareRequest(request) {
      if (this.acceptsStreamResponse) {
        request.acceptResponseType(StreamMessage.contentType);
      }
    }
    requestStarted() {
      this.startRequest();
    }
    requestPreventedHandlingResponse(_request, _response) {
    }
    async requestSucceededWithResponse(request, response) {
      const responseHTML = await response.responseHTML;
      const { redirected, statusCode } = response;
      if (responseHTML == void 0) {
        this.recordResponse({
          statusCode: SystemStatusCode.contentTypeMismatch,
          redirected
        });
      } else {
        this.redirectedToLocation = response.redirected ? response.location : void 0;
        this.recordResponse({ statusCode, responseHTML, redirected });
      }
    }
    async requestFailedWithResponse(request, response) {
      const responseHTML = await response.responseHTML;
      const { redirected, statusCode } = response;
      if (responseHTML == void 0) {
        this.recordResponse({
          statusCode: SystemStatusCode.contentTypeMismatch,
          redirected
        });
      } else {
        this.recordResponse({ statusCode, responseHTML, redirected });
      }
    }
    requestErrored(_request, _error) {
      this.recordResponse({
        statusCode: SystemStatusCode.networkFailure,
        redirected: false
      });
    }
    requestFinished() {
      this.finishRequest();
    }
    performScroll() {
      if (!this.scrolled && !this.view.forceReloaded) {
        if (this.action == "restore") {
          this.scrollToRestoredPosition() || this.scrollToAnchor() || this.view.scrollToTop();
        } else {
          this.scrollToAnchor() || this.view.scrollToTop();
        }
        if (this.isSamePage) {
          this.delegate.visitScrolledToSamePageLocation(this.view.lastRenderedLocation, this.location);
        }
        this.scrolled = true;
      }
    }
    scrollToRestoredPosition() {
      const { scrollPosition } = this.restorationData;
      if (scrollPosition) {
        this.view.scrollToPosition(scrollPosition);
        return true;
      }
    }
    scrollToAnchor() {
      const anchor = getAnchor(this.location);
      if (anchor != null) {
        this.view.scrollToAnchor(anchor);
        return true;
      }
    }
    recordTimingMetric(metric) {
      this.timingMetrics[metric] = (/* @__PURE__ */ new Date()).getTime();
    }
    getTimingMetrics() {
      return Object.assign({}, this.timingMetrics);
    }
    getHistoryMethodForAction(action) {
      switch (action) {
        case "replace":
          return history.replaceState;
        case "advance":
        case "restore":
          return history.pushState;
      }
    }
    hasPreloadedResponse() {
      return typeof this.response == "object";
    }
    shouldIssueRequest() {
      if (this.isSamePage) {
        return false;
      } else if (this.action == "restore") {
        return !this.hasCachedSnapshot();
      } else {
        return this.willRender;
      }
    }
    cacheSnapshot() {
      if (!this.snapshotCached) {
        this.view.cacheSnapshot(this.snapshot).then((snapshot) => snapshot && this.visitCachedSnapshot(snapshot));
        this.snapshotCached = true;
      }
    }
    async render(callback) {
      this.cancelRender();
      await new Promise((resolve) => {
        this.frame = requestAnimationFrame(() => resolve());
      });
      await callback();
      delete this.frame;
    }
    cancelRender() {
      if (this.frame) {
        cancelAnimationFrame(this.frame);
        delete this.frame;
      }
    }
  };
  function isSuccessful(statusCode) {
    return statusCode >= 200 && statusCode < 300;
  }
  var BrowserAdapter = class {
    constructor(session2) {
      this.progressBar = new ProgressBar();
      this.showProgressBar = () => {
        this.progressBar.show();
      };
      this.session = session2;
    }
    visitProposedToLocation(location2, options) {
      this.navigator.startVisit(location2, (options === null || options === void 0 ? void 0 : options.restorationIdentifier) || uuid(), options);
    }
    visitStarted(visit2) {
      this.location = visit2.location;
      visit2.loadCachedSnapshot();
      visit2.issueRequest();
      visit2.goToSamePageAnchor();
    }
    visitRequestStarted(visit2) {
      this.progressBar.setValue(0);
      if (visit2.hasCachedSnapshot() || visit2.action != "restore") {
        this.showVisitProgressBarAfterDelay();
      } else {
        this.showProgressBar();
      }
    }
    visitRequestCompleted(visit2) {
      visit2.loadResponse();
    }
    visitRequestFailedWithStatusCode(visit2, statusCode) {
      switch (statusCode) {
        case SystemStatusCode.networkFailure:
        case SystemStatusCode.timeoutFailure:
        case SystemStatusCode.contentTypeMismatch:
          return this.reload({
            reason: "request_failed",
            context: {
              statusCode
            }
          });
        default:
          return visit2.loadResponse();
      }
    }
    visitRequestFinished(_visit) {
      this.progressBar.setValue(1);
      this.hideVisitProgressBar();
    }
    visitCompleted(_visit) {
    }
    pageInvalidated(reason) {
      this.reload(reason);
    }
    visitFailed(_visit) {
    }
    visitRendered(_visit) {
    }
    formSubmissionStarted(_formSubmission) {
      this.progressBar.setValue(0);
      this.showFormProgressBarAfterDelay();
    }
    formSubmissionFinished(_formSubmission) {
      this.progressBar.setValue(1);
      this.hideFormProgressBar();
    }
    showVisitProgressBarAfterDelay() {
      this.visitProgressBarTimeout = window.setTimeout(this.showProgressBar, this.session.progressBarDelay);
    }
    hideVisitProgressBar() {
      this.progressBar.hide();
      if (this.visitProgressBarTimeout != null) {
        window.clearTimeout(this.visitProgressBarTimeout);
        delete this.visitProgressBarTimeout;
      }
    }
    showFormProgressBarAfterDelay() {
      if (this.formProgressBarTimeout == null) {
        this.formProgressBarTimeout = window.setTimeout(this.showProgressBar, this.session.progressBarDelay);
      }
    }
    hideFormProgressBar() {
      this.progressBar.hide();
      if (this.formProgressBarTimeout != null) {
        window.clearTimeout(this.formProgressBarTimeout);
        delete this.formProgressBarTimeout;
      }
    }
    reload(reason) {
      var _a;
      dispatch2("turbo:reload", { detail: reason });
      window.location.href = ((_a = this.location) === null || _a === void 0 ? void 0 : _a.toString()) || window.location.href;
    }
    get navigator() {
      return this.session.navigator;
    }
  };
  var CacheObserver = class {
    constructor() {
      this.selector = "[data-turbo-temporary]";
      this.deprecatedSelector = "[data-turbo-cache=false]";
      this.started = false;
      this.removeTemporaryElements = (_event) => {
        for (const element of this.temporaryElements) {
          element.remove();
        }
      };
    }
    start() {
      if (!this.started) {
        this.started = true;
        addEventListener("turbo:before-cache", this.removeTemporaryElements, false);
      }
    }
    stop() {
      if (this.started) {
        this.started = false;
        removeEventListener("turbo:before-cache", this.removeTemporaryElements, false);
      }
    }
    get temporaryElements() {
      return [...document.querySelectorAll(this.selector), ...this.temporaryElementsWithDeprecation];
    }
    get temporaryElementsWithDeprecation() {
      const elements = document.querySelectorAll(this.deprecatedSelector);
      if (elements.length) {
        console.warn(`The ${this.deprecatedSelector} selector is deprecated and will be removed in a future version. Use ${this.selector} instead.`);
      }
      return [...elements];
    }
  };
  var FrameRedirector = class {
    constructor(session2, element) {
      this.session = session2;
      this.element = element;
      this.linkInterceptor = new LinkInterceptor(this, element);
      this.formSubmitObserver = new FormSubmitObserver(this, element);
    }
    start() {
      this.linkInterceptor.start();
      this.formSubmitObserver.start();
    }
    stop() {
      this.linkInterceptor.stop();
      this.formSubmitObserver.stop();
    }
    shouldInterceptLinkClick(element, _location, _event) {
      return this.shouldRedirect(element);
    }
    linkClickIntercepted(element, url, event) {
      const frame = this.findFrameElement(element);
      if (frame) {
        frame.delegate.linkClickIntercepted(element, url, event);
      }
    }
    willSubmitForm(element, submitter) {
      return element.closest("turbo-frame") == null && this.shouldSubmit(element, submitter) && this.shouldRedirect(element, submitter);
    }
    formSubmitted(element, submitter) {
      const frame = this.findFrameElement(element, submitter);
      if (frame) {
        frame.delegate.formSubmitted(element, submitter);
      }
    }
    shouldSubmit(form, submitter) {
      var _a;
      const action = getAction(form, submitter);
      const meta = this.element.ownerDocument.querySelector(`meta[name="turbo-root"]`);
      const rootLocation = expandURL((_a = meta === null || meta === void 0 ? void 0 : meta.content) !== null && _a !== void 0 ? _a : "/");
      return this.shouldRedirect(form, submitter) && locationIsVisitable(action, rootLocation);
    }
    shouldRedirect(element, submitter) {
      const isNavigatable = element instanceof HTMLFormElement ? this.session.submissionIsNavigatable(element, submitter) : this.session.elementIsNavigatable(element);
      if (isNavigatable) {
        const frame = this.findFrameElement(element, submitter);
        return frame ? frame != element.closest("turbo-frame") : false;
      } else {
        return false;
      }
    }
    findFrameElement(element, submitter) {
      const id2 = (submitter === null || submitter === void 0 ? void 0 : submitter.getAttribute("data-turbo-frame")) || element.getAttribute("data-turbo-frame");
      if (id2 && id2 != "_top") {
        const frame = this.element.querySelector(`#${id2}:not([disabled])`);
        if (frame instanceof FrameElement) {
          return frame;
        }
      }
    }
  };
  var History = class {
    constructor(delegate) {
      this.restorationIdentifier = uuid();
      this.restorationData = {};
      this.started = false;
      this.pageLoaded = false;
      this.onPopState = (event) => {
        if (this.shouldHandlePopState()) {
          const { turbo } = event.state || {};
          if (turbo) {
            this.location = new URL(window.location.href);
            const { restorationIdentifier } = turbo;
            this.restorationIdentifier = restorationIdentifier;
            this.delegate.historyPoppedToLocationWithRestorationIdentifier(this.location, restorationIdentifier);
          }
        }
      };
      this.onPageLoad = async (_event) => {
        await nextMicrotask();
        this.pageLoaded = true;
      };
      this.delegate = delegate;
    }
    start() {
      if (!this.started) {
        addEventListener("popstate", this.onPopState, false);
        addEventListener("load", this.onPageLoad, false);
        this.started = true;
        this.replace(new URL(window.location.href));
      }
    }
    stop() {
      if (this.started) {
        removeEventListener("popstate", this.onPopState, false);
        removeEventListener("load", this.onPageLoad, false);
        this.started = false;
      }
    }
    push(location2, restorationIdentifier) {
      this.update(history.pushState, location2, restorationIdentifier);
    }
    replace(location2, restorationIdentifier) {
      this.update(history.replaceState, location2, restorationIdentifier);
    }
    update(method, location2, restorationIdentifier = uuid()) {
      const state = { turbo: { restorationIdentifier } };
      method.call(history, state, "", location2.href);
      this.location = location2;
      this.restorationIdentifier = restorationIdentifier;
    }
    getRestorationDataForIdentifier(restorationIdentifier) {
      return this.restorationData[restorationIdentifier] || {};
    }
    updateRestorationData(additionalData) {
      const { restorationIdentifier } = this;
      const restorationData = this.restorationData[restorationIdentifier];
      this.restorationData[restorationIdentifier] = Object.assign(Object.assign({}, restorationData), additionalData);
    }
    assumeControlOfScrollRestoration() {
      var _a;
      if (!this.previousScrollRestoration) {
        this.previousScrollRestoration = (_a = history.scrollRestoration) !== null && _a !== void 0 ? _a : "auto";
        history.scrollRestoration = "manual";
      }
    }
    relinquishControlOfScrollRestoration() {
      if (this.previousScrollRestoration) {
        history.scrollRestoration = this.previousScrollRestoration;
        delete this.previousScrollRestoration;
      }
    }
    shouldHandlePopState() {
      return this.pageIsLoaded();
    }
    pageIsLoaded() {
      return this.pageLoaded || document.readyState == "complete";
    }
  };
  var Navigator = class {
    constructor(delegate) {
      this.delegate = delegate;
    }
    proposeVisit(location2, options = {}) {
      if (this.delegate.allowsVisitingLocationWithAction(location2, options.action)) {
        if (locationIsVisitable(location2, this.view.snapshot.rootLocation)) {
          this.delegate.visitProposedToLocation(location2, options);
        } else {
          window.location.href = location2.toString();
        }
      }
    }
    startVisit(locatable, restorationIdentifier, options = {}) {
      this.stop();
      this.currentVisit = new Visit(this, expandURL(locatable), restorationIdentifier, Object.assign({ referrer: this.location }, options));
      this.currentVisit.start();
    }
    submitForm(form, submitter) {
      this.stop();
      this.formSubmission = new FormSubmission(this, form, submitter, true);
      this.formSubmission.start();
    }
    stop() {
      if (this.formSubmission) {
        this.formSubmission.stop();
        delete this.formSubmission;
      }
      if (this.currentVisit) {
        this.currentVisit.cancel();
        delete this.currentVisit;
      }
    }
    get adapter() {
      return this.delegate.adapter;
    }
    get view() {
      return this.delegate.view;
    }
    get history() {
      return this.delegate.history;
    }
    formSubmissionStarted(formSubmission) {
      if (typeof this.adapter.formSubmissionStarted === "function") {
        this.adapter.formSubmissionStarted(formSubmission);
      }
    }
    async formSubmissionSucceededWithResponse(formSubmission, fetchResponse) {
      if (formSubmission == this.formSubmission) {
        const responseHTML = await fetchResponse.responseHTML;
        if (responseHTML) {
          const shouldCacheSnapshot = formSubmission.isSafe;
          if (!shouldCacheSnapshot) {
            this.view.clearSnapshotCache();
          }
          const { statusCode, redirected } = fetchResponse;
          const action = this.getActionForFormSubmission(formSubmission);
          const visitOptions = {
            action,
            shouldCacheSnapshot,
            response: { statusCode, responseHTML, redirected }
          };
          this.proposeVisit(fetchResponse.location, visitOptions);
        }
      }
    }
    async formSubmissionFailedWithResponse(formSubmission, fetchResponse) {
      const responseHTML = await fetchResponse.responseHTML;
      if (responseHTML) {
        const snapshot = PageSnapshot.fromHTMLString(responseHTML);
        if (fetchResponse.serverError) {
          await this.view.renderError(snapshot, this.currentVisit);
        } else {
          await this.view.renderPage(snapshot, false, true, this.currentVisit);
        }
        this.view.scrollToTop();
        this.view.clearSnapshotCache();
      }
    }
    formSubmissionErrored(formSubmission, error2) {
      console.error(error2);
    }
    formSubmissionFinished(formSubmission) {
      if (typeof this.adapter.formSubmissionFinished === "function") {
        this.adapter.formSubmissionFinished(formSubmission);
      }
    }
    visitStarted(visit2) {
      this.delegate.visitStarted(visit2);
    }
    visitCompleted(visit2) {
      this.delegate.visitCompleted(visit2);
    }
    locationWithActionIsSamePage(location2, action) {
      const anchor = getAnchor(location2);
      const currentAnchor = getAnchor(this.view.lastRenderedLocation);
      const isRestorationToTop = action === "restore" && typeof anchor === "undefined";
      return action !== "replace" && getRequestURL(location2) === getRequestURL(this.view.lastRenderedLocation) && (isRestorationToTop || anchor != null && anchor !== currentAnchor);
    }
    visitScrolledToSamePageLocation(oldURL, newURL) {
      this.delegate.visitScrolledToSamePageLocation(oldURL, newURL);
    }
    get location() {
      return this.history.location;
    }
    get restorationIdentifier() {
      return this.history.restorationIdentifier;
    }
    getActionForFormSubmission({ submitter, formElement }) {
      return getVisitAction(submitter, formElement) || "advance";
    }
  };
  var PageStage;
  (function(PageStage2) {
    PageStage2[PageStage2["initial"] = 0] = "initial";
    PageStage2[PageStage2["loading"] = 1] = "loading";
    PageStage2[PageStage2["interactive"] = 2] = "interactive";
    PageStage2[PageStage2["complete"] = 3] = "complete";
  })(PageStage || (PageStage = {}));
  var PageObserver = class {
    constructor(delegate) {
      this.stage = PageStage.initial;
      this.started = false;
      this.interpretReadyState = () => {
        const { readyState } = this;
        if (readyState == "interactive") {
          this.pageIsInteractive();
        } else if (readyState == "complete") {
          this.pageIsComplete();
        }
      };
      this.pageWillUnload = () => {
        this.delegate.pageWillUnload();
      };
      this.delegate = delegate;
    }
    start() {
      if (!this.started) {
        if (this.stage == PageStage.initial) {
          this.stage = PageStage.loading;
        }
        document.addEventListener("readystatechange", this.interpretReadyState, false);
        addEventListener("pagehide", this.pageWillUnload, false);
        this.started = true;
      }
    }
    stop() {
      if (this.started) {
        document.removeEventListener("readystatechange", this.interpretReadyState, false);
        removeEventListener("pagehide", this.pageWillUnload, false);
        this.started = false;
      }
    }
    pageIsInteractive() {
      if (this.stage == PageStage.loading) {
        this.stage = PageStage.interactive;
        this.delegate.pageBecameInteractive();
      }
    }
    pageIsComplete() {
      this.pageIsInteractive();
      if (this.stage == PageStage.interactive) {
        this.stage = PageStage.complete;
        this.delegate.pageLoaded();
      }
    }
    get readyState() {
      return document.readyState;
    }
  };
  var ScrollObserver = class {
    constructor(delegate) {
      this.started = false;
      this.onScroll = () => {
        this.updatePosition({ x: window.pageXOffset, y: window.pageYOffset });
      };
      this.delegate = delegate;
    }
    start() {
      if (!this.started) {
        addEventListener("scroll", this.onScroll, false);
        this.onScroll();
        this.started = true;
      }
    }
    stop() {
      if (this.started) {
        removeEventListener("scroll", this.onScroll, false);
        this.started = false;
      }
    }
    updatePosition(position) {
      this.delegate.scrollPositionChanged(position);
    }
  };
  var StreamMessageRenderer = class {
    render({ fragment }) {
      Bardo.preservingPermanentElements(this, getPermanentElementMapForFragment(fragment), () => document.documentElement.appendChild(fragment));
    }
    enteringBardo(currentPermanentElement, newPermanentElement) {
      newPermanentElement.replaceWith(currentPermanentElement.cloneNode(true));
    }
    leavingBardo() {
    }
  };
  function getPermanentElementMapForFragment(fragment) {
    const permanentElementsInDocument = queryPermanentElementsAll(document.documentElement);
    const permanentElementMap = {};
    for (const permanentElementInDocument of permanentElementsInDocument) {
      const { id: id2 } = permanentElementInDocument;
      for (const streamElement of fragment.querySelectorAll("turbo-stream")) {
        const elementInStream = getPermanentElementById(streamElement.templateElement.content, id2);
        if (elementInStream) {
          permanentElementMap[id2] = [permanentElementInDocument, elementInStream];
        }
      }
    }
    return permanentElementMap;
  }
  var StreamObserver = class {
    constructor(delegate) {
      this.sources = /* @__PURE__ */ new Set();
      this.started = false;
      this.inspectFetchResponse = (event) => {
        const response = fetchResponseFromEvent(event);
        if (response && fetchResponseIsStream(response)) {
          event.preventDefault();
          this.receiveMessageResponse(response);
        }
      };
      this.receiveMessageEvent = (event) => {
        if (this.started && typeof event.data == "string") {
          this.receiveMessageHTML(event.data);
        }
      };
      this.delegate = delegate;
    }
    start() {
      if (!this.started) {
        this.started = true;
        addEventListener("turbo:before-fetch-response", this.inspectFetchResponse, false);
      }
    }
    stop() {
      if (this.started) {
        this.started = false;
        removeEventListener("turbo:before-fetch-response", this.inspectFetchResponse, false);
      }
    }
    connectStreamSource(source) {
      if (!this.streamSourceIsConnected(source)) {
        this.sources.add(source);
        source.addEventListener("message", this.receiveMessageEvent, false);
      }
    }
    disconnectStreamSource(source) {
      if (this.streamSourceIsConnected(source)) {
        this.sources.delete(source);
        source.removeEventListener("message", this.receiveMessageEvent, false);
      }
    }
    streamSourceIsConnected(source) {
      return this.sources.has(source);
    }
    async receiveMessageResponse(response) {
      const html = await response.responseHTML;
      if (html) {
        this.receiveMessageHTML(html);
      }
    }
    receiveMessageHTML(html) {
      this.delegate.receivedMessageFromStream(StreamMessage.wrap(html));
    }
  };
  function fetchResponseFromEvent(event) {
    var _a;
    const fetchResponse = (_a = event.detail) === null || _a === void 0 ? void 0 : _a.fetchResponse;
    if (fetchResponse instanceof FetchResponse) {
      return fetchResponse;
    }
  }
  function fetchResponseIsStream(response) {
    var _a;
    const contentType = (_a = response.contentType) !== null && _a !== void 0 ? _a : "";
    return contentType.startsWith(StreamMessage.contentType);
  }
  var ErrorRenderer = class extends Renderer {
    static renderElement(currentElement, newElement) {
      const { documentElement, body } = document;
      documentElement.replaceChild(newElement, body);
    }
    async render() {
      this.replaceHeadAndBody();
      this.activateScriptElements();
    }
    replaceHeadAndBody() {
      const { documentElement, head } = document;
      documentElement.replaceChild(this.newHead, head);
      this.renderElement(this.currentElement, this.newElement);
    }
    activateScriptElements() {
      for (const replaceableElement of this.scriptElements) {
        const parentNode = replaceableElement.parentNode;
        if (parentNode) {
          const element = activateScriptElement(replaceableElement);
          parentNode.replaceChild(element, replaceableElement);
        }
      }
    }
    get newHead() {
      return this.newSnapshot.headSnapshot.element;
    }
    get scriptElements() {
      return document.documentElement.querySelectorAll("script");
    }
  };
  var PageRenderer = class extends Renderer {
    static renderElement(currentElement, newElement) {
      if (document.body && newElement instanceof HTMLBodyElement) {
        document.body.replaceWith(newElement);
      } else {
        document.documentElement.appendChild(newElement);
      }
    }
    get shouldRender() {
      return this.newSnapshot.isVisitable && this.trackedElementsAreIdentical;
    }
    get reloadReason() {
      if (!this.newSnapshot.isVisitable) {
        return {
          reason: "turbo_visit_control_is_reload"
        };
      }
      if (!this.trackedElementsAreIdentical) {
        return {
          reason: "tracked_element_mismatch"
        };
      }
    }
    async prepareToRender() {
      await this.mergeHead();
    }
    async render() {
      if (this.willRender) {
        await this.replaceBody();
      }
    }
    finishRendering() {
      super.finishRendering();
      if (!this.isPreview) {
        this.focusFirstAutofocusableElement();
      }
    }
    get currentHeadSnapshot() {
      return this.currentSnapshot.headSnapshot;
    }
    get newHeadSnapshot() {
      return this.newSnapshot.headSnapshot;
    }
    get newElement() {
      return this.newSnapshot.element;
    }
    async mergeHead() {
      const mergedHeadElements = this.mergeProvisionalElements();
      const newStylesheetElements = this.copyNewHeadStylesheetElements();
      this.copyNewHeadScriptElements();
      await mergedHeadElements;
      await newStylesheetElements;
    }
    async replaceBody() {
      await this.preservingPermanentElements(async () => {
        this.activateNewBody();
        await this.assignNewBody();
      });
    }
    get trackedElementsAreIdentical() {
      return this.currentHeadSnapshot.trackedElementSignature == this.newHeadSnapshot.trackedElementSignature;
    }
    async copyNewHeadStylesheetElements() {
      const loadingElements = [];
      for (const element of this.newHeadStylesheetElements) {
        loadingElements.push(waitForLoad(element));
        document.head.appendChild(element);
      }
      await Promise.all(loadingElements);
    }
    copyNewHeadScriptElements() {
      for (const element of this.newHeadScriptElements) {
        document.head.appendChild(activateScriptElement(element));
      }
    }
    async mergeProvisionalElements() {
      const newHeadElements = [...this.newHeadProvisionalElements];
      for (const element of this.currentHeadProvisionalElements) {
        if (!this.isCurrentElementInElementList(element, newHeadElements)) {
          document.head.removeChild(element);
        }
      }
      for (const element of newHeadElements) {
        document.head.appendChild(element);
      }
    }
    isCurrentElementInElementList(element, elementList) {
      for (const [index, newElement] of elementList.entries()) {
        if (element.tagName == "TITLE") {
          if (newElement.tagName != "TITLE") {
            continue;
          }
          if (element.innerHTML == newElement.innerHTML) {
            elementList.splice(index, 1);
            return true;
          }
        }
        if (newElement.isEqualNode(element)) {
          elementList.splice(index, 1);
          return true;
        }
      }
      return false;
    }
    removeCurrentHeadProvisionalElements() {
      for (const element of this.currentHeadProvisionalElements) {
        document.head.removeChild(element);
      }
    }
    copyNewHeadProvisionalElements() {
      for (const element of this.newHeadProvisionalElements) {
        document.head.appendChild(element);
      }
    }
    activateNewBody() {
      document.adoptNode(this.newElement);
      this.activateNewBodyScriptElements();
    }
    activateNewBodyScriptElements() {
      for (const inertScriptElement of this.newBodyScriptElements) {
        const activatedScriptElement = activateScriptElement(inertScriptElement);
        inertScriptElement.replaceWith(activatedScriptElement);
      }
    }
    async assignNewBody() {
      await this.renderElement(this.currentElement, this.newElement);
    }
    get newHeadStylesheetElements() {
      return this.newHeadSnapshot.getStylesheetElementsNotInSnapshot(this.currentHeadSnapshot);
    }
    get newHeadScriptElements() {
      return this.newHeadSnapshot.getScriptElementsNotInSnapshot(this.currentHeadSnapshot);
    }
    get currentHeadProvisionalElements() {
      return this.currentHeadSnapshot.provisionalElements;
    }
    get newHeadProvisionalElements() {
      return this.newHeadSnapshot.provisionalElements;
    }
    get newBodyScriptElements() {
      return this.newElement.querySelectorAll("script");
    }
  };
  var SnapshotCache = class {
    constructor(size) {
      this.keys = [];
      this.snapshots = {};
      this.size = size;
    }
    has(location2) {
      return toCacheKey(location2) in this.snapshots;
    }
    get(location2) {
      if (this.has(location2)) {
        const snapshot = this.read(location2);
        this.touch(location2);
        return snapshot;
      }
    }
    put(location2, snapshot) {
      this.write(location2, snapshot);
      this.touch(location2);
      return snapshot;
    }
    clear() {
      this.snapshots = {};
    }
    read(location2) {
      return this.snapshots[toCacheKey(location2)];
    }
    write(location2, snapshot) {
      this.snapshots[toCacheKey(location2)] = snapshot;
    }
    touch(location2) {
      const key = toCacheKey(location2);
      const index = this.keys.indexOf(key);
      if (index > -1)
        this.keys.splice(index, 1);
      this.keys.unshift(key);
      this.trim();
    }
    trim() {
      for (const key of this.keys.splice(this.size)) {
        delete this.snapshots[key];
      }
    }
  };
  var PageView = class extends View {
    constructor() {
      super(...arguments);
      this.snapshotCache = new SnapshotCache(10);
      this.lastRenderedLocation = new URL(location.href);
      this.forceReloaded = false;
    }
    renderPage(snapshot, isPreview = false, willRender = true, visit2) {
      const renderer = new PageRenderer(this.snapshot, snapshot, PageRenderer.renderElement, isPreview, willRender);
      if (!renderer.shouldRender) {
        this.forceReloaded = true;
      } else {
        visit2 === null || visit2 === void 0 ? void 0 : visit2.changeHistory();
      }
      return this.render(renderer);
    }
    renderError(snapshot, visit2) {
      visit2 === null || visit2 === void 0 ? void 0 : visit2.changeHistory();
      const renderer = new ErrorRenderer(this.snapshot, snapshot, ErrorRenderer.renderElement, false);
      return this.render(renderer);
    }
    clearSnapshotCache() {
      this.snapshotCache.clear();
    }
    async cacheSnapshot(snapshot = this.snapshot) {
      if (snapshot.isCacheable) {
        this.delegate.viewWillCacheSnapshot();
        const { lastRenderedLocation: location2 } = this;
        await nextEventLoopTick();
        const cachedSnapshot = snapshot.clone();
        this.snapshotCache.put(location2, cachedSnapshot);
        return cachedSnapshot;
      }
    }
    getCachedSnapshotForLocation(location2) {
      return this.snapshotCache.get(location2);
    }
    get snapshot() {
      return PageSnapshot.fromElement(this.element);
    }
  };
  var Preloader = class {
    constructor(delegate) {
      this.selector = "a[data-turbo-preload]";
      this.delegate = delegate;
    }
    get snapshotCache() {
      return this.delegate.navigator.view.snapshotCache;
    }
    start() {
      if (document.readyState === "loading") {
        return document.addEventListener("DOMContentLoaded", () => {
          this.preloadOnLoadLinksForView(document.body);
        });
      } else {
        this.preloadOnLoadLinksForView(document.body);
      }
    }
    preloadOnLoadLinksForView(element) {
      for (const link of element.querySelectorAll(this.selector)) {
        this.preloadURL(link);
      }
    }
    async preloadURL(link) {
      const location2 = new URL(link.href);
      if (this.snapshotCache.has(location2)) {
        return;
      }
      try {
        const response = await fetch(location2.toString(), { headers: { "VND.PREFETCH": "true", Accept: "text/html" } });
        const responseText = await response.text();
        const snapshot = PageSnapshot.fromHTMLString(responseText);
        this.snapshotCache.put(location2, snapshot);
      } catch (_2) {
      }
    }
  };
  var Session = class {
    constructor() {
      this.navigator = new Navigator(this);
      this.history = new History(this);
      this.preloader = new Preloader(this);
      this.view = new PageView(this, document.documentElement);
      this.adapter = new BrowserAdapter(this);
      this.pageObserver = new PageObserver(this);
      this.cacheObserver = new CacheObserver();
      this.linkClickObserver = new LinkClickObserver(this, window);
      this.formSubmitObserver = new FormSubmitObserver(this, document);
      this.scrollObserver = new ScrollObserver(this);
      this.streamObserver = new StreamObserver(this);
      this.formLinkClickObserver = new FormLinkClickObserver(this, document.documentElement);
      this.frameRedirector = new FrameRedirector(this, document.documentElement);
      this.streamMessageRenderer = new StreamMessageRenderer();
      this.drive = true;
      this.enabled = true;
      this.progressBarDelay = 500;
      this.started = false;
      this.formMode = "on";
    }
    start() {
      if (!this.started) {
        this.pageObserver.start();
        this.cacheObserver.start();
        this.formLinkClickObserver.start();
        this.linkClickObserver.start();
        this.formSubmitObserver.start();
        this.scrollObserver.start();
        this.streamObserver.start();
        this.frameRedirector.start();
        this.history.start();
        this.preloader.start();
        this.started = true;
        this.enabled = true;
      }
    }
    disable() {
      this.enabled = false;
    }
    stop() {
      if (this.started) {
        this.pageObserver.stop();
        this.cacheObserver.stop();
        this.formLinkClickObserver.stop();
        this.linkClickObserver.stop();
        this.formSubmitObserver.stop();
        this.scrollObserver.stop();
        this.streamObserver.stop();
        this.frameRedirector.stop();
        this.history.stop();
        this.started = false;
      }
    }
    registerAdapter(adapter) {
      this.adapter = adapter;
    }
    visit(location2, options = {}) {
      const frameElement = options.frame ? document.getElementById(options.frame) : null;
      if (frameElement instanceof FrameElement) {
        frameElement.src = location2.toString();
        frameElement.loaded;
      } else {
        this.navigator.proposeVisit(expandURL(location2), options);
      }
    }
    connectStreamSource(source) {
      this.streamObserver.connectStreamSource(source);
    }
    disconnectStreamSource(source) {
      this.streamObserver.disconnectStreamSource(source);
    }
    renderStreamMessage(message) {
      this.streamMessageRenderer.render(StreamMessage.wrap(message));
    }
    clearCache() {
      this.view.clearSnapshotCache();
    }
    setProgressBarDelay(delay) {
      this.progressBarDelay = delay;
    }
    setFormMode(mode) {
      this.formMode = mode;
    }
    get location() {
      return this.history.location;
    }
    get restorationIdentifier() {
      return this.history.restorationIdentifier;
    }
    historyPoppedToLocationWithRestorationIdentifier(location2, restorationIdentifier) {
      if (this.enabled) {
        this.navigator.startVisit(location2, restorationIdentifier, {
          action: "restore",
          historyChanged: true
        });
      } else {
        this.adapter.pageInvalidated({
          reason: "turbo_disabled"
        });
      }
    }
    scrollPositionChanged(position) {
      this.history.updateRestorationData({ scrollPosition: position });
    }
    willSubmitFormLinkToLocation(link, location2) {
      return this.elementIsNavigatable(link) && locationIsVisitable(location2, this.snapshot.rootLocation);
    }
    submittedFormLinkToLocation() {
    }
    willFollowLinkToLocation(link, location2, event) {
      return this.elementIsNavigatable(link) && locationIsVisitable(location2, this.snapshot.rootLocation) && this.applicationAllowsFollowingLinkToLocation(link, location2, event);
    }
    followedLinkToLocation(link, location2) {
      const action = this.getActionForLink(link);
      const acceptsStreamResponse = link.hasAttribute("data-turbo-stream");
      this.visit(location2.href, { action, acceptsStreamResponse });
    }
    allowsVisitingLocationWithAction(location2, action) {
      return this.locationWithActionIsSamePage(location2, action) || this.applicationAllowsVisitingLocation(location2);
    }
    visitProposedToLocation(location2, options) {
      extendURLWithDeprecatedProperties(location2);
      this.adapter.visitProposedToLocation(location2, options);
    }
    visitStarted(visit2) {
      if (!visit2.acceptsStreamResponse) {
        markAsBusy(document.documentElement);
      }
      extendURLWithDeprecatedProperties(visit2.location);
      if (!visit2.silent) {
        this.notifyApplicationAfterVisitingLocation(visit2.location, visit2.action);
      }
    }
    visitCompleted(visit2) {
      clearBusyState(document.documentElement);
      this.notifyApplicationAfterPageLoad(visit2.getTimingMetrics());
    }
    locationWithActionIsSamePage(location2, action) {
      return this.navigator.locationWithActionIsSamePage(location2, action);
    }
    visitScrolledToSamePageLocation(oldURL, newURL) {
      this.notifyApplicationAfterVisitingSamePageLocation(oldURL, newURL);
    }
    willSubmitForm(form, submitter) {
      const action = getAction(form, submitter);
      return this.submissionIsNavigatable(form, submitter) && locationIsVisitable(expandURL(action), this.snapshot.rootLocation);
    }
    formSubmitted(form, submitter) {
      this.navigator.submitForm(form, submitter);
    }
    pageBecameInteractive() {
      this.view.lastRenderedLocation = this.location;
      this.notifyApplicationAfterPageLoad();
    }
    pageLoaded() {
      this.history.assumeControlOfScrollRestoration();
    }
    pageWillUnload() {
      this.history.relinquishControlOfScrollRestoration();
    }
    receivedMessageFromStream(message) {
      this.renderStreamMessage(message);
    }
    viewWillCacheSnapshot() {
      var _a;
      if (!((_a = this.navigator.currentVisit) === null || _a === void 0 ? void 0 : _a.silent)) {
        this.notifyApplicationBeforeCachingSnapshot();
      }
    }
    allowsImmediateRender({ element }, options) {
      const event = this.notifyApplicationBeforeRender(element, options);
      const { defaultPrevented, detail: { render } } = event;
      if (this.view.renderer && render) {
        this.view.renderer.renderElement = render;
      }
      return !defaultPrevented;
    }
    viewRenderedSnapshot(_snapshot, _isPreview) {
      this.view.lastRenderedLocation = this.history.location;
      this.notifyApplicationAfterRender();
    }
    preloadOnLoadLinksForView(element) {
      this.preloader.preloadOnLoadLinksForView(element);
    }
    viewInvalidated(reason) {
      this.adapter.pageInvalidated(reason);
    }
    frameLoaded(frame) {
      this.notifyApplicationAfterFrameLoad(frame);
    }
    frameRendered(fetchResponse, frame) {
      this.notifyApplicationAfterFrameRender(fetchResponse, frame);
    }
    applicationAllowsFollowingLinkToLocation(link, location2, ev) {
      const event = this.notifyApplicationAfterClickingLinkToLocation(link, location2, ev);
      return !event.defaultPrevented;
    }
    applicationAllowsVisitingLocation(location2) {
      const event = this.notifyApplicationBeforeVisitingLocation(location2);
      return !event.defaultPrevented;
    }
    notifyApplicationAfterClickingLinkToLocation(link, location2, event) {
      return dispatch2("turbo:click", {
        target: link,
        detail: { url: location2.href, originalEvent: event },
        cancelable: true
      });
    }
    notifyApplicationBeforeVisitingLocation(location2) {
      return dispatch2("turbo:before-visit", {
        detail: { url: location2.href },
        cancelable: true
      });
    }
    notifyApplicationAfterVisitingLocation(location2, action) {
      return dispatch2("turbo:visit", { detail: { url: location2.href, action } });
    }
    notifyApplicationBeforeCachingSnapshot() {
      return dispatch2("turbo:before-cache");
    }
    notifyApplicationBeforeRender(newBody, options) {
      return dispatch2("turbo:before-render", {
        detail: Object.assign({ newBody }, options),
        cancelable: true
      });
    }
    notifyApplicationAfterRender() {
      return dispatch2("turbo:render");
    }
    notifyApplicationAfterPageLoad(timing = {}) {
      return dispatch2("turbo:load", {
        detail: { url: this.location.href, timing }
      });
    }
    notifyApplicationAfterVisitingSamePageLocation(oldURL, newURL) {
      dispatchEvent(new HashChangeEvent("hashchange", {
        oldURL: oldURL.toString(),
        newURL: newURL.toString()
      }));
    }
    notifyApplicationAfterFrameLoad(frame) {
      return dispatch2("turbo:frame-load", { target: frame });
    }
    notifyApplicationAfterFrameRender(fetchResponse, frame) {
      return dispatch2("turbo:frame-render", {
        detail: { fetchResponse },
        target: frame,
        cancelable: true
      });
    }
    submissionIsNavigatable(form, submitter) {
      if (this.formMode == "off") {
        return false;
      } else {
        const submitterIsNavigatable = submitter ? this.elementIsNavigatable(submitter) : true;
        if (this.formMode == "optin") {
          return submitterIsNavigatable && form.closest('[data-turbo="true"]') != null;
        } else {
          return submitterIsNavigatable && this.elementIsNavigatable(form);
        }
      }
    }
    elementIsNavigatable(element) {
      const container = findClosestRecursively(element, "[data-turbo]");
      const withinFrame = findClosestRecursively(element, "turbo-frame");
      if (this.drive || withinFrame) {
        if (container) {
          return container.getAttribute("data-turbo") != "false";
        } else {
          return true;
        }
      } else {
        if (container) {
          return container.getAttribute("data-turbo") == "true";
        } else {
          return false;
        }
      }
    }
    getActionForLink(link) {
      return getVisitAction(link) || "advance";
    }
    get snapshot() {
      return this.view.snapshot;
    }
  };
  function extendURLWithDeprecatedProperties(url) {
    Object.defineProperties(url, deprecatedLocationPropertyDescriptors);
  }
  var deprecatedLocationPropertyDescriptors = {
    absoluteURL: {
      get() {
        return this.toString();
      }
    }
  };
  var Cache = class {
    constructor(session2) {
      this.session = session2;
    }
    clear() {
      this.session.clearCache();
    }
    resetCacheControl() {
      this.setCacheControl("");
    }
    exemptPageFromCache() {
      this.setCacheControl("no-cache");
    }
    exemptPageFromPreview() {
      this.setCacheControl("no-preview");
    }
    setCacheControl(value) {
      setMetaContent("turbo-cache-control", value);
    }
  };
  var StreamActions = {
    after() {
      this.targetElements.forEach((e2) => {
        var _a;
        return (_a = e2.parentElement) === null || _a === void 0 ? void 0 : _a.insertBefore(this.templateContent, e2.nextSibling);
      });
    },
    append() {
      this.removeDuplicateTargetChildren();
      this.targetElements.forEach((e2) => e2.append(this.templateContent));
    },
    before() {
      this.targetElements.forEach((e2) => {
        var _a;
        return (_a = e2.parentElement) === null || _a === void 0 ? void 0 : _a.insertBefore(this.templateContent, e2);
      });
    },
    prepend() {
      this.removeDuplicateTargetChildren();
      this.targetElements.forEach((e2) => e2.prepend(this.templateContent));
    },
    remove() {
      this.targetElements.forEach((e2) => e2.remove());
    },
    replace() {
      this.targetElements.forEach((e2) => e2.replaceWith(this.templateContent));
    },
    update() {
      this.targetElements.forEach((targetElement) => {
        targetElement.innerHTML = "";
        targetElement.append(this.templateContent);
      });
    }
  };
  var session = new Session();
  var cache = new Cache(session);
  var { navigator: navigator$1 } = session;
  function start() {
    session.start();
  }
  function registerAdapter(adapter) {
    session.registerAdapter(adapter);
  }
  function visit(location2, options) {
    session.visit(location2, options);
  }
  function connectStreamSource(source) {
    session.connectStreamSource(source);
  }
  function disconnectStreamSource(source) {
    session.disconnectStreamSource(source);
  }
  function renderStreamMessage(message) {
    session.renderStreamMessage(message);
  }
  function clearCache() {
    console.warn("Please replace `Turbo.clearCache()` with `Turbo.cache.clear()`. The top-level function is deprecated and will be removed in a future version of Turbo.`");
    session.clearCache();
  }
  function setProgressBarDelay(delay) {
    session.setProgressBarDelay(delay);
  }
  function setConfirmMethod(confirmMethod) {
    FormSubmission.confirmMethod = confirmMethod;
  }
  function setFormMode(mode) {
    session.setFormMode(mode);
  }
  var Turbo = /* @__PURE__ */ Object.freeze({
    __proto__: null,
    navigator: navigator$1,
    session,
    cache,
    PageRenderer,
    PageSnapshot,
    FrameRenderer,
    start,
    registerAdapter,
    visit,
    connectStreamSource,
    disconnectStreamSource,
    renderStreamMessage,
    clearCache,
    setProgressBarDelay,
    setConfirmMethod,
    setFormMode,
    StreamActions
  });
  var TurboFrameMissingError = class extends Error {
  };
  var FrameController = class {
    constructor(element) {
      this.fetchResponseLoaded = (_fetchResponse) => {
      };
      this.currentFetchRequest = null;
      this.resolveVisitPromise = () => {
      };
      this.connected = false;
      this.hasBeenLoaded = false;
      this.ignoredAttributes = /* @__PURE__ */ new Set();
      this.action = null;
      this.visitCachedSnapshot = ({ element: element2 }) => {
        const frame = element2.querySelector("#" + this.element.id);
        if (frame && this.previousFrameElement) {
          frame.replaceChildren(...this.previousFrameElement.children);
        }
        delete this.previousFrameElement;
      };
      this.element = element;
      this.view = new FrameView(this, this.element);
      this.appearanceObserver = new AppearanceObserver(this, this.element);
      this.formLinkClickObserver = new FormLinkClickObserver(this, this.element);
      this.linkInterceptor = new LinkInterceptor(this, this.element);
      this.restorationIdentifier = uuid();
      this.formSubmitObserver = new FormSubmitObserver(this, this.element);
    }
    connect() {
      if (!this.connected) {
        this.connected = true;
        if (this.loadingStyle == FrameLoadingStyle.lazy) {
          this.appearanceObserver.start();
        } else {
          this.loadSourceURL();
        }
        this.formLinkClickObserver.start();
        this.linkInterceptor.start();
        this.formSubmitObserver.start();
      }
    }
    disconnect() {
      if (this.connected) {
        this.connected = false;
        this.appearanceObserver.stop();
        this.formLinkClickObserver.stop();
        this.linkInterceptor.stop();
        this.formSubmitObserver.stop();
      }
    }
    disabledChanged() {
      if (this.loadingStyle == FrameLoadingStyle.eager) {
        this.loadSourceURL();
      }
    }
    sourceURLChanged() {
      if (this.isIgnoringChangesTo("src"))
        return;
      if (this.element.isConnected) {
        this.complete = false;
      }
      if (this.loadingStyle == FrameLoadingStyle.eager || this.hasBeenLoaded) {
        this.loadSourceURL();
      }
    }
    sourceURLReloaded() {
      const { src } = this.element;
      this.ignoringChangesToAttribute("complete", () => {
        this.element.removeAttribute("complete");
      });
      this.element.src = null;
      this.element.src = src;
      return this.element.loaded;
    }
    completeChanged() {
      if (this.isIgnoringChangesTo("complete"))
        return;
      this.loadSourceURL();
    }
    loadingStyleChanged() {
      if (this.loadingStyle == FrameLoadingStyle.lazy) {
        this.appearanceObserver.start();
      } else {
        this.appearanceObserver.stop();
        this.loadSourceURL();
      }
    }
    async loadSourceURL() {
      if (this.enabled && this.isActive && !this.complete && this.sourceURL) {
        this.element.loaded = this.visit(expandURL(this.sourceURL));
        this.appearanceObserver.stop();
        await this.element.loaded;
        this.hasBeenLoaded = true;
      }
    }
    async loadResponse(fetchResponse) {
      if (fetchResponse.redirected || fetchResponse.succeeded && fetchResponse.isHTML) {
        this.sourceURL = fetchResponse.response.url;
      }
      try {
        const html = await fetchResponse.responseHTML;
        if (html) {
          const document2 = parseHTMLDocument(html);
          const pageSnapshot = PageSnapshot.fromDocument(document2);
          if (pageSnapshot.isVisitable) {
            await this.loadFrameResponse(fetchResponse, document2);
          } else {
            await this.handleUnvisitableFrameResponse(fetchResponse);
          }
        }
      } finally {
        this.fetchResponseLoaded = () => {
        };
      }
    }
    elementAppearedInViewport(element) {
      this.proposeVisitIfNavigatedWithAction(element, element);
      this.loadSourceURL();
    }
    willSubmitFormLinkToLocation(link) {
      return this.shouldInterceptNavigation(link);
    }
    submittedFormLinkToLocation(link, _location, form) {
      const frame = this.findFrameElement(link);
      if (frame)
        form.setAttribute("data-turbo-frame", frame.id);
    }
    shouldInterceptLinkClick(element, _location, _event) {
      return this.shouldInterceptNavigation(element);
    }
    linkClickIntercepted(element, location2) {
      this.navigateFrame(element, location2);
    }
    willSubmitForm(element, submitter) {
      return element.closest("turbo-frame") == this.element && this.shouldInterceptNavigation(element, submitter);
    }
    formSubmitted(element, submitter) {
      if (this.formSubmission) {
        this.formSubmission.stop();
      }
      this.formSubmission = new FormSubmission(this, element, submitter);
      const { fetchRequest } = this.formSubmission;
      this.prepareRequest(fetchRequest);
      this.formSubmission.start();
    }
    prepareRequest(request) {
      var _a;
      request.headers["Turbo-Frame"] = this.id;
      if ((_a = this.currentNavigationElement) === null || _a === void 0 ? void 0 : _a.hasAttribute("data-turbo-stream")) {
        request.acceptResponseType(StreamMessage.contentType);
      }
    }
    requestStarted(_request) {
      markAsBusy(this.element);
    }
    requestPreventedHandlingResponse(_request, _response) {
      this.resolveVisitPromise();
    }
    async requestSucceededWithResponse(request, response) {
      await this.loadResponse(response);
      this.resolveVisitPromise();
    }
    async requestFailedWithResponse(request, response) {
      await this.loadResponse(response);
      this.resolveVisitPromise();
    }
    requestErrored(request, error2) {
      console.error(error2);
      this.resolveVisitPromise();
    }
    requestFinished(_request) {
      clearBusyState(this.element);
    }
    formSubmissionStarted({ formElement }) {
      markAsBusy(formElement, this.findFrameElement(formElement));
    }
    formSubmissionSucceededWithResponse(formSubmission, response) {
      const frame = this.findFrameElement(formSubmission.formElement, formSubmission.submitter);
      frame.delegate.proposeVisitIfNavigatedWithAction(frame, formSubmission.formElement, formSubmission.submitter);
      frame.delegate.loadResponse(response);
      if (!formSubmission.isSafe) {
        session.clearCache();
      }
    }
    formSubmissionFailedWithResponse(formSubmission, fetchResponse) {
      this.element.delegate.loadResponse(fetchResponse);
      session.clearCache();
    }
    formSubmissionErrored(formSubmission, error2) {
      console.error(error2);
    }
    formSubmissionFinished({ formElement }) {
      clearBusyState(formElement, this.findFrameElement(formElement));
    }
    allowsImmediateRender({ element: newFrame }, options) {
      const event = dispatch2("turbo:before-frame-render", {
        target: this.element,
        detail: Object.assign({ newFrame }, options),
        cancelable: true
      });
      const { defaultPrevented, detail: { render } } = event;
      if (this.view.renderer && render) {
        this.view.renderer.renderElement = render;
      }
      return !defaultPrevented;
    }
    viewRenderedSnapshot(_snapshot, _isPreview) {
    }
    preloadOnLoadLinksForView(element) {
      session.preloadOnLoadLinksForView(element);
    }
    viewInvalidated() {
    }
    willRenderFrame(currentElement, _newElement) {
      this.previousFrameElement = currentElement.cloneNode(true);
    }
    async loadFrameResponse(fetchResponse, document2) {
      const newFrameElement = await this.extractForeignFrameElement(document2.body);
      if (newFrameElement) {
        const snapshot = new Snapshot(newFrameElement);
        const renderer = new FrameRenderer(this, this.view.snapshot, snapshot, FrameRenderer.renderElement, false, false);
        if (this.view.renderPromise)
          await this.view.renderPromise;
        this.changeHistory();
        await this.view.render(renderer);
        this.complete = true;
        session.frameRendered(fetchResponse, this.element);
        session.frameLoaded(this.element);
        this.fetchResponseLoaded(fetchResponse);
      } else if (this.willHandleFrameMissingFromResponse(fetchResponse)) {
        this.handleFrameMissingFromResponse(fetchResponse);
      }
    }
    async visit(url) {
      var _a;
      const request = new FetchRequest(this, FetchMethod.get, url, new URLSearchParams(), this.element);
      (_a = this.currentFetchRequest) === null || _a === void 0 ? void 0 : _a.cancel();
      this.currentFetchRequest = request;
      return new Promise((resolve) => {
        this.resolveVisitPromise = () => {
          this.resolveVisitPromise = () => {
          };
          this.currentFetchRequest = null;
          resolve();
        };
        request.perform();
      });
    }
    navigateFrame(element, url, submitter) {
      const frame = this.findFrameElement(element, submitter);
      frame.delegate.proposeVisitIfNavigatedWithAction(frame, element, submitter);
      this.withCurrentNavigationElement(element, () => {
        frame.src = url;
      });
    }
    proposeVisitIfNavigatedWithAction(frame, element, submitter) {
      this.action = getVisitAction(submitter, element, frame);
      if (this.action) {
        const pageSnapshot = PageSnapshot.fromElement(frame).clone();
        const { visitCachedSnapshot } = frame.delegate;
        frame.delegate.fetchResponseLoaded = (fetchResponse) => {
          if (frame.src) {
            const { statusCode, redirected } = fetchResponse;
            const responseHTML = frame.ownerDocument.documentElement.outerHTML;
            const response = { statusCode, redirected, responseHTML };
            const options = {
              response,
              visitCachedSnapshot,
              willRender: false,
              updateHistory: false,
              restorationIdentifier: this.restorationIdentifier,
              snapshot: pageSnapshot
            };
            if (this.action)
              options.action = this.action;
            session.visit(frame.src, options);
          }
        };
      }
    }
    changeHistory() {
      if (this.action) {
        const method = getHistoryMethodForAction(this.action);
        session.history.update(method, expandURL(this.element.src || ""), this.restorationIdentifier);
      }
    }
    async handleUnvisitableFrameResponse(fetchResponse) {
      console.warn(`The response (${fetchResponse.statusCode}) from <turbo-frame id="${this.element.id}"> is performing a full page visit due to turbo-visit-control.`);
      await this.visitResponse(fetchResponse.response);
    }
    willHandleFrameMissingFromResponse(fetchResponse) {
      this.element.setAttribute("complete", "");
      const response = fetchResponse.response;
      const visit2 = async (url, options = {}) => {
        if (url instanceof Response) {
          this.visitResponse(url);
        } else {
          session.visit(url, options);
        }
      };
      const event = dispatch2("turbo:frame-missing", {
        target: this.element,
        detail: { response, visit: visit2 },
        cancelable: true
      });
      return !event.defaultPrevented;
    }
    handleFrameMissingFromResponse(fetchResponse) {
      this.view.missing();
      this.throwFrameMissingError(fetchResponse);
    }
    throwFrameMissingError(fetchResponse) {
      const message = `The response (${fetchResponse.statusCode}) did not contain the expected <turbo-frame id="${this.element.id}"> and will be ignored. To perform a full page visit instead, set turbo-visit-control to reload.`;
      throw new TurboFrameMissingError(message);
    }
    async visitResponse(response) {
      const wrapped = new FetchResponse(response);
      const responseHTML = await wrapped.responseHTML;
      const { location: location2, redirected, statusCode } = wrapped;
      return session.visit(location2, { response: { redirected, statusCode, responseHTML } });
    }
    findFrameElement(element, submitter) {
      var _a;
      const id2 = getAttribute2("data-turbo-frame", submitter, element) || this.element.getAttribute("target");
      return (_a = getFrameElementById(id2)) !== null && _a !== void 0 ? _a : this.element;
    }
    async extractForeignFrameElement(container) {
      let element;
      const id2 = CSS.escape(this.id);
      try {
        element = activateElement(container.querySelector(`turbo-frame#${id2}`), this.sourceURL);
        if (element) {
          return element;
        }
        element = activateElement(container.querySelector(`turbo-frame[src][recurse~=${id2}]`), this.sourceURL);
        if (element) {
          await element.loaded;
          return await this.extractForeignFrameElement(element);
        }
      } catch (error2) {
        console.error(error2);
        return new FrameElement();
      }
      return null;
    }
    formActionIsVisitable(form, submitter) {
      const action = getAction(form, submitter);
      return locationIsVisitable(expandURL(action), this.rootLocation);
    }
    shouldInterceptNavigation(element, submitter) {
      const id2 = getAttribute2("data-turbo-frame", submitter, element) || this.element.getAttribute("target");
      if (element instanceof HTMLFormElement && !this.formActionIsVisitable(element, submitter)) {
        return false;
      }
      if (!this.enabled || id2 == "_top") {
        return false;
      }
      if (id2) {
        const frameElement = getFrameElementById(id2);
        if (frameElement) {
          return !frameElement.disabled;
        }
      }
      if (!session.elementIsNavigatable(element)) {
        return false;
      }
      if (submitter && !session.elementIsNavigatable(submitter)) {
        return false;
      }
      return true;
    }
    get id() {
      return this.element.id;
    }
    get enabled() {
      return !this.element.disabled;
    }
    get sourceURL() {
      if (this.element.src) {
        return this.element.src;
      }
    }
    set sourceURL(sourceURL) {
      this.ignoringChangesToAttribute("src", () => {
        this.element.src = sourceURL !== null && sourceURL !== void 0 ? sourceURL : null;
      });
    }
    get loadingStyle() {
      return this.element.loading;
    }
    get isLoading() {
      return this.formSubmission !== void 0 || this.resolveVisitPromise() !== void 0;
    }
    get complete() {
      return this.element.hasAttribute("complete");
    }
    set complete(value) {
      this.ignoringChangesToAttribute("complete", () => {
        if (value) {
          this.element.setAttribute("complete", "");
        } else {
          this.element.removeAttribute("complete");
        }
      });
    }
    get isActive() {
      return this.element.isActive && this.connected;
    }
    get rootLocation() {
      var _a;
      const meta = this.element.ownerDocument.querySelector(`meta[name="turbo-root"]`);
      const root = (_a = meta === null || meta === void 0 ? void 0 : meta.content) !== null && _a !== void 0 ? _a : "/";
      return expandURL(root);
    }
    isIgnoringChangesTo(attributeName) {
      return this.ignoredAttributes.has(attributeName);
    }
    ignoringChangesToAttribute(attributeName, callback) {
      this.ignoredAttributes.add(attributeName);
      callback();
      this.ignoredAttributes.delete(attributeName);
    }
    withCurrentNavigationElement(element, callback) {
      this.currentNavigationElement = element;
      callback();
      delete this.currentNavigationElement;
    }
  };
  function getFrameElementById(id2) {
    if (id2 != null) {
      const element = document.getElementById(id2);
      if (element instanceof FrameElement) {
        return element;
      }
    }
  }
  function activateElement(element, currentURL) {
    if (element) {
      const src = element.getAttribute("src");
      if (src != null && currentURL != null && urlsAreEqual(src, currentURL)) {
        throw new Error(`Matching <turbo-frame id="${element.id}"> element has a source URL which references itself`);
      }
      if (element.ownerDocument !== document) {
        element = document.importNode(element, true);
      }
      if (element instanceof FrameElement) {
        element.connectedCallback();
        element.disconnectedCallback();
        return element;
      }
    }
  }
  var StreamElement = class _StreamElement extends HTMLElement {
    static async renderElement(newElement) {
      await newElement.performAction();
    }
    async connectedCallback() {
      try {
        await this.render();
      } catch (error2) {
        console.error(error2);
      } finally {
        this.disconnect();
      }
    }
    async render() {
      var _a;
      return (_a = this.renderPromise) !== null && _a !== void 0 ? _a : this.renderPromise = (async () => {
        const event = this.beforeRenderEvent;
        if (this.dispatchEvent(event)) {
          await nextAnimationFrame2();
          await event.detail.render(this);
        }
      })();
    }
    disconnect() {
      try {
        this.remove();
      } catch (_a) {
      }
    }
    removeDuplicateTargetChildren() {
      this.duplicateChildren.forEach((c2) => c2.remove());
    }
    get duplicateChildren() {
      var _a;
      const existingChildren = this.targetElements.flatMap((e2) => [...e2.children]).filter((c2) => !!c2.id);
      const newChildrenIds = [...((_a = this.templateContent) === null || _a === void 0 ? void 0 : _a.children) || []].filter((c2) => !!c2.id).map((c2) => c2.id);
      return existingChildren.filter((c2) => newChildrenIds.includes(c2.id));
    }
    get performAction() {
      if (this.action) {
        const actionFunction = StreamActions[this.action];
        if (actionFunction) {
          return actionFunction;
        }
        this.raise("unknown action");
      }
      this.raise("action attribute is missing");
    }
    get targetElements() {
      if (this.target) {
        return this.targetElementsById;
      } else if (this.targets) {
        return this.targetElementsByQuery;
      } else {
        this.raise("target or targets attribute is missing");
      }
    }
    get templateContent() {
      return this.templateElement.content.cloneNode(true);
    }
    get templateElement() {
      if (this.firstElementChild === null) {
        const template = this.ownerDocument.createElement("template");
        this.appendChild(template);
        return template;
      } else if (this.firstElementChild instanceof HTMLTemplateElement) {
        return this.firstElementChild;
      }
      this.raise("first child element must be a <template> element");
    }
    get action() {
      return this.getAttribute("action");
    }
    get target() {
      return this.getAttribute("target");
    }
    get targets() {
      return this.getAttribute("targets");
    }
    raise(message) {
      throw new Error(`${this.description}: ${message}`);
    }
    get description() {
      var _a, _b;
      return (_b = ((_a = this.outerHTML.match(/<[^>]+>/)) !== null && _a !== void 0 ? _a : [])[0]) !== null && _b !== void 0 ? _b : "<turbo-stream>";
    }
    get beforeRenderEvent() {
      return new CustomEvent("turbo:before-stream-render", {
        bubbles: true,
        cancelable: true,
        detail: { newStream: this, render: _StreamElement.renderElement }
      });
    }
    get targetElementsById() {
      var _a;
      const element = (_a = this.ownerDocument) === null || _a === void 0 ? void 0 : _a.getElementById(this.target);
      if (element !== null) {
        return [element];
      } else {
        return [];
      }
    }
    get targetElementsByQuery() {
      var _a;
      const elements = (_a = this.ownerDocument) === null || _a === void 0 ? void 0 : _a.querySelectorAll(this.targets);
      if (elements.length !== 0) {
        return Array.prototype.slice.call(elements);
      } else {
        return [];
      }
    }
  };
  var StreamSourceElement = class extends HTMLElement {
    constructor() {
      super(...arguments);
      this.streamSource = null;
    }
    connectedCallback() {
      this.streamSource = this.src.match(/^ws{1,2}:/) ? new WebSocket(this.src) : new EventSource(this.src);
      connectStreamSource(this.streamSource);
    }
    disconnectedCallback() {
      if (this.streamSource) {
        disconnectStreamSource(this.streamSource);
      }
    }
    get src() {
      return this.getAttribute("src") || "";
    }
  };
  FrameElement.delegateConstructor = FrameController;
  if (customElements.get("turbo-frame") === void 0) {
    customElements.define("turbo-frame", FrameElement);
  }
  if (customElements.get("turbo-stream") === void 0) {
    customElements.define("turbo-stream", StreamElement);
  }
  if (customElements.get("turbo-stream-source") === void 0) {
    customElements.define("turbo-stream-source", StreamSourceElement);
  }
  (() => {
    let element = document.currentScript;
    if (!element)
      return;
    if (element.hasAttribute("data-turbo-suppress-warning"))
      return;
    element = element.parentElement;
    while (element) {
      if (element == document.body) {
        return console.warn(unindent`
        You are loading Turbo from a <script> element inside the <body> element. This is probably not what you meant to do!

        Load your application’s JavaScript bundle inside the <head> element instead. <script> elements in <body> are evaluated with each page change.

        For more information, see: https://turbo.hotwired.dev/handbook/building#working-with-script-elements

        ——
        Suppress this warning by adding a "data-turbo-suppress-warning" attribute to: %s
      `, element.outerHTML);
      }
      element = element.parentElement;
    }
  })();
  window.Turbo = Turbo;
  start();

  // node_modules/@hotwired/turbo-rails/app/javascript/turbo/cable.js
  var consumer;
  async function getConsumer() {
    return consumer || setConsumer(createConsumer2().then(setConsumer));
  }
  function setConsumer(newConsumer) {
    return consumer = newConsumer;
  }
  async function createConsumer2() {
    const { createConsumer: createConsumer3 } = await Promise.resolve().then(() => (init_src(), src_exports));
    return createConsumer3();
  }
  async function subscribeTo(channel, mixin) {
    const { subscriptions } = await getConsumer();
    return subscriptions.create(channel, mixin);
  }

  // node_modules/@hotwired/turbo-rails/app/javascript/turbo/snakeize.js
  function walk(obj) {
    if (!obj || typeof obj !== "object")
      return obj;
    if (obj instanceof Date || obj instanceof RegExp)
      return obj;
    if (Array.isArray(obj))
      return obj.map(walk);
    return Object.keys(obj).reduce(function(acc, key) {
      var camel = key[0].toLowerCase() + key.slice(1).replace(/([A-Z]+)/g, function(m2, x2) {
        return "_" + x2.toLowerCase();
      });
      acc[camel] = walk(obj[key]);
      return acc;
    }, {});
  }

  // node_modules/@hotwired/turbo-rails/app/javascript/turbo/cable_stream_source_element.js
  var TurboCableStreamSourceElement = class extends HTMLElement {
    async connectedCallback() {
      connectStreamSource(this);
      this.subscription = await subscribeTo(this.channel, {
        received: this.dispatchMessageEvent.bind(this),
        connected: this.subscriptionConnected.bind(this),
        disconnected: this.subscriptionDisconnected.bind(this)
      });
    }
    disconnectedCallback() {
      disconnectStreamSource(this);
      if (this.subscription)
        this.subscription.unsubscribe();
    }
    dispatchMessageEvent(data) {
      const event = new MessageEvent("message", { data });
      return this.dispatchEvent(event);
    }
    subscriptionConnected() {
      this.setAttribute("connected", "");
    }
    subscriptionDisconnected() {
      this.removeAttribute("connected");
    }
    get channel() {
      const channel = this.getAttribute("channel");
      const signed_stream_name = this.getAttribute("signed-stream-name");
      return { channel, signed_stream_name, ...walk({ ...this.dataset }) };
    }
  };
  if (customElements.get("turbo-cable-stream-source") === void 0) {
    customElements.define("turbo-cable-stream-source", TurboCableStreamSourceElement);
  }

  // node_modules/@hotwired/turbo-rails/app/javascript/turbo/fetch_requests.js
  function encodeMethodIntoRequestBody(event) {
    if (event.target instanceof HTMLFormElement) {
      const { target: form, detail: { fetchOptions } } = event;
      form.addEventListener("turbo:submit-start", ({ detail: { formSubmission: { submitter } } }) => {
        const body = isBodyInit(fetchOptions.body) ? fetchOptions.body : new URLSearchParams();
        const method = determineFetchMethod(submitter, body, form);
        if (!/get/i.test(method)) {
          if (/post/i.test(method)) {
            body.delete("_method");
          } else {
            body.set("_method", method);
          }
          fetchOptions.method = "post";
        }
      }, { once: true });
    }
  }
  function determineFetchMethod(submitter, body, form) {
    const formMethod = determineFormMethod(submitter);
    const overrideMethod = body.get("_method");
    const method = form.getAttribute("method") || "get";
    if (typeof formMethod == "string") {
      return formMethod;
    } else if (typeof overrideMethod == "string") {
      return overrideMethod;
    } else {
      return method;
    }
  }
  function determineFormMethod(submitter) {
    if (submitter instanceof HTMLButtonElement || submitter instanceof HTMLInputElement) {
      if (submitter.hasAttribute("formmethod")) {
        return submitter.formMethod;
      } else {
        return null;
      }
    } else {
      return null;
    }
  }
  function isBodyInit(body) {
    return body instanceof FormData || body instanceof URLSearchParams;
  }

  // node_modules/@hotwired/turbo-rails/app/javascript/turbo/index.js
  addEventListener("turbo:before-fetch-request", encodeMethodIntoRequestBody);

  // node_modules/trix/dist/trix.esm.min.js
  var t = "2.0.9";
  var e = "[data-trix-attachment]";
  var i = { preview: { presentation: "gallery", caption: { name: true, size: true } }, file: { caption: { size: true } } };
  var n = { default: { tagName: "div", parse: false }, quote: { tagName: "blockquote", nestable: true }, heading1: { tagName: "h1", terminal: true, breakOnReturn: true, group: false }, code: { tagName: "pre", terminal: true, text: { plaintext: true } }, bulletList: { tagName: "ul", parse: false }, bullet: { tagName: "li", listAttribute: "bulletList", group: false, nestable: true, test(t2) {
    return r(t2.parentNode) === n[this.listAttribute].tagName;
  } }, numberList: { tagName: "ol", parse: false }, number: { tagName: "li", listAttribute: "numberList", group: false, nestable: true, test(t2) {
    return r(t2.parentNode) === n[this.listAttribute].tagName;
  } }, attachmentGallery: { tagName: "div", exclusive: true, terminal: true, parse: false, group: false } };
  var r = (t2) => {
    var e2;
    return null == t2 || null === (e2 = t2.tagName) || void 0 === e2 ? void 0 : e2.toLowerCase();
  };
  var o = navigator.userAgent.match(/android\s([0-9]+.*Chrome)/i);
  var s = o && parseInt(o[1]);
  var a = { composesExistingText: /Android.*Chrome/.test(navigator.userAgent), recentAndroid: s && s > 12, samsungAndroid: s && navigator.userAgent.match(/Android.*SM-/), forcesObjectResizing: /Trident.*rv:11/.test(navigator.userAgent), supportsInputEvents: "undefined" != typeof InputEvent && ["data", "getTargetRanges", "inputType"].every((t2) => t2 in InputEvent.prototype) };
  var l = { attachFiles: "Attach Files", bold: "Bold", bullets: "Bullets", byte: "Byte", bytes: "Bytes", captionPlaceholder: "Add a caption\u2026", code: "Code", heading1: "Heading", indent: "Increase Level", italic: "Italic", link: "Link", numbers: "Numbers", outdent: "Decrease Level", quote: "Quote", redo: "Redo", remove: "Remove", strike: "Strikethrough", undo: "Undo", unlink: "Unlink", url: "URL", urlPlaceholder: "Enter a URL\u2026", GB: "GB", KB: "KB", MB: "MB", PB: "PB", TB: "TB" };
  var c = [l.bytes, l.KB, l.MB, l.GB, l.TB, l.PB];
  var h = { prefix: "IEC", precision: 2, formatter(t2) {
    switch (t2) {
      case 0:
        return "0 ".concat(l.bytes);
      case 1:
        return "1 ".concat(l.byte);
      default:
        let e2;
        "SI" === this.prefix ? e2 = 1e3 : "IEC" === this.prefix && (e2 = 1024);
        const i2 = Math.floor(Math.log(t2) / Math.log(e2)), n2 = (t2 / Math.pow(e2, i2)).toFixed(this.precision).replace(/0*$/, "").replace(/\.$/, "");
        return "".concat(n2, " ").concat(c[i2]);
    }
  } };
  var u = "\uFEFF";
  var d = "\xA0";
  var g = function(t2) {
    for (const e2 in t2) {
      const i2 = t2[e2];
      this[e2] = i2;
    }
    return this;
  };
  var m = document.documentElement;
  var p = m.matches;
  var f = function(t2) {
    let { onElement: e2, matchingSelector: i2, withCallback: n2, inPhase: r2, preventDefault: o2, times: s2 } = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
    const a2 = e2 || m, l2 = i2, c2 = "capturing" === r2, h2 = function(t3) {
      null != s2 && 0 == --s2 && h2.destroy();
      const e3 = A(t3.target, { matchingSelector: l2 });
      null != e3 && (null == n2 || n2.call(e3, t3, e3), o2 && t3.preventDefault());
    };
    return h2.destroy = () => a2.removeEventListener(t2, h2, c2), a2.addEventListener(t2, h2, c2), h2;
  };
  var b = function(t2) {
    let { onElement: e2, bubbles: i2, cancelable: n2, attributes: r2 } = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
    const o2 = null != e2 ? e2 : m;
    i2 = false !== i2, n2 = false !== n2;
    const s2 = document.createEvent("Events");
    return s2.initEvent(t2, i2, n2), null != r2 && g.call(s2, r2), o2.dispatchEvent(s2);
  };
  var v = function(t2, e2) {
    if (1 === (null == t2 ? void 0 : t2.nodeType))
      return p.call(t2, e2);
  };
  var A = function(t2) {
    let { matchingSelector: e2, untilNode: i2 } = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
    for (; t2 && t2.nodeType !== Node.ELEMENT_NODE; )
      t2 = t2.parentNode;
    if (null != t2) {
      if (null == e2)
        return t2;
      if (t2.closest && null == i2)
        return t2.closest(e2);
      for (; t2 && t2 !== i2; ) {
        if (v(t2, e2))
          return t2;
        t2 = t2.parentNode;
      }
    }
  };
  var x = (t2) => document.activeElement !== t2 && y(t2, document.activeElement);
  var y = function(t2, e2) {
    if (t2 && e2)
      for (; e2; ) {
        if (e2 === t2)
          return true;
        e2 = e2.parentNode;
      }
  };
  var C = function(t2) {
    var e2;
    if (null === (e2 = t2) || void 0 === e2 || !e2.parentNode)
      return;
    let i2 = 0;
    for (t2 = t2.previousSibling; t2; )
      i2++, t2 = t2.previousSibling;
    return i2;
  };
  var R = (t2) => {
    var e2;
    return null == t2 || null === (e2 = t2.parentNode) || void 0 === e2 ? void 0 : e2.removeChild(t2);
  };
  var S = function(t2) {
    let { onlyNodesOfType: e2, usingFilter: i2, expandEntityReferences: n2 } = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
    const r2 = (() => {
      switch (e2) {
        case "element":
          return NodeFilter.SHOW_ELEMENT;
        case "text":
          return NodeFilter.SHOW_TEXT;
        case "comment":
          return NodeFilter.SHOW_COMMENT;
        default:
          return NodeFilter.SHOW_ALL;
      }
    })();
    return document.createTreeWalker(t2, r2, null != i2 ? i2 : null, true === n2);
  };
  var E = (t2) => {
    var e2;
    return null == t2 || null === (e2 = t2.tagName) || void 0 === e2 ? void 0 : e2.toLowerCase();
  };
  var k = function(t2) {
    let e2, i2, n2 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
    "object" == typeof t2 ? (n2 = t2, t2 = n2.tagName) : n2 = { attributes: n2 };
    const r2 = document.createElement(t2);
    if (null != n2.editable && (null == n2.attributes && (n2.attributes = {}), n2.attributes.contenteditable = n2.editable), n2.attributes)
      for (e2 in n2.attributes)
        i2 = n2.attributes[e2], r2.setAttribute(e2, i2);
    if (n2.style)
      for (e2 in n2.style)
        i2 = n2.style[e2], r2.style[e2] = i2;
    if (n2.data)
      for (e2 in n2.data)
        i2 = n2.data[e2], r2.dataset[e2] = i2;
    return n2.className && n2.className.split(" ").forEach((t3) => {
      r2.classList.add(t3);
    }), n2.textContent && (r2.textContent = n2.textContent), n2.childNodes && [].concat(n2.childNodes).forEach((t3) => {
      r2.appendChild(t3);
    }), r2;
  };
  var L;
  var D = function() {
    if (null != L)
      return L;
    L = [];
    for (const t2 in n) {
      const e2 = n[t2];
      e2.tagName && L.push(e2.tagName);
    }
    return L;
  };
  var w = (t2) => B(null == t2 ? void 0 : t2.firstChild);
  var T = function(t2) {
    let { strict: e2 } = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : { strict: true };
    return e2 ? B(t2) : B(t2) || !B(t2.firstChild) && function(t3) {
      return D().includes(E(t3)) && !D().includes(E(t3.firstChild));
    }(t2);
  };
  var B = (t2) => F(t2) && "block" === (null == t2 ? void 0 : t2.data);
  var F = (t2) => (null == t2 ? void 0 : t2.nodeType) === Node.COMMENT_NODE;
  var I = function(t2) {
    let { name: e2 } = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
    if (t2)
      return O(t2) ? t2.data === u ? !e2 || t2.parentNode.dataset.trixCursorTarget === e2 : void 0 : I(t2.firstChild);
  };
  var P = (t2) => v(t2, e);
  var N = (t2) => O(t2) && "" === (null == t2 ? void 0 : t2.data);
  var O = (t2) => (null == t2 ? void 0 : t2.nodeType) === Node.TEXT_NODE;
  var M = { level2Enabled: true, getLevel() {
    return this.level2Enabled && a.supportsInputEvents ? 2 : 0;
  }, pickFiles(t2) {
    const e2 = k("input", { type: "file", multiple: true, hidden: true, id: this.fileInputId });
    e2.addEventListener("change", () => {
      t2(e2.files), R(e2);
    }), R(document.getElementById(this.fileInputId)), document.body.appendChild(e2), e2.click();
  } };
  var j = { removeBlankTableCells: false, tableCellSeparator: " | ", tableRowSeparator: "\n" };
  var W = { bold: { tagName: "strong", inheritable: true, parser(t2) {
    const e2 = window.getComputedStyle(t2);
    return "bold" === e2.fontWeight || e2.fontWeight >= 600;
  } }, italic: { tagName: "em", inheritable: true, parser: (t2) => "italic" === window.getComputedStyle(t2).fontStyle }, href: { groupTagName: "a", parser(t2) {
    const i2 = "a:not(".concat(e, ")"), n2 = t2.closest(i2);
    if (n2)
      return n2.getAttribute("href");
  } }, strike: { tagName: "del", inheritable: true }, frozen: { style: { backgroundColor: "highlight" } } };
  var U = { getDefaultHTML: () => '<div class="trix-button-row">\n      <span class="trix-button-group trix-button-group--text-tools" data-trix-button-group="text-tools">\n        <button type="button" class="trix-button trix-button--icon trix-button--icon-bold" data-trix-attribute="bold" data-trix-key="b" title="'.concat(l.bold, '" tabindex="-1">').concat(l.bold, '</button>\n        <button type="button" class="trix-button trix-button--icon trix-button--icon-italic" data-trix-attribute="italic" data-trix-key="i" title="').concat(l.italic, '" tabindex="-1">').concat(l.italic, '</button>\n        <button type="button" class="trix-button trix-button--icon trix-button--icon-strike" data-trix-attribute="strike" title="').concat(l.strike, '" tabindex="-1">').concat(l.strike, '</button>\n        <button type="button" class="trix-button trix-button--icon trix-button--icon-link" data-trix-attribute="href" data-trix-action="link" data-trix-key="k" title="').concat(l.link, '" tabindex="-1">').concat(l.link, '</button>\n      </span>\n\n      <span class="trix-button-group trix-button-group--block-tools" data-trix-button-group="block-tools">\n        <button type="button" class="trix-button trix-button--icon trix-button--icon-heading-1" data-trix-attribute="heading1" title="').concat(l.heading1, '" tabindex="-1">').concat(l.heading1, '</button>\n        <button type="button" class="trix-button trix-button--icon trix-button--icon-quote" data-trix-attribute="quote" title="').concat(l.quote, '" tabindex="-1">').concat(l.quote, '</button>\n        <button type="button" class="trix-button trix-button--icon trix-button--icon-code" data-trix-attribute="code" title="').concat(l.code, '" tabindex="-1">').concat(l.code, '</button>\n        <button type="button" class="trix-button trix-button--icon trix-button--icon-bullet-list" data-trix-attribute="bullet" title="').concat(l.bullets, '" tabindex="-1">').concat(l.bullets, '</button>\n        <button type="button" class="trix-button trix-button--icon trix-button--icon-number-list" data-trix-attribute="number" title="').concat(l.numbers, '" tabindex="-1">').concat(l.numbers, '</button>\n        <button type="button" class="trix-button trix-button--icon trix-button--icon-decrease-nesting-level" data-trix-action="decreaseNestingLevel" title="').concat(l.outdent, '" tabindex="-1">').concat(l.outdent, '</button>\n        <button type="button" class="trix-button trix-button--icon trix-button--icon-increase-nesting-level" data-trix-action="increaseNestingLevel" title="').concat(l.indent, '" tabindex="-1">').concat(l.indent, '</button>\n      </span>\n\n      <span class="trix-button-group trix-button-group--file-tools" data-trix-button-group="file-tools">\n        <button type="button" class="trix-button trix-button--icon trix-button--icon-attach" data-trix-action="attachFiles" title="').concat(l.attachFiles, '" tabindex="-1">').concat(l.attachFiles, '</button>\n      </span>\n\n      <span class="trix-button-group-spacer"></span>\n\n      <span class="trix-button-group trix-button-group--history-tools" data-trix-button-group="history-tools">\n        <button type="button" class="trix-button trix-button--icon trix-button--icon-undo" data-trix-action="undo" data-trix-key="z" title="').concat(l.undo, '" tabindex="-1">').concat(l.undo, '</button>\n        <button type="button" class="trix-button trix-button--icon trix-button--icon-redo" data-trix-action="redo" data-trix-key="shift+z" title="').concat(l.redo, '" tabindex="-1">').concat(l.redo, '</button>\n      </span>\n    </div>\n\n    <div class="trix-dialogs" data-trix-dialogs>\n      <div class="trix-dialog trix-dialog--link" data-trix-dialog="href" data-trix-dialog-attribute="href">\n        <div class="trix-dialog__link-fields">\n          <input type="url" name="href" class="trix-input trix-input--dialog" placeholder="').concat(l.urlPlaceholder, '" aria-label="').concat(l.url, '" required data-trix-input>\n          <div class="trix-button-group">\n            <input type="button" class="trix-button trix-button--dialog" value="').concat(l.link, '" data-trix-method="setAttribute">\n            <input type="button" class="trix-button trix-button--dialog" value="').concat(l.unlink, '" data-trix-method="removeAttribute">\n          </div>\n        </div>\n      </div>\n    </div>') };
  var q = { interval: 5e3 };
  var V = Object.freeze({ __proto__: null, attachments: i, blockAttributes: n, browser: a, css: { attachment: "attachment", attachmentCaption: "attachment__caption", attachmentCaptionEditor: "attachment__caption-editor", attachmentMetadata: "attachment__metadata", attachmentMetadataContainer: "attachment__metadata-container", attachmentName: "attachment__name", attachmentProgress: "attachment__progress", attachmentSize: "attachment__size", attachmentToolbar: "attachment__toolbar", attachmentGallery: "attachment-gallery" }, fileSize: h, input: M, keyNames: { 8: "backspace", 9: "tab", 13: "return", 27: "escape", 37: "left", 39: "right", 46: "delete", 68: "d", 72: "h", 79: "o" }, lang: l, parser: j, textAttributes: W, toolbar: U, undo: q });
  var z = class {
    static proxyMethod(t2) {
      const { name: e2, toMethod: i2, toProperty: n2, optional: r2 } = _(t2);
      this.prototype[e2] = function() {
        let t3, o2;
        var s2, a2;
        i2 ? o2 = r2 ? null === (s2 = this[i2]) || void 0 === s2 ? void 0 : s2.call(this) : this[i2]() : n2 && (o2 = this[n2]);
        return r2 ? (t3 = null === (a2 = o2) || void 0 === a2 ? void 0 : a2[e2], t3 ? H.call(t3, o2, arguments) : void 0) : (t3 = o2[e2], H.call(t3, o2, arguments));
      };
    }
  };
  var _ = function(t2) {
    const e2 = t2.match(J);
    if (!e2)
      throw new Error("can't parse @proxyMethod expression: ".concat(t2));
    const i2 = { name: e2[4] };
    return null != e2[2] ? i2.toMethod = e2[1] : i2.toProperty = e2[1], null != e2[3] && (i2.optional = true), i2;
  };
  var { apply: H } = Function.prototype;
  var J = new RegExp("^(.+?)(\\(\\))?(\\?)?\\.(.+?)$");
  var K;
  var G;
  var $;
  var X = class extends z {
    static box() {
      let t2 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : "";
      return t2 instanceof this ? t2 : this.fromUCS2String(null == t2 ? void 0 : t2.toString());
    }
    static fromUCS2String(t2) {
      return new this(t2, tt(t2));
    }
    static fromCodepoints(t2) {
      return new this(et(t2), t2);
    }
    constructor(t2, e2) {
      super(...arguments), this.ucs2String = t2, this.codepoints = e2, this.length = this.codepoints.length, this.ucs2Length = this.ucs2String.length;
    }
    offsetToUCS2Offset(t2) {
      return et(this.codepoints.slice(0, Math.max(0, t2))).length;
    }
    offsetFromUCS2Offset(t2) {
      return tt(this.ucs2String.slice(0, Math.max(0, t2))).length;
    }
    slice() {
      return this.constructor.fromCodepoints(this.codepoints.slice(...arguments));
    }
    charAt(t2) {
      return this.slice(t2, t2 + 1);
    }
    isEqualTo(t2) {
      return this.constructor.box(t2).ucs2String === this.ucs2String;
    }
    toJSON() {
      return this.ucs2String;
    }
    getCacheKey() {
      return this.ucs2String;
    }
    toString() {
      return this.ucs2String;
    }
  };
  var Y = 1 === (null === (K = Array.from) || void 0 === K ? void 0 : K.call(Array, "\u{1F47C}").length);
  var Q = null != (null === (G = " ".codePointAt) || void 0 === G ? void 0 : G.call(" ", 0));
  var Z = " \u{1F47C}" === (null === ($ = String.fromCodePoint) || void 0 === $ ? void 0 : $.call(String, 32, 128124));
  var tt;
  var et;
  tt = Y && Q ? (t2) => Array.from(t2).map((t3) => t3.codePointAt(0)) : function(t2) {
    const e2 = [];
    let i2 = 0;
    const { length: n2 } = t2;
    for (; i2 < n2; ) {
      let r2 = t2.charCodeAt(i2++);
      if (55296 <= r2 && r2 <= 56319 && i2 < n2) {
        const e3 = t2.charCodeAt(i2++);
        56320 == (64512 & e3) ? r2 = ((1023 & r2) << 10) + (1023 & e3) + 65536 : i2--;
      }
      e2.push(r2);
    }
    return e2;
  }, et = Z ? (t2) => String.fromCodePoint(...Array.from(t2 || [])) : function(t2) {
    return (() => {
      const e2 = [];
      return Array.from(t2).forEach((t3) => {
        let i2 = "";
        t3 > 65535 && (t3 -= 65536, i2 += String.fromCharCode(t3 >>> 10 & 1023 | 55296), t3 = 56320 | 1023 & t3), e2.push(i2 + String.fromCharCode(t3));
      }), e2;
    })().join("");
  };
  var it = 0;
  var nt = class extends z {
    static fromJSONString(t2) {
      return this.fromJSON(JSON.parse(t2));
    }
    constructor() {
      super(...arguments), this.id = ++it;
    }
    hasSameConstructorAs(t2) {
      return this.constructor === (null == t2 ? void 0 : t2.constructor);
    }
    isEqualTo(t2) {
      return this === t2;
    }
    inspect() {
      const t2 = [], e2 = this.contentsForInspection() || {};
      for (const i2 in e2) {
        const n2 = e2[i2];
        t2.push("".concat(i2, "=").concat(n2));
      }
      return "#<".concat(this.constructor.name, ":").concat(this.id).concat(t2.length ? " ".concat(t2.join(", ")) : "", ">");
    }
    contentsForInspection() {
    }
    toJSONString() {
      return JSON.stringify(this);
    }
    toUTF16String() {
      return X.box(this);
    }
    getCacheKey() {
      return this.id.toString();
    }
  };
  var rt = function() {
    let t2 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : [], e2 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : [];
    if (t2.length !== e2.length)
      return false;
    for (let i2 = 0; i2 < t2.length; i2++) {
      if (t2[i2] !== e2[i2])
        return false;
    }
    return true;
  };
  var ot = function(t2) {
    const e2 = t2.slice(0);
    for (var i2 = arguments.length, n2 = new Array(i2 > 1 ? i2 - 1 : 0), r2 = 1; r2 < i2; r2++)
      n2[r2 - 1] = arguments[r2];
    return e2.splice(...n2), e2;
  };
  var st = /[\u05BE\u05C0\u05C3\u05D0-\u05EA\u05F0-\u05F4\u061B\u061F\u0621-\u063A\u0640-\u064A\u066D\u0671-\u06B7\u06BA-\u06BE\u06C0-\u06CE\u06D0-\u06D5\u06E5\u06E6\u200F\u202B\u202E\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE72\uFE74\uFE76-\uFEFC]/;
  var at = function() {
    const t2 = k("input", { dir: "auto", name: "x", dirName: "x.dir" }), e2 = k("textarea", { dir: "auto", name: "y", dirName: "y.dir" }), i2 = k("form");
    i2.appendChild(t2), i2.appendChild(e2);
    const n2 = function() {
      try {
        return new FormData(i2).has(e2.dirName);
      } catch (t3) {
        return false;
      }
    }(), r2 = function() {
      try {
        return t2.matches(":dir(ltr),:dir(rtl)");
      } catch (t3) {
        return false;
      }
    }();
    return n2 ? function(t3) {
      return e2.value = t3, new FormData(i2).get(e2.dirName);
    } : r2 ? function(e3) {
      return t2.value = e3, t2.matches(":dir(rtl)") ? "rtl" : "ltr";
    } : function(t3) {
      const e3 = t3.trim().charAt(0);
      return st.test(e3) ? "rtl" : "ltr";
    };
  }();
  var lt = null;
  var ct = null;
  var ht = null;
  var ut = null;
  var dt = () => (lt || (lt = ft().concat(mt())), lt);
  var gt = (t2) => n[t2];
  var mt = () => (ct || (ct = Object.keys(n)), ct);
  var pt = (t2) => W[t2];
  var ft = () => (ht || (ht = Object.keys(W)), ht);
  var bt = function(t2, e2) {
    vt(t2).textContent = e2.replace(/%t/g, t2);
  };
  var vt = function(t2) {
    const e2 = document.createElement("style");
    e2.setAttribute("type", "text/css"), e2.setAttribute("data-tag-name", t2.toLowerCase());
    const i2 = At();
    return i2 && e2.setAttribute("nonce", i2), document.head.insertBefore(e2, document.head.firstChild), e2;
  };
  var At = function() {
    const t2 = xt("trix-csp-nonce") || xt("csp-nonce");
    if (t2)
      return t2.getAttribute("content");
  };
  var xt = (t2) => document.head.querySelector("meta[name=".concat(t2, "]"));
  var yt = { "application/x-trix-feature-detection": "test" };
  var Ct = function(t2) {
    const e2 = t2.getData("text/plain"), i2 = t2.getData("text/html");
    if (!e2 || !i2)
      return null == e2 ? void 0 : e2.length;
    {
      const { body: t3 } = new DOMParser().parseFromString(i2, "text/html");
      if (t3.textContent === e2)
        return !t3.querySelector("*");
    }
  };
  var Rt = /Mac|^iP/.test(navigator.platform) ? (t2) => t2.metaKey : (t2) => t2.ctrlKey;
  var St = (t2) => setTimeout(t2, 1);
  var Et = function() {
    let t2 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
    const e2 = {};
    for (const i2 in t2) {
      const n2 = t2[i2];
      e2[i2] = n2;
    }
    return e2;
  };
  var kt = function() {
    let t2 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}, e2 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
    if (Object.keys(t2).length !== Object.keys(e2).length)
      return false;
    for (const i2 in t2) {
      if (t2[i2] !== e2[i2])
        return false;
    }
    return true;
  };
  var Lt = function(t2) {
    if (null != t2)
      return Array.isArray(t2) || (t2 = [t2, t2]), [Tt(t2[0]), Tt(null != t2[1] ? t2[1] : t2[0])];
  };
  var Dt = function(t2) {
    if (null == t2)
      return;
    const [e2, i2] = Lt(t2);
    return Bt(e2, i2);
  };
  var wt = function(t2, e2) {
    if (null == t2 || null == e2)
      return;
    const [i2, n2] = Lt(t2), [r2, o2] = Lt(e2);
    return Bt(i2, r2) && Bt(n2, o2);
  };
  var Tt = function(t2) {
    return "number" == typeof t2 ? t2 : Et(t2);
  };
  var Bt = function(t2, e2) {
    return "number" == typeof t2 ? t2 === e2 : kt(t2, e2);
  };
  var Ft = class extends z {
    constructor() {
      super(...arguments), this.update = this.update.bind(this), this.selectionManagers = [];
    }
    start() {
      this.started || (this.started = true, document.addEventListener("selectionchange", this.update, true));
    }
    stop() {
      if (this.started)
        return this.started = false, document.removeEventListener("selectionchange", this.update, true);
    }
    registerSelectionManager(t2) {
      if (!this.selectionManagers.includes(t2))
        return this.selectionManagers.push(t2), this.start();
    }
    unregisterSelectionManager(t2) {
      if (this.selectionManagers = this.selectionManagers.filter((e2) => e2 !== t2), 0 === this.selectionManagers.length)
        return this.stop();
    }
    notifySelectionManagersOfSelectionChange() {
      return this.selectionManagers.map((t2) => t2.selectionDidChange());
    }
    update() {
      this.notifySelectionManagersOfSelectionChange();
    }
    reset() {
      this.update();
    }
  };
  var It = new Ft();
  var Pt = function() {
    const t2 = window.getSelection();
    if (t2.rangeCount > 0)
      return t2;
  };
  var Nt = function() {
    var t2;
    const e2 = null === (t2 = Pt()) || void 0 === t2 ? void 0 : t2.getRangeAt(0);
    if (e2 && !Mt(e2))
      return e2;
  };
  var Ot = function(t2) {
    const e2 = window.getSelection();
    return e2.removeAllRanges(), e2.addRange(t2), It.update();
  };
  var Mt = (t2) => jt(t2.startContainer) || jt(t2.endContainer);
  var jt = (t2) => !Object.getPrototypeOf(t2);
  var Wt = (t2) => t2.replace(new RegExp("".concat(u), "g"), "").replace(new RegExp("".concat(d), "g"), " ");
  var Ut = new RegExp("[^\\S".concat(d, "]"));
  var qt = (t2) => t2.replace(new RegExp("".concat(Ut.source), "g"), " ").replace(/\ {2,}/g, " ");
  var Vt = function(t2, e2) {
    if (t2.isEqualTo(e2))
      return ["", ""];
    const i2 = zt(t2, e2), { length: n2 } = i2.utf16String;
    let r2;
    if (n2) {
      const { offset: o2 } = i2, s2 = t2.codepoints.slice(0, o2).concat(t2.codepoints.slice(o2 + n2));
      r2 = zt(e2, X.fromCodepoints(s2));
    } else
      r2 = zt(e2, t2);
    return [i2.utf16String.toString(), r2.utf16String.toString()];
  };
  var zt = function(t2, e2) {
    let i2 = 0, n2 = t2.length, r2 = e2.length;
    for (; i2 < n2 && t2.charAt(i2).isEqualTo(e2.charAt(i2)); )
      i2++;
    for (; n2 > i2 + 1 && t2.charAt(n2 - 1).isEqualTo(e2.charAt(r2 - 1)); )
      n2--, r2--;
    return { utf16String: t2.slice(i2, n2), offset: i2 };
  };
  var _t = class __t extends nt {
    static fromCommonAttributesOfObjects() {
      let t2 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : [];
      if (!t2.length)
        return new this();
      let e2 = Gt(t2[0]), i2 = e2.getKeys();
      return t2.slice(1).forEach((t3) => {
        i2 = e2.getKeysCommonToHash(Gt(t3)), e2 = e2.slice(i2);
      }), e2;
    }
    static box(t2) {
      return Gt(t2);
    }
    constructor() {
      let t2 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
      super(...arguments), this.values = Kt(t2);
    }
    add(t2, e2) {
      return this.merge(Ht(t2, e2));
    }
    remove(t2) {
      return new __t(Kt(this.values, t2));
    }
    get(t2) {
      return this.values[t2];
    }
    has(t2) {
      return t2 in this.values;
    }
    merge(t2) {
      return new __t(Jt(this.values, $t(t2)));
    }
    slice(t2) {
      const e2 = {};
      return Array.from(t2).forEach((t3) => {
        this.has(t3) && (e2[t3] = this.values[t3]);
      }), new __t(e2);
    }
    getKeys() {
      return Object.keys(this.values);
    }
    getKeysCommonToHash(t2) {
      return t2 = Gt(t2), this.getKeys().filter((e2) => this.values[e2] === t2.values[e2]);
    }
    isEqualTo(t2) {
      return rt(this.toArray(), Gt(t2).toArray());
    }
    isEmpty() {
      return 0 === this.getKeys().length;
    }
    toArray() {
      if (!this.array) {
        const t2 = [];
        for (const e2 in this.values) {
          const i2 = this.values[e2];
          t2.push(t2.push(e2, i2));
        }
        this.array = t2.slice(0);
      }
      return this.array;
    }
    toObject() {
      return Kt(this.values);
    }
    toJSON() {
      return this.toObject();
    }
    contentsForInspection() {
      return { values: JSON.stringify(this.values) };
    }
  };
  var Ht = function(t2, e2) {
    const i2 = {};
    return i2[t2] = e2, i2;
  };
  var Jt = function(t2, e2) {
    const i2 = Kt(t2);
    for (const t3 in e2) {
      const n2 = e2[t3];
      i2[t3] = n2;
    }
    return i2;
  };
  var Kt = function(t2, e2) {
    const i2 = {};
    return Object.keys(t2).sort().forEach((n2) => {
      n2 !== e2 && (i2[n2] = t2[n2]);
    }), i2;
  };
  var Gt = function(t2) {
    return t2 instanceof _t ? t2 : new _t(t2);
  };
  var $t = function(t2) {
    return t2 instanceof _t ? t2.values : t2;
  };
  var Xt = class {
    static groupObjects() {
      let t2, e2 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : [], { depth: i2, asTree: n2 } = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
      n2 && null == i2 && (i2 = 0);
      const r2 = [];
      return Array.from(e2).forEach((e3) => {
        var o2;
        if (t2) {
          var s2, a2, l2;
          if (null !== (s2 = e3.canBeGrouped) && void 0 !== s2 && s2.call(e3, i2) && null !== (a2 = (l2 = t2[t2.length - 1]).canBeGroupedWith) && void 0 !== a2 && a2.call(l2, e3, i2))
            return void t2.push(e3);
          r2.push(new this(t2, { depth: i2, asTree: n2 })), t2 = null;
        }
        null !== (o2 = e3.canBeGrouped) && void 0 !== o2 && o2.call(e3, i2) ? t2 = [e3] : r2.push(e3);
      }), t2 && r2.push(new this(t2, { depth: i2, asTree: n2 })), r2;
    }
    constructor() {
      let t2 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : [], { depth: e2, asTree: i2 } = arguments.length > 1 ? arguments[1] : void 0;
      this.objects = t2, i2 && (this.depth = e2, this.objects = this.constructor.groupObjects(this.objects, { asTree: i2, depth: this.depth + 1 }));
    }
    getObjects() {
      return this.objects;
    }
    getDepth() {
      return this.depth;
    }
    getCacheKey() {
      const t2 = ["objectGroup"];
      return Array.from(this.getObjects()).forEach((e2) => {
        t2.push(e2.getCacheKey());
      }), t2.join("/");
    }
  };
  var Yt = class extends z {
    constructor() {
      let t2 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : [];
      super(...arguments), this.objects = {}, Array.from(t2).forEach((t3) => {
        const e2 = JSON.stringify(t3);
        null == this.objects[e2] && (this.objects[e2] = t3);
      });
    }
    find(t2) {
      const e2 = JSON.stringify(t2);
      return this.objects[e2];
    }
  };
  var Qt = class {
    constructor(t2) {
      this.reset(t2);
    }
    add(t2) {
      const e2 = Zt(t2);
      this.elements[e2] = t2;
    }
    remove(t2) {
      const e2 = Zt(t2), i2 = this.elements[e2];
      if (i2)
        return delete this.elements[e2], i2;
    }
    reset() {
      let t2 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : [];
      return this.elements = {}, Array.from(t2).forEach((t3) => {
        this.add(t3);
      }), t2;
    }
  };
  var Zt = (t2) => t2.dataset.trixStoreKey;
  var te = class extends z {
    isPerforming() {
      return true === this.performing;
    }
    hasPerformed() {
      return true === this.performed;
    }
    hasSucceeded() {
      return this.performed && this.succeeded;
    }
    hasFailed() {
      return this.performed && !this.succeeded;
    }
    getPromise() {
      return this.promise || (this.promise = new Promise((t2, e2) => (this.performing = true, this.perform((i2, n2) => {
        this.succeeded = i2, this.performing = false, this.performed = true, this.succeeded ? t2(n2) : e2(n2);
      })))), this.promise;
    }
    perform(t2) {
      return t2(false);
    }
    release() {
      var t2, e2;
      null === (t2 = this.promise) || void 0 === t2 || null === (e2 = t2.cancel) || void 0 === e2 || e2.call(t2), this.promise = null, this.performing = null, this.performed = null, this.succeeded = null;
    }
  };
  te.proxyMethod("getPromise().then"), te.proxyMethod("getPromise().catch");
  var ee = class extends z {
    constructor(t2) {
      let e2 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
      super(...arguments), this.object = t2, this.options = e2, this.childViews = [], this.rootView = this;
    }
    getNodes() {
      return this.nodes || (this.nodes = this.createNodes()), this.nodes.map((t2) => t2.cloneNode(true));
    }
    invalidate() {
      var t2;
      return this.nodes = null, this.childViews = [], null === (t2 = this.parentView) || void 0 === t2 ? void 0 : t2.invalidate();
    }
    invalidateViewForObject(t2) {
      var e2;
      return null === (e2 = this.findViewForObject(t2)) || void 0 === e2 ? void 0 : e2.invalidate();
    }
    findOrCreateCachedChildView(t2, e2, i2) {
      let n2 = this.getCachedViewForObject(e2);
      return n2 ? this.recordChildView(n2) : (n2 = this.createChildView(...arguments), this.cacheViewForObject(n2, e2)), n2;
    }
    createChildView(t2, e2) {
      let i2 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {};
      e2 instanceof Xt && (i2.viewClass = t2, t2 = ie);
      const n2 = new t2(e2, i2);
      return this.recordChildView(n2);
    }
    recordChildView(t2) {
      return t2.parentView = this, t2.rootView = this.rootView, this.childViews.push(t2), t2;
    }
    getAllChildViews() {
      let t2 = [];
      return this.childViews.forEach((e2) => {
        t2.push(e2), t2 = t2.concat(e2.getAllChildViews());
      }), t2;
    }
    findElement() {
      return this.findElementForObject(this.object);
    }
    findElementForObject(t2) {
      const e2 = null == t2 ? void 0 : t2.id;
      if (e2)
        return this.rootView.element.querySelector("[data-trix-id='".concat(e2, "']"));
    }
    findViewForObject(t2) {
      for (const e2 of this.getAllChildViews())
        if (e2.object === t2)
          return e2;
    }
    getViewCache() {
      return this.rootView !== this ? this.rootView.getViewCache() : this.isViewCachingEnabled() ? (this.viewCache || (this.viewCache = {}), this.viewCache) : void 0;
    }
    isViewCachingEnabled() {
      return false !== this.shouldCacheViews;
    }
    enableViewCaching() {
      this.shouldCacheViews = true;
    }
    disableViewCaching() {
      this.shouldCacheViews = false;
    }
    getCachedViewForObject(t2) {
      var e2;
      return null === (e2 = this.getViewCache()) || void 0 === e2 ? void 0 : e2[t2.getCacheKey()];
    }
    cacheViewForObject(t2, e2) {
      const i2 = this.getViewCache();
      i2 && (i2[e2.getCacheKey()] = t2);
    }
    garbageCollectCachedViews() {
      const t2 = this.getViewCache();
      if (t2) {
        const e2 = this.getAllChildViews().concat(this).map((t3) => t3.object.getCacheKey());
        for (const i2 in t2)
          e2.includes(i2) || delete t2[i2];
      }
    }
  };
  var ie = class extends ee {
    constructor() {
      super(...arguments), this.objectGroup = this.object, this.viewClass = this.options.viewClass, delete this.options.viewClass;
    }
    getChildViews() {
      return this.childViews.length || Array.from(this.objectGroup.getObjects()).forEach((t2) => {
        this.findOrCreateCachedChildView(this.viewClass, t2, this.options);
      }), this.childViews;
    }
    createNodes() {
      const t2 = this.createContainerElement();
      return this.getChildViews().forEach((e2) => {
        Array.from(e2.getNodes()).forEach((e3) => {
          t2.appendChild(e3);
        });
      }), [t2];
    }
    createContainerElement() {
      let t2 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : this.objectGroup.getDepth();
      return this.getChildViews()[0].createContainerElement(t2);
    }
  };
  var { css: ne } = V;
  var re = class extends ee {
    constructor() {
      super(...arguments), this.attachment = this.object, this.attachment.uploadProgressDelegate = this, this.attachmentPiece = this.options.piece;
    }
    createContentNodes() {
      return [];
    }
    createNodes() {
      let t2;
      const e2 = t2 = k({ tagName: "figure", className: this.getClassName(), data: this.getData(), editable: false }), i2 = this.getHref();
      return i2 && (t2 = k({ tagName: "a", editable: false, attributes: { href: i2, tabindex: -1 } }), e2.appendChild(t2)), this.attachment.hasContent() ? t2.innerHTML = this.attachment.getContent() : this.createContentNodes().forEach((e3) => {
        t2.appendChild(e3);
      }), t2.appendChild(this.createCaptionElement()), this.attachment.isPending() && (this.progressElement = k({ tagName: "progress", attributes: { class: ne.attachmentProgress, value: this.attachment.getUploadProgress(), max: 100 }, data: { trixMutable: true, trixStoreKey: ["progressElement", this.attachment.id].join("/") } }), e2.appendChild(this.progressElement)), [oe("left"), e2, oe("right")];
    }
    createCaptionElement() {
      const t2 = k({ tagName: "figcaption", className: ne.attachmentCaption }), e2 = this.attachmentPiece.getCaption();
      if (e2)
        t2.classList.add("".concat(ne.attachmentCaption, "--edited")), t2.textContent = e2;
      else {
        let e3, i2;
        const n2 = this.getCaptionConfig();
        if (n2.name && (e3 = this.attachment.getFilename()), n2.size && (i2 = this.attachment.getFormattedFilesize()), e3) {
          const i3 = k({ tagName: "span", className: ne.attachmentName, textContent: e3 });
          t2.appendChild(i3);
        }
        if (i2) {
          e3 && t2.appendChild(document.createTextNode(" "));
          const n3 = k({ tagName: "span", className: ne.attachmentSize, textContent: i2 });
          t2.appendChild(n3);
        }
      }
      return t2;
    }
    getClassName() {
      const t2 = [ne.attachment, "".concat(ne.attachment, "--").concat(this.attachment.getType())], e2 = this.attachment.getExtension();
      return e2 && t2.push("".concat(ne.attachment, "--").concat(e2)), t2.join(" ");
    }
    getData() {
      const t2 = { trixAttachment: JSON.stringify(this.attachment), trixContentType: this.attachment.getContentType(), trixId: this.attachment.id }, { attributes: e2 } = this.attachmentPiece;
      return e2.isEmpty() || (t2.trixAttributes = JSON.stringify(e2)), this.attachment.isPending() && (t2.trixSerialize = false), t2;
    }
    getHref() {
      if (!se(this.attachment.getContent(), "a"))
        return this.attachment.getHref();
    }
    getCaptionConfig() {
      var t2;
      const e2 = this.attachment.getType(), n2 = Et(null === (t2 = i[e2]) || void 0 === t2 ? void 0 : t2.caption);
      return "file" === e2 && (n2.name = true), n2;
    }
    findProgressElement() {
      var t2;
      return null === (t2 = this.findElement()) || void 0 === t2 ? void 0 : t2.querySelector("progress");
    }
    attachmentDidChangeUploadProgress() {
      const t2 = this.attachment.getUploadProgress(), e2 = this.findProgressElement();
      e2 && (e2.value = t2);
    }
  };
  var oe = (t2) => k({ tagName: "span", textContent: u, data: { trixCursorTarget: t2, trixSerialize: false } });
  var se = function(t2, e2) {
    const i2 = k("div");
    return i2.innerHTML = t2 || "", i2.querySelector(e2);
  };
  var ae = class extends re {
    constructor() {
      super(...arguments), this.attachment.previewDelegate = this;
    }
    createContentNodes() {
      return this.image = k({ tagName: "img", attributes: { src: "" }, data: { trixMutable: true } }), this.refresh(this.image), [this.image];
    }
    createCaptionElement() {
      const t2 = super.createCaptionElement(...arguments);
      return t2.textContent || t2.setAttribute("data-trix-placeholder", l.captionPlaceholder), t2;
    }
    refresh(t2) {
      var e2;
      t2 || (t2 = null === (e2 = this.findElement()) || void 0 === e2 ? void 0 : e2.querySelector("img"));
      if (t2)
        return this.updateAttributesForImage(t2);
    }
    updateAttributesForImage(t2) {
      const e2 = this.attachment.getURL(), i2 = this.attachment.getPreviewURL();
      if (t2.src = i2 || e2, i2 === e2)
        t2.removeAttribute("data-trix-serialized-attributes");
      else {
        const i3 = JSON.stringify({ src: e2 });
        t2.setAttribute("data-trix-serialized-attributes", i3);
      }
      const n2 = this.attachment.getWidth(), r2 = this.attachment.getHeight();
      null != n2 && (t2.width = n2), null != r2 && (t2.height = r2);
      const o2 = ["imageElement", this.attachment.id, t2.src, t2.width, t2.height].join("/");
      t2.dataset.trixStoreKey = o2;
    }
    attachmentDidChangeAttributes() {
      return this.refresh(this.image), this.refresh();
    }
  };
  var le = class extends ee {
    constructor() {
      super(...arguments), this.piece = this.object, this.attributes = this.piece.getAttributes(), this.textConfig = this.options.textConfig, this.context = this.options.context, this.piece.attachment ? this.attachment = this.piece.attachment : this.string = this.piece.toString();
    }
    createNodes() {
      let t2 = this.attachment ? this.createAttachmentNodes() : this.createStringNodes();
      const e2 = this.createElement();
      if (e2) {
        const i2 = function(t3) {
          for (; null !== (e3 = t3) && void 0 !== e3 && e3.firstElementChild; ) {
            var e3;
            t3 = t3.firstElementChild;
          }
          return t3;
        }(e2);
        Array.from(t2).forEach((t3) => {
          i2.appendChild(t3);
        }), t2 = [e2];
      }
      return t2;
    }
    createAttachmentNodes() {
      const t2 = this.attachment.isPreviewable() ? ae : re;
      return this.createChildView(t2, this.piece.attachment, { piece: this.piece }).getNodes();
    }
    createStringNodes() {
      var t2;
      if (null !== (t2 = this.textConfig) && void 0 !== t2 && t2.plaintext)
        return [document.createTextNode(this.string)];
      {
        const t3 = [], e2 = this.string.split("\n");
        for (let i2 = 0; i2 < e2.length; i2++) {
          const n2 = e2[i2];
          if (i2 > 0) {
            const e3 = k("br");
            t3.push(e3);
          }
          if (n2.length) {
            const e3 = document.createTextNode(this.preserveSpaces(n2));
            t3.push(e3);
          }
        }
        return t3;
      }
    }
    createElement() {
      let t2, e2, i2;
      const n2 = {};
      for (e2 in this.attributes) {
        i2 = this.attributes[e2];
        const o2 = pt(e2);
        if (o2) {
          if (o2.tagName) {
            var r2;
            const e3 = k(o2.tagName);
            r2 ? (r2.appendChild(e3), r2 = e3) : t2 = r2 = e3;
          }
          if (o2.styleProperty && (n2[o2.styleProperty] = i2), o2.style)
            for (e2 in o2.style)
              i2 = o2.style[e2], n2[e2] = i2;
        }
      }
      if (Object.keys(n2).length)
        for (e2 in t2 || (t2 = k("span")), n2)
          i2 = n2[e2], t2.style[e2] = i2;
      return t2;
    }
    createContainerElement() {
      for (const t2 in this.attributes) {
        const e2 = this.attributes[t2], i2 = pt(t2);
        if (i2 && i2.groupTagName) {
          const n2 = {};
          return n2[t2] = e2, k(i2.groupTagName, n2);
        }
      }
    }
    preserveSpaces(t2) {
      return this.context.isLast && (t2 = t2.replace(/\ $/, d)), t2 = t2.replace(/(\S)\ {3}(\S)/g, "$1 ".concat(d, " $2")).replace(/\ {2}/g, "".concat(d, " ")).replace(/\ {2}/g, " ".concat(d)), (this.context.isFirst || this.context.followsWhitespace) && (t2 = t2.replace(/^\ /, d)), t2;
    }
  };
  var ce = class extends ee {
    constructor() {
      super(...arguments), this.text = this.object, this.textConfig = this.options.textConfig;
    }
    createNodes() {
      const t2 = [], e2 = Xt.groupObjects(this.getPieces()), i2 = e2.length - 1;
      for (let r2 = 0; r2 < e2.length; r2++) {
        const o2 = e2[r2], s2 = {};
        0 === r2 && (s2.isFirst = true), r2 === i2 && (s2.isLast = true), he(n2) && (s2.followsWhitespace = true);
        const a2 = this.findOrCreateCachedChildView(le, o2, { textConfig: this.textConfig, context: s2 });
        t2.push(...Array.from(a2.getNodes() || []));
        var n2 = o2;
      }
      return t2;
    }
    getPieces() {
      return Array.from(this.text.getPieces()).filter((t2) => !t2.hasAttribute("blockBreak"));
    }
  };
  var he = (t2) => /\s$/.test(null == t2 ? void 0 : t2.toString());
  var { css: ue } = V;
  var de = class extends ee {
    constructor() {
      super(...arguments), this.block = this.object, this.attributes = this.block.getAttributes();
    }
    createNodes() {
      const t2 = [document.createComment("block")];
      if (this.block.isEmpty())
        t2.push(k("br"));
      else {
        var e2;
        const i2 = null === (e2 = gt(this.block.getLastAttribute())) || void 0 === e2 ? void 0 : e2.text, n2 = this.findOrCreateCachedChildView(ce, this.block.text, { textConfig: i2 });
        t2.push(...Array.from(n2.getNodes() || [])), this.shouldAddExtraNewlineElement() && t2.push(k("br"));
      }
      if (this.attributes.length)
        return t2;
      {
        let e3;
        const { tagName: i2 } = n.default;
        this.block.isRTL() && (e3 = { dir: "rtl" });
        const r2 = k({ tagName: i2, attributes: e3 });
        return t2.forEach((t3) => r2.appendChild(t3)), [r2];
      }
    }
    createContainerElement(t2) {
      let e2, i2;
      const n2 = this.attributes[t2], { tagName: r2 } = gt(n2);
      if (0 === t2 && this.block.isRTL() && (e2 = { dir: "rtl" }), "attachmentGallery" === n2) {
        const t3 = this.block.getBlockBreakPosition();
        i2 = "".concat(ue.attachmentGallery, " ").concat(ue.attachmentGallery, "--").concat(t3);
      }
      return k({ tagName: r2, className: i2, attributes: e2 });
    }
    shouldAddExtraNewlineElement() {
      return /\n\n$/.test(this.block.toString());
    }
  };
  var ge = class extends ee {
    static render(t2) {
      const e2 = k("div"), i2 = new this(t2, { element: e2 });
      return i2.render(), i2.sync(), e2;
    }
    constructor() {
      super(...arguments), this.element = this.options.element, this.elementStore = new Qt(), this.setDocument(this.object);
    }
    setDocument(t2) {
      t2.isEqualTo(this.document) || (this.document = this.object = t2);
    }
    render() {
      if (this.childViews = [], this.shadowElement = k("div"), !this.document.isEmpty()) {
        const t2 = Xt.groupObjects(this.document.getBlocks(), { asTree: true });
        Array.from(t2).forEach((t3) => {
          const e2 = this.findOrCreateCachedChildView(de, t3);
          Array.from(e2.getNodes()).map((t4) => this.shadowElement.appendChild(t4));
        });
      }
    }
    isSynced() {
      return pe(this.shadowElement, this.element);
    }
    sync() {
      const t2 = this.createDocumentFragmentForSync();
      for (; this.element.lastChild; )
        this.element.removeChild(this.element.lastChild);
      return this.element.appendChild(t2), this.didSync();
    }
    didSync() {
      return this.elementStore.reset(me(this.element)), St(() => this.garbageCollectCachedViews());
    }
    createDocumentFragmentForSync() {
      const t2 = document.createDocumentFragment();
      return Array.from(this.shadowElement.childNodes).forEach((e2) => {
        t2.appendChild(e2.cloneNode(true));
      }), Array.from(me(t2)).forEach((t3) => {
        const e2 = this.elementStore.remove(t3);
        e2 && t3.parentNode.replaceChild(e2, t3);
      }), t2;
    }
  };
  var me = (t2) => t2.querySelectorAll("[data-trix-store-key]");
  var pe = (t2, e2) => fe(t2.innerHTML) === fe(e2.innerHTML);
  var fe = (t2) => t2.replace(/&nbsp;/g, " ");
  function be(t2) {
    var e2, i2;
    function n2(e3, i3) {
      try {
        var o2 = t2[e3](i3), s2 = o2.value, a2 = s2 instanceof ve;
        Promise.resolve(a2 ? s2.v : s2).then(function(i4) {
          if (a2) {
            var l2 = "return" === e3 ? "return" : "next";
            if (!s2.k || i4.done)
              return n2(l2, i4);
            i4 = t2[l2](i4).value;
          }
          r2(o2.done ? "return" : "normal", i4);
        }, function(t3) {
          n2("throw", t3);
        });
      } catch (t3) {
        r2("throw", t3);
      }
    }
    function r2(t3, r3) {
      switch (t3) {
        case "return":
          e2.resolve({ value: r3, done: true });
          break;
        case "throw":
          e2.reject(r3);
          break;
        default:
          e2.resolve({ value: r3, done: false });
      }
      (e2 = e2.next) ? n2(e2.key, e2.arg) : i2 = null;
    }
    this._invoke = function(t3, r3) {
      return new Promise(function(o2, s2) {
        var a2 = { key: t3, arg: r3, resolve: o2, reject: s2, next: null };
        i2 ? i2 = i2.next = a2 : (e2 = i2 = a2, n2(t3, r3));
      });
    }, "function" != typeof t2.return && (this.return = void 0);
  }
  function ve(t2, e2) {
    this.v = t2, this.k = e2;
  }
  function Ae(t2, e2, i2) {
    return (e2 = xe(e2)) in t2 ? Object.defineProperty(t2, e2, { value: i2, enumerable: true, configurable: true, writable: true }) : t2[e2] = i2, t2;
  }
  function xe(t2) {
    var e2 = function(t3, e3) {
      if ("object" != typeof t3 || null === t3)
        return t3;
      var i2 = t3[Symbol.toPrimitive];
      if (void 0 !== i2) {
        var n2 = i2.call(t3, e3 || "default");
        if ("object" != typeof n2)
          return n2;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return ("string" === e3 ? String : Number)(t3);
    }(t2, "string");
    return "symbol" == typeof e2 ? e2 : String(e2);
  }
  be.prototype["function" == typeof Symbol && Symbol.asyncIterator || "@@asyncIterator"] = function() {
    return this;
  }, be.prototype.next = function(t2) {
    return this._invoke("next", t2);
  }, be.prototype.throw = function(t2) {
    return this._invoke("throw", t2);
  }, be.prototype.return = function(t2) {
    return this._invoke("return", t2);
  };
  var ye = class extends nt {
    static registerType(t2, e2) {
      e2.type = t2, this.types[t2] = e2;
    }
    static fromJSON(t2) {
      const e2 = this.types[t2.type];
      if (e2)
        return e2.fromJSON(t2);
    }
    constructor(t2) {
      let e2 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
      super(...arguments), this.attributes = _t.box(e2);
    }
    copyWithAttributes(t2) {
      return new this.constructor(this.getValue(), t2);
    }
    copyWithAdditionalAttributes(t2) {
      return this.copyWithAttributes(this.attributes.merge(t2));
    }
    copyWithoutAttribute(t2) {
      return this.copyWithAttributes(this.attributes.remove(t2));
    }
    copy() {
      return this.copyWithAttributes(this.attributes);
    }
    getAttribute(t2) {
      return this.attributes.get(t2);
    }
    getAttributesHash() {
      return this.attributes;
    }
    getAttributes() {
      return this.attributes.toObject();
    }
    hasAttribute(t2) {
      return this.attributes.has(t2);
    }
    hasSameStringValueAsPiece(t2) {
      return t2 && this.toString() === t2.toString();
    }
    hasSameAttributesAsPiece(t2) {
      return t2 && (this.attributes === t2.attributes || this.attributes.isEqualTo(t2.attributes));
    }
    isBlockBreak() {
      return false;
    }
    isEqualTo(t2) {
      return super.isEqualTo(...arguments) || this.hasSameConstructorAs(t2) && this.hasSameStringValueAsPiece(t2) && this.hasSameAttributesAsPiece(t2);
    }
    isEmpty() {
      return 0 === this.length;
    }
    isSerializable() {
      return true;
    }
    toJSON() {
      return { type: this.constructor.type, attributes: this.getAttributes() };
    }
    contentsForInspection() {
      return { type: this.constructor.type, attributes: this.attributes.inspect() };
    }
    canBeGrouped() {
      return this.hasAttribute("href");
    }
    canBeGroupedWith(t2) {
      return this.getAttribute("href") === t2.getAttribute("href");
    }
    getLength() {
      return this.length;
    }
    canBeConsolidatedWith(t2) {
      return false;
    }
  };
  Ae(ye, "types", {});
  var Ce = class extends te {
    constructor(t2) {
      super(...arguments), this.url = t2;
    }
    perform(t2) {
      const e2 = new Image();
      e2.onload = () => (e2.width = this.width = e2.naturalWidth, e2.height = this.height = e2.naturalHeight, t2(true, e2)), e2.onerror = () => t2(false), e2.src = this.url;
    }
  };
  var Re = class _Re extends nt {
    static attachmentForFile(t2) {
      const e2 = new this(this.attributesForFile(t2));
      return e2.setFile(t2), e2;
    }
    static attributesForFile(t2) {
      return new _t({ filename: t2.name, filesize: t2.size, contentType: t2.type });
    }
    static fromJSON(t2) {
      return new this(t2);
    }
    constructor() {
      let t2 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
      super(t2), this.releaseFile = this.releaseFile.bind(this), this.attributes = _t.box(t2), this.didChangeAttributes();
    }
    getAttribute(t2) {
      return this.attributes.get(t2);
    }
    hasAttribute(t2) {
      return this.attributes.has(t2);
    }
    getAttributes() {
      return this.attributes.toObject();
    }
    setAttributes() {
      let t2 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
      const e2 = this.attributes.merge(t2);
      var i2, n2, r2, o2;
      if (!this.attributes.isEqualTo(e2))
        return this.attributes = e2, this.didChangeAttributes(), null === (i2 = this.previewDelegate) || void 0 === i2 || null === (n2 = i2.attachmentDidChangeAttributes) || void 0 === n2 || n2.call(i2, this), null === (r2 = this.delegate) || void 0 === r2 || null === (o2 = r2.attachmentDidChangeAttributes) || void 0 === o2 ? void 0 : o2.call(r2, this);
    }
    didChangeAttributes() {
      if (this.isPreviewable())
        return this.preloadURL();
    }
    isPending() {
      return null != this.file && !(this.getURL() || this.getHref());
    }
    isPreviewable() {
      return this.attributes.has("previewable") ? this.attributes.get("previewable") : _Re.previewablePattern.test(this.getContentType());
    }
    getType() {
      return this.hasContent() ? "content" : this.isPreviewable() ? "preview" : "file";
    }
    getURL() {
      return this.attributes.get("url");
    }
    getHref() {
      return this.attributes.get("href");
    }
    getFilename() {
      return this.attributes.get("filename") || "";
    }
    getFilesize() {
      return this.attributes.get("filesize");
    }
    getFormattedFilesize() {
      const t2 = this.attributes.get("filesize");
      return "number" == typeof t2 ? h.formatter(t2) : "";
    }
    getExtension() {
      var t2;
      return null === (t2 = this.getFilename().match(/\.(\w+)$/)) || void 0 === t2 ? void 0 : t2[1].toLowerCase();
    }
    getContentType() {
      return this.attributes.get("contentType");
    }
    hasContent() {
      return this.attributes.has("content");
    }
    getContent() {
      return this.attributes.get("content");
    }
    getWidth() {
      return this.attributes.get("width");
    }
    getHeight() {
      return this.attributes.get("height");
    }
    getFile() {
      return this.file;
    }
    setFile(t2) {
      if (this.file = t2, this.isPreviewable())
        return this.preloadFile();
    }
    releaseFile() {
      this.releasePreloadedFile(), this.file = null;
    }
    getUploadProgress() {
      return null != this.uploadProgress ? this.uploadProgress : 0;
    }
    setUploadProgress(t2) {
      var e2, i2;
      if (this.uploadProgress !== t2)
        return this.uploadProgress = t2, null === (e2 = this.uploadProgressDelegate) || void 0 === e2 || null === (i2 = e2.attachmentDidChangeUploadProgress) || void 0 === i2 ? void 0 : i2.call(e2, this);
    }
    toJSON() {
      return this.getAttributes();
    }
    getCacheKey() {
      return [super.getCacheKey(...arguments), this.attributes.getCacheKey(), this.getPreviewURL()].join("/");
    }
    getPreviewURL() {
      return this.previewURL || this.preloadingURL;
    }
    setPreviewURL(t2) {
      var e2, i2, n2, r2;
      if (t2 !== this.getPreviewURL())
        return this.previewURL = t2, null === (e2 = this.previewDelegate) || void 0 === e2 || null === (i2 = e2.attachmentDidChangeAttributes) || void 0 === i2 || i2.call(e2, this), null === (n2 = this.delegate) || void 0 === n2 || null === (r2 = n2.attachmentDidChangePreviewURL) || void 0 === r2 ? void 0 : r2.call(n2, this);
    }
    preloadURL() {
      return this.preload(this.getURL(), this.releaseFile);
    }
    preloadFile() {
      if (this.file)
        return this.fileObjectURL = URL.createObjectURL(this.file), this.preload(this.fileObjectURL);
    }
    releasePreloadedFile() {
      this.fileObjectURL && (URL.revokeObjectURL(this.fileObjectURL), this.fileObjectURL = null);
    }
    preload(t2, e2) {
      if (t2 && t2 !== this.getPreviewURL()) {
        this.preloadingURL = t2;
        return new Ce(t2).then((i2) => {
          let { width: n2, height: r2 } = i2;
          return this.getWidth() && this.getHeight() || this.setAttributes({ width: n2, height: r2 }), this.preloadingURL = null, this.setPreviewURL(t2), null == e2 ? void 0 : e2();
        }).catch(() => (this.preloadingURL = null, null == e2 ? void 0 : e2()));
      }
    }
  };
  Ae(Re, "previewablePattern", /^image(\/(gif|png|webp|jpe?g)|$)/);
  var Se = class _Se extends ye {
    static fromJSON(t2) {
      return new this(Re.fromJSON(t2.attachment), t2.attributes);
    }
    constructor(t2) {
      super(...arguments), this.attachment = t2, this.length = 1, this.ensureAttachmentExclusivelyHasAttribute("href"), this.attachment.hasContent() || this.removeProhibitedAttributes();
    }
    ensureAttachmentExclusivelyHasAttribute(t2) {
      this.hasAttribute(t2) && (this.attachment.hasAttribute(t2) || this.attachment.setAttributes(this.attributes.slice([t2])), this.attributes = this.attributes.remove(t2));
    }
    removeProhibitedAttributes() {
      const t2 = this.attributes.slice(_Se.permittedAttributes);
      t2.isEqualTo(this.attributes) || (this.attributes = t2);
    }
    getValue() {
      return this.attachment;
    }
    isSerializable() {
      return !this.attachment.isPending();
    }
    getCaption() {
      return this.attributes.get("caption") || "";
    }
    isEqualTo(t2) {
      var e2;
      return super.isEqualTo(t2) && this.attachment.id === (null == t2 || null === (e2 = t2.attachment) || void 0 === e2 ? void 0 : e2.id);
    }
    toString() {
      return "\uFFFC";
    }
    toJSON() {
      const t2 = super.toJSON(...arguments);
      return t2.attachment = this.attachment, t2;
    }
    getCacheKey() {
      return [super.getCacheKey(...arguments), this.attachment.getCacheKey()].join("/");
    }
    toConsole() {
      return JSON.stringify(this.toString());
    }
  };
  Ae(Se, "permittedAttributes", ["caption", "presentation"]), ye.registerType("attachment", Se);
  var Ee = class extends ye {
    static fromJSON(t2) {
      return new this(t2.string, t2.attributes);
    }
    constructor(t2) {
      super(...arguments), this.string = ((t3) => t3.replace(/\r\n?/g, "\n"))(t2), this.length = this.string.length;
    }
    getValue() {
      return this.string;
    }
    toString() {
      return this.string.toString();
    }
    isBlockBreak() {
      return "\n" === this.toString() && true === this.getAttribute("blockBreak");
    }
    toJSON() {
      const t2 = super.toJSON(...arguments);
      return t2.string = this.string, t2;
    }
    canBeConsolidatedWith(t2) {
      return t2 && this.hasSameConstructorAs(t2) && this.hasSameAttributesAsPiece(t2);
    }
    consolidateWith(t2) {
      return new this.constructor(this.toString() + t2.toString(), this.attributes);
    }
    splitAtOffset(t2) {
      let e2, i2;
      return 0 === t2 ? (e2 = null, i2 = this) : t2 === this.length ? (e2 = this, i2 = null) : (e2 = new this.constructor(this.string.slice(0, t2), this.attributes), i2 = new this.constructor(this.string.slice(t2), this.attributes)), [e2, i2];
    }
    toConsole() {
      let { string: t2 } = this;
      return t2.length > 15 && (t2 = t2.slice(0, 14) + "\u2026"), JSON.stringify(t2.toString());
    }
  };
  ye.registerType("string", Ee);
  var ke = class extends nt {
    static box(t2) {
      return t2 instanceof this ? t2 : new this(t2);
    }
    constructor() {
      let t2 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : [];
      super(...arguments), this.objects = t2.slice(0), this.length = this.objects.length;
    }
    indexOf(t2) {
      return this.objects.indexOf(t2);
    }
    splice() {
      for (var t2 = arguments.length, e2 = new Array(t2), i2 = 0; i2 < t2; i2++)
        e2[i2] = arguments[i2];
      return new this.constructor(ot(this.objects, ...e2));
    }
    eachObject(t2) {
      return this.objects.map((e2, i2) => t2(e2, i2));
    }
    insertObjectAtIndex(t2, e2) {
      return this.splice(e2, 0, t2);
    }
    insertSplittableListAtIndex(t2, e2) {
      return this.splice(e2, 0, ...t2.objects);
    }
    insertSplittableListAtPosition(t2, e2) {
      const [i2, n2] = this.splitObjectAtPosition(e2);
      return new this.constructor(i2).insertSplittableListAtIndex(t2, n2);
    }
    editObjectAtIndex(t2, e2) {
      return this.replaceObjectAtIndex(e2(this.objects[t2]), t2);
    }
    replaceObjectAtIndex(t2, e2) {
      return this.splice(e2, 1, t2);
    }
    removeObjectAtIndex(t2) {
      return this.splice(t2, 1);
    }
    getObjectAtIndex(t2) {
      return this.objects[t2];
    }
    getSplittableListInRange(t2) {
      const [e2, i2, n2] = this.splitObjectsAtRange(t2);
      return new this.constructor(e2.slice(i2, n2 + 1));
    }
    selectSplittableList(t2) {
      const e2 = this.objects.filter((e3) => t2(e3));
      return new this.constructor(e2);
    }
    removeObjectsInRange(t2) {
      const [e2, i2, n2] = this.splitObjectsAtRange(t2);
      return new this.constructor(e2).splice(i2, n2 - i2 + 1);
    }
    transformObjectsInRange(t2, e2) {
      const [i2, n2, r2] = this.splitObjectsAtRange(t2), o2 = i2.map((t3, i3) => n2 <= i3 && i3 <= r2 ? e2(t3) : t3);
      return new this.constructor(o2);
    }
    splitObjectsAtRange(t2) {
      let e2, [i2, n2, r2] = this.splitObjectAtPosition(De(t2));
      return [i2, e2] = new this.constructor(i2).splitObjectAtPosition(we(t2) + r2), [i2, n2, e2 - 1];
    }
    getObjectAtPosition(t2) {
      const { index: e2 } = this.findIndexAndOffsetAtPosition(t2);
      return this.objects[e2];
    }
    splitObjectAtPosition(t2) {
      let e2, i2;
      const { index: n2, offset: r2 } = this.findIndexAndOffsetAtPosition(t2), o2 = this.objects.slice(0);
      if (null != n2)
        if (0 === r2)
          e2 = n2, i2 = 0;
        else {
          const t3 = this.getObjectAtIndex(n2), [s2, a2] = t3.splitAtOffset(r2);
          o2.splice(n2, 1, s2, a2), e2 = n2 + 1, i2 = s2.getLength() - r2;
        }
      else
        e2 = o2.length, i2 = 0;
      return [o2, e2, i2];
    }
    consolidate() {
      const t2 = [];
      let e2 = this.objects[0];
      return this.objects.slice(1).forEach((i2) => {
        var n2, r2;
        null !== (n2 = (r2 = e2).canBeConsolidatedWith) && void 0 !== n2 && n2.call(r2, i2) ? e2 = e2.consolidateWith(i2) : (t2.push(e2), e2 = i2);
      }), e2 && t2.push(e2), new this.constructor(t2);
    }
    consolidateFromIndexToIndex(t2, e2) {
      const i2 = this.objects.slice(0).slice(t2, e2 + 1), n2 = new this.constructor(i2).consolidate().toArray();
      return this.splice(t2, i2.length, ...n2);
    }
    findIndexAndOffsetAtPosition(t2) {
      let e2, i2 = 0;
      for (e2 = 0; e2 < this.objects.length; e2++) {
        const n2 = i2 + this.objects[e2].getLength();
        if (i2 <= t2 && t2 < n2)
          return { index: e2, offset: t2 - i2 };
        i2 = n2;
      }
      return { index: null, offset: null };
    }
    findPositionAtIndexAndOffset(t2, e2) {
      let i2 = 0;
      for (let n2 = 0; n2 < this.objects.length; n2++) {
        const r2 = this.objects[n2];
        if (n2 < t2)
          i2 += r2.getLength();
        else if (n2 === t2) {
          i2 += e2;
          break;
        }
      }
      return i2;
    }
    getEndPosition() {
      return null == this.endPosition && (this.endPosition = 0, this.objects.forEach((t2) => this.endPosition += t2.getLength())), this.endPosition;
    }
    toString() {
      return this.objects.join("");
    }
    toArray() {
      return this.objects.slice(0);
    }
    toJSON() {
      return this.toArray();
    }
    isEqualTo(t2) {
      return super.isEqualTo(...arguments) || Le(this.objects, null == t2 ? void 0 : t2.objects);
    }
    contentsForInspection() {
      return { objects: "[".concat(this.objects.map((t2) => t2.inspect()).join(", "), "]") };
    }
  };
  var Le = function(t2) {
    let e2 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : [];
    if (t2.length !== e2.length)
      return false;
    let i2 = true;
    for (let n2 = 0; n2 < t2.length; n2++) {
      const r2 = t2[n2];
      i2 && !r2.isEqualTo(e2[n2]) && (i2 = false);
    }
    return i2;
  };
  var De = (t2) => t2[0];
  var we = (t2) => t2[1];
  var Te = class extends nt {
    static textForAttachmentWithAttributes(t2, e2) {
      return new this([new Se(t2, e2)]);
    }
    static textForStringWithAttributes(t2, e2) {
      return new this([new Ee(t2, e2)]);
    }
    static fromJSON(t2) {
      return new this(Array.from(t2).map((t3) => ye.fromJSON(t3)));
    }
    constructor() {
      let t2 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : [];
      super(...arguments);
      const e2 = t2.filter((t3) => !t3.isEmpty());
      this.pieceList = new ke(e2);
    }
    copy() {
      return this.copyWithPieceList(this.pieceList);
    }
    copyWithPieceList(t2) {
      return new this.constructor(t2.consolidate().toArray());
    }
    copyUsingObjectMap(t2) {
      const e2 = this.getPieces().map((e3) => t2.find(e3) || e3);
      return new this.constructor(e2);
    }
    appendText(t2) {
      return this.insertTextAtPosition(t2, this.getLength());
    }
    insertTextAtPosition(t2, e2) {
      return this.copyWithPieceList(this.pieceList.insertSplittableListAtPosition(t2.pieceList, e2));
    }
    removeTextAtRange(t2) {
      return this.copyWithPieceList(this.pieceList.removeObjectsInRange(t2));
    }
    replaceTextAtRange(t2, e2) {
      return this.removeTextAtRange(e2).insertTextAtPosition(t2, e2[0]);
    }
    moveTextFromRangeToPosition(t2, e2) {
      if (t2[0] <= e2 && e2 <= t2[1])
        return;
      const i2 = this.getTextAtRange(t2), n2 = i2.getLength();
      return t2[0] < e2 && (e2 -= n2), this.removeTextAtRange(t2).insertTextAtPosition(i2, e2);
    }
    addAttributeAtRange(t2, e2, i2) {
      const n2 = {};
      return n2[t2] = e2, this.addAttributesAtRange(n2, i2);
    }
    addAttributesAtRange(t2, e2) {
      return this.copyWithPieceList(this.pieceList.transformObjectsInRange(e2, (e3) => e3.copyWithAdditionalAttributes(t2)));
    }
    removeAttributeAtRange(t2, e2) {
      return this.copyWithPieceList(this.pieceList.transformObjectsInRange(e2, (e3) => e3.copyWithoutAttribute(t2)));
    }
    setAttributesAtRange(t2, e2) {
      return this.copyWithPieceList(this.pieceList.transformObjectsInRange(e2, (e3) => e3.copyWithAttributes(t2)));
    }
    getAttributesAtPosition(t2) {
      var e2;
      return (null === (e2 = this.pieceList.getObjectAtPosition(t2)) || void 0 === e2 ? void 0 : e2.getAttributes()) || {};
    }
    getCommonAttributes() {
      const t2 = Array.from(this.pieceList.toArray()).map((t3) => t3.getAttributes());
      return _t.fromCommonAttributesOfObjects(t2).toObject();
    }
    getCommonAttributesAtRange(t2) {
      return this.getTextAtRange(t2).getCommonAttributes() || {};
    }
    getExpandedRangeForAttributeAtOffset(t2, e2) {
      let i2, n2 = i2 = e2;
      const r2 = this.getLength();
      for (; n2 > 0 && this.getCommonAttributesAtRange([n2 - 1, i2])[t2]; )
        n2--;
      for (; i2 < r2 && this.getCommonAttributesAtRange([e2, i2 + 1])[t2]; )
        i2++;
      return [n2, i2];
    }
    getTextAtRange(t2) {
      return this.copyWithPieceList(this.pieceList.getSplittableListInRange(t2));
    }
    getStringAtRange(t2) {
      return this.pieceList.getSplittableListInRange(t2).toString();
    }
    getStringAtPosition(t2) {
      return this.getStringAtRange([t2, t2 + 1]);
    }
    startsWithString(t2) {
      return this.getStringAtRange([0, t2.length]) === t2;
    }
    endsWithString(t2) {
      const e2 = this.getLength();
      return this.getStringAtRange([e2 - t2.length, e2]) === t2;
    }
    getAttachmentPieces() {
      return this.pieceList.toArray().filter((t2) => !!t2.attachment);
    }
    getAttachments() {
      return this.getAttachmentPieces().map((t2) => t2.attachment);
    }
    getAttachmentAndPositionById(t2) {
      let e2 = 0;
      for (const n2 of this.pieceList.toArray()) {
        var i2;
        if ((null === (i2 = n2.attachment) || void 0 === i2 ? void 0 : i2.id) === t2)
          return { attachment: n2.attachment, position: e2 };
        e2 += n2.length;
      }
      return { attachment: null, position: null };
    }
    getAttachmentById(t2) {
      const { attachment: e2 } = this.getAttachmentAndPositionById(t2);
      return e2;
    }
    getRangeOfAttachment(t2) {
      const e2 = this.getAttachmentAndPositionById(t2.id), i2 = e2.position;
      if (t2 = e2.attachment)
        return [i2, i2 + 1];
    }
    updateAttributesForAttachment(t2, e2) {
      const i2 = this.getRangeOfAttachment(e2);
      return i2 ? this.addAttributesAtRange(t2, i2) : this;
    }
    getLength() {
      return this.pieceList.getEndPosition();
    }
    isEmpty() {
      return 0 === this.getLength();
    }
    isEqualTo(t2) {
      var e2;
      return super.isEqualTo(t2) || (null == t2 || null === (e2 = t2.pieceList) || void 0 === e2 ? void 0 : e2.isEqualTo(this.pieceList));
    }
    isBlockBreak() {
      return 1 === this.getLength() && this.pieceList.getObjectAtIndex(0).isBlockBreak();
    }
    eachPiece(t2) {
      return this.pieceList.eachObject(t2);
    }
    getPieces() {
      return this.pieceList.toArray();
    }
    getPieceAtPosition(t2) {
      return this.pieceList.getObjectAtPosition(t2);
    }
    contentsForInspection() {
      return { pieceList: this.pieceList.inspect() };
    }
    toSerializableText() {
      const t2 = this.pieceList.selectSplittableList((t3) => t3.isSerializable());
      return this.copyWithPieceList(t2);
    }
    toString() {
      return this.pieceList.toString();
    }
    toJSON() {
      return this.pieceList.toJSON();
    }
    toConsole() {
      return JSON.stringify(this.pieceList.toArray().map((t2) => JSON.parse(t2.toConsole())));
    }
    getDirection() {
      return at(this.toString());
    }
    isRTL() {
      return "rtl" === this.getDirection();
    }
  };
  var Be = class _Be extends nt {
    static fromJSON(t2) {
      return new this(Te.fromJSON(t2.text), t2.attributes);
    }
    constructor(t2, e2) {
      super(...arguments), this.text = Fe(t2 || new Te()), this.attributes = e2 || [];
    }
    isEmpty() {
      return this.text.isBlockBreak();
    }
    isEqualTo(t2) {
      return !!super.isEqualTo(t2) || this.text.isEqualTo(null == t2 ? void 0 : t2.text) && rt(this.attributes, null == t2 ? void 0 : t2.attributes);
    }
    copyWithText(t2) {
      return new _Be(t2, this.attributes);
    }
    copyWithoutText() {
      return this.copyWithText(null);
    }
    copyWithAttributes(t2) {
      return new _Be(this.text, t2);
    }
    copyWithoutAttributes() {
      return this.copyWithAttributes(null);
    }
    copyUsingObjectMap(t2) {
      const e2 = t2.find(this.text);
      return e2 ? this.copyWithText(e2) : this.copyWithText(this.text.copyUsingObjectMap(t2));
    }
    addAttribute(t2) {
      const e2 = this.attributes.concat(je(t2));
      return this.copyWithAttributes(e2);
    }
    removeAttribute(t2) {
      const { listAttribute: e2 } = gt(t2), i2 = Ue(Ue(this.attributes, t2), e2);
      return this.copyWithAttributes(i2);
    }
    removeLastAttribute() {
      return this.removeAttribute(this.getLastAttribute());
    }
    getLastAttribute() {
      return We(this.attributes);
    }
    getAttributes() {
      return this.attributes.slice(0);
    }
    getAttributeLevel() {
      return this.attributes.length;
    }
    getAttributeAtLevel(t2) {
      return this.attributes[t2 - 1];
    }
    hasAttribute(t2) {
      return this.attributes.includes(t2);
    }
    hasAttributes() {
      return this.getAttributeLevel() > 0;
    }
    getLastNestableAttribute() {
      return We(this.getNestableAttributes());
    }
    getNestableAttributes() {
      return this.attributes.filter((t2) => gt(t2).nestable);
    }
    getNestingLevel() {
      return this.getNestableAttributes().length;
    }
    decreaseNestingLevel() {
      const t2 = this.getLastNestableAttribute();
      return t2 ? this.removeAttribute(t2) : this;
    }
    increaseNestingLevel() {
      const t2 = this.getLastNestableAttribute();
      if (t2) {
        const e2 = this.attributes.lastIndexOf(t2), i2 = ot(this.attributes, e2 + 1, 0, ...je(t2));
        return this.copyWithAttributes(i2);
      }
      return this;
    }
    getListItemAttributes() {
      return this.attributes.filter((t2) => gt(t2).listAttribute);
    }
    isListItem() {
      var t2;
      return null === (t2 = gt(this.getLastAttribute())) || void 0 === t2 ? void 0 : t2.listAttribute;
    }
    isTerminalBlock() {
      var t2;
      return null === (t2 = gt(this.getLastAttribute())) || void 0 === t2 ? void 0 : t2.terminal;
    }
    breaksOnReturn() {
      var t2;
      return null === (t2 = gt(this.getLastAttribute())) || void 0 === t2 ? void 0 : t2.breakOnReturn;
    }
    findLineBreakInDirectionFromPosition(t2, e2) {
      const i2 = this.toString();
      let n2;
      switch (t2) {
        case "forward":
          n2 = i2.indexOf("\n", e2);
          break;
        case "backward":
          n2 = i2.slice(0, e2).lastIndexOf("\n");
      }
      if (-1 !== n2)
        return n2;
    }
    contentsForInspection() {
      return { text: this.text.inspect(), attributes: this.attributes };
    }
    toString() {
      return this.text.toString();
    }
    toJSON() {
      return { text: this.text, attributes: this.attributes };
    }
    getDirection() {
      return this.text.getDirection();
    }
    isRTL() {
      return this.text.isRTL();
    }
    getLength() {
      return this.text.getLength();
    }
    canBeConsolidatedWith(t2) {
      return !this.hasAttributes() && !t2.hasAttributes() && this.getDirection() === t2.getDirection();
    }
    consolidateWith(t2) {
      const e2 = Te.textForStringWithAttributes("\n"), i2 = this.getTextWithoutBlockBreak().appendText(e2);
      return this.copyWithText(i2.appendText(t2.text));
    }
    splitAtOffset(t2) {
      let e2, i2;
      return 0 === t2 ? (e2 = null, i2 = this) : t2 === this.getLength() ? (e2 = this, i2 = null) : (e2 = this.copyWithText(this.text.getTextAtRange([0, t2])), i2 = this.copyWithText(this.text.getTextAtRange([t2, this.getLength()]))), [e2, i2];
    }
    getBlockBreakPosition() {
      return this.text.getLength() - 1;
    }
    getTextWithoutBlockBreak() {
      return Oe(this.text) ? this.text.getTextAtRange([0, this.getBlockBreakPosition()]) : this.text.copy();
    }
    canBeGrouped(t2) {
      return this.attributes[t2];
    }
    canBeGroupedWith(t2, e2) {
      const i2 = t2.getAttributes(), r2 = i2[e2], o2 = this.attributes[e2];
      return o2 === r2 && !(false === gt(o2).group && !(() => {
        if (!ut) {
          ut = [];
          for (const t3 in n) {
            const { listAttribute: e3 } = n[t3];
            null != e3 && ut.push(e3);
          }
        }
        return ut;
      })().includes(i2[e2 + 1])) && (this.getDirection() === t2.getDirection() || t2.isEmpty());
    }
  };
  var Fe = function(t2) {
    return t2 = Ie(t2), t2 = Ne(t2);
  };
  var Ie = function(t2) {
    let e2 = false;
    const i2 = t2.getPieces();
    let n2 = i2.slice(0, i2.length - 1);
    const r2 = i2[i2.length - 1];
    return r2 ? (n2 = n2.map((t3) => t3.isBlockBreak() ? (e2 = true, Me(t3)) : t3), e2 ? new Te([...n2, r2]) : t2) : t2;
  };
  var Pe = Te.textForStringWithAttributes("\n", { blockBreak: true });
  var Ne = function(t2) {
    return Oe(t2) ? t2 : t2.appendText(Pe);
  };
  var Oe = function(t2) {
    const e2 = t2.getLength();
    if (0 === e2)
      return false;
    return t2.getTextAtRange([e2 - 1, e2]).isBlockBreak();
  };
  var Me = (t2) => t2.copyWithoutAttribute("blockBreak");
  var je = function(t2) {
    const { listAttribute: e2 } = gt(t2);
    return e2 ? [e2, t2] : [t2];
  };
  var We = (t2) => t2.slice(-1)[0];
  var Ue = function(t2, e2) {
    const i2 = t2.lastIndexOf(e2);
    return -1 === i2 ? t2 : ot(t2, i2, 1);
  };
  var qe = class extends nt {
    static fromJSON(t2) {
      return new this(Array.from(t2).map((t3) => Be.fromJSON(t3)));
    }
    static fromString(t2, e2) {
      const i2 = Te.textForStringWithAttributes(t2, e2);
      return new this([new Be(i2)]);
    }
    constructor() {
      let t2 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : [];
      super(...arguments), 0 === t2.length && (t2 = [new Be()]), this.blockList = ke.box(t2);
    }
    isEmpty() {
      const t2 = this.getBlockAtIndex(0);
      return 1 === this.blockList.length && t2.isEmpty() && !t2.hasAttributes();
    }
    copy() {
      const t2 = (arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}).consolidateBlocks ? this.blockList.consolidate().toArray() : this.blockList.toArray();
      return new this.constructor(t2);
    }
    copyUsingObjectsFromDocument(t2) {
      const e2 = new Yt(t2.getObjects());
      return this.copyUsingObjectMap(e2);
    }
    copyUsingObjectMap(t2) {
      const e2 = this.getBlocks().map((e3) => t2.find(e3) || e3.copyUsingObjectMap(t2));
      return new this.constructor(e2);
    }
    copyWithBaseBlockAttributes() {
      let t2 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : [];
      const e2 = this.getBlocks().map((e3) => {
        const i2 = t2.concat(e3.getAttributes());
        return e3.copyWithAttributes(i2);
      });
      return new this.constructor(e2);
    }
    replaceBlock(t2, e2) {
      const i2 = this.blockList.indexOf(t2);
      return -1 === i2 ? this : new this.constructor(this.blockList.replaceObjectAtIndex(e2, i2));
    }
    insertDocumentAtRange(t2, e2) {
      const { blockList: i2 } = t2;
      e2 = Lt(e2);
      let [n2] = e2;
      const { index: r2, offset: o2 } = this.locationFromPosition(n2);
      let s2 = this;
      const a2 = this.getBlockAtPosition(n2);
      return Dt(e2) && a2.isEmpty() && !a2.hasAttributes() ? s2 = new this.constructor(s2.blockList.removeObjectAtIndex(r2)) : a2.getBlockBreakPosition() === o2 && n2++, s2 = s2.removeTextAtRange(e2), new this.constructor(s2.blockList.insertSplittableListAtPosition(i2, n2));
    }
    mergeDocumentAtRange(t2, e2) {
      let i2, n2;
      e2 = Lt(e2);
      const [r2] = e2, o2 = this.locationFromPosition(r2), s2 = this.getBlockAtIndex(o2.index).getAttributes(), a2 = t2.getBaseBlockAttributes(), l2 = s2.slice(-a2.length);
      if (rt(a2, l2)) {
        const e3 = s2.slice(0, -a2.length);
        i2 = t2.copyWithBaseBlockAttributes(e3);
      } else
        i2 = t2.copy({ consolidateBlocks: true }).copyWithBaseBlockAttributes(s2);
      const c2 = i2.getBlockCount(), h2 = i2.getBlockAtIndex(0);
      if (rt(s2, h2.getAttributes())) {
        const t3 = h2.getTextWithoutBlockBreak();
        if (n2 = this.insertTextAtRange(t3, e2), c2 > 1) {
          i2 = new this.constructor(i2.getBlocks().slice(1));
          const e3 = r2 + t3.getLength();
          n2 = n2.insertDocumentAtRange(i2, e3);
        }
      } else
        n2 = this.insertDocumentAtRange(i2, e2);
      return n2;
    }
    insertTextAtRange(t2, e2) {
      e2 = Lt(e2);
      const [i2] = e2, { index: n2, offset: r2 } = this.locationFromPosition(i2), o2 = this.removeTextAtRange(e2);
      return new this.constructor(o2.blockList.editObjectAtIndex(n2, (e3) => e3.copyWithText(e3.text.insertTextAtPosition(t2, r2))));
    }
    removeTextAtRange(t2) {
      let e2;
      t2 = Lt(t2);
      const [i2, n2] = t2;
      if (Dt(t2))
        return this;
      const [r2, o2] = Array.from(this.locationRangeFromRange(t2)), s2 = r2.index, a2 = r2.offset, l2 = this.getBlockAtIndex(s2), c2 = o2.index, h2 = o2.offset, u2 = this.getBlockAtIndex(c2);
      if (n2 - i2 == 1 && l2.getBlockBreakPosition() === a2 && u2.getBlockBreakPosition() !== h2 && "\n" === u2.text.getStringAtPosition(h2))
        e2 = this.blockList.editObjectAtIndex(c2, (t3) => t3.copyWithText(t3.text.removeTextAtRange([h2, h2 + 1])));
      else {
        let t3;
        const i3 = l2.text.getTextAtRange([0, a2]), n3 = u2.text.getTextAtRange([h2, u2.getLength()]), r3 = i3.appendText(n3);
        t3 = s2 !== c2 && 0 === a2 && l2.getAttributeLevel() >= u2.getAttributeLevel() ? u2.copyWithText(r3) : l2.copyWithText(r3);
        const o3 = c2 + 1 - s2;
        e2 = this.blockList.splice(s2, o3, t3);
      }
      return new this.constructor(e2);
    }
    moveTextFromRangeToPosition(t2, e2) {
      let i2;
      t2 = Lt(t2);
      const [n2, r2] = t2;
      if (n2 <= e2 && e2 <= r2)
        return this;
      let o2 = this.getDocumentAtRange(t2), s2 = this.removeTextAtRange(t2);
      const a2 = n2 < e2;
      a2 && (e2 -= o2.getLength());
      const [l2, ...c2] = o2.getBlocks();
      return 0 === c2.length ? (i2 = l2.getTextWithoutBlockBreak(), a2 && (e2 += 1)) : i2 = l2.text, s2 = s2.insertTextAtRange(i2, e2), 0 === c2.length ? s2 : (o2 = new this.constructor(c2), e2 += i2.getLength(), s2.insertDocumentAtRange(o2, e2));
    }
    addAttributeAtRange(t2, e2, i2) {
      let { blockList: n2 } = this;
      return this.eachBlockAtRange(i2, (i3, r2, o2) => n2 = n2.editObjectAtIndex(o2, function() {
        return gt(t2) ? i3.addAttribute(t2, e2) : r2[0] === r2[1] ? i3 : i3.copyWithText(i3.text.addAttributeAtRange(t2, e2, r2));
      })), new this.constructor(n2);
    }
    addAttribute(t2, e2) {
      let { blockList: i2 } = this;
      return this.eachBlock((n2, r2) => i2 = i2.editObjectAtIndex(r2, () => n2.addAttribute(t2, e2))), new this.constructor(i2);
    }
    removeAttributeAtRange(t2, e2) {
      let { blockList: i2 } = this;
      return this.eachBlockAtRange(e2, function(e3, n2, r2) {
        gt(t2) ? i2 = i2.editObjectAtIndex(r2, () => e3.removeAttribute(t2)) : n2[0] !== n2[1] && (i2 = i2.editObjectAtIndex(r2, () => e3.copyWithText(e3.text.removeAttributeAtRange(t2, n2))));
      }), new this.constructor(i2);
    }
    updateAttributesForAttachment(t2, e2) {
      const i2 = this.getRangeOfAttachment(e2), [n2] = Array.from(i2), { index: r2 } = this.locationFromPosition(n2), o2 = this.getTextAtIndex(r2);
      return new this.constructor(this.blockList.editObjectAtIndex(r2, (i3) => i3.copyWithText(o2.updateAttributesForAttachment(t2, e2))));
    }
    removeAttributeForAttachment(t2, e2) {
      const i2 = this.getRangeOfAttachment(e2);
      return this.removeAttributeAtRange(t2, i2);
    }
    insertBlockBreakAtRange(t2) {
      let e2;
      t2 = Lt(t2);
      const [i2] = t2, { offset: n2 } = this.locationFromPosition(i2), r2 = this.removeTextAtRange(t2);
      return 0 === n2 && (e2 = [new Be()]), new this.constructor(r2.blockList.insertSplittableListAtPosition(new ke(e2), i2));
    }
    applyBlockAttributeAtRange(t2, e2, i2) {
      const n2 = this.expandRangeToLineBreaksAndSplitBlocks(i2);
      let r2 = n2.document;
      i2 = n2.range;
      const o2 = gt(t2);
      if (o2.listAttribute) {
        r2 = r2.removeLastListAttributeAtRange(i2, { exceptAttributeName: t2 });
        const e3 = r2.convertLineBreaksToBlockBreaksInRange(i2);
        r2 = e3.document, i2 = e3.range;
      } else
        r2 = o2.exclusive ? r2.removeBlockAttributesAtRange(i2) : o2.terminal ? r2.removeLastTerminalAttributeAtRange(i2) : r2.consolidateBlocksAtRange(i2);
      return r2.addAttributeAtRange(t2, e2, i2);
    }
    removeLastListAttributeAtRange(t2) {
      let e2 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}, { blockList: i2 } = this;
      return this.eachBlockAtRange(t2, function(t3, n2, r2) {
        const o2 = t3.getLastAttribute();
        o2 && gt(o2).listAttribute && o2 !== e2.exceptAttributeName && (i2 = i2.editObjectAtIndex(r2, () => t3.removeAttribute(o2)));
      }), new this.constructor(i2);
    }
    removeLastTerminalAttributeAtRange(t2) {
      let { blockList: e2 } = this;
      return this.eachBlockAtRange(t2, function(t3, i2, n2) {
        const r2 = t3.getLastAttribute();
        r2 && gt(r2).terminal && (e2 = e2.editObjectAtIndex(n2, () => t3.removeAttribute(r2)));
      }), new this.constructor(e2);
    }
    removeBlockAttributesAtRange(t2) {
      let { blockList: e2 } = this;
      return this.eachBlockAtRange(t2, function(t3, i2, n2) {
        t3.hasAttributes() && (e2 = e2.editObjectAtIndex(n2, () => t3.copyWithoutAttributes()));
      }), new this.constructor(e2);
    }
    expandRangeToLineBreaksAndSplitBlocks(t2) {
      let e2;
      t2 = Lt(t2);
      let [i2, n2] = t2;
      const r2 = this.locationFromPosition(i2), o2 = this.locationFromPosition(n2);
      let s2 = this;
      const a2 = s2.getBlockAtIndex(r2.index);
      if (r2.offset = a2.findLineBreakInDirectionFromPosition("backward", r2.offset), null != r2.offset && (e2 = s2.positionFromLocation(r2), s2 = s2.insertBlockBreakAtRange([e2, e2 + 1]), o2.index += 1, o2.offset -= s2.getBlockAtIndex(r2.index).getLength(), r2.index += 1), r2.offset = 0, 0 === o2.offset && o2.index > r2.index)
        o2.index -= 1, o2.offset = s2.getBlockAtIndex(o2.index).getBlockBreakPosition();
      else {
        const t3 = s2.getBlockAtIndex(o2.index);
        "\n" === t3.text.getStringAtRange([o2.offset - 1, o2.offset]) ? o2.offset -= 1 : o2.offset = t3.findLineBreakInDirectionFromPosition("forward", o2.offset), o2.offset !== t3.getBlockBreakPosition() && (e2 = s2.positionFromLocation(o2), s2 = s2.insertBlockBreakAtRange([e2, e2 + 1]));
      }
      return i2 = s2.positionFromLocation(r2), n2 = s2.positionFromLocation(o2), { document: s2, range: t2 = Lt([i2, n2]) };
    }
    convertLineBreaksToBlockBreaksInRange(t2) {
      t2 = Lt(t2);
      let [e2] = t2;
      const i2 = this.getStringAtRange(t2).slice(0, -1);
      let n2 = this;
      return i2.replace(/.*?\n/g, function(t3) {
        e2 += t3.length, n2 = n2.insertBlockBreakAtRange([e2 - 1, e2]);
      }), { document: n2, range: t2 };
    }
    consolidateBlocksAtRange(t2) {
      t2 = Lt(t2);
      const [e2, i2] = t2, n2 = this.locationFromPosition(e2).index, r2 = this.locationFromPosition(i2).index;
      return new this.constructor(this.blockList.consolidateFromIndexToIndex(n2, r2));
    }
    getDocumentAtRange(t2) {
      t2 = Lt(t2);
      const e2 = this.blockList.getSplittableListInRange(t2).toArray();
      return new this.constructor(e2);
    }
    getStringAtRange(t2) {
      let e2;
      const i2 = t2 = Lt(t2);
      return i2[i2.length - 1] !== this.getLength() && (e2 = -1), this.getDocumentAtRange(t2).toString().slice(0, e2);
    }
    getBlockAtIndex(t2) {
      return this.blockList.getObjectAtIndex(t2);
    }
    getBlockAtPosition(t2) {
      const { index: e2 } = this.locationFromPosition(t2);
      return this.getBlockAtIndex(e2);
    }
    getTextAtIndex(t2) {
      var e2;
      return null === (e2 = this.getBlockAtIndex(t2)) || void 0 === e2 ? void 0 : e2.text;
    }
    getTextAtPosition(t2) {
      const { index: e2 } = this.locationFromPosition(t2);
      return this.getTextAtIndex(e2);
    }
    getPieceAtPosition(t2) {
      const { index: e2, offset: i2 } = this.locationFromPosition(t2);
      return this.getTextAtIndex(e2).getPieceAtPosition(i2);
    }
    getCharacterAtPosition(t2) {
      const { index: e2, offset: i2 } = this.locationFromPosition(t2);
      return this.getTextAtIndex(e2).getStringAtRange([i2, i2 + 1]);
    }
    getLength() {
      return this.blockList.getEndPosition();
    }
    getBlocks() {
      return this.blockList.toArray();
    }
    getBlockCount() {
      return this.blockList.length;
    }
    getEditCount() {
      return this.editCount;
    }
    eachBlock(t2) {
      return this.blockList.eachObject(t2);
    }
    eachBlockAtRange(t2, e2) {
      let i2, n2;
      t2 = Lt(t2);
      const [r2, o2] = t2, s2 = this.locationFromPosition(r2), a2 = this.locationFromPosition(o2);
      if (s2.index === a2.index)
        return i2 = this.getBlockAtIndex(s2.index), n2 = [s2.offset, a2.offset], e2(i2, n2, s2.index);
      for (let t3 = s2.index; t3 <= a2.index; t3++)
        if (i2 = this.getBlockAtIndex(t3), i2) {
          switch (t3) {
            case s2.index:
              n2 = [s2.offset, i2.text.getLength()];
              break;
            case a2.index:
              n2 = [0, a2.offset];
              break;
            default:
              n2 = [0, i2.text.getLength()];
          }
          e2(i2, n2, t3);
        }
    }
    getCommonAttributesAtRange(t2) {
      t2 = Lt(t2);
      const [e2] = t2;
      if (Dt(t2))
        return this.getCommonAttributesAtPosition(e2);
      {
        const e3 = [], i2 = [];
        return this.eachBlockAtRange(t2, function(t3, n2) {
          if (n2[0] !== n2[1])
            return e3.push(t3.text.getCommonAttributesAtRange(n2)), i2.push(Ve(t3));
        }), _t.fromCommonAttributesOfObjects(e3).merge(_t.fromCommonAttributesOfObjects(i2)).toObject();
      }
    }
    getCommonAttributesAtPosition(t2) {
      let e2, i2;
      const { index: n2, offset: r2 } = this.locationFromPosition(t2), o2 = this.getBlockAtIndex(n2);
      if (!o2)
        return {};
      const s2 = Ve(o2), a2 = o2.text.getAttributesAtPosition(r2), l2 = o2.text.getAttributesAtPosition(r2 - 1), c2 = Object.keys(W).filter((t3) => W[t3].inheritable);
      for (e2 in l2)
        i2 = l2[e2], (i2 === a2[e2] || c2.includes(e2)) && (s2[e2] = i2);
      return s2;
    }
    getRangeOfCommonAttributeAtPosition(t2, e2) {
      const { index: i2, offset: n2 } = this.locationFromPosition(e2), r2 = this.getTextAtIndex(i2), [o2, s2] = Array.from(r2.getExpandedRangeForAttributeAtOffset(t2, n2)), a2 = this.positionFromLocation({ index: i2, offset: o2 }), l2 = this.positionFromLocation({ index: i2, offset: s2 });
      return Lt([a2, l2]);
    }
    getBaseBlockAttributes() {
      let t2 = this.getBlockAtIndex(0).getAttributes();
      for (let e2 = 1; e2 < this.getBlockCount(); e2++) {
        const i2 = this.getBlockAtIndex(e2).getAttributes(), n2 = Math.min(t2.length, i2.length);
        t2 = (() => {
          const e3 = [];
          for (let r2 = 0; r2 < n2 && i2[r2] === t2[r2]; r2++)
            e3.push(i2[r2]);
          return e3;
        })();
      }
      return t2;
    }
    getAttachmentById(t2) {
      for (const e2 of this.getAttachments())
        if (e2.id === t2)
          return e2;
    }
    getAttachmentPieces() {
      let t2 = [];
      return this.blockList.eachObject((e2) => {
        let { text: i2 } = e2;
        return t2 = t2.concat(i2.getAttachmentPieces());
      }), t2;
    }
    getAttachments() {
      return this.getAttachmentPieces().map((t2) => t2.attachment);
    }
    getRangeOfAttachment(t2) {
      let e2 = 0;
      const i2 = this.blockList.toArray();
      for (let n2 = 0; n2 < i2.length; n2++) {
        const { text: r2 } = i2[n2], o2 = r2.getRangeOfAttachment(t2);
        if (o2)
          return Lt([e2 + o2[0], e2 + o2[1]]);
        e2 += r2.getLength();
      }
    }
    getLocationRangeOfAttachment(t2) {
      const e2 = this.getRangeOfAttachment(t2);
      return this.locationRangeFromRange(e2);
    }
    getAttachmentPieceForAttachment(t2) {
      for (const e2 of this.getAttachmentPieces())
        if (e2.attachment === t2)
          return e2;
    }
    findRangesForBlockAttribute(t2) {
      let e2 = 0;
      const i2 = [];
      return this.getBlocks().forEach((n2) => {
        const r2 = n2.getLength();
        n2.hasAttribute(t2) && i2.push([e2, e2 + r2]), e2 += r2;
      }), i2;
    }
    findRangesForTextAttribute(t2) {
      let { withValue: e2 } = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}, i2 = 0, n2 = [];
      const r2 = [];
      return this.getPieces().forEach((o2) => {
        const s2 = o2.getLength();
        (function(i3) {
          return e2 ? i3.getAttribute(t2) === e2 : i3.hasAttribute(t2);
        })(o2) && (n2[1] === i2 ? n2[1] = i2 + s2 : r2.push(n2 = [i2, i2 + s2])), i2 += s2;
      }), r2;
    }
    locationFromPosition(t2) {
      const e2 = this.blockList.findIndexAndOffsetAtPosition(Math.max(0, t2));
      if (null != e2.index)
        return e2;
      {
        const t3 = this.getBlocks();
        return { index: t3.length - 1, offset: t3[t3.length - 1].getLength() };
      }
    }
    positionFromLocation(t2) {
      return this.blockList.findPositionAtIndexAndOffset(t2.index, t2.offset);
    }
    locationRangeFromPosition(t2) {
      return Lt(this.locationFromPosition(t2));
    }
    locationRangeFromRange(t2) {
      if (!(t2 = Lt(t2)))
        return;
      const [e2, i2] = Array.from(t2), n2 = this.locationFromPosition(e2), r2 = this.locationFromPosition(i2);
      return Lt([n2, r2]);
    }
    rangeFromLocationRange(t2) {
      let e2;
      t2 = Lt(t2);
      const i2 = this.positionFromLocation(t2[0]);
      return Dt(t2) || (e2 = this.positionFromLocation(t2[1])), Lt([i2, e2]);
    }
    isEqualTo(t2) {
      return this.blockList.isEqualTo(null == t2 ? void 0 : t2.blockList);
    }
    getTexts() {
      return this.getBlocks().map((t2) => t2.text);
    }
    getPieces() {
      const t2 = [];
      return Array.from(this.getTexts()).forEach((e2) => {
        t2.push(...Array.from(e2.getPieces() || []));
      }), t2;
    }
    getObjects() {
      return this.getBlocks().concat(this.getTexts()).concat(this.getPieces());
    }
    toSerializableDocument() {
      const t2 = [];
      return this.blockList.eachObject((e2) => t2.push(e2.copyWithText(e2.text.toSerializableText()))), new this.constructor(t2);
    }
    toString() {
      return this.blockList.toString();
    }
    toJSON() {
      return this.blockList.toJSON();
    }
    toConsole() {
      return JSON.stringify(this.blockList.toArray().map((t2) => JSON.parse(t2.text.toConsole())));
    }
  };
  var Ve = function(t2) {
    const e2 = {}, i2 = t2.getLastAttribute();
    return i2 && (e2[i2] = true), e2;
  };
  var ze = "style href src width height class".split(" ");
  var _e = "javascript:".split(" ");
  var He = "script iframe form".split(" ");
  var Je = class extends z {
    static sanitize(t2, e2) {
      const i2 = new this(t2, e2);
      return i2.sanitize(), i2;
    }
    constructor(t2) {
      let { allowedAttributes: e2, forbiddenProtocols: i2, forbiddenElements: n2 } = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
      super(...arguments), this.allowedAttributes = e2 || ze, this.forbiddenProtocols = i2 || _e, this.forbiddenElements = n2 || He, this.body = Ke(t2);
    }
    sanitize() {
      return this.sanitizeElements(), this.normalizeListElementNesting();
    }
    getHTML() {
      return this.body.innerHTML;
    }
    getBody() {
      return this.body;
    }
    sanitizeElements() {
      const t2 = S(this.body), e2 = [];
      for (; t2.nextNode(); ) {
        const i2 = t2.currentNode;
        switch (i2.nodeType) {
          case Node.ELEMENT_NODE:
            this.elementIsRemovable(i2) ? e2.push(i2) : this.sanitizeElement(i2);
            break;
          case Node.COMMENT_NODE:
            e2.push(i2);
        }
      }
      return e2.forEach((t3) => R(t3)), this.body;
    }
    sanitizeElement(t2) {
      return t2.hasAttribute("href") && this.forbiddenProtocols.includes(t2.protocol) && t2.removeAttribute("href"), Array.from(t2.attributes).forEach((e2) => {
        let { name: i2 } = e2;
        this.allowedAttributes.includes(i2) || 0 === i2.indexOf("data-trix") || t2.removeAttribute(i2);
      }), t2;
    }
    normalizeListElementNesting() {
      return Array.from(this.body.querySelectorAll("ul,ol")).forEach((t2) => {
        const e2 = t2.previousElementSibling;
        e2 && "li" === E(e2) && e2.appendChild(t2);
      }), this.body;
    }
    elementIsRemovable(t2) {
      if ((null == t2 ? void 0 : t2.nodeType) === Node.ELEMENT_NODE)
        return this.elementIsForbidden(t2) || this.elementIsntSerializable(t2);
    }
    elementIsForbidden(t2) {
      return this.forbiddenElements.includes(E(t2));
    }
    elementIsntSerializable(t2) {
      return "false" === t2.getAttribute("data-trix-serialize") && !P(t2);
    }
  };
  var Ke = function() {
    let t2 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : "";
    t2 = t2.replace(/<\/html[^>]*>[^]*$/i, "</html>");
    const e2 = document.implementation.createHTMLDocument("");
    return e2.documentElement.innerHTML = t2, Array.from(e2.head.querySelectorAll("style")).forEach((t3) => {
      e2.body.appendChild(t3);
    }), e2.body;
  };
  var Ge = function(t2) {
    let e2 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
    return { string: t2 = Wt(t2), attributes: e2, type: "string" };
  };
  var $e = (t2, e2) => {
    try {
      return JSON.parse(t2.getAttribute("data-trix-".concat(e2)));
    } catch (t3) {
      return {};
    }
  };
  var Xe = class extends z {
    static parse(t2, e2) {
      const i2 = new this(t2, e2);
      return i2.parse(), i2;
    }
    constructor(t2) {
      let { referenceElement: e2 } = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
      super(...arguments), this.html = t2, this.referenceElement = e2, this.blocks = [], this.blockElements = [], this.processedElements = [];
    }
    getDocument() {
      return qe.fromJSON(this.blocks);
    }
    parse() {
      try {
        this.createHiddenContainer();
        const t2 = Je.sanitize(this.html).getHTML();
        this.containerElement.innerHTML = t2;
        const e2 = S(this.containerElement, { usingFilter: ti });
        for (; e2.nextNode(); )
          this.processNode(e2.currentNode);
        return this.translateBlockElementMarginsToNewlines();
      } finally {
        this.removeHiddenContainer();
      }
    }
    createHiddenContainer() {
      return this.referenceElement ? (this.containerElement = this.referenceElement.cloneNode(false), this.containerElement.removeAttribute("id"), this.containerElement.setAttribute("data-trix-internal", ""), this.containerElement.style.display = "none", this.referenceElement.parentNode.insertBefore(this.containerElement, this.referenceElement.nextSibling)) : (this.containerElement = k({ tagName: "div", style: { display: "none" } }), document.body.appendChild(this.containerElement));
    }
    removeHiddenContainer() {
      return R(this.containerElement);
    }
    processNode(t2) {
      switch (t2.nodeType) {
        case Node.TEXT_NODE:
          if (!this.isInsignificantTextNode(t2))
            return this.appendBlockForTextNode(t2), this.processTextNode(t2);
          break;
        case Node.ELEMENT_NODE:
          return this.appendBlockForElement(t2), this.processElement(t2);
      }
    }
    appendBlockForTextNode(t2) {
      const e2 = t2.parentNode;
      if (e2 === this.currentBlockElement && this.isBlockElement(t2.previousSibling))
        return this.appendStringWithAttributes("\n");
      if (e2 === this.containerElement || this.isBlockElement(e2)) {
        var i2;
        const t3 = this.getBlockAttributes(e2);
        rt(t3, null === (i2 = this.currentBlock) || void 0 === i2 ? void 0 : i2.attributes) || (this.currentBlock = this.appendBlockForAttributesWithElement(t3, e2), this.currentBlockElement = e2);
      }
    }
    appendBlockForElement(t2) {
      const e2 = this.isBlockElement(t2), i2 = y(this.currentBlockElement, t2);
      if (e2 && !this.isBlockElement(t2.firstChild)) {
        if (!this.isInsignificantTextNode(t2.firstChild) || !this.isBlockElement(t2.firstElementChild)) {
          const e3 = this.getBlockAttributes(t2);
          if (t2.firstChild) {
            if (i2 && rt(e3, this.currentBlock.attributes))
              return this.appendStringWithAttributes("\n");
            this.currentBlock = this.appendBlockForAttributesWithElement(e3, t2), this.currentBlockElement = t2;
          }
        }
      } else if (this.currentBlockElement && !i2 && !e2) {
        const e3 = this.findParentBlockElement(t2);
        if (e3)
          return this.appendBlockForElement(e3);
        this.currentBlock = this.appendEmptyBlock(), this.currentBlockElement = null;
      }
    }
    findParentBlockElement(t2) {
      let { parentElement: e2 } = t2;
      for (; e2 && e2 !== this.containerElement; ) {
        if (this.isBlockElement(e2) && this.blockElements.includes(e2))
          return e2;
        e2 = e2.parentElement;
      }
      return null;
    }
    processTextNode(t2) {
      let e2 = t2.data;
      var i2;
      Ye(t2.parentNode) || (e2 = qt(e2), ni(null === (i2 = t2.previousSibling) || void 0 === i2 ? void 0 : i2.textContent) && (e2 = ei(e2)));
      return this.appendStringWithAttributes(e2, this.getTextAttributes(t2.parentNode));
    }
    processElement(t2) {
      let e2;
      if (P(t2)) {
        if (e2 = $e(t2, "attachment"), Object.keys(e2).length) {
          const i2 = this.getTextAttributes(t2);
          this.appendAttachmentWithAttributes(e2, i2), t2.innerHTML = "";
        }
        return this.processedElements.push(t2);
      }
      switch (E(t2)) {
        case "br":
          return this.isExtraBR(t2) || this.isBlockElement(t2.nextSibling) || this.appendStringWithAttributes("\n", this.getTextAttributes(t2)), this.processedElements.push(t2);
        case "img":
          e2 = { url: t2.getAttribute("src"), contentType: "image" };
          const i2 = ((t3) => {
            const e3 = t3.getAttribute("width"), i3 = t3.getAttribute("height"), n2 = {};
            return e3 && (n2.width = parseInt(e3, 10)), i3 && (n2.height = parseInt(i3, 10)), n2;
          })(t2);
          for (const t3 in i2) {
            const n2 = i2[t3];
            e2[t3] = n2;
          }
          return this.appendAttachmentWithAttributes(e2, this.getTextAttributes(t2)), this.processedElements.push(t2);
        case "tr":
          if (this.needsTableSeparator(t2))
            return this.appendStringWithAttributes(j.tableRowSeparator);
          break;
        case "td":
          if (this.needsTableSeparator(t2))
            return this.appendStringWithAttributes(j.tableCellSeparator);
      }
    }
    appendBlockForAttributesWithElement(t2, e2) {
      this.blockElements.push(e2);
      const i2 = function() {
        return { text: [], attributes: arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {} };
      }(t2);
      return this.blocks.push(i2), i2;
    }
    appendEmptyBlock() {
      return this.appendBlockForAttributesWithElement([], null);
    }
    appendStringWithAttributes(t2, e2) {
      return this.appendPiece(Ge(t2, e2));
    }
    appendAttachmentWithAttributes(t2, e2) {
      return this.appendPiece(function(t3) {
        return { attachment: t3, attributes: arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}, type: "attachment" };
      }(t2, e2));
    }
    appendPiece(t2) {
      return 0 === this.blocks.length && this.appendEmptyBlock(), this.blocks[this.blocks.length - 1].text.push(t2);
    }
    appendStringToTextAtIndex(t2, e2) {
      const { text: i2 } = this.blocks[e2], n2 = i2[i2.length - 1];
      if ("string" !== (null == n2 ? void 0 : n2.type))
        return i2.push(Ge(t2));
      n2.string += t2;
    }
    prependStringToTextAtIndex(t2, e2) {
      const { text: i2 } = this.blocks[e2], n2 = i2[0];
      if ("string" !== (null == n2 ? void 0 : n2.type))
        return i2.unshift(Ge(t2));
      n2.string = t2 + n2.string;
    }
    getTextAttributes(t2) {
      let e2;
      const i2 = {};
      for (const n2 in W) {
        const r2 = W[n2];
        if (r2.tagName && A(t2, { matchingSelector: r2.tagName, untilNode: this.containerElement }))
          i2[n2] = true;
        else if (r2.parser) {
          if (e2 = r2.parser(t2), e2) {
            let o2 = false;
            for (const i3 of this.findBlockElementAncestors(t2))
              if (r2.parser(i3) === e2) {
                o2 = true;
                break;
              }
            o2 || (i2[n2] = e2);
          }
        } else
          r2.styleProperty && (e2 = t2.style[r2.styleProperty], e2 && (i2[n2] = e2));
      }
      if (P(t2)) {
        const n2 = $e(t2, "attributes");
        for (const t3 in n2)
          e2 = n2[t3], i2[t3] = e2;
      }
      return i2;
    }
    getBlockAttributes(t2) {
      const e2 = [];
      for (; t2 && t2 !== this.containerElement; ) {
        for (const r2 in n) {
          const o2 = n[r2];
          var i2;
          if (false !== o2.parse) {
            if (E(t2) === o2.tagName)
              (null !== (i2 = o2.test) && void 0 !== i2 && i2.call(o2, t2) || !o2.test) && (e2.push(r2), o2.listAttribute && e2.push(o2.listAttribute));
          }
        }
        t2 = t2.parentNode;
      }
      return e2.reverse();
    }
    findBlockElementAncestors(t2) {
      const e2 = [];
      for (; t2 && t2 !== this.containerElement; ) {
        const i2 = E(t2);
        D().includes(i2) && e2.push(t2), t2 = t2.parentNode;
      }
      return e2;
    }
    isBlockElement(t2) {
      if ((null == t2 ? void 0 : t2.nodeType) === Node.ELEMENT_NODE && !P(t2) && !A(t2, { matchingSelector: "td", untilNode: this.containerElement }))
        return D().includes(E(t2)) || "block" === window.getComputedStyle(t2).display;
    }
    isInsignificantTextNode(t2) {
      if ((null == t2 ? void 0 : t2.nodeType) !== Node.TEXT_NODE)
        return;
      if (!ii(t2.data))
        return;
      const { parentNode: e2, previousSibling: i2, nextSibling: n2 } = t2;
      return Qe(e2.previousSibling) && !this.isBlockElement(e2.previousSibling) || Ye(e2) ? void 0 : !i2 || this.isBlockElement(i2) || !n2 || this.isBlockElement(n2);
    }
    isExtraBR(t2) {
      return "br" === E(t2) && this.isBlockElement(t2.parentNode) && t2.parentNode.lastChild === t2;
    }
    needsTableSeparator(t2) {
      if (j.removeBlankTableCells) {
        var e2;
        const i2 = null === (e2 = t2.previousSibling) || void 0 === e2 ? void 0 : e2.textContent;
        return i2 && /\S/.test(i2);
      }
      return t2.previousSibling;
    }
    translateBlockElementMarginsToNewlines() {
      const t2 = this.getMarginOfDefaultBlockElement();
      for (let e2 = 0; e2 < this.blocks.length; e2++) {
        const i2 = this.getMarginOfBlockElementAtIndex(e2);
        i2 && (i2.top > 2 * t2.top && this.prependStringToTextAtIndex("\n", e2), i2.bottom > 2 * t2.bottom && this.appendStringToTextAtIndex("\n", e2));
      }
    }
    getMarginOfBlockElementAtIndex(t2) {
      const e2 = this.blockElements[t2];
      if (e2 && e2.textContent && !D().includes(E(e2)) && !this.processedElements.includes(e2))
        return Ze(e2);
    }
    getMarginOfDefaultBlockElement() {
      const t2 = k(n.default.tagName);
      return this.containerElement.appendChild(t2), Ze(t2);
    }
  };
  var Ye = function(t2) {
    const { whiteSpace: e2 } = window.getComputedStyle(t2);
    return ["pre", "pre-wrap", "pre-line"].includes(e2);
  };
  var Qe = (t2) => t2 && !ni(t2.textContent);
  var Ze = function(t2) {
    const e2 = window.getComputedStyle(t2);
    if ("block" === e2.display)
      return { top: parseInt(e2.marginTop), bottom: parseInt(e2.marginBottom) };
  };
  var ti = function(t2) {
    return "style" === E(t2) ? NodeFilter.FILTER_REJECT : NodeFilter.FILTER_ACCEPT;
  };
  var ei = (t2) => t2.replace(new RegExp("^".concat(Ut.source, "+")), "");
  var ii = (t2) => new RegExp("^".concat(Ut.source, "*$")).test(t2);
  var ni = (t2) => /\s$/.test(t2);
  var ri = ["contenteditable", "data-trix-id", "data-trix-store-key", "data-trix-mutable", "data-trix-placeholder", "tabindex"];
  var oi = "data-trix-serialized-attributes";
  var si = "[".concat(oi, "]");
  var ai = new RegExp("<!--block-->", "g");
  var li = { "application/json": function(t2) {
    let e2;
    if (t2 instanceof qe)
      e2 = t2;
    else {
      if (!(t2 instanceof HTMLElement))
        throw new Error("unserializable object");
      e2 = Xe.parse(t2.innerHTML).getDocument();
    }
    return e2.toSerializableDocument().toJSONString();
  }, "text/html": function(t2) {
    let e2;
    if (t2 instanceof qe)
      e2 = ge.render(t2);
    else {
      if (!(t2 instanceof HTMLElement))
        throw new Error("unserializable object");
      e2 = t2.cloneNode(true);
    }
    return Array.from(e2.querySelectorAll("[data-trix-serialize=false]")).forEach((t3) => {
      R(t3);
    }), ri.forEach((t3) => {
      Array.from(e2.querySelectorAll("[".concat(t3, "]"))).forEach((e3) => {
        e3.removeAttribute(t3);
      });
    }), Array.from(e2.querySelectorAll(si)).forEach((t3) => {
      try {
        const e3 = JSON.parse(t3.getAttribute(oi));
        t3.removeAttribute(oi);
        for (const i2 in e3) {
          const n2 = e3[i2];
          t3.setAttribute(i2, n2);
        }
      } catch (t4) {
      }
    }), e2.innerHTML.replace(ai, "");
  } };
  var ci = Object.freeze({ __proto__: null });
  var hi = class extends z {
    constructor(t2, e2) {
      super(...arguments), this.attachmentManager = t2, this.attachment = e2, this.id = this.attachment.id, this.file = this.attachment.file;
    }
    remove() {
      return this.attachmentManager.requestRemovalOfAttachment(this.attachment);
    }
  };
  hi.proxyMethod("attachment.getAttribute"), hi.proxyMethod("attachment.hasAttribute"), hi.proxyMethod("attachment.setAttribute"), hi.proxyMethod("attachment.getAttributes"), hi.proxyMethod("attachment.setAttributes"), hi.proxyMethod("attachment.isPending"), hi.proxyMethod("attachment.isPreviewable"), hi.proxyMethod("attachment.getURL"), hi.proxyMethod("attachment.getHref"), hi.proxyMethod("attachment.getFilename"), hi.proxyMethod("attachment.getFilesize"), hi.proxyMethod("attachment.getFormattedFilesize"), hi.proxyMethod("attachment.getExtension"), hi.proxyMethod("attachment.getContentType"), hi.proxyMethod("attachment.getFile"), hi.proxyMethod("attachment.setFile"), hi.proxyMethod("attachment.releaseFile"), hi.proxyMethod("attachment.getUploadProgress"), hi.proxyMethod("attachment.setUploadProgress");
  var ui = class extends z {
    constructor() {
      let t2 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : [];
      super(...arguments), this.managedAttachments = {}, Array.from(t2).forEach((t3) => {
        this.manageAttachment(t3);
      });
    }
    getAttachments() {
      const t2 = [];
      for (const e2 in this.managedAttachments) {
        const i2 = this.managedAttachments[e2];
        t2.push(i2);
      }
      return t2;
    }
    manageAttachment(t2) {
      return this.managedAttachments[t2.id] || (this.managedAttachments[t2.id] = new hi(this, t2)), this.managedAttachments[t2.id];
    }
    attachmentIsManaged(t2) {
      return t2.id in this.managedAttachments;
    }
    requestRemovalOfAttachment(t2) {
      var e2, i2;
      if (this.attachmentIsManaged(t2))
        return null === (e2 = this.delegate) || void 0 === e2 || null === (i2 = e2.attachmentManagerDidRequestRemovalOfAttachment) || void 0 === i2 ? void 0 : i2.call(e2, t2);
    }
    unmanageAttachment(t2) {
      const e2 = this.managedAttachments[t2.id];
      return delete this.managedAttachments[t2.id], e2;
    }
  };
  var di = class {
    constructor(t2) {
      this.composition = t2, this.document = this.composition.document;
      const e2 = this.composition.getSelectedRange();
      this.startPosition = e2[0], this.endPosition = e2[1], this.startLocation = this.document.locationFromPosition(this.startPosition), this.endLocation = this.document.locationFromPosition(this.endPosition), this.block = this.document.getBlockAtIndex(this.endLocation.index), this.breaksOnReturn = this.block.breaksOnReturn(), this.previousCharacter = this.block.text.getStringAtPosition(this.endLocation.offset - 1), this.nextCharacter = this.block.text.getStringAtPosition(this.endLocation.offset);
    }
    shouldInsertBlockBreak() {
      return this.block.hasAttributes() && this.block.isListItem() && !this.block.isEmpty() ? 0 !== this.startLocation.offset : this.breaksOnReturn && "\n" !== this.nextCharacter;
    }
    shouldBreakFormattedBlock() {
      return this.block.hasAttributes() && !this.block.isListItem() && (this.breaksOnReturn && "\n" === this.nextCharacter || "\n" === this.previousCharacter);
    }
    shouldDecreaseListLevel() {
      return this.block.hasAttributes() && this.block.isListItem() && this.block.isEmpty();
    }
    shouldPrependListItem() {
      return this.block.isListItem() && 0 === this.startLocation.offset && !this.block.isEmpty();
    }
    shouldRemoveLastBlockAttribute() {
      return this.block.hasAttributes() && !this.block.isListItem() && this.block.isEmpty();
    }
  };
  var gi = class extends z {
    constructor() {
      super(...arguments), this.document = new qe(), this.attachments = [], this.currentAttributes = {}, this.revision = 0;
    }
    setDocument(t2) {
      var e2, i2;
      if (!t2.isEqualTo(this.document))
        return this.document = t2, this.refreshAttachments(), this.revision++, null === (e2 = this.delegate) || void 0 === e2 || null === (i2 = e2.compositionDidChangeDocument) || void 0 === i2 ? void 0 : i2.call(e2, t2);
    }
    getSnapshot() {
      return { document: this.document, selectedRange: this.getSelectedRange() };
    }
    loadSnapshot(t2) {
      var e2, i2, n2, r2;
      let { document: o2, selectedRange: s2 } = t2;
      return null === (e2 = this.delegate) || void 0 === e2 || null === (i2 = e2.compositionWillLoadSnapshot) || void 0 === i2 || i2.call(e2), this.setDocument(null != o2 ? o2 : new qe()), this.setSelection(null != s2 ? s2 : [0, 0]), null === (n2 = this.delegate) || void 0 === n2 || null === (r2 = n2.compositionDidLoadSnapshot) || void 0 === r2 ? void 0 : r2.call(n2);
    }
    insertText(t2) {
      let { updatePosition: e2 } = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : { updatePosition: true };
      const i2 = this.getSelectedRange();
      this.setDocument(this.document.insertTextAtRange(t2, i2));
      const n2 = i2[0], r2 = n2 + t2.getLength();
      return e2 && this.setSelection(r2), this.notifyDelegateOfInsertionAtRange([n2, r2]);
    }
    insertBlock() {
      let t2 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : new Be();
      const e2 = new qe([t2]);
      return this.insertDocument(e2);
    }
    insertDocument() {
      let t2 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : new qe();
      const e2 = this.getSelectedRange();
      this.setDocument(this.document.insertDocumentAtRange(t2, e2));
      const i2 = e2[0], n2 = i2 + t2.getLength();
      return this.setSelection(n2), this.notifyDelegateOfInsertionAtRange([i2, n2]);
    }
    insertString(t2, e2) {
      const i2 = this.getCurrentTextAttributes(), n2 = Te.textForStringWithAttributes(t2, i2);
      return this.insertText(n2, e2);
    }
    insertBlockBreak() {
      const t2 = this.getSelectedRange();
      this.setDocument(this.document.insertBlockBreakAtRange(t2));
      const e2 = t2[0], i2 = e2 + 1;
      return this.setSelection(i2), this.notifyDelegateOfInsertionAtRange([e2, i2]);
    }
    insertLineBreak() {
      const t2 = new di(this);
      if (t2.shouldDecreaseListLevel())
        return this.decreaseListLevel(), this.setSelection(t2.startPosition);
      if (t2.shouldPrependListItem()) {
        const e2 = new qe([t2.block.copyWithoutText()]);
        return this.insertDocument(e2);
      }
      return t2.shouldInsertBlockBreak() ? this.insertBlockBreak() : t2.shouldRemoveLastBlockAttribute() ? this.removeLastBlockAttribute() : t2.shouldBreakFormattedBlock() ? this.breakFormattedBlock(t2) : this.insertString("\n");
    }
    insertHTML(t2) {
      const e2 = Xe.parse(t2).getDocument(), i2 = this.getSelectedRange();
      this.setDocument(this.document.mergeDocumentAtRange(e2, i2));
      const n2 = i2[0], r2 = n2 + e2.getLength() - 1;
      return this.setSelection(r2), this.notifyDelegateOfInsertionAtRange([n2, r2]);
    }
    replaceHTML(t2) {
      const e2 = Xe.parse(t2).getDocument().copyUsingObjectsFromDocument(this.document), i2 = this.getLocationRange({ strict: false }), n2 = this.document.rangeFromLocationRange(i2);
      return this.setDocument(e2), this.setSelection(n2);
    }
    insertFile(t2) {
      return this.insertFiles([t2]);
    }
    insertFiles(t2) {
      const e2 = [];
      return Array.from(t2).forEach((t3) => {
        var i2;
        if (null !== (i2 = this.delegate) && void 0 !== i2 && i2.compositionShouldAcceptFile(t3)) {
          const i3 = Re.attachmentForFile(t3);
          e2.push(i3);
        }
      }), this.insertAttachments(e2);
    }
    insertAttachment(t2) {
      return this.insertAttachments([t2]);
    }
    insertAttachments(t2) {
      let e2 = new Te();
      return Array.from(t2).forEach((t3) => {
        var n2;
        const r2 = t3.getType(), o2 = null === (n2 = i[r2]) || void 0 === n2 ? void 0 : n2.presentation, s2 = this.getCurrentTextAttributes();
        o2 && (s2.presentation = o2);
        const a2 = Te.textForAttachmentWithAttributes(t3, s2);
        e2 = e2.appendText(a2);
      }), this.insertText(e2);
    }
    shouldManageDeletingInDirection(t2) {
      const e2 = this.getLocationRange();
      if (Dt(e2)) {
        if ("backward" === t2 && 0 === e2[0].offset)
          return true;
        if (this.shouldManageMovingCursorInDirection(t2))
          return true;
      } else if (e2[0].index !== e2[1].index)
        return true;
      return false;
    }
    deleteInDirection(t2) {
      let e2, i2, n2, { length: r2 } = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
      const o2 = this.getLocationRange();
      let s2 = this.getSelectedRange();
      const a2 = Dt(s2);
      if (a2 ? i2 = "backward" === t2 && 0 === o2[0].offset : n2 = o2[0].index !== o2[1].index, i2 && this.canDecreaseBlockAttributeLevel()) {
        const t3 = this.getBlock();
        if (t3.isListItem() ? this.decreaseListLevel() : this.decreaseBlockAttributeLevel(), this.setSelection(s2[0]), t3.isEmpty())
          return false;
      }
      return a2 && (s2 = this.getExpandedRangeInDirection(t2, { length: r2 }), "backward" === t2 && (e2 = this.getAttachmentAtRange(s2))), e2 ? (this.editAttachment(e2), false) : (this.setDocument(this.document.removeTextAtRange(s2)), this.setSelection(s2[0]), !i2 && !n2 && void 0);
    }
    moveTextFromRange(t2) {
      const [e2] = Array.from(this.getSelectedRange());
      return this.setDocument(this.document.moveTextFromRangeToPosition(t2, e2)), this.setSelection(e2);
    }
    removeAttachment(t2) {
      const e2 = this.document.getRangeOfAttachment(t2);
      if (e2)
        return this.stopEditingAttachment(), this.setDocument(this.document.removeTextAtRange(e2)), this.setSelection(e2[0]);
    }
    removeLastBlockAttribute() {
      const [t2, e2] = Array.from(this.getSelectedRange()), i2 = this.document.getBlockAtPosition(e2);
      return this.removeCurrentAttribute(i2.getLastAttribute()), this.setSelection(t2);
    }
    insertPlaceholder() {
      return this.placeholderPosition = this.getPosition(), this.insertString(" ");
    }
    selectPlaceholder() {
      if (null != this.placeholderPosition)
        return this.setSelectedRange([this.placeholderPosition, this.placeholderPosition + 1]), this.getSelectedRange();
    }
    forgetPlaceholder() {
      this.placeholderPosition = null;
    }
    hasCurrentAttribute(t2) {
      const e2 = this.currentAttributes[t2];
      return null != e2 && false !== e2;
    }
    toggleCurrentAttribute(t2) {
      const e2 = !this.currentAttributes[t2];
      return e2 ? this.setCurrentAttribute(t2, e2) : this.removeCurrentAttribute(t2);
    }
    canSetCurrentAttribute(t2) {
      return gt(t2) ? this.canSetCurrentBlockAttribute(t2) : this.canSetCurrentTextAttribute(t2);
    }
    canSetCurrentTextAttribute(t2) {
      const e2 = this.getSelectedDocument();
      if (e2) {
        for (const t3 of Array.from(e2.getAttachments()))
          if (!t3.hasContent())
            return false;
        return true;
      }
    }
    canSetCurrentBlockAttribute(t2) {
      const e2 = this.getBlock();
      if (e2)
        return !e2.isTerminalBlock();
    }
    setCurrentAttribute(t2, e2) {
      return gt(t2) ? this.setBlockAttribute(t2, e2) : (this.setTextAttribute(t2, e2), this.currentAttributes[t2] = e2, this.notifyDelegateOfCurrentAttributesChange());
    }
    setTextAttribute(t2, e2) {
      const i2 = this.getSelectedRange();
      if (!i2)
        return;
      const [n2, r2] = Array.from(i2);
      if (n2 !== r2)
        return this.setDocument(this.document.addAttributeAtRange(t2, e2, i2));
      if ("href" === t2) {
        const t3 = Te.textForStringWithAttributes(e2, { href: e2 });
        return this.insertText(t3);
      }
    }
    setBlockAttribute(t2, e2) {
      const i2 = this.getSelectedRange();
      if (this.canSetCurrentAttribute(t2))
        return this.setDocument(this.document.applyBlockAttributeAtRange(t2, e2, i2)), this.setSelection(i2);
    }
    removeCurrentAttribute(t2) {
      return gt(t2) ? (this.removeBlockAttribute(t2), this.updateCurrentAttributes()) : (this.removeTextAttribute(t2), delete this.currentAttributes[t2], this.notifyDelegateOfCurrentAttributesChange());
    }
    removeTextAttribute(t2) {
      const e2 = this.getSelectedRange();
      if (e2)
        return this.setDocument(this.document.removeAttributeAtRange(t2, e2));
    }
    removeBlockAttribute(t2) {
      const e2 = this.getSelectedRange();
      if (e2)
        return this.setDocument(this.document.removeAttributeAtRange(t2, e2));
    }
    canDecreaseNestingLevel() {
      var t2;
      return (null === (t2 = this.getBlock()) || void 0 === t2 ? void 0 : t2.getNestingLevel()) > 0;
    }
    canIncreaseNestingLevel() {
      var t2;
      const e2 = this.getBlock();
      if (e2) {
        if (null === (t2 = gt(e2.getLastNestableAttribute())) || void 0 === t2 || !t2.listAttribute)
          return e2.getNestingLevel() > 0;
        {
          const t3 = this.getPreviousBlock();
          if (t3)
            return function() {
              let t4 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : [];
              return rt((arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : []).slice(0, t4.length), t4);
            }(t3.getListItemAttributes(), e2.getListItemAttributes());
        }
      }
    }
    decreaseNestingLevel() {
      const t2 = this.getBlock();
      if (t2)
        return this.setDocument(this.document.replaceBlock(t2, t2.decreaseNestingLevel()));
    }
    increaseNestingLevel() {
      const t2 = this.getBlock();
      if (t2)
        return this.setDocument(this.document.replaceBlock(t2, t2.increaseNestingLevel()));
    }
    canDecreaseBlockAttributeLevel() {
      var t2;
      return (null === (t2 = this.getBlock()) || void 0 === t2 ? void 0 : t2.getAttributeLevel()) > 0;
    }
    decreaseBlockAttributeLevel() {
      var t2;
      const e2 = null === (t2 = this.getBlock()) || void 0 === t2 ? void 0 : t2.getLastAttribute();
      if (e2)
        return this.removeCurrentAttribute(e2);
    }
    decreaseListLevel() {
      let [t2] = Array.from(this.getSelectedRange());
      const { index: e2 } = this.document.locationFromPosition(t2);
      let i2 = e2;
      const n2 = this.getBlock().getAttributeLevel();
      let r2 = this.document.getBlockAtIndex(i2 + 1);
      for (; r2 && r2.isListItem() && !(r2.getAttributeLevel() <= n2); )
        i2++, r2 = this.document.getBlockAtIndex(i2 + 1);
      t2 = this.document.positionFromLocation({ index: e2, offset: 0 });
      const o2 = this.document.positionFromLocation({ index: i2, offset: 0 });
      return this.setDocument(this.document.removeLastListAttributeAtRange([t2, o2]));
    }
    updateCurrentAttributes() {
      const t2 = this.getSelectedRange({ ignoreLock: true });
      if (t2) {
        const e2 = this.document.getCommonAttributesAtRange(t2);
        if (Array.from(dt()).forEach((t3) => {
          e2[t3] || this.canSetCurrentAttribute(t3) || (e2[t3] = false);
        }), !kt(e2, this.currentAttributes))
          return this.currentAttributes = e2, this.notifyDelegateOfCurrentAttributesChange();
      }
    }
    getCurrentAttributes() {
      return g.call({}, this.currentAttributes);
    }
    getCurrentTextAttributes() {
      const t2 = {};
      for (const e2 in this.currentAttributes) {
        const i2 = this.currentAttributes[e2];
        false !== i2 && pt(e2) && (t2[e2] = i2);
      }
      return t2;
    }
    freezeSelection() {
      return this.setCurrentAttribute("frozen", true);
    }
    thawSelection() {
      return this.removeCurrentAttribute("frozen");
    }
    hasFrozenSelection() {
      return this.hasCurrentAttribute("frozen");
    }
    setSelection(t2) {
      var e2;
      const i2 = this.document.locationRangeFromRange(t2);
      return null === (e2 = this.delegate) || void 0 === e2 ? void 0 : e2.compositionDidRequestChangingSelectionToLocationRange(i2);
    }
    getSelectedRange() {
      const t2 = this.getLocationRange();
      if (t2)
        return this.document.rangeFromLocationRange(t2);
    }
    setSelectedRange(t2) {
      const e2 = this.document.locationRangeFromRange(t2);
      return this.getSelectionManager().setLocationRange(e2);
    }
    getPosition() {
      const t2 = this.getLocationRange();
      if (t2)
        return this.document.positionFromLocation(t2[0]);
    }
    getLocationRange(t2) {
      return this.targetLocationRange ? this.targetLocationRange : this.getSelectionManager().getLocationRange(t2) || Lt({ index: 0, offset: 0 });
    }
    withTargetLocationRange(t2, e2) {
      let i2;
      this.targetLocationRange = t2;
      try {
        i2 = e2();
      } finally {
        this.targetLocationRange = null;
      }
      return i2;
    }
    withTargetRange(t2, e2) {
      const i2 = this.document.locationRangeFromRange(t2);
      return this.withTargetLocationRange(i2, e2);
    }
    withTargetDOMRange(t2, e2) {
      const i2 = this.createLocationRangeFromDOMRange(t2, { strict: false });
      return this.withTargetLocationRange(i2, e2);
    }
    getExpandedRangeInDirection(t2) {
      let { length: e2 } = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}, [i2, n2] = Array.from(this.getSelectedRange());
      return "backward" === t2 ? e2 ? i2 -= e2 : i2 = this.translateUTF16PositionFromOffset(i2, -1) : e2 ? n2 += e2 : n2 = this.translateUTF16PositionFromOffset(n2, 1), Lt([i2, n2]);
    }
    shouldManageMovingCursorInDirection(t2) {
      if (this.editingAttachment)
        return true;
      const e2 = this.getExpandedRangeInDirection(t2);
      return null != this.getAttachmentAtRange(e2);
    }
    moveCursorInDirection(t2) {
      let e2, i2;
      if (this.editingAttachment)
        i2 = this.document.getRangeOfAttachment(this.editingAttachment);
      else {
        const n2 = this.getSelectedRange();
        i2 = this.getExpandedRangeInDirection(t2), e2 = !wt(n2, i2);
      }
      if ("backward" === t2 ? this.setSelectedRange(i2[0]) : this.setSelectedRange(i2[1]), e2) {
        const t3 = this.getAttachmentAtRange(i2);
        if (t3)
          return this.editAttachment(t3);
      }
    }
    expandSelectionInDirection(t2) {
      let { length: e2 } = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
      const i2 = this.getExpandedRangeInDirection(t2, { length: e2 });
      return this.setSelectedRange(i2);
    }
    expandSelectionForEditing() {
      if (this.hasCurrentAttribute("href"))
        return this.expandSelectionAroundCommonAttribute("href");
    }
    expandSelectionAroundCommonAttribute(t2) {
      const e2 = this.getPosition(), i2 = this.document.getRangeOfCommonAttributeAtPosition(t2, e2);
      return this.setSelectedRange(i2);
    }
    selectionContainsAttachments() {
      var t2;
      return (null === (t2 = this.getSelectedAttachments()) || void 0 === t2 ? void 0 : t2.length) > 0;
    }
    selectionIsInCursorTarget() {
      return this.editingAttachment || this.positionIsCursorTarget(this.getPosition());
    }
    positionIsCursorTarget(t2) {
      const e2 = this.document.locationFromPosition(t2);
      if (e2)
        return this.locationIsCursorTarget(e2);
    }
    positionIsBlockBreak(t2) {
      var e2;
      return null === (e2 = this.document.getPieceAtPosition(t2)) || void 0 === e2 ? void 0 : e2.isBlockBreak();
    }
    getSelectedDocument() {
      const t2 = this.getSelectedRange();
      if (t2)
        return this.document.getDocumentAtRange(t2);
    }
    getSelectedAttachments() {
      var t2;
      return null === (t2 = this.getSelectedDocument()) || void 0 === t2 ? void 0 : t2.getAttachments();
    }
    getAttachments() {
      return this.attachments.slice(0);
    }
    refreshAttachments() {
      const t2 = this.document.getAttachments(), { added: e2, removed: i2 } = function() {
        let t3 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : [], e3 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : [];
        const i3 = [], n2 = [], r2 = /* @__PURE__ */ new Set();
        t3.forEach((t4) => {
          r2.add(t4);
        });
        const o2 = /* @__PURE__ */ new Set();
        return e3.forEach((t4) => {
          o2.add(t4), r2.has(t4) || i3.push(t4);
        }), t3.forEach((t4) => {
          o2.has(t4) || n2.push(t4);
        }), { added: i3, removed: n2 };
      }(this.attachments, t2);
      return this.attachments = t2, Array.from(i2).forEach((t3) => {
        var e3, i3;
        t3.delegate = null, null === (e3 = this.delegate) || void 0 === e3 || null === (i3 = e3.compositionDidRemoveAttachment) || void 0 === i3 || i3.call(e3, t3);
      }), (() => {
        const t3 = [];
        return Array.from(e2).forEach((e3) => {
          var i3, n2;
          e3.delegate = this, t3.push(null === (i3 = this.delegate) || void 0 === i3 || null === (n2 = i3.compositionDidAddAttachment) || void 0 === n2 ? void 0 : n2.call(i3, e3));
        }), t3;
      })();
    }
    attachmentDidChangeAttributes(t2) {
      var e2, i2;
      return this.revision++, null === (e2 = this.delegate) || void 0 === e2 || null === (i2 = e2.compositionDidEditAttachment) || void 0 === i2 ? void 0 : i2.call(e2, t2);
    }
    attachmentDidChangePreviewURL(t2) {
      var e2, i2;
      return this.revision++, null === (e2 = this.delegate) || void 0 === e2 || null === (i2 = e2.compositionDidChangeAttachmentPreviewURL) || void 0 === i2 ? void 0 : i2.call(e2, t2);
    }
    editAttachment(t2, e2) {
      var i2, n2;
      if (t2 !== this.editingAttachment)
        return this.stopEditingAttachment(), this.editingAttachment = t2, null === (i2 = this.delegate) || void 0 === i2 || null === (n2 = i2.compositionDidStartEditingAttachment) || void 0 === n2 ? void 0 : n2.call(i2, this.editingAttachment, e2);
    }
    stopEditingAttachment() {
      var t2, e2;
      this.editingAttachment && (null === (t2 = this.delegate) || void 0 === t2 || null === (e2 = t2.compositionDidStopEditingAttachment) || void 0 === e2 || e2.call(t2, this.editingAttachment), this.editingAttachment = null);
    }
    updateAttributesForAttachment(t2, e2) {
      return this.setDocument(this.document.updateAttributesForAttachment(t2, e2));
    }
    removeAttributeForAttachment(t2, e2) {
      return this.setDocument(this.document.removeAttributeForAttachment(t2, e2));
    }
    breakFormattedBlock(t2) {
      let { document: e2 } = t2;
      const { block: i2 } = t2;
      let n2 = t2.startPosition, r2 = [n2 - 1, n2];
      i2.getBlockBreakPosition() === t2.startLocation.offset ? (i2.breaksOnReturn() && "\n" === t2.nextCharacter ? n2 += 1 : e2 = e2.removeTextAtRange(r2), r2 = [n2, n2]) : "\n" === t2.nextCharacter ? "\n" === t2.previousCharacter ? r2 = [n2 - 1, n2 + 1] : (r2 = [n2, n2 + 1], n2 += 1) : t2.startLocation.offset - 1 != 0 && (n2 += 1);
      const o2 = new qe([i2.removeLastAttribute().copyWithoutText()]);
      return this.setDocument(e2.insertDocumentAtRange(o2, r2)), this.setSelection(n2);
    }
    getPreviousBlock() {
      const t2 = this.getLocationRange();
      if (t2) {
        const { index: e2 } = t2[0];
        if (e2 > 0)
          return this.document.getBlockAtIndex(e2 - 1);
      }
    }
    getBlock() {
      const t2 = this.getLocationRange();
      if (t2)
        return this.document.getBlockAtIndex(t2[0].index);
    }
    getAttachmentAtRange(t2) {
      const e2 = this.document.getDocumentAtRange(t2);
      if (e2.toString() === "".concat("\uFFFC", "\n"))
        return e2.getAttachments()[0];
    }
    notifyDelegateOfCurrentAttributesChange() {
      var t2, e2;
      return null === (t2 = this.delegate) || void 0 === t2 || null === (e2 = t2.compositionDidChangeCurrentAttributes) || void 0 === e2 ? void 0 : e2.call(t2, this.currentAttributes);
    }
    notifyDelegateOfInsertionAtRange(t2) {
      var e2, i2;
      return null === (e2 = this.delegate) || void 0 === e2 || null === (i2 = e2.compositionDidPerformInsertionAtRange) || void 0 === i2 ? void 0 : i2.call(e2, t2);
    }
    translateUTF16PositionFromOffset(t2, e2) {
      const i2 = this.document.toUTF16String(), n2 = i2.offsetFromUCS2Offset(t2);
      return i2.offsetToUCS2Offset(n2 + e2);
    }
  };
  gi.proxyMethod("getSelectionManager().getPointRange"), gi.proxyMethod("getSelectionManager().setLocationRangeFromPointRange"), gi.proxyMethod("getSelectionManager().createLocationRangeFromDOMRange"), gi.proxyMethod("getSelectionManager().locationIsCursorTarget"), gi.proxyMethod("getSelectionManager().selectionIsExpanded"), gi.proxyMethod("delegate?.getSelectionManager");
  var mi = class extends z {
    constructor(t2) {
      super(...arguments), this.composition = t2, this.undoEntries = [], this.redoEntries = [];
    }
    recordUndoEntry(t2) {
      let { context: e2, consolidatable: i2 } = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
      const n2 = this.undoEntries.slice(-1)[0];
      if (!i2 || !pi(n2, t2, e2)) {
        const i3 = this.createEntry({ description: t2, context: e2 });
        this.undoEntries.push(i3), this.redoEntries = [];
      }
    }
    undo() {
      const t2 = this.undoEntries.pop();
      if (t2) {
        const e2 = this.createEntry(t2);
        return this.redoEntries.push(e2), this.composition.loadSnapshot(t2.snapshot);
      }
    }
    redo() {
      const t2 = this.redoEntries.pop();
      if (t2) {
        const e2 = this.createEntry(t2);
        return this.undoEntries.push(e2), this.composition.loadSnapshot(t2.snapshot);
      }
    }
    canUndo() {
      return this.undoEntries.length > 0;
    }
    canRedo() {
      return this.redoEntries.length > 0;
    }
    createEntry() {
      let { description: t2, context: e2 } = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
      return { description: null == t2 ? void 0 : t2.toString(), context: JSON.stringify(e2), snapshot: this.composition.getSnapshot() };
    }
  };
  var pi = (t2, e2, i2) => (null == t2 ? void 0 : t2.description) === (null == e2 ? void 0 : e2.toString()) && (null == t2 ? void 0 : t2.context) === JSON.stringify(i2);
  var fi = "attachmentGallery";
  var bi = class {
    constructor(t2) {
      this.document = t2.document, this.selectedRange = t2.selectedRange;
    }
    perform() {
      return this.removeBlockAttribute(), this.applyBlockAttribute();
    }
    getSnapshot() {
      return { document: this.document, selectedRange: this.selectedRange };
    }
    removeBlockAttribute() {
      return this.findRangesOfBlocks().map((t2) => this.document = this.document.removeAttributeAtRange(fi, t2));
    }
    applyBlockAttribute() {
      let t2 = 0;
      this.findRangesOfPieces().forEach((e2) => {
        e2[1] - e2[0] > 1 && (e2[0] += t2, e2[1] += t2, "\n" !== this.document.getCharacterAtPosition(e2[1]) && (this.document = this.document.insertBlockBreakAtRange(e2[1]), e2[1] < this.selectedRange[1] && this.moveSelectedRangeForward(), e2[1]++, t2++), 0 !== e2[0] && "\n" !== this.document.getCharacterAtPosition(e2[0] - 1) && (this.document = this.document.insertBlockBreakAtRange(e2[0]), e2[0] < this.selectedRange[0] && this.moveSelectedRangeForward(), e2[0]++, t2++), this.document = this.document.applyBlockAttributeAtRange(fi, true, e2));
      });
    }
    findRangesOfBlocks() {
      return this.document.findRangesForBlockAttribute(fi);
    }
    findRangesOfPieces() {
      return this.document.findRangesForTextAttribute("presentation", { withValue: "gallery" });
    }
    moveSelectedRangeForward() {
      this.selectedRange[0] += 1, this.selectedRange[1] += 1;
    }
  };
  var vi = function(t2) {
    const e2 = new bi(t2);
    return e2.perform(), e2.getSnapshot();
  };
  var Ai = [vi];
  var xi = class {
    constructor(t2, e2, i2) {
      this.insertFiles = this.insertFiles.bind(this), this.composition = t2, this.selectionManager = e2, this.element = i2, this.undoManager = new mi(this.composition), this.filters = Ai.slice(0);
    }
    loadDocument(t2) {
      return this.loadSnapshot({ document: t2, selectedRange: [0, 0] });
    }
    loadHTML() {
      let t2 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : "";
      const e2 = Xe.parse(t2, { referenceElement: this.element }).getDocument();
      return this.loadDocument(e2);
    }
    loadJSON(t2) {
      let { document: e2, selectedRange: i2 } = t2;
      return e2 = qe.fromJSON(e2), this.loadSnapshot({ document: e2, selectedRange: i2 });
    }
    loadSnapshot(t2) {
      return this.undoManager = new mi(this.composition), this.composition.loadSnapshot(t2);
    }
    getDocument() {
      return this.composition.document;
    }
    getSelectedDocument() {
      return this.composition.getSelectedDocument();
    }
    getSnapshot() {
      return this.composition.getSnapshot();
    }
    toJSON() {
      return this.getSnapshot();
    }
    deleteInDirection(t2) {
      return this.composition.deleteInDirection(t2);
    }
    insertAttachment(t2) {
      return this.composition.insertAttachment(t2);
    }
    insertAttachments(t2) {
      return this.composition.insertAttachments(t2);
    }
    insertDocument(t2) {
      return this.composition.insertDocument(t2);
    }
    insertFile(t2) {
      return this.composition.insertFile(t2);
    }
    insertFiles(t2) {
      return this.composition.insertFiles(t2);
    }
    insertHTML(t2) {
      return this.composition.insertHTML(t2);
    }
    insertString(t2) {
      return this.composition.insertString(t2);
    }
    insertText(t2) {
      return this.composition.insertText(t2);
    }
    insertLineBreak() {
      return this.composition.insertLineBreak();
    }
    getSelectedRange() {
      return this.composition.getSelectedRange();
    }
    getPosition() {
      return this.composition.getPosition();
    }
    getClientRectAtPosition(t2) {
      const e2 = this.getDocument().locationRangeFromRange([t2, t2 + 1]);
      return this.selectionManager.getClientRectAtLocationRange(e2);
    }
    expandSelectionInDirection(t2) {
      return this.composition.expandSelectionInDirection(t2);
    }
    moveCursorInDirection(t2) {
      return this.composition.moveCursorInDirection(t2);
    }
    setSelectedRange(t2) {
      return this.composition.setSelectedRange(t2);
    }
    activateAttribute(t2) {
      let e2 = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1];
      return this.composition.setCurrentAttribute(t2, e2);
    }
    attributeIsActive(t2) {
      return this.composition.hasCurrentAttribute(t2);
    }
    canActivateAttribute(t2) {
      return this.composition.canSetCurrentAttribute(t2);
    }
    deactivateAttribute(t2) {
      return this.composition.removeCurrentAttribute(t2);
    }
    canDecreaseNestingLevel() {
      return this.composition.canDecreaseNestingLevel();
    }
    canIncreaseNestingLevel() {
      return this.composition.canIncreaseNestingLevel();
    }
    decreaseNestingLevel() {
      if (this.canDecreaseNestingLevel())
        return this.composition.decreaseNestingLevel();
    }
    increaseNestingLevel() {
      if (this.canIncreaseNestingLevel())
        return this.composition.increaseNestingLevel();
    }
    canRedo() {
      return this.undoManager.canRedo();
    }
    canUndo() {
      return this.undoManager.canUndo();
    }
    recordUndoEntry(t2) {
      let { context: e2, consolidatable: i2 } = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
      return this.undoManager.recordUndoEntry(t2, { context: e2, consolidatable: i2 });
    }
    redo() {
      if (this.canRedo())
        return this.undoManager.redo();
    }
    undo() {
      if (this.canUndo())
        return this.undoManager.undo();
    }
  };
  var yi = class {
    constructor(t2) {
      this.element = t2;
    }
    findLocationFromContainerAndOffset(t2, e2) {
      let { strict: i2 } = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : { strict: true }, n2 = 0, r2 = false;
      const o2 = { index: 0, offset: 0 }, s2 = this.findAttachmentElementParentForNode(t2);
      s2 && (t2 = s2.parentNode, e2 = C(s2));
      const a2 = S(this.element, { usingFilter: Ei });
      for (; a2.nextNode(); ) {
        const s3 = a2.currentNode;
        if (s3 === t2 && O(t2)) {
          I(s3) || (o2.offset += e2);
          break;
        }
        if (s3.parentNode === t2) {
          if (n2++ === e2)
            break;
        } else if (!y(t2, s3) && n2 > 0)
          break;
        T(s3, { strict: i2 }) ? (r2 && o2.index++, o2.offset = 0, r2 = true) : o2.offset += Ci(s3);
      }
      return o2;
    }
    findContainerAndOffsetFromLocation(t2) {
      let e2, i2;
      if (0 === t2.index && 0 === t2.offset) {
        for (e2 = this.element, i2 = 0; e2.firstChild; )
          if (e2 = e2.firstChild, w(e2)) {
            i2 = 1;
            break;
          }
        return [e2, i2];
      }
      let [n2, r2] = this.findNodeAndOffsetFromLocation(t2);
      if (n2) {
        if (O(n2))
          0 === Ci(n2) ? (e2 = n2.parentNode.parentNode, i2 = C(n2.parentNode), I(n2, { name: "right" }) && i2++) : (e2 = n2, i2 = t2.offset - r2);
        else {
          if (e2 = n2.parentNode, !T(n2.previousSibling) && !w(e2))
            for (; n2 === e2.lastChild && (n2 = e2, e2 = e2.parentNode, !w(e2)); )
              ;
          i2 = C(n2), 0 !== t2.offset && i2++;
        }
        return [e2, i2];
      }
    }
    findNodeAndOffsetFromLocation(t2) {
      let e2, i2, n2 = 0;
      for (const r2 of this.getSignificantNodesForIndex(t2.index)) {
        const o2 = Ci(r2);
        if (t2.offset <= n2 + o2)
          if (O(r2)) {
            if (e2 = r2, i2 = n2, t2.offset === i2 && I(e2))
              break;
          } else
            e2 || (e2 = r2, i2 = n2);
        if (n2 += o2, n2 > t2.offset)
          break;
      }
      return [e2, i2];
    }
    findAttachmentElementParentForNode(t2) {
      for (; t2 && t2 !== this.element; ) {
        if (P(t2))
          return t2;
        t2 = t2.parentNode;
      }
    }
    getSignificantNodesForIndex(t2) {
      const e2 = [], i2 = S(this.element, { usingFilter: Ri });
      let n2 = false;
      for (; i2.nextNode(); ) {
        const o2 = i2.currentNode;
        var r2;
        if (B(o2)) {
          if (null != r2 ? r2++ : r2 = 0, r2 === t2)
            n2 = true;
          else if (n2)
            break;
        } else
          n2 && e2.push(o2);
      }
      return e2;
    }
  };
  var Ci = function(t2) {
    if (t2.nodeType === Node.TEXT_NODE) {
      if (I(t2))
        return 0;
      return t2.textContent.length;
    }
    return "br" === E(t2) || P(t2) ? 1 : 0;
  };
  var Ri = function(t2) {
    return Si(t2) === NodeFilter.FILTER_ACCEPT ? Ei(t2) : NodeFilter.FILTER_REJECT;
  };
  var Si = function(t2) {
    return N(t2) ? NodeFilter.FILTER_REJECT : NodeFilter.FILTER_ACCEPT;
  };
  var Ei = function(t2) {
    return P(t2.parentNode) ? NodeFilter.FILTER_REJECT : NodeFilter.FILTER_ACCEPT;
  };
  var ki = class {
    createDOMRangeFromPoint(t2) {
      let e2, { x: i2, y: n2 } = t2;
      if (document.caretPositionFromPoint) {
        const { offsetNode: t3, offset: r2 } = document.caretPositionFromPoint(i2, n2);
        return e2 = document.createRange(), e2.setStart(t3, r2), e2;
      }
      if (document.caretRangeFromPoint)
        return document.caretRangeFromPoint(i2, n2);
      if (document.body.createTextRange) {
        const t3 = Nt();
        try {
          const t4 = document.body.createTextRange();
          t4.moveToPoint(i2, n2), t4.select();
        } catch (t4) {
        }
        return e2 = Nt(), Ot(t3), e2;
      }
    }
    getClientRectsForDOMRange(t2) {
      const e2 = Array.from(t2.getClientRects());
      return [e2[0], e2[e2.length - 1]];
    }
  };
  var Li = class extends z {
    constructor(t2) {
      super(...arguments), this.didMouseDown = this.didMouseDown.bind(this), this.selectionDidChange = this.selectionDidChange.bind(this), this.element = t2, this.locationMapper = new yi(this.element), this.pointMapper = new ki(), this.lockCount = 0, f("mousedown", { onElement: this.element, withCallback: this.didMouseDown });
    }
    getLocationRange() {
      let t2 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
      return false === t2.strict ? this.createLocationRangeFromDOMRange(Nt()) : t2.ignoreLock ? this.currentLocationRange : this.lockedLocationRange ? this.lockedLocationRange : this.currentLocationRange;
    }
    setLocationRange(t2) {
      if (this.lockedLocationRange)
        return;
      t2 = Lt(t2);
      const e2 = this.createDOMRangeFromLocationRange(t2);
      e2 && (Ot(e2), this.updateCurrentLocationRange(t2));
    }
    setLocationRangeFromPointRange(t2) {
      t2 = Lt(t2);
      const e2 = this.getLocationAtPoint(t2[0]), i2 = this.getLocationAtPoint(t2[1]);
      this.setLocationRange([e2, i2]);
    }
    getClientRectAtLocationRange(t2) {
      const e2 = this.createDOMRangeFromLocationRange(t2);
      if (e2)
        return this.getClientRectsForDOMRange(e2)[1];
    }
    locationIsCursorTarget(t2) {
      const e2 = Array.from(this.findNodeAndOffsetFromLocation(t2))[0];
      return I(e2);
    }
    lock() {
      0 == this.lockCount++ && (this.updateCurrentLocationRange(), this.lockedLocationRange = this.getLocationRange());
    }
    unlock() {
      if (0 == --this.lockCount) {
        const { lockedLocationRange: t2 } = this;
        if (this.lockedLocationRange = null, null != t2)
          return this.setLocationRange(t2);
      }
    }
    clearSelection() {
      var t2;
      return null === (t2 = Pt()) || void 0 === t2 ? void 0 : t2.removeAllRanges();
    }
    selectionIsCollapsed() {
      var t2;
      return true === (null === (t2 = Nt()) || void 0 === t2 ? void 0 : t2.collapsed);
    }
    selectionIsExpanded() {
      return !this.selectionIsCollapsed();
    }
    createLocationRangeFromDOMRange(t2, e2) {
      if (null == t2 || !this.domRangeWithinElement(t2))
        return;
      const i2 = this.findLocationFromContainerAndOffset(t2.startContainer, t2.startOffset, e2);
      if (!i2)
        return;
      const n2 = t2.collapsed ? void 0 : this.findLocationFromContainerAndOffset(t2.endContainer, t2.endOffset, e2);
      return Lt([i2, n2]);
    }
    didMouseDown() {
      return this.pauseTemporarily();
    }
    pauseTemporarily() {
      let t2;
      this.paused = true;
      const e2 = () => {
        if (this.paused = false, clearTimeout(i2), Array.from(t2).forEach((t3) => {
          t3.destroy();
        }), y(document, this.element))
          return this.selectionDidChange();
      }, i2 = setTimeout(e2, 200);
      t2 = ["mousemove", "keydown"].map((t3) => f(t3, { onElement: document, withCallback: e2 }));
    }
    selectionDidChange() {
      if (!this.paused && !x(this.element))
        return this.updateCurrentLocationRange();
    }
    updateCurrentLocationRange(t2) {
      var e2, i2;
      if ((null != t2 ? t2 : t2 = this.createLocationRangeFromDOMRange(Nt())) && !wt(t2, this.currentLocationRange))
        return this.currentLocationRange = t2, null === (e2 = this.delegate) || void 0 === e2 || null === (i2 = e2.locationRangeDidChange) || void 0 === i2 ? void 0 : i2.call(e2, this.currentLocationRange.slice(0));
    }
    createDOMRangeFromLocationRange(t2) {
      const e2 = this.findContainerAndOffsetFromLocation(t2[0]), i2 = Dt(t2) ? e2 : this.findContainerAndOffsetFromLocation(t2[1]) || e2;
      if (null != e2 && null != i2) {
        const t3 = document.createRange();
        return t3.setStart(...Array.from(e2 || [])), t3.setEnd(...Array.from(i2 || [])), t3;
      }
    }
    getLocationAtPoint(t2) {
      const e2 = this.createDOMRangeFromPoint(t2);
      var i2;
      if (e2)
        return null === (i2 = this.createLocationRangeFromDOMRange(e2)) || void 0 === i2 ? void 0 : i2[0];
    }
    domRangeWithinElement(t2) {
      return t2.collapsed ? y(this.element, t2.startContainer) : y(this.element, t2.startContainer) && y(this.element, t2.endContainer);
    }
  };
  Li.proxyMethod("locationMapper.findLocationFromContainerAndOffset"), Li.proxyMethod("locationMapper.findContainerAndOffsetFromLocation"), Li.proxyMethod("locationMapper.findNodeAndOffsetFromLocation"), Li.proxyMethod("pointMapper.createDOMRangeFromPoint"), Li.proxyMethod("pointMapper.getClientRectsForDOMRange");
  var Di = Object.freeze({ __proto__: null, Attachment: Re, AttachmentManager: ui, AttachmentPiece: Se, Block: Be, Composition: gi, Document: qe, Editor: xi, HTMLParser: Xe, HTMLSanitizer: Je, LineBreakInsertion: di, LocationMapper: yi, ManagedAttachment: hi, Piece: ye, PointMapper: ki, SelectionManager: Li, SplittableList: ke, StringPiece: Ee, Text: Te, UndoManager: mi });
  var wi = Object.freeze({ __proto__: null, ObjectView: ee, AttachmentView: re, BlockView: de, DocumentView: ge, PieceView: le, PreviewableAttachmentView: ae, TextView: ce });
  var { lang: Ti, css: Bi, keyNames: Fi } = V;
  var Ii = function(t2) {
    return function() {
      const e2 = t2.apply(this, arguments);
      e2.do(), this.undos || (this.undos = []), this.undos.push(e2.undo);
    };
  };
  var Pi = class extends z {
    constructor(t2, e2, i2) {
      let n2 = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : {};
      super(...arguments), Ae(this, "makeElementMutable", Ii(() => ({ do: () => {
        this.element.dataset.trixMutable = true;
      }, undo: () => delete this.element.dataset.trixMutable }))), Ae(this, "addToolbar", Ii(() => {
        const t3 = k({ tagName: "div", className: Bi.attachmentToolbar, data: { trixMutable: true }, childNodes: k({ tagName: "div", className: "trix-button-row", childNodes: k({ tagName: "span", className: "trix-button-group trix-button-group--actions", childNodes: k({ tagName: "button", className: "trix-button trix-button--remove", textContent: Ti.remove, attributes: { title: Ti.remove }, data: { trixAction: "remove" } }) }) }) });
        return this.attachment.isPreviewable() && t3.appendChild(k({ tagName: "div", className: Bi.attachmentMetadataContainer, childNodes: k({ tagName: "span", className: Bi.attachmentMetadata, childNodes: [k({ tagName: "span", className: Bi.attachmentName, textContent: this.attachment.getFilename(), attributes: { title: this.attachment.getFilename() } }), k({ tagName: "span", className: Bi.attachmentSize, textContent: this.attachment.getFormattedFilesize() })] }) })), f("click", { onElement: t3, withCallback: this.didClickToolbar }), f("click", { onElement: t3, matchingSelector: "[data-trix-action]", withCallback: this.didClickActionButton }), b("trix-attachment-before-toolbar", { onElement: this.element, attributes: { toolbar: t3, attachment: this.attachment } }), { do: () => this.element.appendChild(t3), undo: () => R(t3) };
      })), Ae(this, "installCaptionEditor", Ii(() => {
        const t3 = k({ tagName: "textarea", className: Bi.attachmentCaptionEditor, attributes: { placeholder: Ti.captionPlaceholder }, data: { trixMutable: true } });
        t3.value = this.attachmentPiece.getCaption();
        const e3 = t3.cloneNode();
        e3.classList.add("trix-autoresize-clone"), e3.tabIndex = -1;
        const i3 = function() {
          e3.value = t3.value, t3.style.height = e3.scrollHeight + "px";
        };
        f("input", { onElement: t3, withCallback: i3 }), f("input", { onElement: t3, withCallback: this.didInputCaption }), f("keydown", { onElement: t3, withCallback: this.didKeyDownCaption }), f("change", { onElement: t3, withCallback: this.didChangeCaption }), f("blur", { onElement: t3, withCallback: this.didBlurCaption });
        const n3 = this.element.querySelector("figcaption"), r2 = n3.cloneNode();
        return { do: () => {
          if (n3.style.display = "none", r2.appendChild(t3), r2.appendChild(e3), r2.classList.add("".concat(Bi.attachmentCaption, "--editing")), n3.parentElement.insertBefore(r2, n3), i3(), this.options.editCaption)
            return St(() => t3.focus());
        }, undo() {
          R(r2), n3.style.display = null;
        } };
      })), this.didClickToolbar = this.didClickToolbar.bind(this), this.didClickActionButton = this.didClickActionButton.bind(this), this.didKeyDownCaption = this.didKeyDownCaption.bind(this), this.didInputCaption = this.didInputCaption.bind(this), this.didChangeCaption = this.didChangeCaption.bind(this), this.didBlurCaption = this.didBlurCaption.bind(this), this.attachmentPiece = t2, this.element = e2, this.container = i2, this.options = n2, this.attachment = this.attachmentPiece.attachment, "a" === E(this.element) && (this.element = this.element.firstChild), this.install();
    }
    install() {
      this.makeElementMutable(), this.addToolbar(), this.attachment.isPreviewable() && this.installCaptionEditor();
    }
    uninstall() {
      var t2;
      let e2 = this.undos.pop();
      for (this.savePendingCaption(); e2; )
        e2(), e2 = this.undos.pop();
      null === (t2 = this.delegate) || void 0 === t2 || t2.didUninstallAttachmentEditor(this);
    }
    savePendingCaption() {
      if (null != this.pendingCaption) {
        const r2 = this.pendingCaption;
        var t2, e2, i2, n2;
        if (this.pendingCaption = null, r2)
          null === (t2 = this.delegate) || void 0 === t2 || null === (e2 = t2.attachmentEditorDidRequestUpdatingAttributesForAttachment) || void 0 === e2 || e2.call(t2, { caption: r2 }, this.attachment);
        else
          null === (i2 = this.delegate) || void 0 === i2 || null === (n2 = i2.attachmentEditorDidRequestRemovingAttributeForAttachment) || void 0 === n2 || n2.call(i2, "caption", this.attachment);
      }
    }
    didClickToolbar(t2) {
      return t2.preventDefault(), t2.stopPropagation();
    }
    didClickActionButton(t2) {
      var e2;
      if ("remove" === t2.target.getAttribute("data-trix-action"))
        return null === (e2 = this.delegate) || void 0 === e2 ? void 0 : e2.attachmentEditorDidRequestRemovalOfAttachment(this.attachment);
    }
    didKeyDownCaption(t2) {
      var e2, i2;
      if ("return" === Fi[t2.keyCode])
        return t2.preventDefault(), this.savePendingCaption(), null === (e2 = this.delegate) || void 0 === e2 || null === (i2 = e2.attachmentEditorDidRequestDeselectingAttachment) || void 0 === i2 ? void 0 : i2.call(e2, this.attachment);
    }
    didInputCaption(t2) {
      this.pendingCaption = t2.target.value.replace(/\s/g, " ").trim();
    }
    didChangeCaption(t2) {
      return this.savePendingCaption();
    }
    didBlurCaption(t2) {
      return this.savePendingCaption();
    }
  };
  var Ni = class extends z {
    constructor(t2, i2) {
      super(...arguments), this.didFocus = this.didFocus.bind(this), this.didBlur = this.didBlur.bind(this), this.didClickAttachment = this.didClickAttachment.bind(this), this.element = t2, this.composition = i2, this.documentView = new ge(this.composition.document, { element: this.element }), f("focus", { onElement: this.element, withCallback: this.didFocus }), f("blur", { onElement: this.element, withCallback: this.didBlur }), f("click", { onElement: this.element, matchingSelector: "a[contenteditable=false]", preventDefault: true }), f("mousedown", { onElement: this.element, matchingSelector: e, withCallback: this.didClickAttachment }), f("click", { onElement: this.element, matchingSelector: "a".concat(e), preventDefault: true });
    }
    didFocus(t2) {
      var e2;
      const i2 = () => {
        var t3, e3;
        if (!this.focused)
          return this.focused = true, null === (t3 = this.delegate) || void 0 === t3 || null === (e3 = t3.compositionControllerDidFocus) || void 0 === e3 ? void 0 : e3.call(t3);
      };
      return (null === (e2 = this.blurPromise) || void 0 === e2 ? void 0 : e2.then(i2)) || i2();
    }
    didBlur(t2) {
      this.blurPromise = new Promise((t3) => St(() => {
        var e2, i2;
        x(this.element) || (this.focused = null, null === (e2 = this.delegate) || void 0 === e2 || null === (i2 = e2.compositionControllerDidBlur) || void 0 === i2 || i2.call(e2));
        return this.blurPromise = null, t3();
      }));
    }
    didClickAttachment(t2, e2) {
      var i2, n2;
      const r2 = this.findAttachmentForElement(e2), o2 = !!A(t2.target, { matchingSelector: "figcaption" });
      return null === (i2 = this.delegate) || void 0 === i2 || null === (n2 = i2.compositionControllerDidSelectAttachment) || void 0 === n2 ? void 0 : n2.call(i2, r2, { editCaption: o2 });
    }
    getSerializableElement() {
      return this.isEditingAttachment() ? this.documentView.shadowElement : this.element;
    }
    render() {
      var t2, e2, i2, n2, r2, o2;
      (this.revision !== this.composition.revision && (this.documentView.setDocument(this.composition.document), this.documentView.render(), this.revision = this.composition.revision), this.canSyncDocumentView() && !this.documentView.isSynced()) && (null === (i2 = this.delegate) || void 0 === i2 || null === (n2 = i2.compositionControllerWillSyncDocumentView) || void 0 === n2 || n2.call(i2), this.documentView.sync(), null === (r2 = this.delegate) || void 0 === r2 || null === (o2 = r2.compositionControllerDidSyncDocumentView) || void 0 === o2 || o2.call(r2));
      return null === (t2 = this.delegate) || void 0 === t2 || null === (e2 = t2.compositionControllerDidRender) || void 0 === e2 ? void 0 : e2.call(t2);
    }
    rerenderViewForObject(t2) {
      return this.invalidateViewForObject(t2), this.render();
    }
    invalidateViewForObject(t2) {
      return this.documentView.invalidateViewForObject(t2);
    }
    isViewCachingEnabled() {
      return this.documentView.isViewCachingEnabled();
    }
    enableViewCaching() {
      return this.documentView.enableViewCaching();
    }
    disableViewCaching() {
      return this.documentView.disableViewCaching();
    }
    refreshViewCache() {
      return this.documentView.garbageCollectCachedViews();
    }
    isEditingAttachment() {
      return !!this.attachmentEditor;
    }
    installAttachmentEditorForAttachment(t2, e2) {
      var i2;
      if ((null === (i2 = this.attachmentEditor) || void 0 === i2 ? void 0 : i2.attachment) === t2)
        return;
      const n2 = this.documentView.findElementForObject(t2);
      if (!n2)
        return;
      this.uninstallAttachmentEditor();
      const r2 = this.composition.document.getAttachmentPieceForAttachment(t2);
      this.attachmentEditor = new Pi(r2, n2, this.element, e2), this.attachmentEditor.delegate = this;
    }
    uninstallAttachmentEditor() {
      var t2;
      return null === (t2 = this.attachmentEditor) || void 0 === t2 ? void 0 : t2.uninstall();
    }
    didUninstallAttachmentEditor() {
      return this.attachmentEditor = null, this.render();
    }
    attachmentEditorDidRequestUpdatingAttributesForAttachment(t2, e2) {
      var i2, n2;
      return null === (i2 = this.delegate) || void 0 === i2 || null === (n2 = i2.compositionControllerWillUpdateAttachment) || void 0 === n2 || n2.call(i2, e2), this.composition.updateAttributesForAttachment(t2, e2);
    }
    attachmentEditorDidRequestRemovingAttributeForAttachment(t2, e2) {
      var i2, n2;
      return null === (i2 = this.delegate) || void 0 === i2 || null === (n2 = i2.compositionControllerWillUpdateAttachment) || void 0 === n2 || n2.call(i2, e2), this.composition.removeAttributeForAttachment(t2, e2);
    }
    attachmentEditorDidRequestRemovalOfAttachment(t2) {
      var e2, i2;
      return null === (e2 = this.delegate) || void 0 === e2 || null === (i2 = e2.compositionControllerDidRequestRemovalOfAttachment) || void 0 === i2 ? void 0 : i2.call(e2, t2);
    }
    attachmentEditorDidRequestDeselectingAttachment(t2) {
      var e2, i2;
      return null === (e2 = this.delegate) || void 0 === e2 || null === (i2 = e2.compositionControllerDidRequestDeselectingAttachment) || void 0 === i2 ? void 0 : i2.call(e2, t2);
    }
    canSyncDocumentView() {
      return !this.isEditingAttachment();
    }
    findAttachmentForElement(t2) {
      return this.composition.document.getAttachmentById(parseInt(t2.dataset.trixId, 10));
    }
  };
  var Oi = class extends z {
  };
  var Mi = "data-trix-mutable";
  var ji = "[".concat(Mi, "]");
  var Wi = { attributes: true, childList: true, characterData: true, characterDataOldValue: true, subtree: true };
  var Ui = class extends z {
    constructor(t2) {
      super(t2), this.didMutate = this.didMutate.bind(this), this.element = t2, this.observer = new window.MutationObserver(this.didMutate), this.start();
    }
    start() {
      return this.reset(), this.observer.observe(this.element, Wi);
    }
    stop() {
      return this.observer.disconnect();
    }
    didMutate(t2) {
      var e2, i2;
      if (this.mutations.push(...Array.from(this.findSignificantMutations(t2) || [])), this.mutations.length)
        return null === (e2 = this.delegate) || void 0 === e2 || null === (i2 = e2.elementDidMutate) || void 0 === i2 || i2.call(e2, this.getMutationSummary()), this.reset();
    }
    reset() {
      this.mutations = [];
    }
    findSignificantMutations(t2) {
      return t2.filter((t3) => this.mutationIsSignificant(t3));
    }
    mutationIsSignificant(t2) {
      if (this.nodeIsMutable(t2.target))
        return false;
      for (const e2 of Array.from(this.nodesModifiedByMutation(t2)))
        if (this.nodeIsSignificant(e2))
          return true;
      return false;
    }
    nodeIsSignificant(t2) {
      return t2 !== this.element && !this.nodeIsMutable(t2) && !N(t2);
    }
    nodeIsMutable(t2) {
      return A(t2, { matchingSelector: ji });
    }
    nodesModifiedByMutation(t2) {
      const e2 = [];
      switch (t2.type) {
        case "attributes":
          t2.attributeName !== Mi && e2.push(t2.target);
          break;
        case "characterData":
          e2.push(t2.target.parentNode), e2.push(t2.target);
          break;
        case "childList":
          e2.push(...Array.from(t2.addedNodes || [])), e2.push(...Array.from(t2.removedNodes || []));
      }
      return e2;
    }
    getMutationSummary() {
      return this.getTextMutationSummary();
    }
    getTextMutationSummary() {
      const { additions: t2, deletions: e2 } = this.getTextChangesFromCharacterData(), i2 = this.getTextChangesFromChildList();
      Array.from(i2.additions).forEach((e3) => {
        Array.from(t2).includes(e3) || t2.push(e3);
      }), e2.push(...Array.from(i2.deletions || []));
      const n2 = {}, r2 = t2.join("");
      r2 && (n2.textAdded = r2);
      const o2 = e2.join("");
      return o2 && (n2.textDeleted = o2), n2;
    }
    getMutationsByType(t2) {
      return Array.from(this.mutations).filter((e2) => e2.type === t2);
    }
    getTextChangesFromChildList() {
      let t2, e2;
      const i2 = [], n2 = [];
      Array.from(this.getMutationsByType("childList")).forEach((t3) => {
        i2.push(...Array.from(t3.addedNodes || [])), n2.push(...Array.from(t3.removedNodes || []));
      });
      0 === i2.length && 1 === n2.length && B(n2[0]) ? (t2 = [], e2 = ["\n"]) : (t2 = qi(i2), e2 = qi(n2));
      return { additions: t2.filter((t3, i3) => t3 !== e2[i3]).map(Wt), deletions: e2.filter((e3, i3) => e3 !== t2[i3]).map(Wt) };
    }
    getTextChangesFromCharacterData() {
      let t2, e2;
      const i2 = this.getMutationsByType("characterData");
      if (i2.length) {
        const n2 = i2[0], r2 = i2[i2.length - 1], o2 = function(t3, e3) {
          let i3, n3;
          return t3 = X.box(t3), (e3 = X.box(e3)).length < t3.length ? [n3, i3] = Vt(t3, e3) : [i3, n3] = Vt(e3, t3), { added: i3, removed: n3 };
        }(Wt(n2.oldValue), Wt(r2.target.data));
        t2 = o2.added, e2 = o2.removed;
      }
      return { additions: t2 ? [t2] : [], deletions: e2 ? [e2] : [] };
    }
  };
  var qi = function() {
    let t2 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : [];
    const e2 = [];
    for (const i2 of Array.from(t2))
      switch (i2.nodeType) {
        case Node.TEXT_NODE:
          e2.push(i2.data);
          break;
        case Node.ELEMENT_NODE:
          "br" === E(i2) ? e2.push("\n") : e2.push(...Array.from(qi(i2.childNodes) || []));
      }
    return e2;
  };
  var Vi = class extends te {
    constructor(t2) {
      super(...arguments), this.file = t2;
    }
    perform(t2) {
      const e2 = new FileReader();
      return e2.onerror = () => t2(false), e2.onload = () => {
        e2.onerror = null;
        try {
          e2.abort();
        } catch (t3) {
        }
        return t2(true, this.file);
      }, e2.readAsArrayBuffer(this.file);
    }
  };
  var zi = class {
    constructor(t2) {
      this.element = t2;
    }
    shouldIgnore(t2) {
      return !!a.samsungAndroid && (this.previousEvent = this.event, this.event = t2, this.checkSamsungKeyboardBuggyModeStart(), this.checkSamsungKeyboardBuggyModeEnd(), this.buggyMode);
    }
    checkSamsungKeyboardBuggyModeStart() {
      this.insertingLongTextAfterUnidentifiedChar() && _i(this.element.innerText, this.event.data) && (this.buggyMode = true, this.event.preventDefault());
    }
    checkSamsungKeyboardBuggyModeEnd() {
      this.buggyMode && "insertText" !== this.event.inputType && (this.buggyMode = false);
    }
    insertingLongTextAfterUnidentifiedChar() {
      var t2;
      return this.isBeforeInputInsertText() && this.previousEventWasUnidentifiedKeydown() && (null === (t2 = this.event.data) || void 0 === t2 ? void 0 : t2.length) > 50;
    }
    isBeforeInputInsertText() {
      return "beforeinput" === this.event.type && "insertText" === this.event.inputType;
    }
    previousEventWasUnidentifiedKeydown() {
      var t2, e2;
      return "keydown" === (null === (t2 = this.previousEvent) || void 0 === t2 ? void 0 : t2.type) && "Unidentified" === (null === (e2 = this.previousEvent) || void 0 === e2 ? void 0 : e2.key);
    }
  };
  var _i = (t2, e2) => Ji(t2) === Ji(e2);
  var Hi = new RegExp("(".concat("\uFFFC", "|").concat(u, "|").concat(d, "|\\s)+"), "g");
  var Ji = (t2) => t2.replace(Hi, " ").trim();
  var Ki = class extends z {
    constructor(t2) {
      super(...arguments), this.element = t2, this.mutationObserver = new Ui(this.element), this.mutationObserver.delegate = this, this.flakyKeyboardDetector = new zi(this.element);
      for (const t3 in this.constructor.events)
        f(t3, { onElement: this.element, withCallback: this.handlerFor(t3) });
    }
    elementDidMutate(t2) {
    }
    editorWillSyncDocumentView() {
      return this.mutationObserver.stop();
    }
    editorDidSyncDocumentView() {
      return this.mutationObserver.start();
    }
    requestRender() {
      var t2, e2;
      return null === (t2 = this.delegate) || void 0 === t2 || null === (e2 = t2.inputControllerDidRequestRender) || void 0 === e2 ? void 0 : e2.call(t2);
    }
    requestReparse() {
      var t2, e2;
      return null === (t2 = this.delegate) || void 0 === t2 || null === (e2 = t2.inputControllerDidRequestReparse) || void 0 === e2 || e2.call(t2), this.requestRender();
    }
    attachFiles(t2) {
      const e2 = Array.from(t2).map((t3) => new Vi(t3));
      return Promise.all(e2).then((t3) => {
        this.handleInput(function() {
          var e3, i2;
          return null === (e3 = this.delegate) || void 0 === e3 || e3.inputControllerWillAttachFiles(), null === (i2 = this.responder) || void 0 === i2 || i2.insertFiles(t3), this.requestRender();
        });
      });
    }
    handlerFor(t2) {
      return (e2) => {
        e2.defaultPrevented || this.handleInput(() => {
          if (!x(this.element)) {
            if (this.flakyKeyboardDetector.shouldIgnore(e2))
              return;
            this.eventName = t2, this.constructor.events[t2].call(this, e2);
          }
        });
      };
    }
    handleInput(t2) {
      try {
        var e2;
        null === (e2 = this.delegate) || void 0 === e2 || e2.inputControllerWillHandleInput(), t2.call(this);
      } finally {
        var i2;
        null === (i2 = this.delegate) || void 0 === i2 || i2.inputControllerDidHandleInput();
      }
    }
    createLinkHTML(t2, e2) {
      const i2 = document.createElement("a");
      return i2.href = t2, i2.textContent = e2 || t2, i2.outerHTML;
    }
  };
  var Gi;
  Ae(Ki, "events", {});
  var { browser: $i, keyNames: Xi } = V;
  var Yi = 0;
  var Qi = class extends Ki {
    constructor() {
      super(...arguments), this.resetInputSummary();
    }
    setInputSummary() {
      let t2 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
      this.inputSummary.eventName = this.eventName;
      for (const e2 in t2) {
        const i2 = t2[e2];
        this.inputSummary[e2] = i2;
      }
      return this.inputSummary;
    }
    resetInputSummary() {
      this.inputSummary = {};
    }
    reset() {
      return this.resetInputSummary(), It.reset();
    }
    elementDidMutate(t2) {
      var e2, i2;
      return this.isComposing() ? null === (e2 = this.delegate) || void 0 === e2 || null === (i2 = e2.inputControllerDidAllowUnhandledInput) || void 0 === i2 ? void 0 : i2.call(e2) : this.handleInput(function() {
        return this.mutationIsSignificant(t2) && (this.mutationIsExpected(t2) ? this.requestRender() : this.requestReparse()), this.reset();
      });
    }
    mutationIsExpected(t2) {
      let { textAdded: e2, textDeleted: i2 } = t2;
      if (this.inputSummary.preferDocument)
        return true;
      const n2 = null != e2 ? e2 === this.inputSummary.textAdded : !this.inputSummary.textAdded, r2 = null != i2 ? this.inputSummary.didDelete : !this.inputSummary.didDelete, o2 = ["\n", " \n"].includes(e2) && !n2, s2 = "\n" === i2 && !r2;
      if (o2 && !s2 || s2 && !o2) {
        const t3 = this.getSelectedRange();
        if (t3) {
          var a2;
          const i3 = o2 ? e2.replace(/\n$/, "").length || -1 : (null == e2 ? void 0 : e2.length) || 1;
          if (null !== (a2 = this.responder) && void 0 !== a2 && a2.positionIsBlockBreak(t3[1] + i3))
            return true;
        }
      }
      return n2 && r2;
    }
    mutationIsSignificant(t2) {
      var e2;
      const i2 = Object.keys(t2).length > 0, n2 = "" === (null === (e2 = this.compositionInput) || void 0 === e2 ? void 0 : e2.getEndData());
      return i2 || !n2;
    }
    getCompositionInput() {
      if (this.isComposing())
        return this.compositionInput;
      this.compositionInput = new rn(this);
    }
    isComposing() {
      return this.compositionInput && !this.compositionInput.isEnded();
    }
    deleteInDirection(t2, e2) {
      var i2;
      return false !== (null === (i2 = this.responder) || void 0 === i2 ? void 0 : i2.deleteInDirection(t2)) ? this.setInputSummary({ didDelete: true }) : e2 ? (e2.preventDefault(), this.requestRender()) : void 0;
    }
    serializeSelectionToDataTransfer(t2) {
      var e2;
      if (!function(t3) {
        if (null == t3 || !t3.setData)
          return false;
        for (const e3 in yt) {
          const i3 = yt[e3];
          try {
            if (t3.setData(e3, i3), !t3.getData(e3) === i3)
              return false;
          } catch (t4) {
            return false;
          }
        }
        return true;
      }(t2))
        return;
      const i2 = null === (e2 = this.responder) || void 0 === e2 ? void 0 : e2.getSelectedDocument().toSerializableDocument();
      return t2.setData("application/x-trix-document", JSON.stringify(i2)), t2.setData("text/html", ge.render(i2).innerHTML), t2.setData("text/plain", i2.toString().replace(/\n$/, "")), true;
    }
    canAcceptDataTransfer(t2) {
      const e2 = {};
      return Array.from((null == t2 ? void 0 : t2.types) || []).forEach((t3) => {
        e2[t3] = true;
      }), e2.Files || e2["application/x-trix-document"] || e2["text/html"] || e2["text/plain"];
    }
    getPastedHTMLUsingHiddenElement(t2) {
      const e2 = this.getSelectedRange(), i2 = { position: "absolute", left: "".concat(window.pageXOffset, "px"), top: "".concat(window.pageYOffset, "px"), opacity: 0 }, n2 = k({ style: i2, tagName: "div", editable: true });
      return document.body.appendChild(n2), n2.focus(), requestAnimationFrame(() => {
        const i3 = n2.innerHTML;
        return R(n2), this.setSelectedRange(e2), t2(i3);
      });
    }
  };
  Ae(Qi, "events", { keydown(t2) {
    this.isComposing() || this.resetInputSummary(), this.inputSummary.didInput = true;
    const e2 = Xi[t2.keyCode];
    if (e2) {
      var i2;
      let n3 = this.keys;
      ["ctrl", "alt", "shift", "meta"].forEach((e3) => {
        var i3;
        t2["".concat(e3, "Key")] && ("ctrl" === e3 && (e3 = "control"), n3 = null === (i3 = n3) || void 0 === i3 ? void 0 : i3[e3]);
      }), null != (null === (i2 = n3) || void 0 === i2 ? void 0 : i2[e2]) && (this.setInputSummary({ keyName: e2 }), It.reset(), n3[e2].call(this, t2));
    }
    if (Rt(t2)) {
      const e3 = String.fromCharCode(t2.keyCode).toLowerCase();
      if (e3) {
        var n2;
        const i3 = ["alt", "shift"].map((e4) => {
          if (t2["".concat(e4, "Key")])
            return e4;
        }).filter((t3) => t3);
        i3.push(e3), null !== (n2 = this.delegate) && void 0 !== n2 && n2.inputControllerDidReceiveKeyboardCommand(i3) && t2.preventDefault();
      }
    }
  }, keypress(t2) {
    if (null != this.inputSummary.eventName)
      return;
    if (t2.metaKey)
      return;
    if (t2.ctrlKey && !t2.altKey)
      return;
    const e2 = en(t2);
    var i2, n2;
    return e2 ? (null === (i2 = this.delegate) || void 0 === i2 || i2.inputControllerWillPerformTyping(), null === (n2 = this.responder) || void 0 === n2 || n2.insertString(e2), this.setInputSummary({ textAdded: e2, didDelete: this.selectionIsExpanded() })) : void 0;
  }, textInput(t2) {
    const { data: e2 } = t2, { textAdded: i2 } = this.inputSummary;
    if (i2 && i2 !== e2 && i2.toUpperCase() === e2) {
      var n2;
      const t3 = this.getSelectedRange();
      return this.setSelectedRange([t3[0], t3[1] + i2.length]), null === (n2 = this.responder) || void 0 === n2 || n2.insertString(e2), this.setInputSummary({ textAdded: e2 }), this.setSelectedRange(t3);
    }
  }, dragenter(t2) {
    t2.preventDefault();
  }, dragstart(t2) {
    var e2, i2;
    return this.serializeSelectionToDataTransfer(t2.dataTransfer), this.draggedRange = this.getSelectedRange(), null === (e2 = this.delegate) || void 0 === e2 || null === (i2 = e2.inputControllerDidStartDrag) || void 0 === i2 ? void 0 : i2.call(e2);
  }, dragover(t2) {
    if (this.draggedRange || this.canAcceptDataTransfer(t2.dataTransfer)) {
      t2.preventDefault();
      const n2 = { x: t2.clientX, y: t2.clientY };
      var e2, i2;
      if (!kt(n2, this.draggingPoint))
        return this.draggingPoint = n2, null === (e2 = this.delegate) || void 0 === e2 || null === (i2 = e2.inputControllerDidReceiveDragOverPoint) || void 0 === i2 ? void 0 : i2.call(e2, this.draggingPoint);
    }
  }, dragend(t2) {
    var e2, i2;
    null === (e2 = this.delegate) || void 0 === e2 || null === (i2 = e2.inputControllerDidCancelDrag) || void 0 === i2 || i2.call(e2), this.draggedRange = null, this.draggingPoint = null;
  }, drop(t2) {
    var e2, i2;
    t2.preventDefault();
    const n2 = null === (e2 = t2.dataTransfer) || void 0 === e2 ? void 0 : e2.files, r2 = t2.dataTransfer.getData("application/x-trix-document"), o2 = { x: t2.clientX, y: t2.clientY };
    if (null === (i2 = this.responder) || void 0 === i2 || i2.setLocationRangeFromPointRange(o2), null != n2 && n2.length)
      this.attachFiles(n2);
    else if (this.draggedRange) {
      var s2, a2;
      null === (s2 = this.delegate) || void 0 === s2 || s2.inputControllerWillMoveText(), null === (a2 = this.responder) || void 0 === a2 || a2.moveTextFromRange(this.draggedRange), this.draggedRange = null, this.requestRender();
    } else if (r2) {
      var l2;
      const t3 = qe.fromJSONString(r2);
      null === (l2 = this.responder) || void 0 === l2 || l2.insertDocument(t3), this.requestRender();
    }
    this.draggedRange = null, this.draggingPoint = null;
  }, cut(t2) {
    var e2, i2;
    if (null !== (e2 = this.responder) && void 0 !== e2 && e2.selectionIsExpanded() && (this.serializeSelectionToDataTransfer(t2.clipboardData) && t2.preventDefault(), null === (i2 = this.delegate) || void 0 === i2 || i2.inputControllerWillCutText(), this.deleteInDirection("backward"), t2.defaultPrevented))
      return this.requestRender();
  }, copy(t2) {
    var e2;
    null !== (e2 = this.responder) && void 0 !== e2 && e2.selectionIsExpanded() && this.serializeSelectionToDataTransfer(t2.clipboardData) && t2.preventDefault();
  }, paste(t2) {
    const e2 = t2.clipboardData || t2.testClipboardData, i2 = { clipboard: e2 };
    if (!e2 || nn(t2))
      return void this.getPastedHTMLUsingHiddenElement((t3) => {
        var e3, n3, r3;
        return i2.type = "text/html", i2.html = t3, null === (e3 = this.delegate) || void 0 === e3 || e3.inputControllerWillPaste(i2), null === (n3 = this.responder) || void 0 === n3 || n3.insertHTML(i2.html), this.requestRender(), null === (r3 = this.delegate) || void 0 === r3 ? void 0 : r3.inputControllerDidPaste(i2);
      });
    const n2 = e2.getData("URL"), r2 = e2.getData("text/html"), o2 = e2.getData("public.url-name");
    if (n2) {
      var s2, a2, l2;
      let t3;
      i2.type = "text/html", t3 = o2 ? qt(o2).trim() : n2, i2.html = this.createLinkHTML(n2, t3), null === (s2 = this.delegate) || void 0 === s2 || s2.inputControllerWillPaste(i2), this.setInputSummary({ textAdded: t3, didDelete: this.selectionIsExpanded() }), null === (a2 = this.responder) || void 0 === a2 || a2.insertHTML(i2.html), this.requestRender(), null === (l2 = this.delegate) || void 0 === l2 || l2.inputControllerDidPaste(i2);
    } else if (Ct(e2)) {
      var c2, h2, u2;
      i2.type = "text/plain", i2.string = e2.getData("text/plain"), null === (c2 = this.delegate) || void 0 === c2 || c2.inputControllerWillPaste(i2), this.setInputSummary({ textAdded: i2.string, didDelete: this.selectionIsExpanded() }), null === (h2 = this.responder) || void 0 === h2 || h2.insertString(i2.string), this.requestRender(), null === (u2 = this.delegate) || void 0 === u2 || u2.inputControllerDidPaste(i2);
    } else if (r2) {
      var d2, g2, m2;
      i2.type = "text/html", i2.html = r2, null === (d2 = this.delegate) || void 0 === d2 || d2.inputControllerWillPaste(i2), null === (g2 = this.responder) || void 0 === g2 || g2.insertHTML(i2.html), this.requestRender(), null === (m2 = this.delegate) || void 0 === m2 || m2.inputControllerDidPaste(i2);
    } else if (Array.from(e2.types).includes("Files")) {
      var p2, f2;
      const t3 = null === (p2 = e2.items) || void 0 === p2 || null === (p2 = p2[0]) || void 0 === p2 || null === (f2 = p2.getAsFile) || void 0 === f2 ? void 0 : f2.call(p2);
      if (t3) {
        var b2, v2, A2;
        const e3 = Zi(t3);
        !t3.name && e3 && (t3.name = "pasted-file-".concat(++Yi, ".").concat(e3)), i2.type = "File", i2.file = t3, null === (b2 = this.delegate) || void 0 === b2 || b2.inputControllerWillAttachFiles(), null === (v2 = this.responder) || void 0 === v2 || v2.insertFile(i2.file), this.requestRender(), null === (A2 = this.delegate) || void 0 === A2 || A2.inputControllerDidPaste(i2);
      }
    }
    t2.preventDefault();
  }, compositionstart(t2) {
    return this.getCompositionInput().start(t2.data);
  }, compositionupdate(t2) {
    return this.getCompositionInput().update(t2.data);
  }, compositionend(t2) {
    return this.getCompositionInput().end(t2.data);
  }, beforeinput(t2) {
    this.inputSummary.didInput = true;
  }, input(t2) {
    return this.inputSummary.didInput = true, t2.stopPropagation();
  } }), Ae(Qi, "keys", { backspace(t2) {
    var e2;
    return null === (e2 = this.delegate) || void 0 === e2 || e2.inputControllerWillPerformTyping(), this.deleteInDirection("backward", t2);
  }, delete(t2) {
    var e2;
    return null === (e2 = this.delegate) || void 0 === e2 || e2.inputControllerWillPerformTyping(), this.deleteInDirection("forward", t2);
  }, return(t2) {
    var e2, i2;
    return this.setInputSummary({ preferDocument: true }), null === (e2 = this.delegate) || void 0 === e2 || e2.inputControllerWillPerformTyping(), null === (i2 = this.responder) || void 0 === i2 ? void 0 : i2.insertLineBreak();
  }, tab(t2) {
    var e2, i2;
    null !== (e2 = this.responder) && void 0 !== e2 && e2.canIncreaseNestingLevel() && (null === (i2 = this.responder) || void 0 === i2 || i2.increaseNestingLevel(), this.requestRender(), t2.preventDefault());
  }, left(t2) {
    var e2;
    if (this.selectionIsInCursorTarget())
      return t2.preventDefault(), null === (e2 = this.responder) || void 0 === e2 ? void 0 : e2.moveCursorInDirection("backward");
  }, right(t2) {
    var e2;
    if (this.selectionIsInCursorTarget())
      return t2.preventDefault(), null === (e2 = this.responder) || void 0 === e2 ? void 0 : e2.moveCursorInDirection("forward");
  }, control: { d(t2) {
    var e2;
    return null === (e2 = this.delegate) || void 0 === e2 || e2.inputControllerWillPerformTyping(), this.deleteInDirection("forward", t2);
  }, h(t2) {
    var e2;
    return null === (e2 = this.delegate) || void 0 === e2 || e2.inputControllerWillPerformTyping(), this.deleteInDirection("backward", t2);
  }, o(t2) {
    var e2, i2;
    return t2.preventDefault(), null === (e2 = this.delegate) || void 0 === e2 || e2.inputControllerWillPerformTyping(), null === (i2 = this.responder) || void 0 === i2 || i2.insertString("\n", { updatePosition: false }), this.requestRender();
  } }, shift: { return(t2) {
    var e2, i2;
    null === (e2 = this.delegate) || void 0 === e2 || e2.inputControllerWillPerformTyping(), null === (i2 = this.responder) || void 0 === i2 || i2.insertString("\n"), this.requestRender(), t2.preventDefault();
  }, tab(t2) {
    var e2, i2;
    null !== (e2 = this.responder) && void 0 !== e2 && e2.canDecreaseNestingLevel() && (null === (i2 = this.responder) || void 0 === i2 || i2.decreaseNestingLevel(), this.requestRender(), t2.preventDefault());
  }, left(t2) {
    if (this.selectionIsInCursorTarget())
      return t2.preventDefault(), this.expandSelectionInDirection("backward");
  }, right(t2) {
    if (this.selectionIsInCursorTarget())
      return t2.preventDefault(), this.expandSelectionInDirection("forward");
  } }, alt: { backspace(t2) {
    var e2;
    return this.setInputSummary({ preferDocument: false }), null === (e2 = this.delegate) || void 0 === e2 ? void 0 : e2.inputControllerWillPerformTyping();
  } }, meta: { backspace(t2) {
    var e2;
    return this.setInputSummary({ preferDocument: false }), null === (e2 = this.delegate) || void 0 === e2 ? void 0 : e2.inputControllerWillPerformTyping();
  } } }), Qi.proxyMethod("responder?.getSelectedRange"), Qi.proxyMethod("responder?.setSelectedRange"), Qi.proxyMethod("responder?.expandSelectionInDirection"), Qi.proxyMethod("responder?.selectionIsInCursorTarget"), Qi.proxyMethod("responder?.selectionIsExpanded");
  var Zi = (t2) => {
    var e2;
    return null === (e2 = t2.type) || void 0 === e2 || null === (e2 = e2.match(/\/(\w+)$/)) || void 0 === e2 ? void 0 : e2[1];
  };
  var tn = !(null === (Gi = " ".codePointAt) || void 0 === Gi || !Gi.call(" ", 0));
  var en = function(t2) {
    if (t2.key && tn && t2.key.codePointAt(0) === t2.keyCode)
      return t2.key;
    {
      let e2;
      if (null === t2.which ? e2 = t2.keyCode : 0 !== t2.which && 0 !== t2.charCode && (e2 = t2.charCode), null != e2 && "escape" !== Xi[e2])
        return X.fromCodepoints([e2]).toString();
    }
  };
  var nn = function(t2) {
    const e2 = t2.clipboardData;
    if (e2) {
      if (e2.types.includes("text/html")) {
        for (const t3 of e2.types) {
          const i2 = /^CorePasteboardFlavorType/.test(t3), n2 = /^dyn\./.test(t3) && e2.getData(t3);
          if (i2 || n2)
            return true;
        }
        return false;
      }
      {
        const t3 = e2.types.includes("com.apple.webarchive"), i2 = e2.types.includes("com.apple.flat-rtfd");
        return t3 || i2;
      }
    }
  };
  var rn = class extends z {
    constructor(t2) {
      super(...arguments), this.inputController = t2, this.responder = this.inputController.responder, this.delegate = this.inputController.delegate, this.inputSummary = this.inputController.inputSummary, this.data = {};
    }
    start(t2) {
      if (this.data.start = t2, this.isSignificant()) {
        var e2, i2;
        if ("keypress" === this.inputSummary.eventName && this.inputSummary.textAdded)
          null === (i2 = this.responder) || void 0 === i2 || i2.deleteInDirection("left");
        this.selectionIsExpanded() || (this.insertPlaceholder(), this.requestRender()), this.range = null === (e2 = this.responder) || void 0 === e2 ? void 0 : e2.getSelectedRange();
      }
    }
    update(t2) {
      if (this.data.update = t2, this.isSignificant()) {
        const t3 = this.selectPlaceholder();
        t3 && (this.forgetPlaceholder(), this.range = t3);
      }
    }
    end(t2) {
      return this.data.end = t2, this.isSignificant() ? (this.forgetPlaceholder(), this.canApplyToDocument() ? (this.setInputSummary({ preferDocument: true, didInput: false }), null === (e2 = this.delegate) || void 0 === e2 || e2.inputControllerWillPerformTyping(), null === (i2 = this.responder) || void 0 === i2 || i2.setSelectedRange(this.range), null === (n2 = this.responder) || void 0 === n2 || n2.insertString(this.data.end), null === (r2 = this.responder) || void 0 === r2 ? void 0 : r2.setSelectedRange(this.range[0] + this.data.end.length)) : null != this.data.start || null != this.data.update ? (this.requestReparse(), this.inputController.reset()) : void 0) : this.inputController.reset();
      var e2, i2, n2, r2;
    }
    getEndData() {
      return this.data.end;
    }
    isEnded() {
      return null != this.getEndData();
    }
    isSignificant() {
      return !$i.composesExistingText || this.inputSummary.didInput;
    }
    canApplyToDocument() {
      var t2, e2;
      return 0 === (null === (t2 = this.data.start) || void 0 === t2 ? void 0 : t2.length) && (null === (e2 = this.data.end) || void 0 === e2 ? void 0 : e2.length) > 0 && this.range;
    }
  };
  rn.proxyMethod("inputController.setInputSummary"), rn.proxyMethod("inputController.requestRender"), rn.proxyMethod("inputController.requestReparse"), rn.proxyMethod("responder?.selectionIsExpanded"), rn.proxyMethod("responder?.insertPlaceholder"), rn.proxyMethod("responder?.selectPlaceholder"), rn.proxyMethod("responder?.forgetPlaceholder");
  var on = class extends Ki {
    constructor() {
      super(...arguments), this.render = this.render.bind(this);
    }
    elementDidMutate() {
      return this.scheduledRender ? this.composing ? null === (t2 = this.delegate) || void 0 === t2 || null === (e2 = t2.inputControllerDidAllowUnhandledInput) || void 0 === e2 ? void 0 : e2.call(t2) : void 0 : this.reparse();
      var t2, e2;
    }
    scheduleRender() {
      return this.scheduledRender ? this.scheduledRender : this.scheduledRender = requestAnimationFrame(this.render);
    }
    render() {
      var t2, e2;
      (cancelAnimationFrame(this.scheduledRender), this.scheduledRender = null, this.composing) || (null === (e2 = this.delegate) || void 0 === e2 || e2.render());
      null === (t2 = this.afterRender) || void 0 === t2 || t2.call(this), this.afterRender = null;
    }
    reparse() {
      var t2;
      return null === (t2 = this.delegate) || void 0 === t2 ? void 0 : t2.reparse();
    }
    insertString() {
      var t2;
      let e2 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : "", i2 = arguments.length > 1 ? arguments[1] : void 0;
      return null === (t2 = this.delegate) || void 0 === t2 || t2.inputControllerWillPerformTyping(), this.withTargetDOMRange(function() {
        var t3;
        return null === (t3 = this.responder) || void 0 === t3 ? void 0 : t3.insertString(e2, i2);
      });
    }
    toggleAttributeIfSupported(t2) {
      var e2;
      if (dt().includes(t2))
        return null === (e2 = this.delegate) || void 0 === e2 || e2.inputControllerWillPerformFormatting(t2), this.withTargetDOMRange(function() {
          var e3;
          return null === (e3 = this.responder) || void 0 === e3 ? void 0 : e3.toggleCurrentAttribute(t2);
        });
    }
    activateAttributeIfSupported(t2, e2) {
      var i2;
      if (dt().includes(t2))
        return null === (i2 = this.delegate) || void 0 === i2 || i2.inputControllerWillPerformFormatting(t2), this.withTargetDOMRange(function() {
          var i3;
          return null === (i3 = this.responder) || void 0 === i3 ? void 0 : i3.setCurrentAttribute(t2, e2);
        });
    }
    deleteInDirection(t2) {
      let { recordUndoEntry: e2 } = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : { recordUndoEntry: true };
      var i2;
      e2 && (null === (i2 = this.delegate) || void 0 === i2 || i2.inputControllerWillPerformTyping());
      const n2 = () => {
        var e3;
        return null === (e3 = this.responder) || void 0 === e3 ? void 0 : e3.deleteInDirection(t2);
      }, r2 = this.getTargetDOMRange({ minLength: 2 });
      return r2 ? this.withTargetDOMRange(r2, n2) : n2();
    }
    withTargetDOMRange(t2, e2) {
      var i2;
      return "function" == typeof t2 && (e2 = t2, t2 = this.getTargetDOMRange()), t2 ? null === (i2 = this.responder) || void 0 === i2 ? void 0 : i2.withTargetDOMRange(t2, e2.bind(this)) : (It.reset(), e2.call(this));
    }
    getTargetDOMRange() {
      var t2, e2;
      let { minLength: i2 } = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : { minLength: 0 };
      const n2 = null === (t2 = (e2 = this.event).getTargetRanges) || void 0 === t2 ? void 0 : t2.call(e2);
      if (n2 && n2.length) {
        const t3 = sn(n2[0]);
        if (0 === i2 || t3.toString().length >= i2)
          return t3;
      }
    }
    withEvent(t2, e2) {
      let i2;
      this.event = t2;
      try {
        i2 = e2.call(this);
      } finally {
        this.event = null;
      }
      return i2;
    }
  };
  Ae(on, "events", { keydown(t2) {
    if (Rt(t2)) {
      var e2;
      const i2 = hn(t2);
      null !== (e2 = this.delegate) && void 0 !== e2 && e2.inputControllerDidReceiveKeyboardCommand(i2) && t2.preventDefault();
    } else {
      let e3 = t2.key;
      t2.altKey && (e3 += "+Alt"), t2.shiftKey && (e3 += "+Shift");
      const i2 = this.constructor.keys[e3];
      if (i2)
        return this.withEvent(t2, i2);
    }
  }, paste(t2) {
    var e2;
    let i2;
    const n2 = null === (e2 = t2.clipboardData) || void 0 === e2 ? void 0 : e2.getData("URL");
    return ln(t2) ? (t2.preventDefault(), this.attachFiles(t2.clipboardData.files)) : cn(t2) ? (t2.preventDefault(), i2 = { type: "text/plain", string: t2.clipboardData.getData("text/plain") }, null === (r2 = this.delegate) || void 0 === r2 || r2.inputControllerWillPaste(i2), null === (o2 = this.responder) || void 0 === o2 || o2.insertString(i2.string), this.render(), null === (s2 = this.delegate) || void 0 === s2 ? void 0 : s2.inputControllerDidPaste(i2)) : n2 ? (t2.preventDefault(), i2 = { type: "text/html", html: this.createLinkHTML(n2) }, null === (a2 = this.delegate) || void 0 === a2 || a2.inputControllerWillPaste(i2), null === (l2 = this.responder) || void 0 === l2 || l2.insertHTML(i2.html), this.render(), null === (c2 = this.delegate) || void 0 === c2 ? void 0 : c2.inputControllerDidPaste(i2)) : void 0;
    var r2, o2, s2, a2, l2, c2;
  }, beforeinput(t2) {
    const e2 = this.constructor.inputTypes[t2.inputType];
    e2 && (this.withEvent(t2, e2), this.scheduleRender());
  }, input(t2) {
    It.reset();
  }, dragstart(t2) {
    var e2, i2;
    null !== (e2 = this.responder) && void 0 !== e2 && e2.selectionContainsAttachments() && (t2.dataTransfer.setData("application/x-trix-dragging", true), this.dragging = { range: null === (i2 = this.responder) || void 0 === i2 ? void 0 : i2.getSelectedRange(), point: un(t2) });
  }, dragenter(t2) {
    an(t2) && t2.preventDefault();
  }, dragover(t2) {
    if (this.dragging) {
      t2.preventDefault();
      const i2 = un(t2);
      var e2;
      if (!kt(i2, this.dragging.point))
        return this.dragging.point = i2, null === (e2 = this.responder) || void 0 === e2 ? void 0 : e2.setLocationRangeFromPointRange(i2);
    } else
      an(t2) && t2.preventDefault();
  }, drop(t2) {
    var e2, i2;
    if (this.dragging)
      return t2.preventDefault(), null === (e2 = this.delegate) || void 0 === e2 || e2.inputControllerWillMoveText(), null === (i2 = this.responder) || void 0 === i2 || i2.moveTextFromRange(this.dragging.range), this.dragging = null, this.scheduleRender();
    if (an(t2)) {
      var n2;
      t2.preventDefault();
      const e3 = un(t2);
      return null === (n2 = this.responder) || void 0 === n2 || n2.setLocationRangeFromPointRange(e3), this.attachFiles(t2.dataTransfer.files);
    }
  }, dragend() {
    var t2;
    this.dragging && (null === (t2 = this.responder) || void 0 === t2 || t2.setSelectedRange(this.dragging.range), this.dragging = null);
  }, compositionend(t2) {
    this.composing && (this.composing = false, a.recentAndroid || this.scheduleRender());
  } }), Ae(on, "keys", { ArrowLeft() {
    var t2, e2;
    if (null !== (t2 = this.responder) && void 0 !== t2 && t2.shouldManageMovingCursorInDirection("backward"))
      return this.event.preventDefault(), null === (e2 = this.responder) || void 0 === e2 ? void 0 : e2.moveCursorInDirection("backward");
  }, ArrowRight() {
    var t2, e2;
    if (null !== (t2 = this.responder) && void 0 !== t2 && t2.shouldManageMovingCursorInDirection("forward"))
      return this.event.preventDefault(), null === (e2 = this.responder) || void 0 === e2 ? void 0 : e2.moveCursorInDirection("forward");
  }, Backspace() {
    var t2, e2, i2;
    if (null !== (t2 = this.responder) && void 0 !== t2 && t2.shouldManageDeletingInDirection("backward"))
      return this.event.preventDefault(), null === (e2 = this.delegate) || void 0 === e2 || e2.inputControllerWillPerformTyping(), null === (i2 = this.responder) || void 0 === i2 || i2.deleteInDirection("backward"), this.render();
  }, Tab() {
    var t2, e2;
    if (null !== (t2 = this.responder) && void 0 !== t2 && t2.canIncreaseNestingLevel())
      return this.event.preventDefault(), null === (e2 = this.responder) || void 0 === e2 || e2.increaseNestingLevel(), this.render();
  }, "Tab+Shift"() {
    var t2, e2;
    if (null !== (t2 = this.responder) && void 0 !== t2 && t2.canDecreaseNestingLevel())
      return this.event.preventDefault(), null === (e2 = this.responder) || void 0 === e2 || e2.decreaseNestingLevel(), this.render();
  } }), Ae(on, "inputTypes", { deleteByComposition() {
    return this.deleteInDirection("backward", { recordUndoEntry: false });
  }, deleteByCut() {
    return this.deleteInDirection("backward");
  }, deleteByDrag() {
    return this.event.preventDefault(), this.withTargetDOMRange(function() {
      var t2;
      this.deleteByDragRange = null === (t2 = this.responder) || void 0 === t2 ? void 0 : t2.getSelectedRange();
    });
  }, deleteCompositionText() {
    return this.deleteInDirection("backward", { recordUndoEntry: false });
  }, deleteContent() {
    return this.deleteInDirection("backward");
  }, deleteContentBackward() {
    return this.deleteInDirection("backward");
  }, deleteContentForward() {
    return this.deleteInDirection("forward");
  }, deleteEntireSoftLine() {
    return this.deleteInDirection("forward");
  }, deleteHardLineBackward() {
    return this.deleteInDirection("backward");
  }, deleteHardLineForward() {
    return this.deleteInDirection("forward");
  }, deleteSoftLineBackward() {
    return this.deleteInDirection("backward");
  }, deleteSoftLineForward() {
    return this.deleteInDirection("forward");
  }, deleteWordBackward() {
    return this.deleteInDirection("backward");
  }, deleteWordForward() {
    return this.deleteInDirection("forward");
  }, formatBackColor() {
    return this.activateAttributeIfSupported("backgroundColor", this.event.data);
  }, formatBold() {
    return this.toggleAttributeIfSupported("bold");
  }, formatFontColor() {
    return this.activateAttributeIfSupported("color", this.event.data);
  }, formatFontName() {
    return this.activateAttributeIfSupported("font", this.event.data);
  }, formatIndent() {
    var t2;
    if (null !== (t2 = this.responder) && void 0 !== t2 && t2.canIncreaseNestingLevel())
      return this.withTargetDOMRange(function() {
        var t3;
        return null === (t3 = this.responder) || void 0 === t3 ? void 0 : t3.increaseNestingLevel();
      });
  }, formatItalic() {
    return this.toggleAttributeIfSupported("italic");
  }, formatJustifyCenter() {
    return this.toggleAttributeIfSupported("justifyCenter");
  }, formatJustifyFull() {
    return this.toggleAttributeIfSupported("justifyFull");
  }, formatJustifyLeft() {
    return this.toggleAttributeIfSupported("justifyLeft");
  }, formatJustifyRight() {
    return this.toggleAttributeIfSupported("justifyRight");
  }, formatOutdent() {
    var t2;
    if (null !== (t2 = this.responder) && void 0 !== t2 && t2.canDecreaseNestingLevel())
      return this.withTargetDOMRange(function() {
        var t3;
        return null === (t3 = this.responder) || void 0 === t3 ? void 0 : t3.decreaseNestingLevel();
      });
  }, formatRemove() {
    this.withTargetDOMRange(function() {
      for (const i2 in null === (t2 = this.responder) || void 0 === t2 ? void 0 : t2.getCurrentAttributes()) {
        var t2, e2;
        null === (e2 = this.responder) || void 0 === e2 || e2.removeCurrentAttribute(i2);
      }
    });
  }, formatSetBlockTextDirection() {
    return this.activateAttributeIfSupported("blockDir", this.event.data);
  }, formatSetInlineTextDirection() {
    return this.activateAttributeIfSupported("textDir", this.event.data);
  }, formatStrikeThrough() {
    return this.toggleAttributeIfSupported("strike");
  }, formatSubscript() {
    return this.toggleAttributeIfSupported("sub");
  }, formatSuperscript() {
    return this.toggleAttributeIfSupported("sup");
  }, formatUnderline() {
    return this.toggleAttributeIfSupported("underline");
  }, historyRedo() {
    var t2;
    return null === (t2 = this.delegate) || void 0 === t2 ? void 0 : t2.inputControllerWillPerformRedo();
  }, historyUndo() {
    var t2;
    return null === (t2 = this.delegate) || void 0 === t2 ? void 0 : t2.inputControllerWillPerformUndo();
  }, insertCompositionText() {
    return this.composing = true, this.insertString(this.event.data);
  }, insertFromComposition() {
    return this.composing = false, this.insertString(this.event.data);
  }, insertFromDrop() {
    const t2 = this.deleteByDragRange;
    var e2;
    if (t2)
      return this.deleteByDragRange = null, null === (e2 = this.delegate) || void 0 === e2 || e2.inputControllerWillMoveText(), this.withTargetDOMRange(function() {
        var e3;
        return null === (e3 = this.responder) || void 0 === e3 ? void 0 : e3.moveTextFromRange(t2);
      });
  }, insertFromPaste() {
    var t2;
    const { dataTransfer: e2 } = this.event, i2 = { dataTransfer: e2 }, n2 = e2.getData("URL"), r2 = e2.getData("text/html");
    if (n2) {
      var o2;
      let t3;
      this.event.preventDefault(), i2.type = "text/html";
      const r3 = e2.getData("public.url-name");
      t3 = r3 ? qt(r3).trim() : n2, i2.html = this.createLinkHTML(n2, t3), null === (o2 = this.delegate) || void 0 === o2 || o2.inputControllerWillPaste(i2), this.withTargetDOMRange(function() {
        var t4;
        return null === (t4 = this.responder) || void 0 === t4 ? void 0 : t4.insertHTML(i2.html);
      }), this.afterRender = () => {
        var t4;
        return null === (t4 = this.delegate) || void 0 === t4 ? void 0 : t4.inputControllerDidPaste(i2);
      };
    } else if (Ct(e2)) {
      var s2;
      i2.type = "text/plain", i2.string = e2.getData("text/plain"), null === (s2 = this.delegate) || void 0 === s2 || s2.inputControllerWillPaste(i2), this.withTargetDOMRange(function() {
        var t3;
        return null === (t3 = this.responder) || void 0 === t3 ? void 0 : t3.insertString(i2.string);
      }), this.afterRender = () => {
        var t3;
        return null === (t3 = this.delegate) || void 0 === t3 ? void 0 : t3.inputControllerDidPaste(i2);
      };
    } else if (r2) {
      var a2;
      this.event.preventDefault(), i2.type = "text/html", i2.html = r2, null === (a2 = this.delegate) || void 0 === a2 || a2.inputControllerWillPaste(i2), this.withTargetDOMRange(function() {
        var t3;
        return null === (t3 = this.responder) || void 0 === t3 ? void 0 : t3.insertHTML(i2.html);
      }), this.afterRender = () => {
        var t3;
        return null === (t3 = this.delegate) || void 0 === t3 ? void 0 : t3.inputControllerDidPaste(i2);
      };
    } else if (null !== (t2 = e2.files) && void 0 !== t2 && t2.length) {
      var l2;
      i2.type = "File", i2.file = e2.files[0], null === (l2 = this.delegate) || void 0 === l2 || l2.inputControllerWillPaste(i2), this.withTargetDOMRange(function() {
        var t3;
        return null === (t3 = this.responder) || void 0 === t3 ? void 0 : t3.insertFile(i2.file);
      }), this.afterRender = () => {
        var t3;
        return null === (t3 = this.delegate) || void 0 === t3 ? void 0 : t3.inputControllerDidPaste(i2);
      };
    }
  }, insertFromYank() {
    return this.insertString(this.event.data);
  }, insertLineBreak() {
    return this.insertString("\n");
  }, insertLink() {
    return this.activateAttributeIfSupported("href", this.event.data);
  }, insertOrderedList() {
    return this.toggleAttributeIfSupported("number");
  }, insertParagraph() {
    var t2;
    return null === (t2 = this.delegate) || void 0 === t2 || t2.inputControllerWillPerformTyping(), this.withTargetDOMRange(function() {
      var t3;
      return null === (t3 = this.responder) || void 0 === t3 ? void 0 : t3.insertLineBreak();
    });
  }, insertReplacementText() {
    this.insertString(this.event.dataTransfer.getData("text/plain"), { updatePosition: false }), this.requestRender();
  }, insertText() {
    var t2;
    return this.insertString(this.event.data || (null === (t2 = this.event.dataTransfer) || void 0 === t2 ? void 0 : t2.getData("text/plain")));
  }, insertTranspose() {
    return this.insertString(this.event.data);
  }, insertUnorderedList() {
    return this.toggleAttributeIfSupported("bullet");
  } });
  var sn = function(t2) {
    const e2 = document.createRange();
    return e2.setStart(t2.startContainer, t2.startOffset), e2.setEnd(t2.endContainer, t2.endOffset), e2;
  };
  var an = (t2) => {
    var e2;
    return Array.from((null === (e2 = t2.dataTransfer) || void 0 === e2 ? void 0 : e2.types) || []).includes("Files");
  };
  var ln = function(t2) {
    const e2 = t2.clipboardData;
    if (e2)
      return e2.types.includes("Files") && 1 === e2.types.length && e2.files.length >= 1;
  };
  var cn = function(t2) {
    const e2 = t2.clipboardData;
    if (e2)
      return e2.types.includes("text/plain") && 1 === e2.types.length;
  };
  var hn = function(t2) {
    const e2 = [];
    return t2.altKey && e2.push("alt"), t2.shiftKey && e2.push("shift"), e2.push(t2.key), e2;
  };
  var un = (t2) => ({ x: t2.clientX, y: t2.clientY });
  var dn = "[data-trix-attribute]";
  var gn = "[data-trix-action]";
  var mn = "".concat(dn, ", ").concat(gn);
  var pn = "[data-trix-dialog]";
  var fn = "".concat(pn, "[data-trix-active]");
  var bn = "".concat(pn, " [data-trix-method]");
  var vn = "".concat(pn, " [data-trix-input]");
  var An = (t2, e2) => (e2 || (e2 = yn(t2)), t2.querySelector("[data-trix-input][name='".concat(e2, "']")));
  var xn = (t2) => t2.getAttribute("data-trix-action");
  var yn = (t2) => t2.getAttribute("data-trix-attribute") || t2.getAttribute("data-trix-dialog-attribute");
  var Cn = class extends z {
    constructor(t2) {
      super(t2), this.didClickActionButton = this.didClickActionButton.bind(this), this.didClickAttributeButton = this.didClickAttributeButton.bind(this), this.didClickDialogButton = this.didClickDialogButton.bind(this), this.didKeyDownDialogInput = this.didKeyDownDialogInput.bind(this), this.element = t2, this.attributes = {}, this.actions = {}, this.resetDialogInputs(), f("mousedown", { onElement: this.element, matchingSelector: gn, withCallback: this.didClickActionButton }), f("mousedown", { onElement: this.element, matchingSelector: dn, withCallback: this.didClickAttributeButton }), f("click", { onElement: this.element, matchingSelector: mn, preventDefault: true }), f("click", { onElement: this.element, matchingSelector: bn, withCallback: this.didClickDialogButton }), f("keydown", { onElement: this.element, matchingSelector: vn, withCallback: this.didKeyDownDialogInput });
    }
    didClickActionButton(t2, e2) {
      var i2;
      null === (i2 = this.delegate) || void 0 === i2 || i2.toolbarDidClickButton(), t2.preventDefault();
      const n2 = xn(e2);
      return this.getDialog(n2) ? this.toggleDialog(n2) : null === (r2 = this.delegate) || void 0 === r2 ? void 0 : r2.toolbarDidInvokeAction(n2, e2);
      var r2;
    }
    didClickAttributeButton(t2, e2) {
      var i2;
      null === (i2 = this.delegate) || void 0 === i2 || i2.toolbarDidClickButton(), t2.preventDefault();
      const n2 = yn(e2);
      var r2;
      this.getDialog(n2) ? this.toggleDialog(n2) : null === (r2 = this.delegate) || void 0 === r2 || r2.toolbarDidToggleAttribute(n2);
      return this.refreshAttributeButtons();
    }
    didClickDialogButton(t2, e2) {
      const i2 = A(e2, { matchingSelector: pn });
      return this[e2.getAttribute("data-trix-method")].call(this, i2);
    }
    didKeyDownDialogInput(t2, e2) {
      if (13 === t2.keyCode) {
        t2.preventDefault();
        const i2 = e2.getAttribute("name"), n2 = this.getDialog(i2);
        this.setAttribute(n2);
      }
      if (27 === t2.keyCode)
        return t2.preventDefault(), this.hideDialog();
    }
    updateActions(t2) {
      return this.actions = t2, this.refreshActionButtons();
    }
    refreshActionButtons() {
      return this.eachActionButton((t2, e2) => {
        t2.disabled = false === this.actions[e2];
      });
    }
    eachActionButton(t2) {
      return Array.from(this.element.querySelectorAll(gn)).map((e2) => t2(e2, xn(e2)));
    }
    updateAttributes(t2) {
      return this.attributes = t2, this.refreshAttributeButtons();
    }
    refreshAttributeButtons() {
      return this.eachAttributeButton((t2, e2) => (t2.disabled = false === this.attributes[e2], this.attributes[e2] || this.dialogIsVisible(e2) ? (t2.setAttribute("data-trix-active", ""), t2.classList.add("trix-active")) : (t2.removeAttribute("data-trix-active"), t2.classList.remove("trix-active"))));
    }
    eachAttributeButton(t2) {
      return Array.from(this.element.querySelectorAll(dn)).map((e2) => t2(e2, yn(e2)));
    }
    applyKeyboardCommand(t2) {
      const e2 = JSON.stringify(t2.sort());
      for (const t3 of Array.from(this.element.querySelectorAll("[data-trix-key]"))) {
        const i2 = t3.getAttribute("data-trix-key").split("+");
        if (JSON.stringify(i2.sort()) === e2)
          return b("mousedown", { onElement: t3 }), true;
      }
      return false;
    }
    dialogIsVisible(t2) {
      const e2 = this.getDialog(t2);
      if (e2)
        return e2.hasAttribute("data-trix-active");
    }
    toggleDialog(t2) {
      return this.dialogIsVisible(t2) ? this.hideDialog() : this.showDialog(t2);
    }
    showDialog(t2) {
      var e2, i2;
      this.hideDialog(), null === (e2 = this.delegate) || void 0 === e2 || e2.toolbarWillShowDialog();
      const n2 = this.getDialog(t2);
      n2.setAttribute("data-trix-active", ""), n2.classList.add("trix-active"), Array.from(n2.querySelectorAll("input[disabled]")).forEach((t3) => {
        t3.removeAttribute("disabled");
      });
      const r2 = yn(n2);
      if (r2) {
        const e3 = An(n2, t2);
        e3 && (e3.value = this.attributes[r2] || "", e3.select());
      }
      return null === (i2 = this.delegate) || void 0 === i2 ? void 0 : i2.toolbarDidShowDialog(t2);
    }
    setAttribute(t2) {
      const e2 = yn(t2), i2 = An(t2, e2);
      return i2.willValidate && !i2.checkValidity() ? (i2.setAttribute("data-trix-validate", ""), i2.classList.add("trix-validate"), i2.focus()) : (null === (n2 = this.delegate) || void 0 === n2 || n2.toolbarDidUpdateAttribute(e2, i2.value), this.hideDialog());
      var n2;
    }
    removeAttribute(t2) {
      var e2;
      const i2 = yn(t2);
      return null === (e2 = this.delegate) || void 0 === e2 || e2.toolbarDidRemoveAttribute(i2), this.hideDialog();
    }
    hideDialog() {
      const t2 = this.element.querySelector(fn);
      var e2;
      if (t2)
        return t2.removeAttribute("data-trix-active"), t2.classList.remove("trix-active"), this.resetDialogInputs(), null === (e2 = this.delegate) || void 0 === e2 ? void 0 : e2.toolbarDidHideDialog(((t3) => t3.getAttribute("data-trix-dialog"))(t2));
    }
    resetDialogInputs() {
      Array.from(this.element.querySelectorAll(vn)).forEach((t2) => {
        t2.setAttribute("disabled", "disabled"), t2.removeAttribute("data-trix-validate"), t2.classList.remove("trix-validate");
      });
    }
    getDialog(t2) {
      return this.element.querySelector("[data-trix-dialog=".concat(t2, "]"));
    }
  };
  var Rn = class extends Oi {
    constructor(t2) {
      let { editorElement: e2, document: i2, html: n2 } = t2;
      super(...arguments), this.editorElement = e2, this.selectionManager = new Li(this.editorElement), this.selectionManager.delegate = this, this.composition = new gi(), this.composition.delegate = this, this.attachmentManager = new ui(this.composition.getAttachments()), this.attachmentManager.delegate = this, this.inputController = 2 === M.getLevel() ? new on(this.editorElement) : new Qi(this.editorElement), this.inputController.delegate = this, this.inputController.responder = this.composition, this.compositionController = new Ni(this.editorElement, this.composition), this.compositionController.delegate = this, this.toolbarController = new Cn(this.editorElement.toolbarElement), this.toolbarController.delegate = this, this.editor = new xi(this.composition, this.selectionManager, this.editorElement), i2 ? this.editor.loadDocument(i2) : this.editor.loadHTML(n2);
    }
    registerSelectionManager() {
      return It.registerSelectionManager(this.selectionManager);
    }
    unregisterSelectionManager() {
      return It.unregisterSelectionManager(this.selectionManager);
    }
    render() {
      return this.compositionController.render();
    }
    reparse() {
      return this.composition.replaceHTML(this.editorElement.innerHTML);
    }
    compositionDidChangeDocument(t2) {
      if (this.notifyEditorElement("document-change"), !this.handlingInput)
        return this.render();
    }
    compositionDidChangeCurrentAttributes(t2) {
      return this.currentAttributes = t2, this.toolbarController.updateAttributes(this.currentAttributes), this.updateCurrentActions(), this.notifyEditorElement("attributes-change", { attributes: this.currentAttributes });
    }
    compositionDidPerformInsertionAtRange(t2) {
      this.pasting && (this.pastedRange = t2);
    }
    compositionShouldAcceptFile(t2) {
      return this.notifyEditorElement("file-accept", { file: t2 });
    }
    compositionDidAddAttachment(t2) {
      const e2 = this.attachmentManager.manageAttachment(t2);
      return this.notifyEditorElement("attachment-add", { attachment: e2 });
    }
    compositionDidEditAttachment(t2) {
      this.compositionController.rerenderViewForObject(t2);
      const e2 = this.attachmentManager.manageAttachment(t2);
      return this.notifyEditorElement("attachment-edit", { attachment: e2 }), this.notifyEditorElement("change");
    }
    compositionDidChangeAttachmentPreviewURL(t2) {
      return this.compositionController.invalidateViewForObject(t2), this.notifyEditorElement("change");
    }
    compositionDidRemoveAttachment(t2) {
      const e2 = this.attachmentManager.unmanageAttachment(t2);
      return this.notifyEditorElement("attachment-remove", { attachment: e2 });
    }
    compositionDidStartEditingAttachment(t2, e2) {
      return this.attachmentLocationRange = this.composition.document.getLocationRangeOfAttachment(t2), this.compositionController.installAttachmentEditorForAttachment(t2, e2), this.selectionManager.setLocationRange(this.attachmentLocationRange);
    }
    compositionDidStopEditingAttachment(t2) {
      this.compositionController.uninstallAttachmentEditor(), this.attachmentLocationRange = null;
    }
    compositionDidRequestChangingSelectionToLocationRange(t2) {
      if (!this.loadingSnapshot || this.isFocused())
        return this.requestedLocationRange = t2, this.compositionRevisionWhenLocationRangeRequested = this.composition.revision, this.handlingInput ? void 0 : this.render();
    }
    compositionWillLoadSnapshot() {
      this.loadingSnapshot = true;
    }
    compositionDidLoadSnapshot() {
      this.compositionController.refreshViewCache(), this.render(), this.loadingSnapshot = false;
    }
    getSelectionManager() {
      return this.selectionManager;
    }
    attachmentManagerDidRequestRemovalOfAttachment(t2) {
      return this.removeAttachment(t2);
    }
    compositionControllerWillSyncDocumentView() {
      return this.inputController.editorWillSyncDocumentView(), this.selectionManager.lock(), this.selectionManager.clearSelection();
    }
    compositionControllerDidSyncDocumentView() {
      return this.inputController.editorDidSyncDocumentView(), this.selectionManager.unlock(), this.updateCurrentActions(), this.notifyEditorElement("sync");
    }
    compositionControllerDidRender() {
      this.requestedLocationRange && (this.compositionRevisionWhenLocationRangeRequested === this.composition.revision && this.selectionManager.setLocationRange(this.requestedLocationRange), this.requestedLocationRange = null, this.compositionRevisionWhenLocationRangeRequested = null), this.renderedCompositionRevision !== this.composition.revision && (this.runEditorFilters(), this.composition.updateCurrentAttributes(), this.notifyEditorElement("render")), this.renderedCompositionRevision = this.composition.revision;
    }
    compositionControllerDidFocus() {
      return this.isFocusedInvisibly() && this.setLocationRange({ index: 0, offset: 0 }), this.toolbarController.hideDialog(), this.notifyEditorElement("focus");
    }
    compositionControllerDidBlur() {
      return this.notifyEditorElement("blur");
    }
    compositionControllerDidSelectAttachment(t2, e2) {
      return this.toolbarController.hideDialog(), this.composition.editAttachment(t2, e2);
    }
    compositionControllerDidRequestDeselectingAttachment(t2) {
      const e2 = this.attachmentLocationRange || this.composition.document.getLocationRangeOfAttachment(t2);
      return this.selectionManager.setLocationRange(e2[1]);
    }
    compositionControllerWillUpdateAttachment(t2) {
      return this.editor.recordUndoEntry("Edit Attachment", { context: t2.id, consolidatable: true });
    }
    compositionControllerDidRequestRemovalOfAttachment(t2) {
      return this.removeAttachment(t2);
    }
    inputControllerWillHandleInput() {
      this.handlingInput = true, this.requestedRender = false;
    }
    inputControllerDidRequestRender() {
      this.requestedRender = true;
    }
    inputControllerDidHandleInput() {
      if (this.handlingInput = false, this.requestedRender)
        return this.requestedRender = false, this.render();
    }
    inputControllerDidAllowUnhandledInput() {
      return this.notifyEditorElement("change");
    }
    inputControllerDidRequestReparse() {
      return this.reparse();
    }
    inputControllerWillPerformTyping() {
      return this.recordTypingUndoEntry();
    }
    inputControllerWillPerformFormatting(t2) {
      return this.recordFormattingUndoEntry(t2);
    }
    inputControllerWillCutText() {
      return this.editor.recordUndoEntry("Cut");
    }
    inputControllerWillPaste(t2) {
      return this.editor.recordUndoEntry("Paste"), this.pasting = true, this.notifyEditorElement("before-paste", { paste: t2 });
    }
    inputControllerDidPaste(t2) {
      return t2.range = this.pastedRange, this.pastedRange = null, this.pasting = null, this.notifyEditorElement("paste", { paste: t2 });
    }
    inputControllerWillMoveText() {
      return this.editor.recordUndoEntry("Move");
    }
    inputControllerWillAttachFiles() {
      return this.editor.recordUndoEntry("Drop Files");
    }
    inputControllerWillPerformUndo() {
      return this.editor.undo();
    }
    inputControllerWillPerformRedo() {
      return this.editor.redo();
    }
    inputControllerDidReceiveKeyboardCommand(t2) {
      return this.toolbarController.applyKeyboardCommand(t2);
    }
    inputControllerDidStartDrag() {
      this.locationRangeBeforeDrag = this.selectionManager.getLocationRange();
    }
    inputControllerDidReceiveDragOverPoint(t2) {
      return this.selectionManager.setLocationRangeFromPointRange(t2);
    }
    inputControllerDidCancelDrag() {
      this.selectionManager.setLocationRange(this.locationRangeBeforeDrag), this.locationRangeBeforeDrag = null;
    }
    locationRangeDidChange(t2) {
      return this.composition.updateCurrentAttributes(), this.updateCurrentActions(), this.attachmentLocationRange && !wt(this.attachmentLocationRange, t2) && this.composition.stopEditingAttachment(), this.notifyEditorElement("selection-change");
    }
    toolbarDidClickButton() {
      if (!this.getLocationRange())
        return this.setLocationRange({ index: 0, offset: 0 });
    }
    toolbarDidInvokeAction(t2, e2) {
      return this.invokeAction(t2, e2);
    }
    toolbarDidToggleAttribute(t2) {
      if (this.recordFormattingUndoEntry(t2), this.composition.toggleCurrentAttribute(t2), this.render(), !this.selectionFrozen)
        return this.editorElement.focus();
    }
    toolbarDidUpdateAttribute(t2, e2) {
      if (this.recordFormattingUndoEntry(t2), this.composition.setCurrentAttribute(t2, e2), this.render(), !this.selectionFrozen)
        return this.editorElement.focus();
    }
    toolbarDidRemoveAttribute(t2) {
      if (this.recordFormattingUndoEntry(t2), this.composition.removeCurrentAttribute(t2), this.render(), !this.selectionFrozen)
        return this.editorElement.focus();
    }
    toolbarWillShowDialog(t2) {
      return this.composition.expandSelectionForEditing(), this.freezeSelection();
    }
    toolbarDidShowDialog(t2) {
      return this.notifyEditorElement("toolbar-dialog-show", { dialogName: t2 });
    }
    toolbarDidHideDialog(t2) {
      return this.thawSelection(), this.editorElement.focus(), this.notifyEditorElement("toolbar-dialog-hide", { dialogName: t2 });
    }
    freezeSelection() {
      if (!this.selectionFrozen)
        return this.selectionManager.lock(), this.composition.freezeSelection(), this.selectionFrozen = true, this.render();
    }
    thawSelection() {
      if (this.selectionFrozen)
        return this.composition.thawSelection(), this.selectionManager.unlock(), this.selectionFrozen = false, this.render();
    }
    canInvokeAction(t2) {
      return !!this.actionIsExternal(t2) || !(null === (e2 = this.actions[t2]) || void 0 === e2 || null === (e2 = e2.test) || void 0 === e2 || !e2.call(this));
      var e2;
    }
    invokeAction(t2, e2) {
      return this.actionIsExternal(t2) ? this.notifyEditorElement("action-invoke", { actionName: t2, invokingElement: e2 }) : null === (i2 = this.actions[t2]) || void 0 === i2 || null === (i2 = i2.perform) || void 0 === i2 ? void 0 : i2.call(this);
      var i2;
    }
    actionIsExternal(t2) {
      return /^x-./.test(t2);
    }
    getCurrentActions() {
      const t2 = {};
      for (const e2 in this.actions)
        t2[e2] = this.canInvokeAction(e2);
      return t2;
    }
    updateCurrentActions() {
      const t2 = this.getCurrentActions();
      if (!kt(t2, this.currentActions))
        return this.currentActions = t2, this.toolbarController.updateActions(this.currentActions), this.notifyEditorElement("actions-change", { actions: this.currentActions });
    }
    runEditorFilters() {
      let t2 = this.composition.getSnapshot();
      if (Array.from(this.editor.filters).forEach((e3) => {
        const { document: i3, selectedRange: n2 } = t2;
        t2 = e3.call(this.editor, t2) || {}, t2.document || (t2.document = i3), t2.selectedRange || (t2.selectedRange = n2);
      }), e2 = t2, i2 = this.composition.getSnapshot(), !wt(e2.selectedRange, i2.selectedRange) || !e2.document.isEqualTo(i2.document))
        return this.composition.loadSnapshot(t2);
      var e2, i2;
    }
    updateInputElement() {
      const t2 = function(t3, e2) {
        const i2 = li[e2];
        if (i2)
          return i2(t3);
        throw new Error("unknown content type: ".concat(e2));
      }(this.compositionController.getSerializableElement(), "text/html");
      return this.editorElement.setInputElementValue(t2);
    }
    notifyEditorElement(t2, e2) {
      switch (t2) {
        case "document-change":
          this.documentChangedSinceLastRender = true;
          break;
        case "render":
          this.documentChangedSinceLastRender && (this.documentChangedSinceLastRender = false, this.notifyEditorElement("change"));
          break;
        case "change":
        case "attachment-add":
        case "attachment-edit":
        case "attachment-remove":
          this.updateInputElement();
      }
      return this.editorElement.notify(t2, e2);
    }
    removeAttachment(t2) {
      return this.editor.recordUndoEntry("Delete Attachment"), this.composition.removeAttachment(t2), this.render();
    }
    recordFormattingUndoEntry(t2) {
      const e2 = gt(t2), i2 = this.selectionManager.getLocationRange();
      if (e2 || !Dt(i2))
        return this.editor.recordUndoEntry("Formatting", { context: this.getUndoContext(), consolidatable: true });
    }
    recordTypingUndoEntry() {
      return this.editor.recordUndoEntry("Typing", { context: this.getUndoContext(this.currentAttributes), consolidatable: true });
    }
    getUndoContext() {
      for (var t2 = arguments.length, e2 = new Array(t2), i2 = 0; i2 < t2; i2++)
        e2[i2] = arguments[i2];
      return [this.getLocationContext(), this.getTimeContext(), ...Array.from(e2)];
    }
    getLocationContext() {
      const t2 = this.selectionManager.getLocationRange();
      return Dt(t2) ? t2[0].index : t2;
    }
    getTimeContext() {
      return q.interval > 0 ? Math.floor((/* @__PURE__ */ new Date()).getTime() / q.interval) : 0;
    }
    isFocused() {
      var t2;
      return this.editorElement === (null === (t2 = this.editorElement.ownerDocument) || void 0 === t2 ? void 0 : t2.activeElement);
    }
    isFocusedInvisibly() {
      return this.isFocused() && !this.getLocationRange();
    }
    get actions() {
      return this.constructor.actions;
    }
  };
  Ae(Rn, "actions", { undo: { test() {
    return this.editor.canUndo();
  }, perform() {
    return this.editor.undo();
  } }, redo: { test() {
    return this.editor.canRedo();
  }, perform() {
    return this.editor.redo();
  } }, link: { test() {
    return this.editor.canActivateAttribute("href");
  } }, increaseNestingLevel: { test() {
    return this.editor.canIncreaseNestingLevel();
  }, perform() {
    return this.editor.increaseNestingLevel() && this.render();
  } }, decreaseNestingLevel: { test() {
    return this.editor.canDecreaseNestingLevel();
  }, perform() {
    return this.editor.decreaseNestingLevel() && this.render();
  } }, attachFiles: { test: () => true, perform() {
    return M.pickFiles(this.editor.insertFiles);
  } } }), Rn.proxyMethod("getSelectionManager().setLocationRange"), Rn.proxyMethod("getSelectionManager().getLocationRange");
  var Sn = Object.freeze({ __proto__: null, AttachmentEditorController: Pi, CompositionController: Ni, Controller: Oi, EditorController: Rn, InputController: Ki, Level0InputController: Qi, Level2InputController: on, ToolbarController: Cn });
  var En = Object.freeze({ __proto__: null, MutationObserver: Ui, SelectionChangeObserver: Ft });
  var kn = Object.freeze({ __proto__: null, FileVerificationOperation: Vi, ImagePreloadOperation: Ce });
  bt("trix-toolbar", "%t {\n  display: block;\n}\n\n%t {\n  white-space: nowrap;\n}\n\n%t [data-trix-dialog] {\n  display: none;\n}\n\n%t [data-trix-dialog][data-trix-active] {\n  display: block;\n}\n\n%t [data-trix-dialog] [data-trix-validate]:invalid {\n  background-color: #ffdddd;\n}");
  var Ln = class extends HTMLElement {
    connectedCallback() {
      "" === this.innerHTML && (this.innerHTML = U.getDefaultHTML());
    }
  };
  var Dn = 0;
  var wn = function(t2) {
    if (!t2.hasAttribute("contenteditable"))
      return t2.setAttribute("contenteditable", ""), function(t3) {
        let e2 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
        return e2.times = 1, f(t3, e2);
      }("focus", { onElement: t2, withCallback: () => Tn(t2) });
  };
  var Tn = function(t2) {
    return Bn(t2), Fn(t2);
  };
  var Bn = function(t2) {
    var e2, i2;
    if (null !== (e2 = (i2 = document).queryCommandSupported) && void 0 !== e2 && e2.call(i2, "enableObjectResizing"))
      return document.execCommand("enableObjectResizing", false, false), f("mscontrolselect", { onElement: t2, preventDefault: true });
  };
  var Fn = function(t2) {
    var e2, i2;
    if (null !== (e2 = (i2 = document).queryCommandSupported) && void 0 !== e2 && e2.call(i2, "DefaultParagraphSeparator")) {
      const { tagName: t3 } = n.default;
      if (["div", "p"].includes(t3))
        return document.execCommand("DefaultParagraphSeparator", false, t3);
    }
  };
  var In = a.forcesObjectResizing ? { display: "inline", width: "auto" } : { display: "inline-block", width: "1px" };
  bt("trix-editor", "%t {\n    display: block;\n}\n\n%t:empty:not(:focus)::before {\n    content: attr(placeholder);\n    color: graytext;\n    cursor: text;\n    pointer-events: none;\n    white-space: pre-line;\n}\n\n%t a[contenteditable=false] {\n    cursor: text;\n}\n\n%t img {\n    max-width: 100%;\n    height: auto;\n}\n\n%t ".concat(e, " figcaption textarea {\n    resize: none;\n}\n\n%t ").concat(e, " figcaption textarea.trix-autoresize-clone {\n    position: absolute;\n    left: -9999px;\n    max-height: 0px;\n}\n\n%t ").concat(e, " figcaption[data-trix-placeholder]:empty::before {\n    content: attr(data-trix-placeholder);\n    color: graytext;\n}\n\n%t [data-trix-cursor-target] {\n    display: ").concat(In.display, " !important;\n    width: ").concat(In.width, " !important;\n    padding: 0 !important;\n    margin: 0 !important;\n    border: none !important;\n}\n\n%t [data-trix-cursor-target=left] {\n    vertical-align: top !important;\n    margin-left: -1px !important;\n}\n\n%t [data-trix-cursor-target=right] {\n    vertical-align: bottom !important;\n    margin-right: -1px !important;\n}"));
  var Pn = class extends HTMLElement {
    get trixId() {
      return this.hasAttribute("trix-id") ? this.getAttribute("trix-id") : (this.setAttribute("trix-id", ++Dn), this.trixId);
    }
    get labels() {
      const t2 = [];
      this.id && this.ownerDocument && t2.push(...Array.from(this.ownerDocument.querySelectorAll("label[for='".concat(this.id, "']")) || []));
      const e2 = A(this, { matchingSelector: "label" });
      return e2 && [this, null].includes(e2.control) && t2.push(e2), t2;
    }
    get toolbarElement() {
      var t2;
      if (this.hasAttribute("toolbar"))
        return null === (t2 = this.ownerDocument) || void 0 === t2 ? void 0 : t2.getElementById(this.getAttribute("toolbar"));
      if (this.parentNode) {
        const t3 = "trix-toolbar-".concat(this.trixId);
        this.setAttribute("toolbar", t3);
        const e2 = k("trix-toolbar", { id: t3 });
        return this.parentNode.insertBefore(e2, this), e2;
      }
    }
    get form() {
      var t2;
      return null === (t2 = this.inputElement) || void 0 === t2 ? void 0 : t2.form;
    }
    get inputElement() {
      var t2;
      if (this.hasAttribute("input"))
        return null === (t2 = this.ownerDocument) || void 0 === t2 ? void 0 : t2.getElementById(this.getAttribute("input"));
      if (this.parentNode) {
        const t3 = "trix-input-".concat(this.trixId);
        this.setAttribute("input", t3);
        const e2 = k("input", { type: "hidden", id: t3 });
        return this.parentNode.insertBefore(e2, this.nextElementSibling), e2;
      }
    }
    get editor() {
      var t2;
      return null === (t2 = this.editorController) || void 0 === t2 ? void 0 : t2.editor;
    }
    get name() {
      var t2;
      return null === (t2 = this.inputElement) || void 0 === t2 ? void 0 : t2.name;
    }
    get value() {
      var t2;
      return null === (t2 = this.inputElement) || void 0 === t2 ? void 0 : t2.value;
    }
    set value(t2) {
      var e2;
      this.defaultValue = t2, null === (e2 = this.editor) || void 0 === e2 || e2.loadHTML(this.defaultValue);
    }
    notify(t2, e2) {
      if (this.editorController)
        return b("trix-".concat(t2), { onElement: this, attributes: e2 });
    }
    setInputElementValue(t2) {
      this.inputElement && (this.inputElement.value = t2);
    }
    connectedCallback() {
      this.hasAttribute("data-trix-internal") || (wn(this), function(t2) {
        if (!t2.hasAttribute("role"))
          t2.setAttribute("role", "textbox");
      }(this), function(t2) {
        if (t2.hasAttribute("aria-label") || t2.hasAttribute("aria-labelledby"))
          return;
        const e2 = function() {
          const e3 = Array.from(t2.labels).map((e4) => {
            if (!e4.contains(t2))
              return e4.textContent;
          }).filter((t3) => t3), i2 = e3.join(" ");
          return i2 ? t2.setAttribute("aria-label", i2) : t2.removeAttribute("aria-label");
        };
        e2(), f("focus", { onElement: t2, withCallback: e2 });
      }(this), this.editorController || (b("trix-before-initialize", { onElement: this }), this.editorController = new Rn({ editorElement: this, html: this.defaultValue = this.value }), requestAnimationFrame(() => b("trix-initialize", { onElement: this }))), this.editorController.registerSelectionManager(), this.registerResetListener(), this.registerClickListener(), function(t2) {
        if (!document.querySelector(":focus") && t2.hasAttribute("autofocus") && document.querySelector("[autofocus]") === t2)
          t2.focus();
      }(this));
    }
    disconnectedCallback() {
      var t2;
      return null === (t2 = this.editorController) || void 0 === t2 || t2.unregisterSelectionManager(), this.unregisterResetListener(), this.unregisterClickListener();
    }
    registerResetListener() {
      return this.resetListener = this.resetBubbled.bind(this), window.addEventListener("reset", this.resetListener, false);
    }
    unregisterResetListener() {
      return window.removeEventListener("reset", this.resetListener, false);
    }
    registerClickListener() {
      return this.clickListener = this.clickBubbled.bind(this), window.addEventListener("click", this.clickListener, false);
    }
    unregisterClickListener() {
      return window.removeEventListener("click", this.clickListener, false);
    }
    resetBubbled(t2) {
      if (!t2.defaultPrevented && t2.target === this.form)
        return this.reset();
    }
    clickBubbled(t2) {
      if (t2.defaultPrevented)
        return;
      if (this.contains(t2.target))
        return;
      const e2 = A(t2.target, { matchingSelector: "label" });
      return e2 && Array.from(this.labels).includes(e2) ? this.focus() : void 0;
    }
    reset() {
      this.value = this.defaultValue;
    }
  };
  var Nn = { VERSION: t, config: V, core: ci, models: Di, views: wi, controllers: Sn, observers: En, operations: kn, elements: Object.freeze({ __proto__: null, TrixEditorElement: Pn, TrixToolbarElement: Ln }), filters: Object.freeze({ __proto__: null, Filter: bi, attachmentGalleryFilter: vi }) };
  Object.assign(Nn, Di), window.Trix = Nn, setTimeout(function() {
    customElements.get("trix-toolbar") || customElements.define("trix-toolbar", Ln), customElements.get("trix-editor") || customElements.define("trix-editor", Pn);
  }, 0);

  // node_modules/@rails/actiontext/app/assets/javascripts/actiontext.esm.js
  var sparkMd5 = {
    exports: {}
  };
  (function(module, exports) {
    (function(factory) {
      {
        module.exports = factory();
      }
    })(function(undefined$1) {
      var hex_chr = ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "a", "b", "c", "d", "e", "f"];
      function md5cycle(x2, k2) {
        var a2 = x2[0], b2 = x2[1], c2 = x2[2], d2 = x2[3];
        a2 += (b2 & c2 | ~b2 & d2) + k2[0] - 680876936 | 0;
        a2 = (a2 << 7 | a2 >>> 25) + b2 | 0;
        d2 += (a2 & b2 | ~a2 & c2) + k2[1] - 389564586 | 0;
        d2 = (d2 << 12 | d2 >>> 20) + a2 | 0;
        c2 += (d2 & a2 | ~d2 & b2) + k2[2] + 606105819 | 0;
        c2 = (c2 << 17 | c2 >>> 15) + d2 | 0;
        b2 += (c2 & d2 | ~c2 & a2) + k2[3] - 1044525330 | 0;
        b2 = (b2 << 22 | b2 >>> 10) + c2 | 0;
        a2 += (b2 & c2 | ~b2 & d2) + k2[4] - 176418897 | 0;
        a2 = (a2 << 7 | a2 >>> 25) + b2 | 0;
        d2 += (a2 & b2 | ~a2 & c2) + k2[5] + 1200080426 | 0;
        d2 = (d2 << 12 | d2 >>> 20) + a2 | 0;
        c2 += (d2 & a2 | ~d2 & b2) + k2[6] - 1473231341 | 0;
        c2 = (c2 << 17 | c2 >>> 15) + d2 | 0;
        b2 += (c2 & d2 | ~c2 & a2) + k2[7] - 45705983 | 0;
        b2 = (b2 << 22 | b2 >>> 10) + c2 | 0;
        a2 += (b2 & c2 | ~b2 & d2) + k2[8] + 1770035416 | 0;
        a2 = (a2 << 7 | a2 >>> 25) + b2 | 0;
        d2 += (a2 & b2 | ~a2 & c2) + k2[9] - 1958414417 | 0;
        d2 = (d2 << 12 | d2 >>> 20) + a2 | 0;
        c2 += (d2 & a2 | ~d2 & b2) + k2[10] - 42063 | 0;
        c2 = (c2 << 17 | c2 >>> 15) + d2 | 0;
        b2 += (c2 & d2 | ~c2 & a2) + k2[11] - 1990404162 | 0;
        b2 = (b2 << 22 | b2 >>> 10) + c2 | 0;
        a2 += (b2 & c2 | ~b2 & d2) + k2[12] + 1804603682 | 0;
        a2 = (a2 << 7 | a2 >>> 25) + b2 | 0;
        d2 += (a2 & b2 | ~a2 & c2) + k2[13] - 40341101 | 0;
        d2 = (d2 << 12 | d2 >>> 20) + a2 | 0;
        c2 += (d2 & a2 | ~d2 & b2) + k2[14] - 1502002290 | 0;
        c2 = (c2 << 17 | c2 >>> 15) + d2 | 0;
        b2 += (c2 & d2 | ~c2 & a2) + k2[15] + 1236535329 | 0;
        b2 = (b2 << 22 | b2 >>> 10) + c2 | 0;
        a2 += (b2 & d2 | c2 & ~d2) + k2[1] - 165796510 | 0;
        a2 = (a2 << 5 | a2 >>> 27) + b2 | 0;
        d2 += (a2 & c2 | b2 & ~c2) + k2[6] - 1069501632 | 0;
        d2 = (d2 << 9 | d2 >>> 23) + a2 | 0;
        c2 += (d2 & b2 | a2 & ~b2) + k2[11] + 643717713 | 0;
        c2 = (c2 << 14 | c2 >>> 18) + d2 | 0;
        b2 += (c2 & a2 | d2 & ~a2) + k2[0] - 373897302 | 0;
        b2 = (b2 << 20 | b2 >>> 12) + c2 | 0;
        a2 += (b2 & d2 | c2 & ~d2) + k2[5] - 701558691 | 0;
        a2 = (a2 << 5 | a2 >>> 27) + b2 | 0;
        d2 += (a2 & c2 | b2 & ~c2) + k2[10] + 38016083 | 0;
        d2 = (d2 << 9 | d2 >>> 23) + a2 | 0;
        c2 += (d2 & b2 | a2 & ~b2) + k2[15] - 660478335 | 0;
        c2 = (c2 << 14 | c2 >>> 18) + d2 | 0;
        b2 += (c2 & a2 | d2 & ~a2) + k2[4] - 405537848 | 0;
        b2 = (b2 << 20 | b2 >>> 12) + c2 | 0;
        a2 += (b2 & d2 | c2 & ~d2) + k2[9] + 568446438 | 0;
        a2 = (a2 << 5 | a2 >>> 27) + b2 | 0;
        d2 += (a2 & c2 | b2 & ~c2) + k2[14] - 1019803690 | 0;
        d2 = (d2 << 9 | d2 >>> 23) + a2 | 0;
        c2 += (d2 & b2 | a2 & ~b2) + k2[3] - 187363961 | 0;
        c2 = (c2 << 14 | c2 >>> 18) + d2 | 0;
        b2 += (c2 & a2 | d2 & ~a2) + k2[8] + 1163531501 | 0;
        b2 = (b2 << 20 | b2 >>> 12) + c2 | 0;
        a2 += (b2 & d2 | c2 & ~d2) + k2[13] - 1444681467 | 0;
        a2 = (a2 << 5 | a2 >>> 27) + b2 | 0;
        d2 += (a2 & c2 | b2 & ~c2) + k2[2] - 51403784 | 0;
        d2 = (d2 << 9 | d2 >>> 23) + a2 | 0;
        c2 += (d2 & b2 | a2 & ~b2) + k2[7] + 1735328473 | 0;
        c2 = (c2 << 14 | c2 >>> 18) + d2 | 0;
        b2 += (c2 & a2 | d2 & ~a2) + k2[12] - 1926607734 | 0;
        b2 = (b2 << 20 | b2 >>> 12) + c2 | 0;
        a2 += (b2 ^ c2 ^ d2) + k2[5] - 378558 | 0;
        a2 = (a2 << 4 | a2 >>> 28) + b2 | 0;
        d2 += (a2 ^ b2 ^ c2) + k2[8] - 2022574463 | 0;
        d2 = (d2 << 11 | d2 >>> 21) + a2 | 0;
        c2 += (d2 ^ a2 ^ b2) + k2[11] + 1839030562 | 0;
        c2 = (c2 << 16 | c2 >>> 16) + d2 | 0;
        b2 += (c2 ^ d2 ^ a2) + k2[14] - 35309556 | 0;
        b2 = (b2 << 23 | b2 >>> 9) + c2 | 0;
        a2 += (b2 ^ c2 ^ d2) + k2[1] - 1530992060 | 0;
        a2 = (a2 << 4 | a2 >>> 28) + b2 | 0;
        d2 += (a2 ^ b2 ^ c2) + k2[4] + 1272893353 | 0;
        d2 = (d2 << 11 | d2 >>> 21) + a2 | 0;
        c2 += (d2 ^ a2 ^ b2) + k2[7] - 155497632 | 0;
        c2 = (c2 << 16 | c2 >>> 16) + d2 | 0;
        b2 += (c2 ^ d2 ^ a2) + k2[10] - 1094730640 | 0;
        b2 = (b2 << 23 | b2 >>> 9) + c2 | 0;
        a2 += (b2 ^ c2 ^ d2) + k2[13] + 681279174 | 0;
        a2 = (a2 << 4 | a2 >>> 28) + b2 | 0;
        d2 += (a2 ^ b2 ^ c2) + k2[0] - 358537222 | 0;
        d2 = (d2 << 11 | d2 >>> 21) + a2 | 0;
        c2 += (d2 ^ a2 ^ b2) + k2[3] - 722521979 | 0;
        c2 = (c2 << 16 | c2 >>> 16) + d2 | 0;
        b2 += (c2 ^ d2 ^ a2) + k2[6] + 76029189 | 0;
        b2 = (b2 << 23 | b2 >>> 9) + c2 | 0;
        a2 += (b2 ^ c2 ^ d2) + k2[9] - 640364487 | 0;
        a2 = (a2 << 4 | a2 >>> 28) + b2 | 0;
        d2 += (a2 ^ b2 ^ c2) + k2[12] - 421815835 | 0;
        d2 = (d2 << 11 | d2 >>> 21) + a2 | 0;
        c2 += (d2 ^ a2 ^ b2) + k2[15] + 530742520 | 0;
        c2 = (c2 << 16 | c2 >>> 16) + d2 | 0;
        b2 += (c2 ^ d2 ^ a2) + k2[2] - 995338651 | 0;
        b2 = (b2 << 23 | b2 >>> 9) + c2 | 0;
        a2 += (c2 ^ (b2 | ~d2)) + k2[0] - 198630844 | 0;
        a2 = (a2 << 6 | a2 >>> 26) + b2 | 0;
        d2 += (b2 ^ (a2 | ~c2)) + k2[7] + 1126891415 | 0;
        d2 = (d2 << 10 | d2 >>> 22) + a2 | 0;
        c2 += (a2 ^ (d2 | ~b2)) + k2[14] - 1416354905 | 0;
        c2 = (c2 << 15 | c2 >>> 17) + d2 | 0;
        b2 += (d2 ^ (c2 | ~a2)) + k2[5] - 57434055 | 0;
        b2 = (b2 << 21 | b2 >>> 11) + c2 | 0;
        a2 += (c2 ^ (b2 | ~d2)) + k2[12] + 1700485571 | 0;
        a2 = (a2 << 6 | a2 >>> 26) + b2 | 0;
        d2 += (b2 ^ (a2 | ~c2)) + k2[3] - 1894986606 | 0;
        d2 = (d2 << 10 | d2 >>> 22) + a2 | 0;
        c2 += (a2 ^ (d2 | ~b2)) + k2[10] - 1051523 | 0;
        c2 = (c2 << 15 | c2 >>> 17) + d2 | 0;
        b2 += (d2 ^ (c2 | ~a2)) + k2[1] - 2054922799 | 0;
        b2 = (b2 << 21 | b2 >>> 11) + c2 | 0;
        a2 += (c2 ^ (b2 | ~d2)) + k2[8] + 1873313359 | 0;
        a2 = (a2 << 6 | a2 >>> 26) + b2 | 0;
        d2 += (b2 ^ (a2 | ~c2)) + k2[15] - 30611744 | 0;
        d2 = (d2 << 10 | d2 >>> 22) + a2 | 0;
        c2 += (a2 ^ (d2 | ~b2)) + k2[6] - 1560198380 | 0;
        c2 = (c2 << 15 | c2 >>> 17) + d2 | 0;
        b2 += (d2 ^ (c2 | ~a2)) + k2[13] + 1309151649 | 0;
        b2 = (b2 << 21 | b2 >>> 11) + c2 | 0;
        a2 += (c2 ^ (b2 | ~d2)) + k2[4] - 145523070 | 0;
        a2 = (a2 << 6 | a2 >>> 26) + b2 | 0;
        d2 += (b2 ^ (a2 | ~c2)) + k2[11] - 1120210379 | 0;
        d2 = (d2 << 10 | d2 >>> 22) + a2 | 0;
        c2 += (a2 ^ (d2 | ~b2)) + k2[2] + 718787259 | 0;
        c2 = (c2 << 15 | c2 >>> 17) + d2 | 0;
        b2 += (d2 ^ (c2 | ~a2)) + k2[9] - 343485551 | 0;
        b2 = (b2 << 21 | b2 >>> 11) + c2 | 0;
        x2[0] = a2 + x2[0] | 0;
        x2[1] = b2 + x2[1] | 0;
        x2[2] = c2 + x2[2] | 0;
        x2[3] = d2 + x2[3] | 0;
      }
      function md5blk(s2) {
        var md5blks = [], i2;
        for (i2 = 0; i2 < 64; i2 += 4) {
          md5blks[i2 >> 2] = s2.charCodeAt(i2) + (s2.charCodeAt(i2 + 1) << 8) + (s2.charCodeAt(i2 + 2) << 16) + (s2.charCodeAt(i2 + 3) << 24);
        }
        return md5blks;
      }
      function md5blk_array(a2) {
        var md5blks = [], i2;
        for (i2 = 0; i2 < 64; i2 += 4) {
          md5blks[i2 >> 2] = a2[i2] + (a2[i2 + 1] << 8) + (a2[i2 + 2] << 16) + (a2[i2 + 3] << 24);
        }
        return md5blks;
      }
      function md51(s2) {
        var n2 = s2.length, state = [1732584193, -271733879, -1732584194, 271733878], i2, length, tail, tmp, lo, hi2;
        for (i2 = 64; i2 <= n2; i2 += 64) {
          md5cycle(state, md5blk(s2.substring(i2 - 64, i2)));
        }
        s2 = s2.substring(i2 - 64);
        length = s2.length;
        tail = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
        for (i2 = 0; i2 < length; i2 += 1) {
          tail[i2 >> 2] |= s2.charCodeAt(i2) << (i2 % 4 << 3);
        }
        tail[i2 >> 2] |= 128 << (i2 % 4 << 3);
        if (i2 > 55) {
          md5cycle(state, tail);
          for (i2 = 0; i2 < 16; i2 += 1) {
            tail[i2] = 0;
          }
        }
        tmp = n2 * 8;
        tmp = tmp.toString(16).match(/(.*?)(.{0,8})$/);
        lo = parseInt(tmp[2], 16);
        hi2 = parseInt(tmp[1], 16) || 0;
        tail[14] = lo;
        tail[15] = hi2;
        md5cycle(state, tail);
        return state;
      }
      function md51_array(a2) {
        var n2 = a2.length, state = [1732584193, -271733879, -1732584194, 271733878], i2, length, tail, tmp, lo, hi2;
        for (i2 = 64; i2 <= n2; i2 += 64) {
          md5cycle(state, md5blk_array(a2.subarray(i2 - 64, i2)));
        }
        a2 = i2 - 64 < n2 ? a2.subarray(i2 - 64) : new Uint8Array(0);
        length = a2.length;
        tail = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
        for (i2 = 0; i2 < length; i2 += 1) {
          tail[i2 >> 2] |= a2[i2] << (i2 % 4 << 3);
        }
        tail[i2 >> 2] |= 128 << (i2 % 4 << 3);
        if (i2 > 55) {
          md5cycle(state, tail);
          for (i2 = 0; i2 < 16; i2 += 1) {
            tail[i2] = 0;
          }
        }
        tmp = n2 * 8;
        tmp = tmp.toString(16).match(/(.*?)(.{0,8})$/);
        lo = parseInt(tmp[2], 16);
        hi2 = parseInt(tmp[1], 16) || 0;
        tail[14] = lo;
        tail[15] = hi2;
        md5cycle(state, tail);
        return state;
      }
      function rhex(n2) {
        var s2 = "", j2;
        for (j2 = 0; j2 < 4; j2 += 1) {
          s2 += hex_chr[n2 >> j2 * 8 + 4 & 15] + hex_chr[n2 >> j2 * 8 & 15];
        }
        return s2;
      }
      function hex(x2) {
        var i2;
        for (i2 = 0; i2 < x2.length; i2 += 1) {
          x2[i2] = rhex(x2[i2]);
        }
        return x2.join("");
      }
      if (hex(md51("hello")) !== "5d41402abc4b2a76b9719d911017c592")
        ;
      if (typeof ArrayBuffer !== "undefined" && !ArrayBuffer.prototype.slice) {
        (function() {
          function clamp2(val, length) {
            val = val | 0 || 0;
            if (val < 0) {
              return Math.max(val + length, 0);
            }
            return Math.min(val, length);
          }
          ArrayBuffer.prototype.slice = function(from, to) {
            var length = this.byteLength, begin = clamp2(from, length), end = length, num, target, targetArray, sourceArray;
            if (to !== undefined$1) {
              end = clamp2(to, length);
            }
            if (begin > end) {
              return new ArrayBuffer(0);
            }
            num = end - begin;
            target = new ArrayBuffer(num);
            targetArray = new Uint8Array(target);
            sourceArray = new Uint8Array(this, begin, num);
            targetArray.set(sourceArray);
            return target;
          };
        })();
      }
      function toUtf8(str) {
        if (/[\u0080-\uFFFF]/.test(str)) {
          str = unescape(encodeURIComponent(str));
        }
        return str;
      }
      function utf8Str2ArrayBuffer(str, returnUInt8Array) {
        var length = str.length, buff = new ArrayBuffer(length), arr = new Uint8Array(buff), i2;
        for (i2 = 0; i2 < length; i2 += 1) {
          arr[i2] = str.charCodeAt(i2);
        }
        return returnUInt8Array ? arr : buff;
      }
      function arrayBuffer2Utf8Str(buff) {
        return String.fromCharCode.apply(null, new Uint8Array(buff));
      }
      function concatenateArrayBuffers(first, second, returnUInt8Array) {
        var result = new Uint8Array(first.byteLength + second.byteLength);
        result.set(new Uint8Array(first));
        result.set(new Uint8Array(second), first.byteLength);
        return returnUInt8Array ? result : result.buffer;
      }
      function hexToBinaryString(hex2) {
        var bytes = [], length = hex2.length, x2;
        for (x2 = 0; x2 < length - 1; x2 += 2) {
          bytes.push(parseInt(hex2.substr(x2, 2), 16));
        }
        return String.fromCharCode.apply(String, bytes);
      }
      function SparkMD52() {
        this.reset();
      }
      SparkMD52.prototype.append = function(str) {
        this.appendBinary(toUtf8(str));
        return this;
      };
      SparkMD52.prototype.appendBinary = function(contents) {
        this._buff += contents;
        this._length += contents.length;
        var length = this._buff.length, i2;
        for (i2 = 64; i2 <= length; i2 += 64) {
          md5cycle(this._hash, md5blk(this._buff.substring(i2 - 64, i2)));
        }
        this._buff = this._buff.substring(i2 - 64);
        return this;
      };
      SparkMD52.prototype.end = function(raw) {
        var buff = this._buff, length = buff.length, i2, tail = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ret;
        for (i2 = 0; i2 < length; i2 += 1) {
          tail[i2 >> 2] |= buff.charCodeAt(i2) << (i2 % 4 << 3);
        }
        this._finish(tail, length);
        ret = hex(this._hash);
        if (raw) {
          ret = hexToBinaryString(ret);
        }
        this.reset();
        return ret;
      };
      SparkMD52.prototype.reset = function() {
        this._buff = "";
        this._length = 0;
        this._hash = [1732584193, -271733879, -1732584194, 271733878];
        return this;
      };
      SparkMD52.prototype.getState = function() {
        return {
          buff: this._buff,
          length: this._length,
          hash: this._hash.slice()
        };
      };
      SparkMD52.prototype.setState = function(state) {
        this._buff = state.buff;
        this._length = state.length;
        this._hash = state.hash;
        return this;
      };
      SparkMD52.prototype.destroy = function() {
        delete this._hash;
        delete this._buff;
        delete this._length;
      };
      SparkMD52.prototype._finish = function(tail, length) {
        var i2 = length, tmp, lo, hi2;
        tail[i2 >> 2] |= 128 << (i2 % 4 << 3);
        if (i2 > 55) {
          md5cycle(this._hash, tail);
          for (i2 = 0; i2 < 16; i2 += 1) {
            tail[i2] = 0;
          }
        }
        tmp = this._length * 8;
        tmp = tmp.toString(16).match(/(.*?)(.{0,8})$/);
        lo = parseInt(tmp[2], 16);
        hi2 = parseInt(tmp[1], 16) || 0;
        tail[14] = lo;
        tail[15] = hi2;
        md5cycle(this._hash, tail);
      };
      SparkMD52.hash = function(str, raw) {
        return SparkMD52.hashBinary(toUtf8(str), raw);
      };
      SparkMD52.hashBinary = function(content, raw) {
        var hash = md51(content), ret = hex(hash);
        return raw ? hexToBinaryString(ret) : ret;
      };
      SparkMD52.ArrayBuffer = function() {
        this.reset();
      };
      SparkMD52.ArrayBuffer.prototype.append = function(arr) {
        var buff = concatenateArrayBuffers(this._buff.buffer, arr, true), length = buff.length, i2;
        this._length += arr.byteLength;
        for (i2 = 64; i2 <= length; i2 += 64) {
          md5cycle(this._hash, md5blk_array(buff.subarray(i2 - 64, i2)));
        }
        this._buff = i2 - 64 < length ? new Uint8Array(buff.buffer.slice(i2 - 64)) : new Uint8Array(0);
        return this;
      };
      SparkMD52.ArrayBuffer.prototype.end = function(raw) {
        var buff = this._buff, length = buff.length, tail = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], i2, ret;
        for (i2 = 0; i2 < length; i2 += 1) {
          tail[i2 >> 2] |= buff[i2] << (i2 % 4 << 3);
        }
        this._finish(tail, length);
        ret = hex(this._hash);
        if (raw) {
          ret = hexToBinaryString(ret);
        }
        this.reset();
        return ret;
      };
      SparkMD52.ArrayBuffer.prototype.reset = function() {
        this._buff = new Uint8Array(0);
        this._length = 0;
        this._hash = [1732584193, -271733879, -1732584194, 271733878];
        return this;
      };
      SparkMD52.ArrayBuffer.prototype.getState = function() {
        var state = SparkMD52.prototype.getState.call(this);
        state.buff = arrayBuffer2Utf8Str(state.buff);
        return state;
      };
      SparkMD52.ArrayBuffer.prototype.setState = function(state) {
        state.buff = utf8Str2ArrayBuffer(state.buff, true);
        return SparkMD52.prototype.setState.call(this, state);
      };
      SparkMD52.ArrayBuffer.prototype.destroy = SparkMD52.prototype.destroy;
      SparkMD52.ArrayBuffer.prototype._finish = SparkMD52.prototype._finish;
      SparkMD52.ArrayBuffer.hash = function(arr, raw) {
        var hash = md51_array(new Uint8Array(arr)), ret = hex(hash);
        return raw ? hexToBinaryString(ret) : ret;
      };
      return SparkMD52;
    });
  })(sparkMd5);
  var SparkMD5 = sparkMd5.exports;
  var fileSlice = File.prototype.slice || File.prototype.mozSlice || File.prototype.webkitSlice;
  var FileChecksum = class _FileChecksum {
    static create(file, callback) {
      const instance = new _FileChecksum(file);
      instance.create(callback);
    }
    constructor(file) {
      this.file = file;
      this.chunkSize = 2097152;
      this.chunkCount = Math.ceil(this.file.size / this.chunkSize);
      this.chunkIndex = 0;
    }
    create(callback) {
      this.callback = callback;
      this.md5Buffer = new SparkMD5.ArrayBuffer();
      this.fileReader = new FileReader();
      this.fileReader.addEventListener("load", (event) => this.fileReaderDidLoad(event));
      this.fileReader.addEventListener("error", (event) => this.fileReaderDidError(event));
      this.readNextChunk();
    }
    fileReaderDidLoad(event) {
      this.md5Buffer.append(event.target.result);
      if (!this.readNextChunk()) {
        const binaryDigest = this.md5Buffer.end(true);
        const base64digest = btoa(binaryDigest);
        this.callback(null, base64digest);
      }
    }
    fileReaderDidError(event) {
      this.callback(`Error reading ${this.file.name}`);
    }
    readNextChunk() {
      if (this.chunkIndex < this.chunkCount || this.chunkIndex == 0 && this.chunkCount == 0) {
        const start3 = this.chunkIndex * this.chunkSize;
        const end = Math.min(start3 + this.chunkSize, this.file.size);
        const bytes = fileSlice.call(this.file, start3, end);
        this.fileReader.readAsArrayBuffer(bytes);
        this.chunkIndex++;
        return true;
      } else {
        return false;
      }
    }
  };
  function getMetaValue(name) {
    const element = findElement(document.head, `meta[name="${name}"]`);
    if (element) {
      return element.getAttribute("content");
    }
  }
  function findElements(root, selector) {
    if (typeof root == "string") {
      selector = root;
      root = document;
    }
    const elements = root.querySelectorAll(selector);
    return toArray(elements);
  }
  function findElement(root, selector) {
    if (typeof root == "string") {
      selector = root;
      root = document;
    }
    return root.querySelector(selector);
  }
  function dispatchEvent2(element, type, eventInit = {}) {
    const { disabled } = element;
    const { bubbles, cancelable, detail } = eventInit;
    const event = document.createEvent("Event");
    event.initEvent(type, bubbles || true, cancelable || true);
    event.detail = detail || {};
    try {
      element.disabled = false;
      element.dispatchEvent(event);
    } finally {
      element.disabled = disabled;
    }
    return event;
  }
  function toArray(value) {
    if (Array.isArray(value)) {
      return value;
    } else if (Array.from) {
      return Array.from(value);
    } else {
      return [].slice.call(value);
    }
  }
  var BlobRecord = class {
    constructor(file, checksum, url, customHeaders = {}) {
      this.file = file;
      this.attributes = {
        filename: file.name,
        content_type: file.type || "application/octet-stream",
        byte_size: file.size,
        checksum
      };
      this.xhr = new XMLHttpRequest();
      this.xhr.open("POST", url, true);
      this.xhr.responseType = "json";
      this.xhr.setRequestHeader("Content-Type", "application/json");
      this.xhr.setRequestHeader("Accept", "application/json");
      this.xhr.setRequestHeader("X-Requested-With", "XMLHttpRequest");
      Object.keys(customHeaders).forEach((headerKey) => {
        this.xhr.setRequestHeader(headerKey, customHeaders[headerKey]);
      });
      const csrfToken = getMetaValue("csrf-token");
      if (csrfToken != void 0) {
        this.xhr.setRequestHeader("X-CSRF-Token", csrfToken);
      }
      this.xhr.addEventListener("load", (event) => this.requestDidLoad(event));
      this.xhr.addEventListener("error", (event) => this.requestDidError(event));
    }
    get status() {
      return this.xhr.status;
    }
    get response() {
      const { responseType, response } = this.xhr;
      if (responseType == "json") {
        return response;
      } else {
        return JSON.parse(response);
      }
    }
    create(callback) {
      this.callback = callback;
      this.xhr.send(JSON.stringify({
        blob: this.attributes
      }));
    }
    requestDidLoad(event) {
      if (this.status >= 200 && this.status < 300) {
        const { response } = this;
        const { direct_upload } = response;
        delete response.direct_upload;
        this.attributes = response;
        this.directUploadData = direct_upload;
        this.callback(null, this.toJSON());
      } else {
        this.requestDidError(event);
      }
    }
    requestDidError(event) {
      this.callback(`Error creating Blob for "${this.file.name}". Status: ${this.status}`);
    }
    toJSON() {
      const result = {};
      for (const key in this.attributes) {
        result[key] = this.attributes[key];
      }
      return result;
    }
  };
  var BlobUpload = class {
    constructor(blob) {
      this.blob = blob;
      this.file = blob.file;
      const { url, headers } = blob.directUploadData;
      this.xhr = new XMLHttpRequest();
      this.xhr.open("PUT", url, true);
      this.xhr.responseType = "text";
      for (const key in headers) {
        this.xhr.setRequestHeader(key, headers[key]);
      }
      this.xhr.addEventListener("load", (event) => this.requestDidLoad(event));
      this.xhr.addEventListener("error", (event) => this.requestDidError(event));
    }
    create(callback) {
      this.callback = callback;
      this.xhr.send(this.file.slice());
    }
    requestDidLoad(event) {
      const { status, response } = this.xhr;
      if (status >= 200 && status < 300) {
        this.callback(null, response);
      } else {
        this.requestDidError(event);
      }
    }
    requestDidError(event) {
      this.callback(`Error storing "${this.file.name}". Status: ${this.xhr.status}`);
    }
  };
  var id = 0;
  var DirectUpload = class {
    constructor(file, url, delegate, customHeaders = {}) {
      this.id = ++id;
      this.file = file;
      this.url = url;
      this.delegate = delegate;
      this.customHeaders = customHeaders;
    }
    create(callback) {
      FileChecksum.create(this.file, (error2, checksum) => {
        if (error2) {
          callback(error2);
          return;
        }
        const blob = new BlobRecord(this.file, checksum, this.url, this.customHeaders);
        notify(this.delegate, "directUploadWillCreateBlobWithXHR", blob.xhr);
        blob.create((error3) => {
          if (error3) {
            callback(error3);
          } else {
            const upload = new BlobUpload(blob);
            notify(this.delegate, "directUploadWillStoreFileWithXHR", upload.xhr);
            upload.create((error4) => {
              if (error4) {
                callback(error4);
              } else {
                callback(null, blob.toJSON());
              }
            });
          }
        });
      });
    }
  };
  function notify(object, methodName, ...messages) {
    if (object && typeof object[methodName] == "function") {
      return object[methodName](...messages);
    }
  }
  var DirectUploadController = class {
    constructor(input, file) {
      this.input = input;
      this.file = file;
      this.directUpload = new DirectUpload(this.file, this.url, this);
      this.dispatch("initialize");
    }
    start(callback) {
      const hiddenInput = document.createElement("input");
      hiddenInput.type = "hidden";
      hiddenInput.name = this.input.name;
      this.input.insertAdjacentElement("beforebegin", hiddenInput);
      this.dispatch("start");
      this.directUpload.create((error2, attributes) => {
        if (error2) {
          hiddenInput.parentNode.removeChild(hiddenInput);
          this.dispatchError(error2);
        } else {
          hiddenInput.value = attributes.signed_id;
        }
        this.dispatch("end");
        callback(error2);
      });
    }
    uploadRequestDidProgress(event) {
      const progress = event.loaded / event.total * 100;
      if (progress) {
        this.dispatch("progress", {
          progress
        });
      }
    }
    get url() {
      return this.input.getAttribute("data-direct-upload-url");
    }
    dispatch(name, detail = {}) {
      detail.file = this.file;
      detail.id = this.directUpload.id;
      return dispatchEvent2(this.input, `direct-upload:${name}`, {
        detail
      });
    }
    dispatchError(error2) {
      const event = this.dispatch("error", {
        error: error2
      });
      if (!event.defaultPrevented) {
        alert(error2);
      }
    }
    directUploadWillCreateBlobWithXHR(xhr) {
      this.dispatch("before-blob-request", {
        xhr
      });
    }
    directUploadWillStoreFileWithXHR(xhr) {
      this.dispatch("before-storage-request", {
        xhr
      });
      xhr.upload.addEventListener("progress", (event) => this.uploadRequestDidProgress(event));
    }
  };
  var inputSelector = "input[type=file][data-direct-upload-url]:not([disabled])";
  var DirectUploadsController = class {
    constructor(form) {
      this.form = form;
      this.inputs = findElements(form, inputSelector).filter((input) => input.files.length);
    }
    start(callback) {
      const controllers = this.createDirectUploadControllers();
      const startNextController = () => {
        const controller = controllers.shift();
        if (controller) {
          controller.start((error2) => {
            if (error2) {
              callback(error2);
              this.dispatch("end");
            } else {
              startNextController();
            }
          });
        } else {
          callback();
          this.dispatch("end");
        }
      };
      this.dispatch("start");
      startNextController();
    }
    createDirectUploadControllers() {
      const controllers = [];
      this.inputs.forEach((input) => {
        toArray(input.files).forEach((file) => {
          const controller = new DirectUploadController(input, file);
          controllers.push(controller);
        });
      });
      return controllers;
    }
    dispatch(name, detail = {}) {
      return dispatchEvent2(this.form, `direct-uploads:${name}`, {
        detail
      });
    }
  };
  var processingAttribute = "data-direct-uploads-processing";
  var submitButtonsByForm = /* @__PURE__ */ new WeakMap();
  var started = false;
  function start2() {
    if (!started) {
      started = true;
      document.addEventListener("click", didClick, true);
      document.addEventListener("submit", didSubmitForm, true);
      document.addEventListener("ajax:before", didSubmitRemoteElement);
    }
  }
  function didClick(event) {
    const button = event.target.closest("button, input");
    if (button && button.type === "submit" && button.form) {
      submitButtonsByForm.set(button.form, button);
    }
  }
  function didSubmitForm(event) {
    handleFormSubmissionEvent(event);
  }
  function didSubmitRemoteElement(event) {
    if (event.target.tagName == "FORM") {
      handleFormSubmissionEvent(event);
    }
  }
  function handleFormSubmissionEvent(event) {
    const form = event.target;
    if (form.hasAttribute(processingAttribute)) {
      event.preventDefault();
      return;
    }
    const controller = new DirectUploadsController(form);
    const { inputs } = controller;
    if (inputs.length) {
      event.preventDefault();
      form.setAttribute(processingAttribute, "");
      inputs.forEach(disable);
      controller.start((error2) => {
        form.removeAttribute(processingAttribute);
        if (error2) {
          inputs.forEach(enable);
        } else {
          submitForm(form);
        }
      });
    }
  }
  function submitForm(form) {
    let button = submitButtonsByForm.get(form) || findElement(form, "input[type=submit], button[type=submit]");
    if (button) {
      const { disabled } = button;
      button.disabled = false;
      button.focus();
      button.click();
      button.disabled = disabled;
    } else {
      button = document.createElement("input");
      button.type = "submit";
      button.style.display = "none";
      form.appendChild(button);
      button.click();
      form.removeChild(button);
    }
    submitButtonsByForm.delete(form);
  }
  function disable(input) {
    input.disabled = true;
  }
  function enable(input) {
    input.disabled = false;
  }
  function autostart() {
    if (window.ActiveStorage) {
      start2();
    }
  }
  setTimeout(autostart, 1);
  var AttachmentUpload = class {
    constructor(attachment, element) {
      this.attachment = attachment;
      this.element = element;
      this.directUpload = new DirectUpload(attachment.file, this.directUploadUrl, this);
    }
    start() {
      this.directUpload.create(this.directUploadDidComplete.bind(this));
    }
    directUploadWillStoreFileWithXHR(xhr) {
      xhr.upload.addEventListener("progress", (event) => {
        const progress = event.loaded / event.total * 100;
        this.attachment.setUploadProgress(progress);
      });
    }
    directUploadDidComplete(error2, attributes) {
      if (error2) {
        throw new Error(`Direct upload failed: ${error2}`);
      }
      this.attachment.setAttributes({
        sgid: attributes.attachable_sgid,
        url: this.createBlobUrl(attributes.signed_id, attributes.filename)
      });
    }
    createBlobUrl(signedId, filename) {
      return this.blobUrlTemplate.replace(":signed_id", signedId).replace(":filename", encodeURIComponent(filename));
    }
    get directUploadUrl() {
      return this.element.dataset.directUploadUrl;
    }
    get blobUrlTemplate() {
      return this.element.dataset.blobUrlTemplate;
    }
  };
  addEventListener("trix-attachment-add", (event) => {
    const { attachment, target } = event;
    if (attachment.file) {
      const upload = new AttachmentUpload(attachment, target);
      upload.start();
    }
  });
})();
/*! Bundled license information:

photoswipe/dist/photoswipe.esm.js:
  (*!
    * PhotoSwipe 5.4.3 - https://photoswipe.com
    * (c) 2023 Dmytro Semenov
    *)

apexcharts/dist/apexcharts.common.js:
  (*!
   * ApexCharts v3.45.2
   * (c) 2018-2024 ApexCharts
   * Released under the MIT License.
   *)

photoswipe/dist/photoswipe-lightbox.esm.js:
  (*!
    * PhotoSwipe Lightbox 5.4.3 - https://photoswipe.com
    * (c) 2023 Dmytro Semenov
    *)
*/
//# sourceMappingURL=assets/application.js.map
